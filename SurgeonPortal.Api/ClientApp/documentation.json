{
  "pipes": [],
  "interfaces": [
    {
      "name": "ActionMap",
      "id": "interface-ActionMap-1a434a3616d790cc24ee88da2aec4e314000bb2ba7107c5f644a9e307514e0e7943000b55d503a44386a03fc9c76222971162ab708ea59ca7f4c7874cd6695bc",
      "file": "src/app/continuous-certification/continuous-certification.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { PAY_FEE_COLS } from '../shared/components/pay-fee/pay-fee-cols';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { OutcomeRegistriesModalComponent } from './outcome-registries-modal/outcome-registries-modal.component';\nimport { AttestationModalComponent } from './attestation-modal/attestation-modal.component';\nimport { ReferenceFormModalComponent } from './reference-form-modal/reference-form-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { Observable, take } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { GetStateList } from '../state/picklists';\nimport { ApplicationSelectors } from '../state/application/application.selectors';\nimport { IFeatureFlags } from '../state/application/application.state';\nimport { LegendComponent } from '../shared/components/legend/legend.component';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-continuous-certification',\n  templateUrl: './continuous-certification.component.html',\n  styleUrls: ['./continuous-certification.component.scss'],\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    GridComponent,\n    FormsModule,\n    PayFeeComponent,\n    ModalComponent,\n    OutcomeRegistriesModalComponent,\n    AttestationModalComponent,\n    ReferenceFormModalComponent,\n    LegendComponent,\n  ],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ContinuousCertificationComponent implements OnInit {\n  @Select(ApplicationSelectors.slices.featureFlags) featureFlags$:\n    | Observable<IFeatureFlags>\n    | undefined;\n\n  userData!: any;\n  continousCertificationData!: any;\n  outcomeRegistriesModal = false;\n  attestationModal = false;\n  referenceFormsModal = false;\n  payFeeModal = false;\n  payFeeCols = PAY_FEE_COLS;\n  payFeeData!: any;\n\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  legendItems = [\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ];\n\n  featureFlags: IFeatureFlags = {};\n\n  private actionMap: ActionMap = {\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  };\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n    this.featureFlags$?.pipe(take(1)).subscribe((featureFlags) => {\n      if (featureFlags) {\n        this.featureFlags = featureFlags;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getContinuousCertificationData();\n    this.getPayFeeData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe, M.D',\n    };\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  getContinuousCertificationData() {\n    this.continousCertificationData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/personal-profile',\n        },\n        actionDisplay: this.featureFlags.personalProfilePage\n          ? 'View / Update my information'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n        disabled: !this.featureFlags.personalProfilePage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Outcomes Registries / Quality Assessment Programs',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'outcomeRegistriesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Completed,\n        displayStatusText: false,\n      },\n      {\n        title: 'Medical Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/medical-training',\n        },\n        actionDisplay: this.featureFlags.medicalTrainingPage\n          ? 'View / Update my training'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-language',\n        status: Status.Completed,\n        disabled: !this.featureFlags.medicalTrainingPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Professional Standing',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/professional-standing',\n        },\n        actionDisplay: this.featureFlags.professionalStandingPage\n          ? 'View / Update my activities'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-certificate',\n        status: Status.InProgress,\n        disabled: !this.featureFlags.professionalStandingPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'CME Repository',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/cme-repository',\n        },\n        actionDisplay: this.featureFlags.cmeRepositoryPage\n          ? 'View CMEs'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-id-card-clip',\n        status: Status.InProgress,\n        disabled: !this.featureFlags.cmeRepositoryPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Pay Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'payFeeModal',\n        },\n        actionDisplay: 'View / Pay Fee',\n        icon: 'fa-solid fa-language',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Reference Forms',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'referenceFormsModal',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'attestationModal',\n        },\n        disabled: false,\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Apply for an Exam',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        actionStyle: 'button',\n        disabled: true,\n        actionDisplay: 'Apply Now',\n        icon: 'fa-solid fa-language',\n        displayStatusText: false,\n      },\n    ];\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-1a434a3616d790cc24ee88da2aec4e314000bb2ba7107c5f644a9e307514e0e7943000b55d503a44386a03fc9c76222971162ab708ea59ca7f4c7874cd6695bc",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "void",
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 178,
      "methods": []
    },
    {
      "name": "ActionMap",
      "id": "interface-ActionMap-b8e3b5f1faa1c961cf23b8e45cdd26e49ec494f3c1c5b0629c0a0fb2d6823e842090b235e670f2f4aae3d631a1e31fb7918322d31a28874d95bf1629511fc62c-1",
      "file": "src/app/registration-requirements/registration-requirements.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { SurgeonProfileModalComponent } from './surgeon-profile-modal/surgeon-profile-modal.component';\nimport { MedicalLicenseModalComponent } from './medical-license-modal/medical-license-modal.component';\nimport { TrainingModalComponent } from './training-modal/training-modal.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { AcgmeExperienceModalComponent } from './acgme-experience-modal/acgme-experience-modal.component';\nimport { GraduateMedicalEducationModalComponent } from './graduate-medical-education-modal/graduate-medical-education-modal.component';\nimport { SpecialAccommodationsModalComponent } from './special-accommodations-modal/special-accommodations-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { ProfessionalActivitiesAndPrivilegesModalComponent } from './professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { LegendComponent } from '../shared/components/legend/legend.component';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-registration-requirements',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    SurgeonProfileModalComponent,\n    MedicalLicenseModalComponent,\n    TrainingModalComponent,\n    ModalComponent,\n    AcgmeExperienceModalComponent,\n    GraduateMedicalEducationModalComponent,\n    SpecialAccommodationsModalComponent,\n    ProfessionalActivitiesAndPrivilegesModalComponent,\n    LegendComponent,\n  ],\n  templateUrl: './registration-requirements.component.html',\n  styleUrls: ['./registration-requirements.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class RegistrationRequirementsComponent implements OnInit {\n  userData!: any;\n  registrationRequirementsData!: Array<any>;\n  applyForAnExamActionCardData!: any;\n  showSurgeonProfile = false;\n  showMedicalLicense = false;\n  showACGMEexprience = false;\n  showTraining = false;\n  showGraduateMedicalEducation = false;\n  showSpecialAccommodations = false;\n  showProfessionalActivitiesAndPrivileges = false;\n\n  legendItems = [\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Alert',\n      color: '#8b0d0a',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ];\n\n  constructor(\n    private _globalDialogService: GlobalDialogService,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._globalDialogService.setViewContainerRef = this.viewContainerRef;\n  }\n\n  private actionMap: ActionMap = {\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  };\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getRegistrationRequirementsData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe M.D',\n    };\n  }\n\n  closeModal(event: any) {\n    const actionFunction = this.actionMap[event.action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n\n  getRegistrationRequirementsData() {\n    this.registrationRequirementsData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'surgeonProfileModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'trainingModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-language fa-solid',\n        status: Status.InProgress,\n        recievedOn: new Date('2021-01-01'),\n      },\n      {\n        title: 'Professional Activities and Privileges',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'professionalActivitiesAndPrivilegesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-doctor',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical License',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'medicalLicenseModal',\n        },\n        actionDisplay: 'View / Update my license',\n        icon: 'fa-certificate fa-solid',\n        status: Status.InProgress,\n      },\n      {\n        title: 'ACGME Experience Report by Role',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'ACGMEExperienceModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Graduate Medical Education (GME)',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'graduateMedicalEducationModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Alert,\n      },\n      {\n        title: 'Program Director Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/program-director-attestation',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.Completed,\n      },\n      {\n        title: 'Certification(s) Upload',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/certifications-upload',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.Completed,\n      },\n      {\n        title: 'Application Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/application-fee',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-cash-register',\n        status: Status.Contingent,\n      },\n      {\n        title: 'Special Accommodations',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'specialAccommodationsModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-star',\n        status: Status.InProgress,\n      },\n    ];\n    this.applyForAnExamActionCardData = {\n      title: 'Apply for an Exam',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n      action: {\n        style: 2,\n      },\n      disabled: true,\n      actionDisplay: 'Apply Now',\n      icon: 'fa-solid fa-language',\n    };\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-b8e3b5f1faa1c961cf23b8e45cdd26e49ec494f3c1c5b0629c0a0fb2d6823e842090b235e670f2f4aae3d631a1e31fb7918322d31a28874d95bf1629511fc62c",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "void",
          "line": 22,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 178,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "ActionMap-1"
    },
    {
      "name": "AuthStateModel",
      "id": "interface-AuthStateModel-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
      "file": "src/app/state/auth/auth.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { IAppUserReadOnlyModel } from '../../api';\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IRefreshToken {\n  refreshToken: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  [key: string]: any;\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n  isBusy: boolean;\n  isPasswordReset: boolean;\n  passwordResetComplete: boolean;\n  isAuthenticated: boolean;\n}\n",
      "properties": [
        {
          "name": "access_token",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "expiration",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "expires_in_minutes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "refresh_token",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "token_type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAppUserReadOnlyModel | null",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "userName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "indexSignatures": [
        {
          "id": "index-declaration-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "any",
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 168,
      "methods": []
    },
    {
      "name": "CanActivate",
      "id": "interface-CanActivate-d0c3a5e0b5fa5adecb1df2c81f32365e32b99ddcec4b75bf2f6140f0ceccb7a71b29a3a2da56ec9640f9f26aa7cbbead2cc1aefd616588dba925e870e25d1010",
      "file": "src/app/state/application/featureToggle.guard.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable, map, skipWhile, take } from 'rxjs';\nimport { Select } from '@ngxs/store';\nimport { ApplicationSelectors } from './application.selectors';\nimport { IFeatureFlags } from './application.state';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureToggleGuard implements CanActivate {\n  @Select(ApplicationSelectors.slices.featureFlags)\n  featureFlags$!: Observable<IFeatureFlags>;\n\n  constructor(private router: Router) {}\n\n  /**\n   *\n   * @param route\n   * @returns\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const requiredFeatures = route.data['requiredFeatures'] as string[];\n    return this.featureFlags$.pipe(\n      /**\n       * Skip while the feature flags are not loaded\n       */\n      skipWhile((enabledFeatures) => !enabledFeatures),\n      /**\n       * Take one emission and complete the observable\n       */\n      take(1),\n      /**\n       * Map the enabled features to a boolean\n       * If the required features are not empty, check if all required features are enabled\n       * If there are no required features or if all required features are enabled, return true\n       * else navigate to page not found\n       */\n      map((enabledFeatures) => {\n        if (requiredFeatures && requiredFeatures.length > 0) {\n          if (this.checkFeatures(enabledFeatures, requiredFeatures)) {\n            return true;\n          } else {\n            this.router.navigate(['/page-not-found']);\n            return false;\n          }\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n\n  /**\n   *\n   * @param enabledFeatures\n   * @param requiredFeatures\n   * @returns\n   */\n  private checkFeatures(\n    enabledFeatures: IFeatureFlags,\n    requiredFeatures: string[]\n  ) {\n    return requiredFeatures.every(\n      (feature) => enabledFeatures[feature as keyof IFeatureFlags]\n    );\n  }\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 170,
      "methods": [
        {
          "name": "canActivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "CanActivate",
      "id": "interface-CanActivate-b373bc8321194d4076eea0454f4690f6507118a5cddf97065a24941bfb75073c223a95413b260bc47ca7e4e3366090ef19b92bb1e22aa88fe4a911daf48b214a-1",
      "file": "src/app/state/auth/auth.guard.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { AuthSelectors } from './auth.selectors';\nimport { UntilDestroy } from '@ngneat/until-destroy';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  @Select(AuthSelectors.slices.isAuthenticated) $isAuthenticated:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.slices.isPasswordReset) $isPasswordReset:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.claims) $claims: Observable<string[]> | undefined;\n  constructor(private store: Store, private router: Router) {}\n\n  // TODO: Explore using an async way to validate routes\n  async test() {\n    return 1;\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const requiredClaims = route.data['requiredClaims'] as string[];\n    const isAuthenticated = this.store.selectSnapshot(\n      AuthSelectors.slices.isAuthenticated\n    );\n    const userClaims = this.store.selectSnapshot(AuthSelectors.claims) ?? [];\n\n    // first check if the user is authenticated\n    if (isAuthenticated) {\n      // if there are claims required for the route check them\n      if (requiredClaims && requiredClaims.length > 0) {\n        if (this.checkClaims(userClaims, requiredClaims)) {\n          // if the user has the required claims, allow the route\n          return true;\n        } else {\n          // if the user does not have the required claims, redirect to unauthorized\n          this.router.navigate(['/unauthorized']);\n          return false;\n        }\n      } else {\n        // if no claims are required, allow the route\n        return true;\n      }\n    } else {\n      // if not authenticated, redirect to login\n      this.router.navigate(['/login'], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n\n  private checkClaims(userClaims: string[], requiredClaims: string[]) {\n    return requiredClaims.every((claim) => userClaims.includes(claim));\n  }\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 170,
      "methods": [
        {
          "name": "canActivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "CanActivate-1"
    },
    {
      "name": "CanDeactivateFn",
      "id": "interface-CanDeactivateFn-68741a23c5604a3751138c9b9828b61c572ca3936b611331c71e27d562b2a6cba3fb5b8ce369b4d884885d981e7aa9c5ac021785874eef994a4bbc63a6328051",
      "file": "src/app/state/application/workInProgress.guard.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { ApplicationSelectors } from './application.selectors';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { SetExamInProgress, SetUnsavedChanges } from './application.actions';\n\ninterface CanDeactivateFn {\n  canDeactivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkInProgressGuard implements CanDeactivateFn {\n  @Select(ApplicationSelectors.slices.hasUnsavedChanges)\n  hasUnsavedChanges$!: Observable<boolean>;\n\n  @Select(ApplicationSelectors.slices.examInProgress)\n  examInProgress$!: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  /**\n   *\n   * @param route\n   * @returns\n   */\n  canDeactivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    console.log('canDeactivate');\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      return this.globalDialogService\n        ?.showConfirmation('Unsaved Changes', 'Do you want to navigate away')\n        .then((result) => {\n          if (result) {\n            this.store.dispatch(new SetUnsavedChanges(false));\n          }\n          return result;\n        });\n    } else {\n      const examInProgress = this.store.selectSnapshot(\n        (state) => state.application.examInProgress\n      );\n      if (examInProgress) {\n        return this.globalDialogService\n          ?.showConfirmation(\n            'Exam in Progress',\n            'Do you want to navigate away from the exam? <br/> Navigating away will result in an incomplete exam.'\n          )\n          .then((result) => {\n            if (result) {\n              this.store.dispatch(new SetExamInProgress(false));\n            }\n            return result;\n          });\n      } else {\n        return true;\n      }\n    }\n  }\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 170,
      "methods": [
        {
          "name": "canDeactivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "CollapsePanelComponentArgs",
      "id": "interface-CollapsePanelComponentArgs-83058c77ee0badcc4884a40a759dba420cce8fe1de5dd9204ae79e113bd089eb874a84862f22edcb5a2c969fb65390bd59fba5f43908852b7ee59d0a70ee6866",
      "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  componentWrapperDecorator,\n  type Meta,\n  type StoryObj,\n} from '@storybook/angular';\nimport { CollapsePanelComponent } from './collapse-panel.component';\n\ninterface CollapsePanelComponentArgs extends CollapsePanelComponent {\n  panelTitle: string;\n  panelContent: string;\n}\n\n// More on how to set up stories at: https://storybook.js.org/docs/angular/writing-stories/introduction\nconst meta: Meta<CollapsePanelComponentArgs> = {\n  title: 'YTG/Collapse-Panel',\n  tags: ['autodocs'],\n  component: CollapsePanelComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (CollapsePanelComponent) => `${CollapsePanelComponent}`\n    ),\n  ],\n  render: (args: CollapsePanelComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<abs-collapse-panel [panelId]=\"panelId\" [startExpanded]=\"startExpanded\">\n      <h5 class=\"mt-0 mb-2\" panel-header>${args.panelTitle}</h5>\n      <div [innerHTML]=\"'${args.panelContent}'\"></div>\n    </abs-collapse-panel>`,\n    props: {\n      ...args,\n    },\n  }),\n};\n\nexport default meta;\ntype Story = StoryObj<CollapsePanelComponentArgs>;\n\n// More on writing stories with args: https://storybook.js.org/docs/angular/writing-stories/args\nexport const Default: Story = {\n  args: {\n    panelId: 1,\n    startExpanded: true,\n    panelTitle: 'Panel Title',\n    panelContent: 'Panel Content<br><br>More content.',\n  },\n};\n\nexport const StartOpen: Story = {\n  args: {\n    ...Default.args,\n    panelId: 2,\n  },\n};\n\nexport const StartClosed: Story = {\n  args: {\n    ...Default.args,\n    panelId: 3,\n    startExpanded: false,\n  },\n};\n",
      "properties": [
        {
          "name": "panelContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "panelTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "CollapsePanelComponent"
    },
    {
      "name": "GridAction",
      "id": "interface-GridAction-3b0f122bdfd4ebd32d8ecd2fe90b1d920ca3a64e2fdb6247aef6405ce35154c50865b1ca512f66dec5dc56f0cc6863158fab03fa045479e490172d4a2a41e261",
      "file": "src/app/shared/components/grid/grid.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbsFilterType, AbsGridCellRendererType } from './abs-grid.enum';\nimport { isObservable } from 'rxjs';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { IGridColumns } from './abs-grid-col.interface';\n\ninterface GridAction {\n  data: any;\n  fieldKey: string;\n  onClick: (data: unknown) => void;\n}\n\n@Component({\n  selector: 'abs-grid',\n  standalone: true,\n  imports: [CommonModule, ButtonModule, InputTextModule, DropdownModule],\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GridComponent implements OnInit, OnChanges {\n  /**\n   * Data to display in the grid\n   */\n  @Input() data!: any;\n\n  /**\n   * Columns to display in the grid\n   * @type {IGridColumns}\n   */\n  @Input() columns!: IGridColumns[] | any;\n\n  /**\n   * Title to display in the grid\n   * @type {string}\n   */\n  @Input() title!: string;\n\n  /**\n   * Whether or not to display filter\n   * @type {boolean}\n   */\n  @Input() showFilter!: boolean;\n\n  /**\n   * Type of filter to display\n   *\n   */\n  @Input() filterType: 'text' | 'dropdown' = 'text';\n\n  /**\n   * Placeholder for filter\n   * @type {string}\n   */\n  @Input() filterPlaceholder = 'Search';\n\n  /**\n   * Field to filter on\n   * @type {string}\n   */\n  @Input() filterOn = '';\n\n  /**\n   * Array of options to filter on for dropdown\n   * @type {string}\n   */\n  @Input() filterOptions: any[] = [];\n\n  /**\n   * Message when there are no filtered results\n   * @type {string}\n   */\n  @Input() noFilteredResultsMessage = 'There are no results to display.';\n\n  /**\n   * Whether or not to display pagination\n   * @type {boolean}\n   */\n  @Input() pagination = false;\n\n  /**\n   * Controls current page of the grid\n   * @type {number}\n   */\n  @Input() currentPage = 1;\n\n  /**\n   * Controls how many items to display per page\n   * @type {number}\n   */\n  @Input() itemsPerPage = 5;\n\n  /**\n   * Whether or not to show grid lines\n   * @type {boolean}\n   */\n  @Input() showGridLines = true;\n\n  /**\n   * Message for when there are no results to display\n   * @type {string}\n   */\n  @Input() noResultsMessage = 'There are no results to display.';\n\n  /**\n   * Template to display when row is expanded\n   * @type {any}\n   */\n  @Input() expandTemplate!: any;\n\n  /**\n   * Parent component action to handle\n   * @type {EventEmitter<unknown>}\n   */\n  @Output() action: EventEmitter<unknown> = new EventEmitter();\n\n  pages: number[] = [];\n\n  AbsGridCellRendererType = AbsGridCellRendererType;\n\n  searchText!: string;\n\n  localData: Array<any> = [];\n\n  filteredData: Array<any> = [];\n\n  previousPageDisabled!: boolean;\n\n  firstPageDisabled!: boolean;\n\n  nextPageDisabled!: boolean;\n\n  lastPageDisabled!: boolean;\n\n  ngOnInit() {\n    if (isObservable(this.data)) {\n      this.data.subscribe((data: any) => {\n        this.localData = data ?? [];\n        this.filteredData = data ?? [];\n        this.initPagintion(this.localData);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!isObservable(this.data)) {\n      if (changes['data']) {\n        this.localData = changes['data'].currentValue;\n        this.filteredData = changes['data'].currentValue ?? [];\n        this.initPagintion(this.localData);\n      }\n    }\n  }\n\n  /**\n   *\n   * Initializes pagination\n   */\n\n  initPagintion(data: any[]) {\n    if (this.pagination) {\n      const total = data?.length ?? 0;\n      const pagesCount = Math.ceil(total / this.itemsPerPage);\n      this.pages = [...Array(pagesCount).keys()].map((i) => i + 1);\n\n      this.setPaginationActions();\n    }\n  }\n\n  /**\n   *\n   * Sets pagination actions\n   */\n  setPaginationActions() {\n    this.previousPageDisabled = this.currentPage === 1;\n    this.firstPageDisabled =\n      this.previousPageDisabled ||\n      this.pages.length <= 2 ||\n      this.currentPage <= 2;\n\n    this.nextPageDisabled = this.currentPage === this.pages.length;\n    this.lastPageDisabled = this.nextPageDisabled;\n  }\n\n  changePage(page: number) {\n    this.currentPage = page;\n\n    this.setPaginationActions();\n  }\n\n  /**\n   *\n   * Sets the data to display in the grid\n   */\n  getPagedData(data: any[]) {\n    let sortedData = data;\n    if (data?.length > 0) {\n      sortedData = [...data];\n      sortedData.sort(this.sortColumn.bind(this));\n    }\n    if (this.pagination) {\n      return sortedData.slice(\n        (this.currentPage - 1) * this.itemsPerPage,\n        this.currentPage * this.itemsPerPage\n      );\n    } else {\n      return sortedData;\n    }\n  }\n\n  /**\n   *\n   * Handles grid action\n   */\n  handleAction(action: GridAction, data: unknown) {\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  /**\n   *\n   * Handles grid expand action\n   */\n  handleExpand(action: GridAction, data: any) {\n    data.expanded = !data.expanded;\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  /**\n   *\n   * Sets up column sorting functionality\n   */\n  setColumnSort(column: any) {\n    this.columns.forEach((col: any) => {\n      if (col.field === column.field) {\n        col.sort =\n          column.sort === 'asc'\n            ? 'desc'\n            : column.sort === 'desc'\n            ? null\n            : 'asc';\n      } else {\n        col.sort = null;\n      }\n    });\n  }\n\n  /**\n   *\n   * Functionality for sorting columns\n   */\n  sortColumn(a: any, b: any) {\n    const sortColumn = this.columns?.find((col: any) => col.sort);\n    if (sortColumn) {\n      if (sortColumn.sort === 'asc') {\n        return a[sortColumn.fieldName] > b[sortColumn.fieldName] ? 1 : -1;\n      } else {\n        return a[sortColumn.fieldName] < b[sortColumn.fieldName] ? 1 : -1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   *\n   * Handles filter change\n   */\n  whenGridFilterChange($event: any) {\n    const value =\n      this.filterType === AbsFilterType.Text\n        ? $event?.target.value\n        : $event?.value?.value;\n\n    this.filteredData = this.localData.filter((item: any) =>\n      item[this.filterOn].toLowerCase().includes(value?.toLowerCase() ?? '')\n    );\n\n    if (this.pagination) {\n      this.initPagintion(this.filteredData);\n      this.changePage(1);\n    }\n  }\n}\n",
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "fieldKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "onClick",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAccreditedProgramInstitutionReadOnlyModel",
      "id": "interface-IAccreditedProgramInstitutionReadOnlyModel-6e6a57a77e76aa2d5849fdcacc4d082b27bda8113f85c047dabd0b6dca9b3ca7e287b797953a2897ecb8f0b10c7342d5a7ddd70596ddb8f11a8e7ecbd908fd3e",
      "file": "src/app/api/models/medicaltraining/accredited-program-institution-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAccreditedProgramInstitutionReadOnlyModel {\r\n    programId: number;\r\n    institutionName: string;\r\n    city: string;\r\n    state: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "programId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAccreditedProgramInstitutionReadOnlyModel",
      "id": "interface-IAccreditedProgramInstitutionReadOnlyModel-6e6a57a77e76aa2d5849fdcacc4d082b27bda8113f85c047dabd0b6dca9b3ca7e287b797953a2897ecb8f0b10c7342d5a7ddd70596ddb8f11a8e7ecbd908fd3e-1",
      "file": "src/app/api/models/picklists/accredited-program-institution-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAccreditedProgramInstitutionReadOnlyModel {\r\n    programId: number;\r\n    institutionName: string;\r\n    city: string;\r\n    state: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "programId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "IAccreditedProgramInstitutionReadOnlyModel-1"
    },
    {
      "name": "IActionCardReadOnlyModel",
      "id": "interface-IActionCardReadOnlyModel-efcbf40747e7580973d8db4cda1543e2c5484145a29946c48b1813ed2a1af4e374daf495cfc36c42dc7397e1595438576c3d046eaeaa40816df23764133b4334",
      "file": "src/app/shared/components/action-card/action-card-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IActionCardReadOnlyModel {\n  title: string;\n  titleKey?: string;\n  description: string;\n  descriptionKey?: string;\n  actionType?: string;\n  actionAction?: string;\n  actionStyle?: number;\n  action?: {\n    type?: string;\n    action?: string;\n  };\n  actionDisplay: string;\n  actionDisplayKey?: string;\n  icon: string;\n  status?: string;\n  disabled?: boolean;\n}\n",
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "actionAction",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "actionDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "actionDisplayKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "actionStyle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "actionType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "descriptionKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "titleKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAdditionalTrainingModel",
      "id": "interface-IAdditionalTrainingModel-7a2382cfa1b43155f21de8ec372a22b35ace32c4adf863501142a1598cd182ccb94259e13b2f1c9c6e0edb5e974e0bb0789f4c4a5b5b30901a898046f7023980",
      "file": "src/app/api/models/examinations/gq/additional-training.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAdditionalTrainingModel {\r\n    trainingId: number;\r\n    dateEnded: string;\r\n    dateStarted: string;\r\n    other: string;\r\n    institutionId: number;\r\n    institutionName: string;\r\n    city: string;\r\n    stateId: string;\r\n    state: string;\r\n    typeOfTraining: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "dateEnded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "dateStarted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "institutionId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "stateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "trainingId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "typeOfTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAdditionalTrainingReadOnlyModel",
      "id": "interface-IAdditionalTrainingReadOnlyModel-8daa815346a55cbd77ca9c4b61e816040079232f10332d63c06a995c90a4d0f1aaa435eebc8603893c098dbc7dd68c49539a3f4fe01f49e09e63eafc1da350d6",
      "file": "src/app/api/models/examinations/gq/additional-training-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAdditionalTrainingReadOnlyModel {\r\n    trainingId: number;\r\n    typeOfTraining: string;\r\n    state: string;\r\n    city: string;\r\n    institutionName: string;\r\n    other: string;\r\n    dateStarted: string;\r\n    dateEnded: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "dateEnded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "dateStarted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "trainingId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "typeOfTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAdvancedTrainingModel",
      "id": "interface-IAdvancedTrainingModel-21e9bf47b73370ef32db97f1128c925c30237e6881a256ff56ef43112be4f83c04073875df4971a6c35cb35f2e36fd2d0a256f11913839d9189d7b3b92731b5c",
      "file": "src/app/api/models/medicaltraining/advanced-training.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAdvancedTrainingModel {\r\n  id: number;\r\n  userId: number;\r\n  trainingTypeId: number;\r\n  trainingType: string;\r\n  programId: number;\r\n  institutionName: string;\r\n  city: string;\r\n  state: string;\r\n  other: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  createdByUserId: number;\r\n  createdAtUtc: string;\r\n  lastUpdatedAtUtc: string;\r\n  lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "programId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "trainingType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "trainingTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAdvancedTrainingReadOnlyModel",
      "id": "interface-IAdvancedTrainingReadOnlyModel-47fce8180befd7e43008e18fa0c2fbfa497090f2c4132ff019e63eeb08e863fa1efc33d35da7946fa8789392e8b9ca0ddbdc166ac24509b2366619d8f5ac7daa",
      "file": "src/app/api/models/medicaltraining/advanced-training-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAdvancedTrainingReadOnlyModel {\r\n    id: number;\r\n    trainingType: string;\r\n    institutionName: string;\r\n    city: string;\r\n    state: string;\r\n    other: string;\r\n    startDate: string;\r\n    endDate: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "institutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "trainingType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAgendaReadOnlyModel",
      "id": "interface-IAgendaReadOnlyModel-2fdf9c69208f737a90f7331c9428e7fe9a79875f5fce588fec3727bfbbbed5917acc54e9261c8897639119a0697f5ca2109e3202bf0a822bcd7e99ac06eb56ca",
      "file": "src/app/api/models/examiners/agenda-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAgendaReadOnlyModel {\r\n    id: number;\r\n    documentName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IApplicationState",
      "id": "interface-IApplicationState-bd6ab8630d4d155a22c375471c7172fb97c8e1232e1834160f4227246e14e8d1a2fbef8240e988dbbe03a9ef75e770b3c5c82a59d09da021af5cfdb7392053f8",
      "file": "src/app/state/application/application.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport {\n  CloseApplication,\n  LoadApplication,\n  SetExamInProgress,\n  SetUnsavedChanges,\n} from './application.actions';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { Logout } from '../auth';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IApplicationState {\n  isLoggedIn: boolean;\n  isLoaded: boolean;\n  isAuth: boolean;\n  isUserLoaded: boolean;\n  featureFlags: IFeatureFlags | undefined;\n  hasUnsavedChanges: boolean;\n  examInProgress: boolean;\n}\n\nexport interface IFeatureFlags {\n  ceScoreTesting?: boolean;\n  //page level feature flags\n  dashboardPage?: boolean;\n  myAccountPage?: boolean;\n  personalProfilePage?: boolean;\n  medicalTrainingPage?: boolean;\n  professionalStandingPage?: boolean;\n  cmeRepositoryPage?: boolean;\n  gmeHistoryPage?: boolean;\n  applyRegisterPage?: boolean;\n  examHistoryPage?: boolean;\n  continuousCertificationPage?: boolean;\n  paymentHistoryPage?: boolean;\n  documentsPage?: boolean;\n  examScoringPage?: boolean;\n}\n\nexport const APPLICATION_STATE_TOKEN = new StateToken<IApplicationState>(\n  'application'\n);\n\n@State<IApplicationState>({\n  name: APPLICATION_STATE_TOKEN,\n  defaults: {\n    isLoggedIn: false,\n    isLoaded: false,\n    isAuth: false,\n    isUserLoaded: false,\n    featureFlags: undefined,\n    hasUnsavedChanges: false,\n    examInProgress: false,\n  },\n})\n@Injectable({ providedIn: 'root' })\nexport class ApplicationState {\n  constructor(\n    private store: Store,\n    private router: Router,\n    private httpClient: HttpClient,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(LoadApplication)\n  loadApplication(\n    ctx: StateContext<IApplicationState>\n  ): Observable<IFeatureFlags> {\n    const state = ctx.getState();\n    return this.getFeatureFlags().pipe(\n      tap((response: any) => {\n        ctx.patchState({\n          featureFlags: response as IFeatureFlags,\n        });\n      })\n    );\n  }\n\n  @Action(SetUnsavedChanges)\n  setUnsavedChanges(\n    ctx: StateContext<IApplicationState>,\n    action: SetUnsavedChanges\n  ) {\n    ctx.patchState({\n      hasUnsavedChanges: action.hasUnsavedChanges,\n    });\n  }\n\n  @Action(SetExamInProgress)\n  setExamInProgress(\n    ctx: StateContext<IApplicationState>,\n    action: SetExamInProgress\n  ) {\n    ctx.patchState({\n      examInProgress: action.examInProgress,\n    });\n  }\n\n  @Action(CloseApplication)\n  closeApplication(ctx: StateContext<IApplicationState>) {\n    console.log('closeApplication');\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      this.globalDialogService\n        ?.showConfirmation(\n          'Unsaved Changes',\n          'Do you want to navigate away. close application'\n        )\n        .then((result) => {\n          if (result) {\n            this.store\n              .dispatch(new SetUnsavedChanges(false))\n              .pipe(take(1))\n              .subscribe(() => {\n                this.store.dispatch(new Logout());\n              });\n          }\n        });\n    } else {\n      const examInProgress = this.store.selectSnapshot(\n        (state) => state.application.examInProgress\n      );\n      if (examInProgress) {\n        this.globalDialogService\n          ?.showConfirmation(\n            'Exam in Progress',\n            'Do you want to navigate away from the exam? <br/> Navigating away will result in an incomplete exam.'\n          )\n          .then((result) => {\n            if (result) {\n              this.store\n                .dispatch(new SetExamInProgress(false))\n                .pipe(take(1))\n                .subscribe(() => {\n                  this.store.dispatch(new Logout());\n                });\n            }\n          });\n      } else {\n        this.store.dispatch(new Logout());\n      }\n    }\n  }\n\n  private getFeatureFlags(): Observable<IFeatureFlags> {\n    return this.httpClient.get('/api/features').pipe(\n      map((response: any) => {\n        return response as IFeatureFlags;\n      })\n    );\n  }\n\n  // split up unsaved changes and exam in progress logic\n  private async checkUnsavedChanges(\n    title?: string,\n    text?: string\n  ): Promise<boolean> {\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      const result = await this.globalDialogService?.showConfirmation(\n        title ?? 'Unsaved Changessdfsdfsdf',\n        text ?? 'Do you want to navigate away'\n      );\n\n      if (result) {\n        this.store.dispatch(new SetUnsavedChanges(false));\n      }\n\n      return result;\n    }\n    return true;\n  }\n}\n",
      "properties": [
        {
          "name": "examInProgress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "featureFlags",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFeatureFlags | undefined",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "hasUnsavedChanges",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "isAuth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "isLoaded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "isLoggedIn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "isUserLoaded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAppointementsPrivilegesPickLists",
      "id": "interface-IAppointementsPrivilegesPickLists-396dc4fea357980963b6e232c416f40a86f4119b05a6d545b3851b6b50b8157f8ee2ea5bc7af43bc9b48c3bc138d4e100e80808622c0abebf9d24dcad15937f0",
      "file": "src/app/professional-standing/professional-standing.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  ProfessionalStandingSelectors,\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  GetUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  GetPSAppointmentsAndPrivilegesList,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n  UpdatePSAppointmentAndPrivilege,\n  CreatePSAppointmentAndPrivilege,\n  GetPSAppointmentAndPrivilegeDetails,\n  DeletePSAppointmentAndPrivilege,\n  ClearProfessionalStandingErrors,\n} from '../state';\nimport {\n  GetPicklists,\n  IPickListItemNumber,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IStateReadOnlyModel,\n  IUserProfessionalStandingModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserAppointmentReadOnlyModel,\n} from '../api';\nimport { LicenseFormComponent } from './license-form/license-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SanctionsFormComponent } from './sanctions-form/sanctions-form.component';\nimport { AppointmentsFormComponent } from './appointments-form/appointments-form.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CurrentAppointmentFormComponent } from './current-appointment-form/current-appointment-form.component';\ninterface IMedicalLicensePickLists {\n  licenseStateOptions: IStateReadOnlyModel[] | undefined;\n  licenseTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IProfessionalStandingPickLists {\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  primaryPracticeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IAppointementsPrivilegesPickLists {\n  stateCodeOptions: IStateReadOnlyModel[] | undefined;\n  practiceTypeOptions: IPickListItemNumber[] | undefined;\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  organizationOptions: IPickListItemNumber[] | undefined;\n  appointmentTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IMedicalLicense extends IMedicalLicenseReadOnlyModel {\n  showEdit: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    ButtonModule,\n    LicenseFormComponent,\n    SanctionsFormComponent,\n    AppointmentsFormComponent,\n    CurrentAppointmentFormComponent,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  /* error variables */\n  clearErrors = new ClearProfessionalStandingErrors(); // may need to break this into dividual error clearing actions\n  @Select(ProfessionalStandingSelectors.slices.medicalLicenseErrors)\n  medicalLicenseErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.appointmentErrors)\n  appointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.professionalStandingErrors)\n  currentAppointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.sanctionsErrors)\n  sanctionsErrors$: Observable<any> | undefined;\n\n  /* Medical License variables */\n  @Select(ProfessionalStandingSelectors.slices.medicalLiscenseList)\n  medicalLicenses$: Observable<IMedicalLicense[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedMedicalLicense)\n  selectedMedicalLicense$: Observable<IMedicalLicenseModel> | undefined;\n\n  extendedMedicalLicenses$: Subject<IMedicalLicense[]> | undefined =\n    new BehaviorSubject([] as any);\n\n  licensesCols = LICENSES_COLS;\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  stateMedicalLicenseTitle: string | undefined;\n  showLicensesAddEdit = false;\n  medicalLicensePickLists: IMedicalLicensePickLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  /* Sanctions and Ethics variables */\n  @Select(ProfessionalStandingSelectors.slices.sanctions)\n  sanctionsAndEthics$: Observable<ISanctionsModel> | undefined;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(false);\n\n  sanctionsAndEthics: ISanctionsModel | undefined;\n\n  /* Current Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.userProfessionalStandingDetails)\n  currentAppointments$: Observable<IUserProfessionalStandingModel> | undefined;\n  currentAppointments: any;\n  currentAppointmentPickLists: IProfessionalStandingPickLists = {\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  };\n\n  /* Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.allAppointments)\n  allAppointments$: Observable<IUserAppointmentReadOnlyModel[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedAppointment)\n  selectedAppointment$: Observable<IUserAppointmentModel> | undefined;\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(false);\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  appointmentsTitle: string | undefined;\n  selectedAppointment: IUserAppointmentModel | undefined;\n  showAppointmentsAddEdit = false;\n  appointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists = {\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  };\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initProfileData();\n  }\n\n  ngOnInit() {\n    this.initPicklistValues();\n    this.setStateMedicalLicenseEdit();\n  }\n\n  setStateMedicalLicenseEdit() {\n    this.medicalLicenses$?.pipe(untilDestroyed(this)).subscribe((medicalLicenses: IMedicalLicense[]) => {\n      const extendedLicenses: IMedicalLicense[] = medicalLicenses.map(\n        (license) => ({\n          ...license,\n          showEdit: license.reportingOrganization === 'Self',\n        })\n      );\n      this.extendedMedicalLicenses$?.next(extendedLicenses);\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetPicklists('500'))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        //create new objects to trigger change detection\n        const newMedicalLicensePickLists: IMedicalLicensePickLists = {\n          licenseStateOptions: [],\n          licenseTypeOptions: [],\n        };\n        const newAppointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists =\n          {\n            stateCodeOptions: [],\n            practiceTypeOptions: [],\n            organizationTypeOptions: [],\n            organizationOptions: [],\n            appointmentTypeOptions: [],\n          };\n        const newProfessionalStandingPickLists: IProfessionalStandingPickLists =\n          {\n            organizationTypeOptions: [],\n            primaryPracticeOptions: [],\n          };\n\n        //medical license picklists\n        newMedicalLicensePickLists.licenseStateOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newMedicalLicensePickLists.licenseTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.licenseTypes);\n\n        this.medicalLicensePickLists = newMedicalLicensePickLists;\n\n        //appointments and privileges picklists\n        newAppointmentsPrivilegesPickLists.stateCodeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newAppointmentsPrivilegesPickLists.practiceTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.practiceTypes);\n        newAppointmentsPrivilegesPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newAppointmentsPrivilegesPickLists.organizationOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.jcahoOrganizations\n          );\n        newAppointmentsPrivilegesPickLists.appointmentTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.appointmentTypes\n          );\n        this.appointmentsPrivilegesPickLists =\n          newAppointmentsPrivilegesPickLists;\n\n        //professional standing picklists\n        newProfessionalStandingPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newProfessionalStandingPickLists.primaryPracticeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.primaryPractices\n          );\n        this.currentAppointmentPickLists = newProfessionalStandingPickLists;\n      });\n  }\n\n  initProfileData() {\n    this.getMedicalLicenses();\n    this.getCurrentAppointmentDetails();\n    this.getPreviousAppointmentsAndPrivileges();\n    this.getSanctionsAndEthicsDetails();\n  }\n\n  getCurrentAppointmentDetails() {\n    this._store\n      .dispatch(new GetUserProfessionalStandingDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.currentAppointments$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.currentAppointments = res;\n          if (!res) {\n            this.editHospitalAppointmentsAndPrivileges$.next(true);\n          }\n        });\n      });\n  }\n\n  getSanctionsAndEthicsDetails() {\n    this._store\n      .dispatch(new GetProfessionalStandingSanctionsDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.sanctionsAndEthics$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.sanctionsAndEthics = res;\n          if (!res) {\n            this.editSanctionsAndEthics$.next(true);\n          }\n        });\n      });\n  }\n\n  getPreviousAppointmentsAndPrivileges() {\n    this._store.dispatch(new GetPSAppointmentsAndPrivilegesList());\n  }\n\n  getAppointmentDetails(appointment: IUserAppointmentModel) {\n    if (appointment.apptId) {\n      this._store\n        .dispatch(new GetPSAppointmentAndPrivilegeDetails(appointment.apptId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedAppointment = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedAppointment\n          );\n        });\n    }\n  }\n\n  getMedicalLicenses() {\n    this._store.dispatch(new GetPSMedicalLicenseList());\n  }\n\n  getMedicalLicenseDetails(license: IMedicalLicenseReadOnlyModel) {\n    if (license.licenseId) {\n      this._store\n        .dispatch(new GetPSMedicalLicenseDetails(license.licenseId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedMedicalLicense = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedMedicalLicense\n          );\n        });\n    }\n  }\n\n  /* Medical License Functions */\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: IMedicalLicenseReadOnlyModel | null | undefined) {\n    if (license) {\n      this.getMedicalLicenseDetails(license);\n      this.stateMedicalLicenseTitle = 'Edit Medical License';\n    } else {\n      this.selectedMedicalLicense = undefined;\n      this.stateMedicalLicenseTitle = 'Add Medical License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n\n  saveLicense($event: any) {\n    let issueDate = '';\n    let expireDate = '';\n    if ($event.data.issueDate) {\n      issueDate = new Date($event.data.issueDate).toISOString();\n    }\n    if ($event.data.expireDate) {\n      expireDate = new Date($event.data.expireDate).toISOString();\n    }\n    const newLicense = {\n      licenseId: this.selectedMedicalLicense?.licenseId ?? 0,\n      issuingStateId: $event.data.issuingStateId ?? '',\n      licenseNumber: $event.data.licenseNumber ?? '',\n      licenseTypeId: $event.data.licenseTypeId ?? 0,\n      issueDate: issueDate,\n      expireDate: expireDate,\n      reportingOrganization:\n        this.selectedMedicalLicense?.reportingOrganization ?? 'Self',\n    } as unknown as IMedicalLicenseModel;\n\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    }\n  }\n\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n  }\n\n  /* Sanctions and Ethics Functions */\n  saveSanctionsAndEthics($event: any) {\n    const newSanctionsAndEthics = {\n      ...$event.data,\n    } as unknown as ISanctionsModel;\n\n    if (this.sanctionsAndEthics) {\n      this._store\n        .dispatch(\n          new UpdateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(\n          new CreateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    }\n  }\n\n  /* Current Appointments Functions */\n  saveCurrentAppointments($event: any) {\n    const newCurrentAppointments = {\n      ...$event.data,\n      clinicallyActive: $event.data.clinicallyActive ? 1 : 0,\n    } as unknown as IUserProfessionalStandingModel;\n\n    if (this.currentAppointments) {\n      this._store\n        .dispatch(\n          new UpdateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    } else {\n      // create\n      this._store\n        .dispatch(\n          new CreateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    }\n  }\n\n  /* Appointments List Functions */\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteAppointment($event.data.apptId);\n          }\n        });\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.getAppointmentDetails(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.selectedAppointment = undefined;\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n\n  saveAppointment($event: any) {\n    // get orgId from autocomplete object\n    const orgId = $event.data.organizationId?.itemValue ?? 0;\n    const newAppointment = {\n      apptId: this.selectedAppointment?.apptId ?? 0,\n      practiceTypeId: $event.data.practiceTypeId ?? 0,\n      appointmentTypeId: $event.data.appointmentTypeId ?? 0,\n      organizationTypeId: $event.data.organizationTypeId ?? 0,\n      authorizingOfficial: $event.data.authorizingOfficial ?? '',\n      organizationId: orgId,\n      stateCode: $event.data.stateCode ?? '',\n      other: $event.data.other ?? '',\n    } as unknown as IUserAppointmentModel;\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    }\n  }\n\n  deleteAppointment(apptId: number) {\n    this._store.dispatch(new DeletePSAppointmentAndPrivilege(apptId));\n  }\n\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.selectedAppointment = undefined;\n  }\n\n  /* on page form helper functions */\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n}\n",
      "properties": [
        {
          "name": "appointmentTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "organizationOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "organizationTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "practiceTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "stateCodeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 68
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAppointmentTypeReadOnlyModel",
      "id": "interface-IAppointmentTypeReadOnlyModel-6fd1f97f41e245d62a30cbe94e8e680ae59ce5070c487cd4d166f7587068b87f3a2897711730228fa39d28b9dd3315cde613d9fc281cad56db10adcaa8d02e9e",
      "file": "src/app/api/models/picklists/appointment-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAppointmentTypeReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAppUserReadOnlyModel",
      "id": "interface-IAppUserReadOnlyModel-1dd109920ef3b6dd6ae3982c06b3325aaae22fa2c3c37afdbe672a1b47ce5231028cce26eb964a85a712c8e83529ff1b4096fb942eeed018ccdb2a391248e600",
      "file": "src/app/api/models/users/app-user-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAppUserReadOnlyModel {\r\n  userId: number;\r\n  fullName: string;\r\n  userName: string;\r\n  emailAddress: string;\r\n  resetRequired: boolean;\r\n  lastLoginDateUtc: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "emailAddress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "fullName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "lastLoginDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "resetRequired",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "userName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "description": "<p>#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -</p>\n<p>All client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file</p>\n<p>############################################################################</p>\n",
      "rawdescription": "\n\n#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -\n\nAll client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file\n\n############################################################################\n",
      "methods": []
    },
    {
      "name": "IAuthCredentials",
      "id": "interface-IAuthCredentials-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
      "file": "src/app/state/auth/auth.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { IAppUserReadOnlyModel } from '../../api';\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IRefreshToken {\n  refreshToken: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  [key: string]: any;\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n  isBusy: boolean;\n  isPasswordReset: boolean;\n  passwordResetComplete: boolean;\n  isAuthenticated: boolean;\n}\n",
      "properties": [
        {
          "name": "password",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "userName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IAuthState",
      "id": "interface-IAuthState-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
      "file": "src/app/state/auth/auth.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { IAppUserReadOnlyModel } from '../../api';\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IRefreshToken {\n  refreshToken: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  [key: string]: any;\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n  isBusy: boolean;\n  isPasswordReset: boolean;\n  passwordResetComplete: boolean;\n  isAuthenticated: boolean;\n}\n",
      "properties": [
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[] | null",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IError | null",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "isAuthenticated",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "isBusy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "isPasswordReset",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "passwordResetComplete",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "AuthStateModel"
    },
    {
      "name": "ICalendarFilter",
      "id": "interface-ICalendarFilter-dc6596208b78c7f3680ac5a4c82248c87d06908b95f21c1c331acd761a511913a4413d91c8464a3902d32ffaca567942199e176f05e8d8ff9b6c70fdd7807c3d",
      "file": "src/app/gme-history/gme-history.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  DeleteGraduateMedicalEducation,\n  GetGraduateMedicalEducationDetails,\n  ClearGraduateMedicalEducationDetails,\n  IGraduateMedicalEducation,\n  GetAllGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  GetDashboardProgramInformation,\n  DashboardSelectors,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n  IRotationModel,\n} from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\nimport { GmeFormComponent } from './gme-form/gme-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { GetPicklists, PicklistsSelectors } from '../state/picklists';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\ninterface IGmePicklistOptions {\n  clinicalLevelOptions: any[] | undefined;\n  clinicalActivityOptions: any[] | undefined;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n    ButtonModule,\n    GmeFormComponent,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationAll)\n  gmeAll$: Observable<IGraduateMedicalEducation> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors)\n  gmeErrors$: Observable<any> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  createGmeRotationSubscription: Subscription | undefined;\n  updateGmeRotationSubscription: Subscription | undefined;\n  gmeAllSubscription: Subscription | undefined;\n\n  conflictingRecords: IRotationReadOnlyModel[] = [];\n  gapData: IRotationGapReadOnlyModel | undefined;\n  gapConflictDates: any;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  gmeSummaryData!: any[];\n\n  selectedGmeRotation: IRotationReadOnlyModel | undefined;\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  gmePicklistOptions: IGmePicklistOptions | undefined = {\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  };\n\n  userProgram: {\n    programName?: string;\n    clinicalLevel?: string;\n    clinicalLevelId?: number;\n  } = {};\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initPicklistOptions();\n\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      this.selectedGmeRotation = undefined;\n      const selectedRotation = {\n        ...rotation,\n        usingAffiliateOrganization: rotation?.alternateInstitutionName\n          ? true\n          : false,\n        isClinicalActivity:\n          !rotation?.clinicalActivity.includes('Non-Clinical'),\n      };\n      if (!rotation) {\n        selectedRotation.startDate = this.maxEndDate?.toISOString() ?? '';\n      }\n      this.selectedGmeRotation = selectedRotation;\n    });\n  }\n\n  initUserData() {\n    this._store\n      .dispatch(new GetDashboardProgramInformation())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        const userInfo = this._store.selectSnapshot(\n          DashboardSelectors.dashboardProgramInformation\n        );\n        if (userInfo && userInfo.programs) {\n          if (userInfo.programs.programName !== '') {\n            this.userProgram.programName = userInfo.programs.programName;\n          }\n          if (userInfo.programs.clinicalLevel !== '') {\n            switch (userInfo.programs.clinicalLevel) {\n              case 'PGY1':\n                this.userProgram.clinicalLevel = 'Clinical Level 1';\n                break;\n              case 'PGY2':\n                this.userProgram.clinicalLevel = 'Clinical Level 2';\n                break;\n              case 'PGY3':\n                this.userProgram.clinicalLevel = 'Clinical Level 3';\n                break;\n              case 'PGY4':\n                this.userProgram.clinicalLevel = 'Clinical Level 4';\n                break;\n              case 'PGY5':\n                this.userProgram.clinicalLevel = 'Clinical Level 5';\n                break;\n              case 'Research':\n                this.userProgram.clinicalLevel = 'Research';\n                break;\n              case 'Other':\n                this.userProgram.clinicalLevel = 'Other Clinical Fellowship';\n                break;\n              default:\n                this.userProgram.clinicalLevel =\n                  userInfo.programs.clinicalLevel;\n                break;\n            }\n          }\n        }\n        if (this.userProgram.clinicalLevel) {\n          const clinicalLevel =\n            this.gmePicklistOptions?.clinicalLevelOptions?.find((level) => {\n              return level.label === this.userProgram.clinicalLevel;\n            });\n          this.userProgram.clinicalLevelId = clinicalLevel?.value;\n        }\n      });\n  }\n\n  initPicklistOptions() {\n    this.gmePicklistOptions = undefined;\n    const gmePicklistOptions: IGmePicklistOptions = {\n      clinicalLevelOptions: [],\n      clinicalActivityOptions: [],\n    };\n    this._store\n      .dispatch(new GetPicklists())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        gmePicklistOptions.clinicalLevelOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalLevels\n        );\n        if (gmePicklistOptions.clinicalLevelOptions) {\n          gmePicklistOptions.clinicalLevelOptions =\n            gmePicklistOptions.clinicalLevelOptions.map((level) => {\n              return {\n                label: level.name,\n                value: level.id,\n              };\n            });\n        }\n        gmePicklistOptions.clinicalActivityOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalActivities\n        );\n\n        this.gmePicklistOptions = gmePicklistOptions;\n\n        this.initUserData();\n      });\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetAllGraduateMedicalEducation());\n\n    this.gmeAllSubscription = this.gmeAll$?.pipe(untilDestroyed(this)).subscribe((gmeAll) => {\n      this.clinicalActivity = [];\n      this.nonClinicalActivity = [];\n      this.conflicts = [];\n\n      if (gmeAll && (gmeAll.gmeRotations || gmeAll.gmeGaps)) {\n        this.calendarFilterOptions = [\n          {\n            label: 'Activity Types',\n            items: [\n              {\n                label: 'Clinical',\n                value: { value: 'clinical', field: 'type' },\n              },\n              {\n                label: 'Non-Clinical',\n                value: { value: 'non-clinical', field: 'type' },\n              },\n              {\n                label: 'Conflicts',\n                value: { value: 'conflict', field: 'type' },\n              },\n            ],\n          },\n          {\n            label: 'Clinical Levels',\n            items: [],\n          },\n        ];\n\n        // set filter options for grid\n        const clinicalFilterOptions: { value: string; label: string }[] = [];\n        const yearFilterOptions: ICalendarFilter[] = [];\n        this.maxEndDate = undefined;\n        this.minStartDate = undefined;\n        gmeAll.gmeGaps.forEach((item, index) => {\n          // build calendar items\n          if (item.startDate === item.endDate) {\n            // single day event\n          }\n\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const conflictItem: any = {\n            id: 'conflict-' + index,\n            start: item.startDate,\n            class: 'conflict',\n            classNames: ['clickable-event'],\n            color: 'rgba(139, 4, 10, 0.25)',\n            highlightColor: 'rgba(139, 4, 10, 1)',\n            type: 'conflict',\n            eventTitle: 'Rotation Conflict',\n            allDay: true,\n            rawData: item,\n          };\n\n          if (item.startDate !== item.endDate) {\n            conflictItem.end = endDate;\n          }\n          this.conflicts.push(conflictItem);\n        });\n        gmeAll.gmeRotations.forEach((item) => {\n          //get min start date\n          if (this.minStartDate) {\n            if (new Date(item.startDate) < new Date(this.minStartDate)) {\n              this.minStartDate = new Date(item.startDate);\n            }\n          } else {\n            this.minStartDate = new Date(item.startDate);\n          }\n\n          //get max end date\n          if (this.maxEndDate) {\n            if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n              this.maxEndDate = new Date(item.endDate);\n            }\n          } else {\n            this.maxEndDate = new Date(item.endDate);\n          }\n          this.maxEndDate = new Date(\n            this.maxEndDate.setDate(this.maxEndDate.getDate() + 1)\n          );\n\n          // build filter options for grid\n          if (\n            !clinicalFilterOptions.some(\n              (x) => x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n            )\n          ) {\n            clinicalFilterOptions.push({\n              value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              label: item.clinicalLevel,\n            });\n            this.calendarFilterOptions[1].items.push({\n              label: item.clinicalLevel,\n              value: {\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                field: 'clinicalLevel',\n              },\n            });\n          }\n\n          const itemMonth = new Date(item.startDate).getMonth();\n          const itemYear = new Date(item.startDate).getFullYear().toString();\n          let yearFilter = '';\n          // hardcoded to 5 for June\n          if (itemMonth >= 5) {\n            yearFilter = itemYear.concat(\n              ' - ',\n              (parseInt(itemYear) + 1).toString()\n            );\n          } else {\n            yearFilter = (parseInt(itemYear) - 1)\n              .toString()\n              .concat(' - ', itemYear);\n          }\n          if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n            yearFilterOptions.push({\n              label: yearFilter,\n              value: {\n                value: yearFilter?.replaceAll(' ', '_').trim(),\n                field: 'year',\n              },\n            });\n          }\n\n          // build calendar items\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const calendarItem = {\n            id: item.id,\n            start: item.startDate,\n            end: endDate,\n            class: '',\n            color: '',\n            highlightColor: '',\n            eventTitle: item.clinicalActivity,\n            programName: item.programName,\n            type: '',\n            year: yearFilter.replaceAll(' ', '_').trim(),\n            clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n            allDay: true,\n            rawData: item,\n          };\n\n          //if (item.isCredit) {\n          if (!item.clinicalActivity.includes('Non-Clinical')) {\n            // clinical activity\n            calendarItem.class = 'clinical';\n            calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n            calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n            calendarItem.type = 'clinical';\n            this.clinicalActivity.push(calendarItem);\n          } else {\n            // non clinical activity\n            calendarItem.class = 'non-clinical';\n            calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n            calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n            calendarItem.type = 'non-clinical';\n            this.nonClinicalActivity.push(calendarItem);\n          }\n        });\n\n        clinicalFilterOptions.sort((a, b) => {\n          return a.label > b.label ? 1 : -1;\n        });\n        this.calendarFilterOptions.push({\n          label: 'Years',\n          items: yearFilterOptions,\n        });\n        this.calendarFilterOptions.forEach((filterOption) => {\n          if (filterOption.label !== 'Activity Types') {\n            filterOption.items.sort(\n              (a: ICalendarFilter, b: ICalendarFilter) => {\n                return a.label > b.label ? 1 : -1;\n              }\n            );\n          }\n        });\n\n        this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n      }\n\n      this.applyCalendarFilters();\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeAllSubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      this.getConflicts(filters),\n    ];\n  }\n\n  relaunchAddEditGmeRotation($event: any) {\n    this.showConflictResolutionModal = false;\n    if (this.showAddEditGmeRotation) {\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n    if ($event) {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails($event));\n      this.handleAddEditGmeRotation(true);\n    }\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: this.maxEndDate?.toISOString() ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n  }\n\n  handleAddGmeGapRotation($event: any) {\n    if ($event) {\n      this.showConflictResolutionModal = false;\n      this.isEditGmeRotation$.next(false);\n      this.gapConflictDates = $event;\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: $event.startDate ?? '',\n        endDate: $event.endDate ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails(data.id));\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  saveGmeRotation($event: any) {\n    if ($event.data) {\n      const formValues = $event.data;\n      let startDate = '';\n      let endDate = '';\n      if (formValues.startDate) {\n        startDate = new Date(formValues.startDate).toISOString();\n      }\n      if (formValues.endDate) {\n        endDate = new Date(formValues.endDate).toISOString();\n      }\n\n      const newRotation = {\n        id: this.selectedGmeRotation?.id ?? 0,\n        startDate: startDate,\n        endDate: endDate,\n        clinicalLevelId: formValues.clinicalLevelId ?? 0,\n        clinicalActivityId: formValues.clinicalActivityId ?? 0,\n        programName: formValues.programName ?? '',\n        nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n        alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n        isInternationalRotation: formValues.isInternationalRotation ?? false,\n        other: formValues.other ?? '',\n        fourMonthRotationExplain: formValues.fourMonthRotationExplain ?? '',\n        nonPrimaryExplain: formValues.nonPrimaryExplain ?? '',\n        nonClinicalExplain: formValues.nonClinicalExplain ?? '',\n        isEssential: formValues.isEssential ?? false,\n      } as unknown as IRotationModel;\n\n      if ($event.isEdit) {\n        this.updateGmeRotationSubscription = this._store\n          .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      } else {\n        this.createGmeRotationSubscription = this._store\n          .dispatch(new CreateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      }\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflicts: any, gapData: IRotationGapReadOnlyModel) {\n    this.conflictingRecords = [];\n    this.gapData = undefined;\n    const conflictRecords = [];\n    if (conflicts.previousRotation) {\n      conflictRecords.push(conflicts.previousRotation.rawData);\n    }\n    if (conflicts.nextRotation) {\n      conflictRecords.push(conflicts.nextRotation.rawData);\n    }\n\n    this.conflictingRecords = conflictRecords;\n    this.gapData = gapData;\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
      "properties": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICalendarFilterValue",
          "optional": false,
          "description": "",
          "line": 62
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICalendarFilterOptions",
      "id": "interface-ICalendarFilterOptions-dc6596208b78c7f3680ac5a4c82248c87d06908b95f21c1c331acd761a511913a4413d91c8464a3902d32ffaca567942199e176f05e8d8ff9b6c70fdd7807c3d",
      "file": "src/app/gme-history/gme-history.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  DeleteGraduateMedicalEducation,\n  GetGraduateMedicalEducationDetails,\n  ClearGraduateMedicalEducationDetails,\n  IGraduateMedicalEducation,\n  GetAllGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  GetDashboardProgramInformation,\n  DashboardSelectors,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n  IRotationModel,\n} from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\nimport { GmeFormComponent } from './gme-form/gme-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { GetPicklists, PicklistsSelectors } from '../state/picklists';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\ninterface IGmePicklistOptions {\n  clinicalLevelOptions: any[] | undefined;\n  clinicalActivityOptions: any[] | undefined;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n    ButtonModule,\n    GmeFormComponent,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationAll)\n  gmeAll$: Observable<IGraduateMedicalEducation> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors)\n  gmeErrors$: Observable<any> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  createGmeRotationSubscription: Subscription | undefined;\n  updateGmeRotationSubscription: Subscription | undefined;\n  gmeAllSubscription: Subscription | undefined;\n\n  conflictingRecords: IRotationReadOnlyModel[] = [];\n  gapData: IRotationGapReadOnlyModel | undefined;\n  gapConflictDates: any;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  gmeSummaryData!: any[];\n\n  selectedGmeRotation: IRotationReadOnlyModel | undefined;\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  gmePicklistOptions: IGmePicklistOptions | undefined = {\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  };\n\n  userProgram: {\n    programName?: string;\n    clinicalLevel?: string;\n    clinicalLevelId?: number;\n  } = {};\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initPicklistOptions();\n\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      this.selectedGmeRotation = undefined;\n      const selectedRotation = {\n        ...rotation,\n        usingAffiliateOrganization: rotation?.alternateInstitutionName\n          ? true\n          : false,\n        isClinicalActivity:\n          !rotation?.clinicalActivity.includes('Non-Clinical'),\n      };\n      if (!rotation) {\n        selectedRotation.startDate = this.maxEndDate?.toISOString() ?? '';\n      }\n      this.selectedGmeRotation = selectedRotation;\n    });\n  }\n\n  initUserData() {\n    this._store\n      .dispatch(new GetDashboardProgramInformation())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        const userInfo = this._store.selectSnapshot(\n          DashboardSelectors.dashboardProgramInformation\n        );\n        if (userInfo && userInfo.programs) {\n          if (userInfo.programs.programName !== '') {\n            this.userProgram.programName = userInfo.programs.programName;\n          }\n          if (userInfo.programs.clinicalLevel !== '') {\n            switch (userInfo.programs.clinicalLevel) {\n              case 'PGY1':\n                this.userProgram.clinicalLevel = 'Clinical Level 1';\n                break;\n              case 'PGY2':\n                this.userProgram.clinicalLevel = 'Clinical Level 2';\n                break;\n              case 'PGY3':\n                this.userProgram.clinicalLevel = 'Clinical Level 3';\n                break;\n              case 'PGY4':\n                this.userProgram.clinicalLevel = 'Clinical Level 4';\n                break;\n              case 'PGY5':\n                this.userProgram.clinicalLevel = 'Clinical Level 5';\n                break;\n              case 'Research':\n                this.userProgram.clinicalLevel = 'Research';\n                break;\n              case 'Other':\n                this.userProgram.clinicalLevel = 'Other Clinical Fellowship';\n                break;\n              default:\n                this.userProgram.clinicalLevel =\n                  userInfo.programs.clinicalLevel;\n                break;\n            }\n          }\n        }\n        if (this.userProgram.clinicalLevel) {\n          const clinicalLevel =\n            this.gmePicklistOptions?.clinicalLevelOptions?.find((level) => {\n              return level.label === this.userProgram.clinicalLevel;\n            });\n          this.userProgram.clinicalLevelId = clinicalLevel?.value;\n        }\n      });\n  }\n\n  initPicklistOptions() {\n    this.gmePicklistOptions = undefined;\n    const gmePicklistOptions: IGmePicklistOptions = {\n      clinicalLevelOptions: [],\n      clinicalActivityOptions: [],\n    };\n    this._store\n      .dispatch(new GetPicklists())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        gmePicklistOptions.clinicalLevelOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalLevels\n        );\n        if (gmePicklistOptions.clinicalLevelOptions) {\n          gmePicklistOptions.clinicalLevelOptions =\n            gmePicklistOptions.clinicalLevelOptions.map((level) => {\n              return {\n                label: level.name,\n                value: level.id,\n              };\n            });\n        }\n        gmePicklistOptions.clinicalActivityOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalActivities\n        );\n\n        this.gmePicklistOptions = gmePicklistOptions;\n\n        this.initUserData();\n      });\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetAllGraduateMedicalEducation());\n\n    this.gmeAllSubscription = this.gmeAll$?.pipe(untilDestroyed(this)).subscribe((gmeAll) => {\n      this.clinicalActivity = [];\n      this.nonClinicalActivity = [];\n      this.conflicts = [];\n\n      if (gmeAll && (gmeAll.gmeRotations || gmeAll.gmeGaps)) {\n        this.calendarFilterOptions = [\n          {\n            label: 'Activity Types',\n            items: [\n              {\n                label: 'Clinical',\n                value: { value: 'clinical', field: 'type' },\n              },\n              {\n                label: 'Non-Clinical',\n                value: { value: 'non-clinical', field: 'type' },\n              },\n              {\n                label: 'Conflicts',\n                value: { value: 'conflict', field: 'type' },\n              },\n            ],\n          },\n          {\n            label: 'Clinical Levels',\n            items: [],\n          },\n        ];\n\n        // set filter options for grid\n        const clinicalFilterOptions: { value: string; label: string }[] = [];\n        const yearFilterOptions: ICalendarFilter[] = [];\n        this.maxEndDate = undefined;\n        this.minStartDate = undefined;\n        gmeAll.gmeGaps.forEach((item, index) => {\n          // build calendar items\n          if (item.startDate === item.endDate) {\n            // single day event\n          }\n\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const conflictItem: any = {\n            id: 'conflict-' + index,\n            start: item.startDate,\n            class: 'conflict',\n            classNames: ['clickable-event'],\n            color: 'rgba(139, 4, 10, 0.25)',\n            highlightColor: 'rgba(139, 4, 10, 1)',\n            type: 'conflict',\n            eventTitle: 'Rotation Conflict',\n            allDay: true,\n            rawData: item,\n          };\n\n          if (item.startDate !== item.endDate) {\n            conflictItem.end = endDate;\n          }\n          this.conflicts.push(conflictItem);\n        });\n        gmeAll.gmeRotations.forEach((item) => {\n          //get min start date\n          if (this.minStartDate) {\n            if (new Date(item.startDate) < new Date(this.minStartDate)) {\n              this.minStartDate = new Date(item.startDate);\n            }\n          } else {\n            this.minStartDate = new Date(item.startDate);\n          }\n\n          //get max end date\n          if (this.maxEndDate) {\n            if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n              this.maxEndDate = new Date(item.endDate);\n            }\n          } else {\n            this.maxEndDate = new Date(item.endDate);\n          }\n          this.maxEndDate = new Date(\n            this.maxEndDate.setDate(this.maxEndDate.getDate() + 1)\n          );\n\n          // build filter options for grid\n          if (\n            !clinicalFilterOptions.some(\n              (x) => x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n            )\n          ) {\n            clinicalFilterOptions.push({\n              value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              label: item.clinicalLevel,\n            });\n            this.calendarFilterOptions[1].items.push({\n              label: item.clinicalLevel,\n              value: {\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                field: 'clinicalLevel',\n              },\n            });\n          }\n\n          const itemMonth = new Date(item.startDate).getMonth();\n          const itemYear = new Date(item.startDate).getFullYear().toString();\n          let yearFilter = '';\n          // hardcoded to 5 for June\n          if (itemMonth >= 5) {\n            yearFilter = itemYear.concat(\n              ' - ',\n              (parseInt(itemYear) + 1).toString()\n            );\n          } else {\n            yearFilter = (parseInt(itemYear) - 1)\n              .toString()\n              .concat(' - ', itemYear);\n          }\n          if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n            yearFilterOptions.push({\n              label: yearFilter,\n              value: {\n                value: yearFilter?.replaceAll(' ', '_').trim(),\n                field: 'year',\n              },\n            });\n          }\n\n          // build calendar items\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const calendarItem = {\n            id: item.id,\n            start: item.startDate,\n            end: endDate,\n            class: '',\n            color: '',\n            highlightColor: '',\n            eventTitle: item.clinicalActivity,\n            programName: item.programName,\n            type: '',\n            year: yearFilter.replaceAll(' ', '_').trim(),\n            clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n            allDay: true,\n            rawData: item,\n          };\n\n          //if (item.isCredit) {\n          if (!item.clinicalActivity.includes('Non-Clinical')) {\n            // clinical activity\n            calendarItem.class = 'clinical';\n            calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n            calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n            calendarItem.type = 'clinical';\n            this.clinicalActivity.push(calendarItem);\n          } else {\n            // non clinical activity\n            calendarItem.class = 'non-clinical';\n            calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n            calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n            calendarItem.type = 'non-clinical';\n            this.nonClinicalActivity.push(calendarItem);\n          }\n        });\n\n        clinicalFilterOptions.sort((a, b) => {\n          return a.label > b.label ? 1 : -1;\n        });\n        this.calendarFilterOptions.push({\n          label: 'Years',\n          items: yearFilterOptions,\n        });\n        this.calendarFilterOptions.forEach((filterOption) => {\n          if (filterOption.label !== 'Activity Types') {\n            filterOption.items.sort(\n              (a: ICalendarFilter, b: ICalendarFilter) => {\n                return a.label > b.label ? 1 : -1;\n              }\n            );\n          }\n        });\n\n        this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n      }\n\n      this.applyCalendarFilters();\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeAllSubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      this.getConflicts(filters),\n    ];\n  }\n\n  relaunchAddEditGmeRotation($event: any) {\n    this.showConflictResolutionModal = false;\n    if (this.showAddEditGmeRotation) {\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n    if ($event) {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails($event));\n      this.handleAddEditGmeRotation(true);\n    }\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: this.maxEndDate?.toISOString() ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n  }\n\n  handleAddGmeGapRotation($event: any) {\n    if ($event) {\n      this.showConflictResolutionModal = false;\n      this.isEditGmeRotation$.next(false);\n      this.gapConflictDates = $event;\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: $event.startDate ?? '',\n        endDate: $event.endDate ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails(data.id));\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  saveGmeRotation($event: any) {\n    if ($event.data) {\n      const formValues = $event.data;\n      let startDate = '';\n      let endDate = '';\n      if (formValues.startDate) {\n        startDate = new Date(formValues.startDate).toISOString();\n      }\n      if (formValues.endDate) {\n        endDate = new Date(formValues.endDate).toISOString();\n      }\n\n      const newRotation = {\n        id: this.selectedGmeRotation?.id ?? 0,\n        startDate: startDate,\n        endDate: endDate,\n        clinicalLevelId: formValues.clinicalLevelId ?? 0,\n        clinicalActivityId: formValues.clinicalActivityId ?? 0,\n        programName: formValues.programName ?? '',\n        nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n        alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n        isInternationalRotation: formValues.isInternationalRotation ?? false,\n        other: formValues.other ?? '',\n        fourMonthRotationExplain: formValues.fourMonthRotationExplain ?? '',\n        nonPrimaryExplain: formValues.nonPrimaryExplain ?? '',\n        nonClinicalExplain: formValues.nonClinicalExplain ?? '',\n        isEssential: formValues.isEssential ?? false,\n      } as unknown as IRotationModel;\n\n      if ($event.isEdit) {\n        this.updateGmeRotationSubscription = this._store\n          .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      } else {\n        this.createGmeRotationSubscription = this._store\n          .dispatch(new CreateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      }\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflicts: any, gapData: IRotationGapReadOnlyModel) {\n    this.conflictingRecords = [];\n    this.gapData = undefined;\n    const conflictRecords = [];\n    if (conflicts.previousRotation) {\n      conflictRecords.push(conflicts.previousRotation.rawData);\n    }\n    if (conflicts.nextRotation) {\n      conflictRecords.push(conflicts.nextRotation.rawData);\n    }\n\n    this.conflictingRecords = conflictRecords;\n    this.gapData = gapData;\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
      "properties": [
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICalendarFilter[]",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 65
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICalendarFilterValue",
      "id": "interface-ICalendarFilterValue-dc6596208b78c7f3680ac5a4c82248c87d06908b95f21c1c331acd761a511913a4413d91c8464a3902d32ffaca567942199e176f05e8d8ff9b6c70fdd7807c3d",
      "file": "src/app/gme-history/gme-history.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  DeleteGraduateMedicalEducation,\n  GetGraduateMedicalEducationDetails,\n  ClearGraduateMedicalEducationDetails,\n  IGraduateMedicalEducation,\n  GetAllGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  GetDashboardProgramInformation,\n  DashboardSelectors,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n  IRotationModel,\n} from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\nimport { GmeFormComponent } from './gme-form/gme-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { GetPicklists, PicklistsSelectors } from '../state/picklists';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\ninterface IGmePicklistOptions {\n  clinicalLevelOptions: any[] | undefined;\n  clinicalActivityOptions: any[] | undefined;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n    ButtonModule,\n    GmeFormComponent,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationAll)\n  gmeAll$: Observable<IGraduateMedicalEducation> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors)\n  gmeErrors$: Observable<any> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  createGmeRotationSubscription: Subscription | undefined;\n  updateGmeRotationSubscription: Subscription | undefined;\n  gmeAllSubscription: Subscription | undefined;\n\n  conflictingRecords: IRotationReadOnlyModel[] = [];\n  gapData: IRotationGapReadOnlyModel | undefined;\n  gapConflictDates: any;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  gmeSummaryData!: any[];\n\n  selectedGmeRotation: IRotationReadOnlyModel | undefined;\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  gmePicklistOptions: IGmePicklistOptions | undefined = {\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  };\n\n  userProgram: {\n    programName?: string;\n    clinicalLevel?: string;\n    clinicalLevelId?: number;\n  } = {};\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initPicklistOptions();\n\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      this.selectedGmeRotation = undefined;\n      const selectedRotation = {\n        ...rotation,\n        usingAffiliateOrganization: rotation?.alternateInstitutionName\n          ? true\n          : false,\n        isClinicalActivity:\n          !rotation?.clinicalActivity.includes('Non-Clinical'),\n      };\n      if (!rotation) {\n        selectedRotation.startDate = this.maxEndDate?.toISOString() ?? '';\n      }\n      this.selectedGmeRotation = selectedRotation;\n    });\n  }\n\n  initUserData() {\n    this._store\n      .dispatch(new GetDashboardProgramInformation())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        const userInfo = this._store.selectSnapshot(\n          DashboardSelectors.dashboardProgramInformation\n        );\n        if (userInfo && userInfo.programs) {\n          if (userInfo.programs.programName !== '') {\n            this.userProgram.programName = userInfo.programs.programName;\n          }\n          if (userInfo.programs.clinicalLevel !== '') {\n            switch (userInfo.programs.clinicalLevel) {\n              case 'PGY1':\n                this.userProgram.clinicalLevel = 'Clinical Level 1';\n                break;\n              case 'PGY2':\n                this.userProgram.clinicalLevel = 'Clinical Level 2';\n                break;\n              case 'PGY3':\n                this.userProgram.clinicalLevel = 'Clinical Level 3';\n                break;\n              case 'PGY4':\n                this.userProgram.clinicalLevel = 'Clinical Level 4';\n                break;\n              case 'PGY5':\n                this.userProgram.clinicalLevel = 'Clinical Level 5';\n                break;\n              case 'Research':\n                this.userProgram.clinicalLevel = 'Research';\n                break;\n              case 'Other':\n                this.userProgram.clinicalLevel = 'Other Clinical Fellowship';\n                break;\n              default:\n                this.userProgram.clinicalLevel =\n                  userInfo.programs.clinicalLevel;\n                break;\n            }\n          }\n        }\n        if (this.userProgram.clinicalLevel) {\n          const clinicalLevel =\n            this.gmePicklistOptions?.clinicalLevelOptions?.find((level) => {\n              return level.label === this.userProgram.clinicalLevel;\n            });\n          this.userProgram.clinicalLevelId = clinicalLevel?.value;\n        }\n      });\n  }\n\n  initPicklistOptions() {\n    this.gmePicklistOptions = undefined;\n    const gmePicklistOptions: IGmePicklistOptions = {\n      clinicalLevelOptions: [],\n      clinicalActivityOptions: [],\n    };\n    this._store\n      .dispatch(new GetPicklists())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        gmePicklistOptions.clinicalLevelOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalLevels\n        );\n        if (gmePicklistOptions.clinicalLevelOptions) {\n          gmePicklistOptions.clinicalLevelOptions =\n            gmePicklistOptions.clinicalLevelOptions.map((level) => {\n              return {\n                label: level.name,\n                value: level.id,\n              };\n            });\n        }\n        gmePicklistOptions.clinicalActivityOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalActivities\n        );\n\n        this.gmePicklistOptions = gmePicklistOptions;\n\n        this.initUserData();\n      });\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetAllGraduateMedicalEducation());\n\n    this.gmeAllSubscription = this.gmeAll$?.pipe(untilDestroyed(this)).subscribe((gmeAll) => {\n      this.clinicalActivity = [];\n      this.nonClinicalActivity = [];\n      this.conflicts = [];\n\n      if (gmeAll && (gmeAll.gmeRotations || gmeAll.gmeGaps)) {\n        this.calendarFilterOptions = [\n          {\n            label: 'Activity Types',\n            items: [\n              {\n                label: 'Clinical',\n                value: { value: 'clinical', field: 'type' },\n              },\n              {\n                label: 'Non-Clinical',\n                value: { value: 'non-clinical', field: 'type' },\n              },\n              {\n                label: 'Conflicts',\n                value: { value: 'conflict', field: 'type' },\n              },\n            ],\n          },\n          {\n            label: 'Clinical Levels',\n            items: [],\n          },\n        ];\n\n        // set filter options for grid\n        const clinicalFilterOptions: { value: string; label: string }[] = [];\n        const yearFilterOptions: ICalendarFilter[] = [];\n        this.maxEndDate = undefined;\n        this.minStartDate = undefined;\n        gmeAll.gmeGaps.forEach((item, index) => {\n          // build calendar items\n          if (item.startDate === item.endDate) {\n            // single day event\n          }\n\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const conflictItem: any = {\n            id: 'conflict-' + index,\n            start: item.startDate,\n            class: 'conflict',\n            classNames: ['clickable-event'],\n            color: 'rgba(139, 4, 10, 0.25)',\n            highlightColor: 'rgba(139, 4, 10, 1)',\n            type: 'conflict',\n            eventTitle: 'Rotation Conflict',\n            allDay: true,\n            rawData: item,\n          };\n\n          if (item.startDate !== item.endDate) {\n            conflictItem.end = endDate;\n          }\n          this.conflicts.push(conflictItem);\n        });\n        gmeAll.gmeRotations.forEach((item) => {\n          //get min start date\n          if (this.minStartDate) {\n            if (new Date(item.startDate) < new Date(this.minStartDate)) {\n              this.minStartDate = new Date(item.startDate);\n            }\n          } else {\n            this.minStartDate = new Date(item.startDate);\n          }\n\n          //get max end date\n          if (this.maxEndDate) {\n            if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n              this.maxEndDate = new Date(item.endDate);\n            }\n          } else {\n            this.maxEndDate = new Date(item.endDate);\n          }\n          this.maxEndDate = new Date(\n            this.maxEndDate.setDate(this.maxEndDate.getDate() + 1)\n          );\n\n          // build filter options for grid\n          if (\n            !clinicalFilterOptions.some(\n              (x) => x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n            )\n          ) {\n            clinicalFilterOptions.push({\n              value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              label: item.clinicalLevel,\n            });\n            this.calendarFilterOptions[1].items.push({\n              label: item.clinicalLevel,\n              value: {\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                field: 'clinicalLevel',\n              },\n            });\n          }\n\n          const itemMonth = new Date(item.startDate).getMonth();\n          const itemYear = new Date(item.startDate).getFullYear().toString();\n          let yearFilter = '';\n          // hardcoded to 5 for June\n          if (itemMonth >= 5) {\n            yearFilter = itemYear.concat(\n              ' - ',\n              (parseInt(itemYear) + 1).toString()\n            );\n          } else {\n            yearFilter = (parseInt(itemYear) - 1)\n              .toString()\n              .concat(' - ', itemYear);\n          }\n          if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n            yearFilterOptions.push({\n              label: yearFilter,\n              value: {\n                value: yearFilter?.replaceAll(' ', '_').trim(),\n                field: 'year',\n              },\n            });\n          }\n\n          // build calendar items\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const calendarItem = {\n            id: item.id,\n            start: item.startDate,\n            end: endDate,\n            class: '',\n            color: '',\n            highlightColor: '',\n            eventTitle: item.clinicalActivity,\n            programName: item.programName,\n            type: '',\n            year: yearFilter.replaceAll(' ', '_').trim(),\n            clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n            allDay: true,\n            rawData: item,\n          };\n\n          //if (item.isCredit) {\n          if (!item.clinicalActivity.includes('Non-Clinical')) {\n            // clinical activity\n            calendarItem.class = 'clinical';\n            calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n            calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n            calendarItem.type = 'clinical';\n            this.clinicalActivity.push(calendarItem);\n          } else {\n            // non clinical activity\n            calendarItem.class = 'non-clinical';\n            calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n            calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n            calendarItem.type = 'non-clinical';\n            this.nonClinicalActivity.push(calendarItem);\n          }\n        });\n\n        clinicalFilterOptions.sort((a, b) => {\n          return a.label > b.label ? 1 : -1;\n        });\n        this.calendarFilterOptions.push({\n          label: 'Years',\n          items: yearFilterOptions,\n        });\n        this.calendarFilterOptions.forEach((filterOption) => {\n          if (filterOption.label !== 'Activity Types') {\n            filterOption.items.sort(\n              (a: ICalendarFilter, b: ICalendarFilter) => {\n                return a.label > b.label ? 1 : -1;\n              }\n            );\n          }\n        });\n\n        this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n      }\n\n      this.applyCalendarFilters();\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeAllSubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      this.getConflicts(filters),\n    ];\n  }\n\n  relaunchAddEditGmeRotation($event: any) {\n    this.showConflictResolutionModal = false;\n    if (this.showAddEditGmeRotation) {\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n    if ($event) {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails($event));\n      this.handleAddEditGmeRotation(true);\n    }\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: this.maxEndDate?.toISOString() ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n  }\n\n  handleAddGmeGapRotation($event: any) {\n    if ($event) {\n      this.showConflictResolutionModal = false;\n      this.isEditGmeRotation$.next(false);\n      this.gapConflictDates = $event;\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: $event.startDate ?? '',\n        endDate: $event.endDate ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails(data.id));\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  saveGmeRotation($event: any) {\n    if ($event.data) {\n      const formValues = $event.data;\n      let startDate = '';\n      let endDate = '';\n      if (formValues.startDate) {\n        startDate = new Date(formValues.startDate).toISOString();\n      }\n      if (formValues.endDate) {\n        endDate = new Date(formValues.endDate).toISOString();\n      }\n\n      const newRotation = {\n        id: this.selectedGmeRotation?.id ?? 0,\n        startDate: startDate,\n        endDate: endDate,\n        clinicalLevelId: formValues.clinicalLevelId ?? 0,\n        clinicalActivityId: formValues.clinicalActivityId ?? 0,\n        programName: formValues.programName ?? '',\n        nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n        alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n        isInternationalRotation: formValues.isInternationalRotation ?? false,\n        other: formValues.other ?? '',\n        fourMonthRotationExplain: formValues.fourMonthRotationExplain ?? '',\n        nonPrimaryExplain: formValues.nonPrimaryExplain ?? '',\n        nonClinicalExplain: formValues.nonClinicalExplain ?? '',\n        isEssential: formValues.isEssential ?? false,\n      } as unknown as IRotationModel;\n\n      if ($event.isEdit) {\n        this.updateGmeRotationSubscription = this._store\n          .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      } else {\n        this.createGmeRotationSubscription = this._store\n          .dispatch(new CreateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      }\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflicts: any, gapData: IRotationGapReadOnlyModel) {\n    this.conflictingRecords = [];\n    this.gapData = undefined;\n    const conflictRecords = [];\n    if (conflicts.previousRotation) {\n      conflictRecords.push(conflicts.previousRotation.rawData);\n    }\n    if (conflicts.nextRotation) {\n      conflictRecords.push(conflicts.nextRotation.rawData);\n    }\n\n    this.conflictingRecords = conflictRecords;\n    this.gapData = gapData;\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
      "properties": [
        {
          "name": "field",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 57
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseCommentModel",
      "id": "interface-ICaseCommentModel-b1dc4b83eaeae22e3d4c5346d4b3d1cc2434eca1bf1f3a37e18fe77bd662f009db6ae61991038477ea6c2b2efb6d428a982b58f08f48d90e01d70f2135d241a4",
      "file": "src/app/api/models/scoring/case-comment.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseCommentModel {\r\n    id: number;\r\n    userId: number;\r\n    caseContentId: number;\r\n    comments: string;\r\n    createdByUserId: number;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "caseContentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "comments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseDetailModel",
      "id": "interface-ICaseDetailModel-7e36204ed5c081ed422d60a2105166959290062ca36ca177fe4860c86ee15f8999d02a7a669329397e7fc8e0a74fc4841bd152d202b80fa1edc7e4502db7670a",
      "file": "src/app/examination-rosters/examination-rosters.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { ButtonModule } from 'primeng/button';\nimport { GetScoringSessionList, PicklistsSelectors } from '../state/picklists';\nimport {\n  ICaseCommentModel,\n  ICaseDetailReadOnlyModel,\n  ICaseRosterReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../api';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  CreateCaseComment,\n  CreateCaseFeedback,\n  DeleteCaseComment,\n  DeleteCaseFeedback,\n  ExamScoringSelectors,\n  GetCaseDetailsAndFeedback,\n  GetCaseRoster,\n  GetExamTitle,\n  UpdateCaseComment,\n  UpdateCaseFeedback,\n  UserProfileSelectors,\n} from '../state';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\nimport { Observable } from 'rxjs';\nimport { ICaseFeedbackModel } from '../api/models/scoring/case-feedback.model';\n\ninterface ICaseDetailModel extends ICaseDetailReadOnlyModel {\n  editComment: boolean;\n  newComment?: string;\n  newFeedback?: string;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-examination-rosters',\n  standalone: true,\n  imports: [\n    FormsModule,\n    CommonModule,\n    TranslateModule,\n    DropdownModule,\n    InputTextareaModule,\n    ButtonModule,\n  ],\n  templateUrl: './examination-rosters.component.html',\n  styleUrls: ['./examination-rosters.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ExaminationRostersComponent implements OnInit {\n  @HostListener('contextmenu', ['$event'])\n  onRightClick(event: any) {\n    event.preventDefault();\n  }\n\n  @Select(UserProfileSelectors.userId) user$: Observable<number> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  @Select(ExamScoringSelectors.slices.selectedCaseFeedback)\n  selectedCaseFeedback$: Observable<ICaseFeedbackModel> | undefined;\n\n  userId!: number;\n\n  examHeaderId = 491; // TODO - remove hard coded value\n  selectedRoster: any = undefined;\n  selectedCaseId: number | undefined = undefined;\n  rosters: any = [];\n  cases: any = [];\n\n  caseFeedbackId!: number;\n  caseFeedback!: string;\n  caseFeedbackNewComment!: string;\n  caseFeedbackEdit = false;\n  isCaseFeedbackEditActive = false;\n\n  scoringSessionsList: IScoringSessionReadOnlyModel[] = [];\n\n  selectedCaseDetails: any = undefined;\n\n  editActive!: boolean;\n\n  constructor(\n    private _store: Store,\n    private _globalDialogService: GlobalDialogService\n  ) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n  }\n\n  ngOnInit(): void {\n    this.initPicklistValues();\n    this.user$?.pipe(untilDestroyed(this)).subscribe((userId) => {\n      this.userId = userId;\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetScoringSessionList())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.scoringSessionsList = this._store.selectSnapshot(\n          PicklistsSelectors.slices.scoringSessions\n        ) as IScoringSessionReadOnlyModel[];\n\n        if (this.scoringSessionsList?.length > 0) {\n          this.selectedRoster = this.scoringSessionsList[0];\n        }\n\n        this.getCaseList();\n      });\n  }\n\n  getCaseList() {\n    this._store\n      .dispatch(\n        new GetCaseRoster(\n          this.selectedRoster.session1Id,\n          this.selectedRoster.session2Id\n        )\n      )\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.cases = this._store.selectSnapshot(\n          ExamScoringSelectors.slices.caseRoster\n        ) as ICaseRosterReadOnlyModel[];\n\n        if (this.cases?.length > 0) {\n          this.selectCase(this.cases[0]);\n        } else {\n          this.selectedCaseId = undefined;\n          this.selectedCaseDetails = undefined;\n        }\n      });\n  }\n\n  confirmRosterSelection(event: any) {\n    if (this.editActive) {\n      this._globalDialogService\n        .showConfirmation(\n          'Unsaved Changes',\n          'Are you sure you want to navigate away from this case? Any unsaved changes will be lost.'\n        )\n        .then((result) => {\n          if (result) {\n            this.editActive = false;\n            this.selectRoster(event);\n          }\n        });\n    } else {\n      this.selectRoster(event);\n    }\n  }\n\n  selectRoster(event: any) {\n    if (event.value) {\n      this.selectedRoster = event.value;\n      this.getCaseList();\n    } else {\n      this.selectedRoster = undefined;\n      this.selectedCaseId = undefined;\n      this.selectedCaseDetails = undefined;\n    }\n  }\n\n  confirmCaseSelection(caseData: ICaseRosterReadOnlyModel) {\n    if (this.editActive) {\n      this._globalDialogService\n        .showConfirmation(\n          'Unsaved Changes',\n          'Are you sure you want to navigate away from this case? Any unsaved changes will be lost.'\n        )\n        .then((result) => {\n          if (result) {\n            this.editActive = false;\n            this.selectCase(caseData);\n          }\n        });\n    } else {\n      this.selectCase(caseData);\n    }\n  }\n\n  selectCase(caseData: ICaseRosterReadOnlyModel) {\n    if (this.selectedCaseId !== caseData.id) {\n      this.selectedCaseId = caseData.id;\n      this._store\n        .dispatch(new GetCaseDetailsAndFeedback(caseData.id))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseSections = this._store\n            .selectSnapshot(ExamScoringSelectors.slices.selectedCaseContents)\n            ?.map((val) => {\n              return {\n                ...val,\n                editComment: false,\n                newComment: '',\n              };\n            }) as ICaseDetailModel[];\n\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n\n          this.selectedCaseDetails = {\n            ...caseData,\n            sections: caseSections,\n            feedback: caseFeedback?.feedback,\n            newFeedback: caseFeedback?.feedback ? caseFeedback.feedback : '',\n            caseFeedbackId: caseFeedback?.id,\n            editFeedback: false,\n          };\n        });\n    }\n  }\n\n  toggleCommentSectionEdit(section: ICaseDetailModel) {\n    section.editComment = !section.editComment;\n    if (section.editComment) {\n      section.newComment = section.comments;\n      this.editActive = true;\n    } else {\n      section.newComment = '';\n      this.editActive = false;\n    }\n  }\n\n  toggleCaseFeedbackEdit() {\n    this.selectedCaseDetails.editFeedback =\n      !this.selectedCaseDetails.editFeedback;\n    if (this.selectedCaseDetails.editFeedback) {\n      this.selectedCaseDetails.newFeedback = this.selectedCaseDetails.feedback\n        ? this.selectedCaseDetails.feedback\n        : '';\n      this.editActive = true;\n    } else {\n      this.selectedCaseDetails.newFeedback = '';\n      this.editActive = false;\n    }\n  }\n\n  saveSectionComment(section: ICaseDetailModel) {\n    const newComment = {\n      caseContentId: section.caseContentId,\n      comments: section.newComment,\n    } as unknown as ICaseCommentModel;\n    if (section.caseCommentId) {\n      newComment.id = section.caseCommentId;\n      // call update case comment store action\n      this._store\n        .dispatch(new UpdateCaseComment(newComment))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseComment = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseComment\n          );\n          if (caseComment) {\n            section.caseCommentId = caseComment.id;\n            section.comments = caseComment.comments;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    } else {\n      // call add case comment store action\n      this._store\n        .dispatch(new CreateCaseComment(newComment))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseComment = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseComment\n          );\n          if (caseComment) {\n            section.caseCommentId = caseComment.id;\n            section.comments = caseComment.comments;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    }\n    section.editComment = false;\n    this.editActive = false;\n  }\n\n  deleteSectionComment(section: ICaseDetailModel) {\n    this._globalDialogService\n      .showConfirmation(\n        'Confirm Delete',\n        'Are you sure you want to delete this section comment?'\n      )\n      .then((result) => {\n        if (result) {\n          this._store\n            .dispatch(new DeleteCaseComment(section.caseCommentId))\n            .pipe(untilDestroyed(this))\n            .subscribe(() => {\n              this.selectedCaseId = 0;\n              this.selectCase(this.selectedCaseDetails);\n            });\n        }\n      });\n  }\n\n  saveCaseFeedback() {\n    const model = {\n      userId: this.userId,\n      feedback: this.selectedCaseDetails.newFeedback,\n      caseHeaderId: this.selectedCaseDetails.id,\n    } as unknown as ICaseFeedbackModel;\n    if (this.selectedCaseDetails.caseFeedbackId) {\n      model.id = this.selectedCaseDetails.caseFeedbackId;\n      this._store\n        .dispatch(new UpdateCaseFeedback(model))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n\n          if (caseFeedback) {\n            this.selectedCaseDetails.caseFeedbackId = caseFeedback.id;\n            this.selectedCaseDetails.feedback = caseFeedback.feedback;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreateCaseFeedback(model))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n          if (caseFeedback) {\n            this.selectedCaseDetails.caseFeedbackId = caseFeedback.id;\n            this.selectedCaseDetails.feedback = caseFeedback.feedback;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    }\n    this.selectedCaseDetails.editFeedback = false;\n    this.editActive = false;\n  }\n\n  deleteCaseFeedback(id: number) {\n    this._globalDialogService\n      .showConfirmation(\n        'Confirm Delete',\n        'Are you sure you want to delete this case feedback?'\n      )\n      .then((result) => {\n        if (result) {\n          this._store\n            .dispatch(new DeleteCaseFeedback(id))\n            .pipe(untilDestroyed(this))\n            .subscribe(() => {\n              this.selectedCaseId = 0;\n              this.selectCase(this.selectedCaseDetails);\n            });\n        }\n      });\n  }\n\n  scrollToCaseFeedback() {\n    if (!this.editActive) {\n      this.selectedCaseDetails.editFeedback =\n        !this.selectedCaseDetails.editFeedback;\n\n      this.selectedCaseDetails.newFeedback = this.selectedCaseDetails.feedback\n        ? this.selectedCaseDetails.feedback\n        : '';\n      this.editActive = true;\n    }\n\n    this.scrollToElementById('case-feedback');\n    setTimeout(() => {\n      const inputElement = document.getElementById('case-feedback-comment');\n      if (inputElement) {\n        inputElement.focus();\n      }\n    }, 500);\n  }\n\n  scrollToElementById(elementId: string) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      setTimeout(() => {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }, 0);\n    }\n  }\n}\n",
      "properties": [
        {
          "name": "editComment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "newComment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 43
        },
        {
          "name": "newFeedback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 44
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "ICaseDetailReadOnlyModel"
    },
    {
      "name": "ICaseDetailReadOnlyModel",
      "id": "interface-ICaseDetailReadOnlyModel-e7996e47106f8c7ab0af1198b7a5e4f9326e5acb263f589350b3e0494cda95e4e1df9b556497465fc2002c7b632b876999d7ff54caa86b4840fbc3b4db1ca991",
      "file": "src/app/api/models/scoring/case-detail-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseDetailReadOnlyModel {\r\n    caseNumber: string;\r\n    caseTitle: string;\r\n    caseContentId: number;\r\n    heading: string;\r\n    content: string;\r\n    comments: string;\r\n    caseCommentId: number;\r\n    sectionNumber: number;\r\n}\r\n",
      "properties": [
        {
          "name": "caseCommentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "caseContentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "caseNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "caseTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "comments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "heading",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "sectionNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseFeedbackModel",
      "id": "interface-ICaseFeedbackModel-e4244804769b7d44a6610800528172a5571d6b69f7af208b2d566743606e9bbd726cd5b8a717ca78180423af0ae651e5a2e242537ee4810e1b3345ccad896cb7",
      "file": "src/app/api/models/scoring/case-feedback.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseFeedbackModel {\r\n    id: number;\r\n    userId: number;\r\n    caseHeaderId: number;\r\n    feedback: string;\r\n    createdByUserId: number;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "caseHeaderId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "feedback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseRosterReadOnlyModel",
      "id": "interface-ICaseRosterReadOnlyModel-7630d34e11465ac12424a4099ba71fbc5015b56ad44de1e1e089b41817adc4401cc0dbb8238e60b600fbf2a12413b67b7db86dabc2795afa2162182b8cc51a84",
      "file": "src/app/api/models/scoring/case-roster-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseRosterReadOnlyModel {\r\n    caseNumber: string;\r\n    description: string;\r\n    title: string;\r\n    id: number;\r\n}\r\n",
      "properties": [
        {
          "name": "caseNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseScoreModel",
      "id": "interface-ICaseScoreModel-d5ac99ff16e8a1ec9f01598b2a12cc60550913902a085f94669fa009e9f3eb449f954b66bd1b44c53c884a2dd669acd1d0fa5ef95d92f112e3b4ccfe3fa758fe",
      "file": "src/app/api/models/scoring/case-score.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseScoreModel {\r\n    examScoringId: number;\r\n    examCaseId: number;\r\n    examinerUserId: number;\r\n    examineeUserId: number;\r\n    examineeFirstName: string;\r\n    examineeMiddleName: string;\r\n    examineeLastName: string;\r\n    examineeSuffix: string;\r\n    score: number;\r\n    criticalFail: boolean;\r\n    remarks: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "criticalFail",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "examCaseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "examineeFirstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examineeLastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "examineeMiddleName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "examineeSuffix",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "examineeUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "examinerUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "examScoringId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "remarks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "score",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICaseScoreReadOnlyModel",
      "id": "interface-ICaseScoreReadOnlyModel-379dfc68c97d660007acd1dde45109603f0ac018c0a2c122f2ecfeb7e44cfeef99f00743163a5d7b83fa5e56e51051244a803069942b2cff64056b9bf2b7534b",
      "file": "src/app/api/models/scoring/case-score-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICaseScoreReadOnlyModel {\r\n    examScoringId: number;\r\n    examCaseId: number;\r\n    examinerUserId: number;\r\n    examineeUserId: number;\r\n    examineeFirstName: string;\r\n    examineeMiddleName: string;\r\n    examineeLastName: string;\r\n    examineeSuffix: string;\r\n    examDate: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    score: number;\r\n    criticalFail: boolean;\r\n    remarks: string;\r\n    isLocked: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "criticalFail",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "endTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "examCaseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "examDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "examineeFirstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examineeLastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "examineeMiddleName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "examineeSuffix",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "examineeUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "examinerUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "examScoringId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isLocked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "remarks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "score",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "startTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICertificateTypeReadOnlyModel",
      "id": "interface-ICertificateTypeReadOnlyModel-75df9acd097aba12d443d7f19ad2cafb72bb2e63ff5a719c1947210cacb164cff7c7f47540f39daab26ff11bb1ebea3b2e8d24efa09a8f8f6273c171598401bb",
      "file": "src/app/api/models/picklists/certificate-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICertificateTypeReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICertification",
      "id": "interface-ICertification-152866538edeb10155ac49e8061bf4f4d24623e6983c4c61167be099a3d4aa97d80f77445ed92af4ea46279c138fbfa3182150ff3c798cf02e7cc7de45c52979",
      "file": "src/app/state/dashboard/dashboard.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IProgramReadOnlyModel } from 'src/app/api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from 'src/app/api/models/surgeons/certification-read-only.model';\nimport { ProgramsService } from 'src/app/api/services/trainees/programs.service';\nimport { CertificationsService } from 'src/app/api/services/surgeons/certifications.service';\nimport {\n  GetAlertsAndNotices,\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n  GetTraineeRegistrationStatus,\n} from './dashboard.actions';\nimport { catchError, of, tap } from 'rxjs';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { ExamService } from 'src/app/api/services/trainees/exam.service';\nimport { IRegistrationStatusReadOnlyModel } from 'src/app/api/models/trainees/registration-status-read-only.model';\nimport { IQualifyingExamReadOnlyModel } from 'src/app/api/models/examinations/qualifying-exam-read-only.model';\nimport { QualifyingExamService } from 'src/app/api/services/examinations/qualifying-exam.service';\n\nexport interface ICertification extends ICertificationReadOnlyModel {\n  status?: string;\n}\n\nexport interface IDashboardState {\n  certificates: ICertificationReadOnlyModel[];\n  registrationStatus: IRegistrationStatusReadOnlyModel | null;\n  alertsAndNotices: IQualifyingExamReadOnlyModel | undefined;\n  programs: IProgramReadOnlyModel;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IDashboardState>('dashboard');\n\n@State({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    certificates: [],\n    registrationStatus: null,\n    alertsAndNotices: undefined,\n    programs: {\n      programName: '',\n      programDirector: '',\n      programNumber: '',\n      exam: '',\n      clinicalLevel: '',\n      city: '',\n      state: '',\n    },\n  },\n})\n@Injectable()\nexport class DashboardState {\n  constructor(\n    private programsService: ProgramsService,\n    private certificationsService: CertificationsService,\n    private examService: ExamService,\n    private globalDialogService: GlobalDialogService,\n    private qualifyingExamService: QualifyingExamService\n  ) {}\n  // trainee\n  @Action(GetDashboardProgramInformation) getDashboardProgramInformation(\n    ctx: StateContext<IDashboardState>\n  ) {\n    const state = ctx.getState();\n    return this.programsService.retrieveProgramReadOnly_GetByUserId().pipe(\n      tap((result: IProgramReadOnlyModel) => {\n        const res = result as IProgramReadOnlyModel;\n        ctx.patchState({\n          programs: res,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        return of(errors);\n      })\n    );\n  }\n\n  // surgeon\n  @Action(GetDashboardCertificationInformation)\n  getDashboardCertificationInformation(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.certificationsService\n      .retrieveCertificationReadOnly_GetByUserId()\n      .pipe(\n        tap((result: ICertificationReadOnlyModel[]) => {\n          const res = result as ICertification[];\n          res.forEach((cert) => {\n            if (\n              cert.isClinicallyInactive !== null &&\n              cert.isClinicallyInactive !== undefined\n            ) {\n              cert.status = cert.isClinicallyInactive\n                ? 'Clinically Inactive'\n                : 'Active';\n            }\n          });\n          ctx.patchState({\n            certificates: res,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetTraineeRegistrationStatus)\n  getTraineeRegistrationStatus(\n    ctx: StateContext<IDashboardState>,\n    payload: GetTraineeRegistrationStatus\n  ) {\n    const state = ctx.getState();\n    return this.examService\n      .retrieveRegistrationStatusReadOnly_GetByExamCode(payload.examCode)\n      .pipe(\n        tap((result: IRegistrationStatusReadOnlyModel) => {\n          ctx.patchState({\n            registrationStatus: result,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetAlertsAndNotices)\n  getAlertsAndNotices(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.qualifyingExamService.retrieveQualifyingExamReadOnly_Get().pipe(\n      tap((result: IQualifyingExamReadOnlyModel) => {\n        const alertsAndNotices = result as IQualifyingExamReadOnlyModel;\n        ctx.patchState({\n          alertsAndNotices: alertsAndNotices,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        this.globalDialogService.closeOpenDialog();\n        return of(errors);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 22
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "ICertificationReadOnlyModel"
    },
    {
      "name": "ICertificationReadOnlyModel",
      "id": "interface-ICertificationReadOnlyModel-90eda7159cb5a3301479c8c8f23afa3449d1d0992f2d8d079f8e5d04cb0d7a6609c5eca3ce1f341ecf9c5bc17410ed98a6a0e78f26c4a2eb863c0e68c794e84d",
      "file": "src/app/api/models/surgeons/certification-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICertificationReadOnlyModel {\r\n    speciality: string;\r\n    certificateId: string;\r\n    initialCertificationDate: string;\r\n    endDateDisplay: string;\r\n    isClinicallyInactive: number;\r\n}\r\n",
      "properties": [
        {
          "name": "certificateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "endDateDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "initialCertificationDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "isClinicallyInactive",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "speciality",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IClinicalActivityReadOnlyModel",
      "id": "interface-IClinicalActivityReadOnlyModel-8a77fcf2e8aa0b8f9b68b17a4016524405a1b371020335068c89b1c799c0dad8ae00f47f0b1c0ce0844bcd38cb01b15a50993e0f6fa27d2814aa3d9e63fae2a7",
      "file": "src/app/api/models/picklists/clinical-activity-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IClinicalActivityReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n    isCredit: boolean;\r\n    isEssential: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "isEssential",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IClinicalLevelReadOnlyModel",
      "id": "interface-IClinicalLevelReadOnlyModel-afbec9d8818ce12b67b22fd35cc4c8423e2c559d9a0732e21c7366bf97bfbdf6b435f7c59eb70024a7336b5985f2d84f6d88ebe410a7777d60c79c3657a2747d",
      "file": "src/app/api/models/picklists/clinical-level-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IClinicalLevelReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICmeAdjustment",
      "id": "interface-ICmeAdjustment-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "properties": [
        {
          "name": "credits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "rowStyle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 39
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "ICmeAdjustmentReadOnlyModel"
    },
    {
      "name": "ICmeAdjustmentReadOnlyModel",
      "id": "interface-ICmeAdjustmentReadOnlyModel-269e078dd99e20c96d1261228be45a45ee1eb1d2036255d24f53833dde7090c9e4923122759e58086ecb1985d8a82003781d79db3161a604610a41f02f477248",
      "file": "src/app/api/models/continuingmedicaleducation/cme-adjustment-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICmeAdjustmentReadOnlyModel {\r\n    cmeId: number;\r\n    userId: number;\r\n    date: string;\r\n    description: string;\r\n    creditsTotal: number;\r\n    creditsSA: number;\r\n    issuedBy: string;\r\n    creditExpDate: string;\r\n}\r\n",
      "properties": [
        {
          "name": "cmeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "creditExpDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "creditsSA",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "creditsTotal",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "issuedBy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICmeCredit",
      "id": "interface-ICmeCredit-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "properties": [
        {
          "name": "cmeDirect",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "credits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "rowStyle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 35
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "ICmeCreditReadOnlyModel"
    },
    {
      "name": "ICmeCreditReadOnlyModel",
      "id": "interface-ICmeCreditReadOnlyModel-ef906e2e7cd9bf041c97661d1225688bee4f9b2244811faffc17bfe41c9e8efa7b88613833a0e88d802c97005f90f86dc84340a9e2f532a8128734ea410774a8",
      "file": "src/app/api/models/continuingmedicaleducation/cme-credit-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICmeCreditReadOnlyModel {\r\n    cmeId: number;\r\n    userId: number;\r\n    date: string;\r\n    description: string;\r\n    creditsTotal: number;\r\n    creditsSA: number;\r\n    cMEDirect: number;\r\n    creditExpDate: string;\r\n}\r\n",
      "properties": [
        {
          "name": "cMEDirect",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "cmeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "creditExpDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "creditsSA",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "creditsTotal",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICmeSummaryRow",
      "id": "interface-ICmeSummaryRow-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "properties": [
        {
          "name": "credits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "rowLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "rowStyle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 24
        },
        {
          "name": "saCredits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | string",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IConflictReadOnlyModel",
      "id": "interface-IConflictReadOnlyModel-73d09b7e8cbf54138335925be1db9e5aed50fbcf4263716255a9ac40b07f96696793f4152f7abebd98e15d4e69eecbc135fed46e98a27154ba018ef1f230b9b0",
      "file": "src/app/api/models/examiners/conflict-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IConflictReadOnlyModel {\r\n    id: number;\r\n    documentName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IContinuingMedicalEducation",
      "id": "interface-IContinuingMedicalEducation-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "properties": [
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "cmeAdjustments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICmeAdjustment[]",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "cmeCredits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICmeCredit[]",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "cmeDroppingCredits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDroppingCmeCredits | undefined",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "cmeSummary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICmeSummaryRow[]",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 49
        },
        {
          "name": "selectedCmeCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICmeCredit | undefined",
          "optional": false,
          "description": "",
          "line": 47
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IContinuousCertication",
      "id": "interface-IContinuousCertication-14ca569a4c67a9b8414d79134b03e5a7eae43c4d590fa5cc90895754d33523572771e1c6f5fea628b6a2a33832b492396d881dfef0dd16b32d7db04fcbc1c093",
      "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { OutcomeRegistriesService } from 'src/app/api/services/continuouscertification/outcome-registries.service';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport {\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from './continuous-certification.actions';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport interface IContinuousCertication {\n  outcomeRegistries?: IOutcomeRegistryModel;\n  errors?: IFormErrors | null;\n}\n\nexport const CONTCERT_STATE_TOKEN = new StateToken<IContinuousCertication>(\n  'continuous_certification'\n);\n\n@State<IContinuousCertication>({\n  name: CONTCERT_STATE_TOKEN,\n  defaults: {\n    outcomeRegistries: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuousCertificationState {\n  constructor(private outcomeRegistriesService: OutcomeRegistriesService) {}\n\n  @Action(GetOutcomeRegistries)\n  getOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>\n  ): Observable<IOutcomeRegistryModel | undefined> {\n    if (ctx.getState().outcomeRegistries) {\n      return of(ctx.getState()?.outcomeRegistries);\n    }\n\n    return this.outcomeRegistriesService\n      .retrieveOutcomeRegistry_GetByUserId()\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateOutcomeRegistries)\n  updateOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    { payload }: UpdateOutcomeRegistries\n  ) {\n    ctx.patchState({\n      outcomeRegistries: payload,\n    });\n\n    return this.outcomeRegistriesService.updateOutcomeRegistry(payload).pipe(\n      tap((outcomeRegistries: IOutcomeRegistryModel) => {\n        ctx.patchState({\n          outcomeRegistries,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        return of(errors);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "outcomeRegistries",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IOutcomeRegistryModel",
          "optional": true,
          "description": "",
          "line": 15
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ICountryReadOnlyModel",
      "id": "interface-ICountryReadOnlyModel-65b57879b84a2615b8e3ec4da90b02b0364ed67974b1c47d8b3b44d19cec1e31ba34949fce358beaa651367941efbac599bee553d67640469784fad1cea90162",
      "file": "src/app/api/models/picklists/country-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ICountryReadOnlyModel {\r\n    itemValue: string | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDashboardRosterReadOnlyModel",
      "id": "interface-IDashboardRosterReadOnlyModel-b8f34b57f09226091fda9433c7840d6e01e817ff57312caec0764a295f8ac371974e29f2966d682d34fa3cd78c107c2a60fdc8cb384d8b7b7728784757af66b7",
      "file": "src/app/api/models/scoring/dashboard-roster-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IDashboardRosterReadOnlyModel {\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    sessionNumber: number;\r\n    startTime: string;\r\n    endTime: string;\r\n}\r\n",
      "properties": [
        {
          "name": "endTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "firstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "middleName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "sessionNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "startTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDashboardState",
      "id": "interface-IDashboardState-152866538edeb10155ac49e8061bf4f4d24623e6983c4c61167be099a3d4aa97d80f77445ed92af4ea46279c138fbfa3182150ff3c798cf02e7cc7de45c52979",
      "file": "src/app/state/dashboard/dashboard.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IProgramReadOnlyModel } from 'src/app/api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from 'src/app/api/models/surgeons/certification-read-only.model';\nimport { ProgramsService } from 'src/app/api/services/trainees/programs.service';\nimport { CertificationsService } from 'src/app/api/services/surgeons/certifications.service';\nimport {\n  GetAlertsAndNotices,\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n  GetTraineeRegistrationStatus,\n} from './dashboard.actions';\nimport { catchError, of, tap } from 'rxjs';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { ExamService } from 'src/app/api/services/trainees/exam.service';\nimport { IRegistrationStatusReadOnlyModel } from 'src/app/api/models/trainees/registration-status-read-only.model';\nimport { IQualifyingExamReadOnlyModel } from 'src/app/api/models/examinations/qualifying-exam-read-only.model';\nimport { QualifyingExamService } from 'src/app/api/services/examinations/qualifying-exam.service';\n\nexport interface ICertification extends ICertificationReadOnlyModel {\n  status?: string;\n}\n\nexport interface IDashboardState {\n  certificates: ICertificationReadOnlyModel[];\n  registrationStatus: IRegistrationStatusReadOnlyModel | null;\n  alertsAndNotices: IQualifyingExamReadOnlyModel | undefined;\n  programs: IProgramReadOnlyModel;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IDashboardState>('dashboard');\n\n@State({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    certificates: [],\n    registrationStatus: null,\n    alertsAndNotices: undefined,\n    programs: {\n      programName: '',\n      programDirector: '',\n      programNumber: '',\n      exam: '',\n      clinicalLevel: '',\n      city: '',\n      state: '',\n    },\n  },\n})\n@Injectable()\nexport class DashboardState {\n  constructor(\n    private programsService: ProgramsService,\n    private certificationsService: CertificationsService,\n    private examService: ExamService,\n    private globalDialogService: GlobalDialogService,\n    private qualifyingExamService: QualifyingExamService\n  ) {}\n  // trainee\n  @Action(GetDashboardProgramInformation) getDashboardProgramInformation(\n    ctx: StateContext<IDashboardState>\n  ) {\n    const state = ctx.getState();\n    return this.programsService.retrieveProgramReadOnly_GetByUserId().pipe(\n      tap((result: IProgramReadOnlyModel) => {\n        const res = result as IProgramReadOnlyModel;\n        ctx.patchState({\n          programs: res,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        return of(errors);\n      })\n    );\n  }\n\n  // surgeon\n  @Action(GetDashboardCertificationInformation)\n  getDashboardCertificationInformation(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.certificationsService\n      .retrieveCertificationReadOnly_GetByUserId()\n      .pipe(\n        tap((result: ICertificationReadOnlyModel[]) => {\n          const res = result as ICertification[];\n          res.forEach((cert) => {\n            if (\n              cert.isClinicallyInactive !== null &&\n              cert.isClinicallyInactive !== undefined\n            ) {\n              cert.status = cert.isClinicallyInactive\n                ? 'Clinically Inactive'\n                : 'Active';\n            }\n          });\n          ctx.patchState({\n            certificates: res,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetTraineeRegistrationStatus)\n  getTraineeRegistrationStatus(\n    ctx: StateContext<IDashboardState>,\n    payload: GetTraineeRegistrationStatus\n  ) {\n    const state = ctx.getState();\n    return this.examService\n      .retrieveRegistrationStatusReadOnly_GetByExamCode(payload.examCode)\n      .pipe(\n        tap((result: IRegistrationStatusReadOnlyModel) => {\n          ctx.patchState({\n            registrationStatus: result,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetAlertsAndNotices)\n  getAlertsAndNotices(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.qualifyingExamService.retrieveQualifyingExamReadOnly_Get().pipe(\n      tap((result: IQualifyingExamReadOnlyModel) => {\n        const alertsAndNotices = result as IQualifyingExamReadOnlyModel;\n        ctx.patchState({\n          alertsAndNotices: alertsAndNotices,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        this.globalDialogService.closeOpenDialog();\n        return of(errors);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "alertsAndNotices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IQualifyingExamReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "certificates",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICertificationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "programs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IProgramReadOnlyModel",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "registrationStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRegistrationStatusReadOnlyModel | null",
          "optional": false,
          "description": "",
          "line": 27
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDegreeReadOnlyModel",
      "id": "interface-IDegreeReadOnlyModel-cf464e49bb408220424d84d52df0fd6e08fcde29d88922583c522a2287901351867c8f557fe1983ad76520f71cf91f0deb37370ffbc3be0860385c69b1e9e9c6",
      "file": "src/app/api/models/picklists/degree-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IDegreeReadOnlyModel {\r\n    itemDisplay: string;\r\n    itemValue: number;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDisplayUserProfile",
      "id": "interface-IDisplayUserProfile-365f5dfce23a26d05a334dbebfc8c243b505c2fcccd079ee731766cbfda84dde4598ce243167b3f265d129d110ec62acce80584db533c7fc475462a691b70993",
      "file": "src/app/personal-profile/personal-profile.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { debounceTime, Observable, take } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { NgxMaskDirective } from 'ngx-mask';\nimport { NgxMaskPipe } from 'ngx-mask';\nimport { provideNgxMask } from 'ngx-mask';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport {\n  ClearUserProfileErrors,\n  GetUserProfile,\n  UpdateUserProfile,\n  UserProfileSelectors,\n} from '../state';\nimport { IUserProfile } from '../state';\nimport {\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport {\n  IEthnicityReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n} from '../api';\n\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { SuccessFailModalComponent } from '../shared/components/success-fail-modal/success-fail-modal.component';\n\nimport '../../web-components';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { CalendarModule } from 'primeng/calendar';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { IFormErrors } from '../shared/common';\nimport { FormErrorsComponent } from '../shared/components/form-errors/form-errors.component';\nimport { SetUnsavedChanges } from '../state/application/application.actions';\n\ninterface IDisplayUserProfile extends IUserProfile {\n  gender: string;\n  countryDisplay: string;\n  birthCountryDisplay: string;\n  citizenshipCountryDisplay: string;\n  firstLanguage: string;\n  bestLanguage: string;\n  ethnicityDisplay: string;\n  raceDisplay: string;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-personal-profile',\n  templateUrl: './personal-profile.component.html',\n  styleUrls: ['./personal-profile.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    TranslateModule,\n    ProfileHeaderComponent,\n    SuccessFailModalComponent,\n    NgxMaskDirective,\n    NgxMaskPipe,\n    InputTextModule,\n    DropdownModule,\n    InputMaskModule,\n    CalendarModule,\n    CheckboxModule,\n    FormErrorsComponent,\n  ],\n  providers: [provideNgxMask()],\n})\nexport class PersonalProfileComponent implements OnInit, OnDestroy {\n  // TODO: [Joe] set up national provider identifier (NPI) report button\n\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  @Select(UserProfileSelectors.errors) errors$:\n    | Observable<IFormErrors>\n    | undefined;\n\n  @Select(PicklistsSelectors.userPicklistValues) userPicklistValues$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.countries) countries$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.ethnicities) ethnicities$:\n    | Observable<IEthnicityReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.genders) genders$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.languages) languages$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.races) races$:\n    | Observable<IRaceReadOnlyModel[]>\n    | undefined;\n\n  clearErrors = new ClearUserProfileErrors();\n\n  mailingStates: IStateReadOnlyModel[] = [];\n  birthStates: IStateReadOnlyModel[] = [];\n\n  user!: IDisplayUserProfile;\n\n  isEdit = false;\n\n  userProfileForm: FormGroup = new FormGroup({\n    absId: new FormControl('', []), //readonly\n    npi: new FormControl('', []), //readonly\n    emailAddress: new FormControl('', []), //readonly\n    birthState: new FormControl('', []), //sometimes no options\n    state: new FormControl('', []), //sometimes no options\n    street2: new FormControl('', []), //sometimes no valid value\n    suffix: new FormControl('', []), //sometimes no valid value\n    mobilePhoneNumber: new FormControl('', []), // typically not required in forms\n    middleName: new FormControl('', [\n      Validators.minLength(1),\n      Validators.maxLength(1),\n    ]), // typically not required in forms\n    profilePicture: new FormControl('', []), //currently no input\n    bestLanguageId: new FormControl('', [Validators.required]),\n    birthCity: new FormControl('', [Validators.required]),\n    birthCountry: new FormControl('', [Validators.required]),\n    birthDate: new FormControl(new Date(), [Validators.required]),\n    city: new FormControl('', [Validators.required]),\n    country: new FormControl('', [Validators.required]),\n    countryCitizenship: new FormControl('', [Validators.required]),\n    displayName: new FormControl('', [Validators.required]),\n    ethnicity: new FormControl('', [Validators.required]),\n    firstLanguageId: new FormControl('', [Validators.required]),\n    firstName: new FormControl('', [Validators.required]),\n    genderId: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    officePhoneNumber: new FormControl('', [Validators.required]),\n    race: new FormControl('', [Validators.required]),\n    receiveComms: new FormControl(false, [Validators.required]),\n    street1: new FormControl('', [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n    zipCode: new FormControl('', [Validators.required]),\n  });\n\n  isSubmitted = false;\n\n  constructor(\n    private _store: Store,\n    public globalDialogService: GlobalDialogService\n  ) {\n    this.userProfileForm.controls['state'].disable();\n    this.userProfileForm.controls['birthState'].disable();\n    this.user$\n      ?.pipe(debounceTime(300), untilDestroyed(this))\n      .subscribe((user: IUserProfile) => {\n        if (!user) {\n          this.isEdit = true;\n        }\n        const languages = this._store.selectSnapshot(\n          PicklistsSelectors.slices.languages\n        ) as IPickListItem[];\n\n        const genders = this._store.selectSnapshot(\n          PicklistsSelectors.slices.genders\n        ) as IPickListItem[];\n\n        //countries\n        const countries = this._store.selectSnapshot(\n          PicklistsSelectors.slices.countries\n        ) as IPickListItem[];\n\n        //ethnicities\n        const ethnicities = this._store.selectSnapshot(\n          PicklistsSelectors.slices.ethnicities\n        ) as IEthnicityReadOnlyModel[];\n\n        //races\n        const races = this._store.selectSnapshot(\n          PicklistsSelectors.slices.races\n        ) as IRaceReadOnlyModel[];\n\n        this.user = {\n          ...user,\n          gender:\n            genders.find((x) => x.itemValue === user?.genderId)\n              ?.itemDescription || '',\n          countryDisplay:\n            countries.find((x) => x.itemValue === user?.country)\n              ?.itemDescription || '',\n          birthCountryDisplay:\n            countries.find((x) => x.itemValue === user?.birthCountry)\n              ?.itemDescription || '',\n          citizenshipCountryDisplay:\n            countries.find((x) => x.itemValue === user?.countryCitizenship)\n              ?.itemDescription || '',\n          firstLanguage:\n            languages.find((x) => x.itemValue === user?.firstLanguageId)\n              ?.itemDescription || '',\n          bestLanguage:\n            languages.find((x) => x.itemValue === user?.bestLanguageId)\n              ?.itemDescription || '',\n          ethnicityDisplay:\n            ethnicities.find((x) => x.itemValue === user?.ethnicity)\n              ?.itemDescription || '',\n          raceDisplay:\n            races.find((x) => x.itemValue === user?.race)?.itemDescription ||\n            '',\n        } as IDisplayUserProfile;\n\n        this._store.dispatch(new GetStateList(user.country)).subscribe();\n        this.mailingStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this._store.dispatch(new GetStateList(user.birthCountry));\n        this.birthStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this.userProfileForm.patchValue({ ...user });\n        const date = new Date(Date.parse(user?.birthDate));\n        if (!isNaN(date as unknown as number)) {\n          this.userProfileForm.get('birthDate')?.patchValue(date);\n        }\n      });\n\n    this.userProfileForm\n      .get('country')\n      ?.valueChanges.pipe(debounceTime(300), untilDestroyed(this))\n      .subscribe((value) => {\n        this._store\n          .dispatch(new GetStateList(value))\n          .pipe(take(1))\n          .subscribe(() => {\n            this.mailingStates = this._store.selectSnapshot(\n              PicklistsSelectors.slices.states\n            ) as IStateReadOnlyModel[];\n            if (this.mailingStates.length > 0) {\n              this.userProfileForm.controls['state'].enable();\n            } else {\n              this.userProfileForm.controls['state'].disable();\n            }\n          });\n      });\n\n    this.userProfileForm\n      .get('birthCountry')\n      ?.valueChanges.subscribe((value) => {\n        this._store\n          .dispatch(new GetStateList(value))\n          .pipe(take(1))\n          .subscribe(() => {\n            this.birthStates = this._store.selectSnapshot(\n              PicklistsSelectors.slices.states\n            ) as IStateReadOnlyModel[];\n            if (this.birthStates.length > 0) {\n              this.userProfileForm.controls['birthState'].enable();\n            } else {\n              this.userProfileForm.controls['birthState'].disable();\n            }\n          });\n      });\n  }\n  ngOnDestroy(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n  }\n\n  ngOnInit(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n\n    this.userProfileForm.valueChanges.subscribe(() => {\n      const isDirty = this.userProfileForm.dirty;\n      this._store.dispatch(new SetUnsavedChanges(isDirty && !this.isSubmitted));\n    });\n  }\n\n  resetFormDefaults() {\n    this.userProfileForm.patchValue({ ...this.user });\n    if (this.user?.birthDate) {\n      const date = new Date(Date.parse(this.user.birthDate));\n      if (!isNaN(date as unknown as number)) {\n        this.userProfileForm.get('birthDate')?.patchValue(date);\n      }\n    }\n  }\n\n  toggleEdit() {\n    this.isEdit = !this.isEdit;\n    this.resetFormDefaults();\n    this._store.dispatch(new SetUnsavedChanges(false));\n    this._store.dispatch(new ClearUserProfileErrors());\n  }\n\n  onSubmit() {\n    const model = this.userProfileForm.value;\n    model.birthDate = new Date(model.birthDate).toISOString();\n\n    this._store\n      .dispatch(new UpdateUserProfile(model))\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (!res.userProfile.errors) {\n          this.isSubmitted = true;\n          this.isEdit = false;\n          this._store.dispatch(new SetUnsavedChanges(false));\n        } else {\n          this.userProfileForm.get('userConfrimed')?.setValue(false);\n        }\n      });\n  }\n}\n",
      "properties": [
        {
          "name": "bestLanguage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "birthCountryDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "citizenshipCountryDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "countryDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "ethnicityDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "firstLanguage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "gender",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "raceDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 64
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "IUserProfile"
    },
    {
      "name": "IDocumentModel",
      "id": "interface-IDocumentModel-f2faaa6ee42f5be880cc7393d4ff2f57eae1da072392c3624f3128b20ae069b9b41242ac28516bc9eb8d5c911b3ae08deaaa6e23d3c9eb6312ae9f7dded01f9d",
      "file": "src/app/api/models/documents/document.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IDocumentModel {\r\n    id: number;\r\n    userId: number;\r\n    streamId: string;\r\n    documentTypeId: number;\r\n    documentName: string;\r\n    documentType: string;\r\n    internalViewOnly: boolean;\r\n    createdByUserId: number;\r\n    uploadedBy: string;\r\n    uploadedDateUtc: string;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "documentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "documentTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "internalViewOnly",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "streamId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "uploadedBy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "uploadedDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDocumentReadOnlyModel",
      "id": "interface-IDocumentReadOnlyModel-371cdb65fe77566adcfd8755f938f9eeea18cee6c0422b09bcdcbb1e463367916bbfb5ca0203bf3ccba638e2e02e18f0fe4dcd6667938885fb9d89437e83304d",
      "file": "src/app/api/models/documents/document-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IDocumentReadOnlyModel {\r\n    id: number;\r\n    userId: number;\r\n    streamId: string;\r\n    documentTypeId: number;\r\n    documentName: string;\r\n    documentType: string;\r\n    internalViewOnly: boolean;\r\n    uploadedBy: string;\r\n    uploadedDateUtc: string;\r\n}\r\n",
      "properties": [
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "documentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "documentTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "internalViewOnly",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "streamId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "uploadedBy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "uploadedDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDocuments",
      "id": "interface-IDocuments-821981f4789a8c8598c8af853a05b97cd02415fc7232e4d56ed8e43df71d73fad668d9b5689f7bacb984f48887f5996485f46267eca3a88ef1e507a797fa0ab5",
      "file": "src/app/state/documents/documents.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { IDocumentReadOnlyModel } from 'src/app/api/models/documents/document-read-only.model';\nimport { DocumentService } from 'src/app/api/services/documents/document.service';\nimport {\n  DeleteCertificate,\n  DeleteDocument,\n  DownloadDocument,\n  GetAllDocuments,\n  UploadDocument,\n} from './documents.actions';\nimport { UserCertificateService } from 'src/app/api/services/medicaltraining/user-certificate.service';\nimport { GetUserCertificates } from '../medical-training/medical-training.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IDocuments {\n  documents: IDocumentReadOnlyModel[] | undefined;\n  errors?: IFormErrors;\n}\n\nexport const DOCUMENTS_STATE_TOKEN = new StateToken<IDocuments>('documents');\n\n@State<IDocuments>({\n  name: DOCUMENTS_STATE_TOKEN,\n  defaults: {\n    documents: undefined,\n  },\n})\n@Injectable()\nexport class DocumentsState {\n  constructor(\n    private documentService: DocumentService,\n    private userCertificateService: UserCertificateService,\n    private globalDialogService: GlobalDialogService,\n    private _store: Store\n  ) {}\n\n  @Action(GetAllDocuments)\n  getAllDocuments({\n    patchState,\n  }: StateContext<IDocuments>): Observable<IDocumentReadOnlyModel[]> {\n    return this.documentService.retrieveDocumentReadOnly_GetByUserId().pipe(\n      tap((documents) => {\n        patchState({\n          documents,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(DownloadDocument)\n  downloadDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: { documentId: number; documentName: string } }\n  ): Observable<Blob> {\n    this.globalDialogService.showLoading();\n    return this.documentService\n      .downloadDocument_GetById(action.payload.documentId)\n      .pipe(\n        tap((blob) => {\n          const url = window.URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = action.payload.documentName;\n          link.click();\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Documents Store', error);\n          console.error(error);\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Document download failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(DeleteCertificate)\n  DeleteCertificate(\n    ctx: StateContext<IDocuments>,\n    action: { payload: number }\n  ): Observable<void> {\n    const id = action.payload;\n    this.globalDialogService.showLoading();\n    return this.userCertificateService.deleteUserCertificate(id).pipe(\n      tap(() => {\n        this._store.dispatch(new GetUserCertificates(true));\n        this._store.dispatch(new GetAllDocuments());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Document Deleted Successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(DeleteDocument)\n  deleteDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: number }\n  ): Observable<void> {\n    const id = action.payload;\n    this.globalDialogService.showLoading();\n    return this.documentService.deleteDocument(id).pipe(\n      tap(() => {\n        this._store.dispatch(new GetUserCertificates(true));\n        this._store.dispatch(new GetAllDocuments());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Document Deleted Successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(UploadDocument)\n  uploadDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: { model: FormData } }\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.userCertificateService\n      .createUserCertificate(action.payload.model)\n      .pipe(\n        tap(() => {\n          this._store.dispatch(new GetUserCertificates(true));\n          this._store.dispatch(new GetAllDocuments());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Document uploaded successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Documents Store', error);\n          console.error(error);\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Document uploaded failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n}\n",
      "properties": [
        {
          "name": "documents",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDocumentReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors",
          "optional": true,
          "description": "",
          "line": 21
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDocumentTypeReadOnlyModel",
      "id": "interface-IDocumentTypeReadOnlyModel-d5f315b52a5bcdb5d155ec91711c3d614d62ca505be0b07ae06d2ea8b38ba21398b5630db9bf47e38f1fab5b3eeea5ea614034545961bd8b88c9af23142772ba",
      "file": "src/app/api/models/picklists/document-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IDocumentTypeReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDropdown",
      "id": "interface-IDropdown-a7c8eee7da20db59fdc8ae69787b73a480c191627a9d957268202dea75b96200a82eaef63933369858c887bfbedce7bff349e7b5f5f02b221fa192780d92170b",
      "file": "src/app/shared/components/grid/grid-options.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGridOptions {\n  showFilter: boolean;\n  filterOn: string;\n  filterType?: string;\n  filterOptions?: IDropdown[];\n  placeholder?: string;\n  noFilteredResultsMessage?: string;\n}\n\nexport interface IDropdown {\n  value: string;\n  label: string;\n}\n",
      "properties": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IDroppingCmeCredits",
      "id": "interface-IDroppingCmeCredits-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "properties": [
        {
          "name": "credits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "saCredits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 29
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IError",
      "id": "interface-IError-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
      "file": "src/app/state/auth/auth.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { IAppUserReadOnlyModel } from '../../api';\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IRefreshToken {\n  refreshToken: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  [key: string]: any;\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n  isBusy: boolean;\n  isPasswordReset: boolean;\n  passwordResetComplete: boolean;\n  isAuthenticated: boolean;\n}\n",
      "properties": [
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object | null",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "traceId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IEthnicityReadOnlyModel",
      "id": "interface-IEthnicityReadOnlyModel-fe750daa617faef9d10efd8bb583c44837e44e20c39cb881adf07a9c02ebc433fb9426b8fa338f7e788c6ecbf5468754afc77417b1e08a3c9316db2cb48ac8a3",
      "file": "src/app/api/models/picklists/ethnicity-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IEthnicityReadOnlyModel {\r\n    itemValue: string | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamDetailReadOnlyModel",
      "id": "interface-IExamDetailReadOnlyModel-eafad3133826cd963aef8a3b3b97186c5591e26129f0c92d6bb97c42b8978f7e073c99b711b6f73b71ebe1d98634dc0bea67c0903195cf79d8b6cfd301fad517",
      "file": "src/app/api/models/examinations/exam-detail-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamDetailReadOnlyModel {\r\n    userId: number;\r\n    examinationId: number;\r\n    reportOfPerformancePdfStreamId: string;\r\n    score: number;\r\n}\r\n",
      "properties": [
        {
          "name": "examinationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "reportOfPerformancePdfStreamId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "score",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamHistory",
      "id": "interface-IExamHistory-3cb8df5b5fc872a4604f407c72a5f08fd92afb5d864b27611f356c7f6c97c8d6d4dc3f03c2737e8ce379960b1191dfde494d641db8f98897cca827c8e2f97088",
      "file": "src/app/state/exam-history/exam-history.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { GetExamHistory } from './exam-history.actions';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { IExamHistoryReadOnlyModel } from 'src/app/api/models/examinations/exam-history-read-only.model';\n\nexport interface IExamHistory {\n  examHistory: IExamHistoryReadOnlyModel[];\n  errors?: IFormErrors | null;\n}\n\nexport const EXAM_HISTORY_STATE_TOKEN = new StateToken<IExamHistory>(\n  'examHistory'\n);\n\n@State<IExamHistory>({\n  name: EXAM_HISTORY_STATE_TOKEN,\n  defaults: {\n    examHistory: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamHistoryState {\n  constructor(private examinationService: ExaminationsService) {}\n\n  @Action(GetExamHistory)\n  getExamHistory(\n    ctx: StateContext<IExamHistory>\n  ): Observable<IExamHistoryReadOnlyModel[] | undefined> {\n    // if (ctx.getState()?.examHistory) {\n    //   return of(ctx.getState()?.examHistory);\n    // }\n\n    return this.examinationService\n      .retrieveExamHistoryReadOnly_GetByUserId()\n      .pipe(\n        tap((examHistory: IExamHistoryReadOnlyModel[]) => {\n          examHistory.forEach((exam) => {\n            if (exam.result === 'P') exam.result = 'Pass';\n            else if (exam.result === 'F') exam.result = 'Fail';\n          });\n          ctx.patchState({\n            examHistory,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n}\n",
      "properties": [
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "examHistory",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamHistoryReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamHistoryReadOnlyModel",
      "id": "interface-IExamHistoryReadOnlyModel-90901654cd5eb54e64c0b88252a84be39b0d141abf9c5b9c68a5de764dc5d1673b93f0f913019e85e3deba347c283755b97d7a7cb090c457eabf35838e70104a",
      "file": "src/app/api/models/examinations/exam-history-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamHistoryReadOnlyModel {\r\n    userId: number;\r\n    examinationId: number;\r\n    examinationName: string;\r\n    examinationDate: string;\r\n    documentId: number;\r\n    status: string;\r\n    result: string;\r\n}\r\n",
      "properties": [
        {
          "name": "documentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examinationDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "examinationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "examinationName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "result",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamineeReadOnlyModel",
      "id": "interface-IExamineeReadOnlyModel-1c7f89e0dd0bf49a1b5106a5dfd19c27ca5cedcd0b83d2ac3cac7dffaa25ca80f50c674bad8632bd799ab80a22e48c414010371c91ba2992be43a8f44273abf4",
      "file": "src/app/api/models/scoring/ce/examinee-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamineeReadOnlyModel {\r\n    examScheduleId: number;\r\n    fullName: string;\r\n    examDate: string;\r\n    cases: any[];\r\n    examineeUserId: number;\r\n    examScoringId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "cases",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "examDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "examineeUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "examScoringId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "fullName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamOverviewReadOnlyModel",
      "id": "interface-IExamOverviewReadOnlyModel-001901d19f14d16ee248bc5dc1c40955a12019582128d217cf53ee6d30960a94f67066dd1c8ab30e5508d73dfc53a4b07102348fcef054f46e81702539a06155",
      "file": "src/app/api/models/examinations/exam-overview-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamOverviewReadOnlyModel {\r\n    examName: string;\r\n    regOpenDate: string;\r\n    regEndDate: string;\r\n    examStartDate: string;\r\n    examEndDate: string;\r\n}\r\n",
      "properties": [
        {
          "name": "examEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "examStartDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "regEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "regOpenDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamProcess",
      "id": "interface-IExamProcess-c7a5bd9b2a9145607203f42004298500954ecda4aa00a3b633bcb67c4d0fe107374f9f71119f210ec41c6ad481dcf0dbfab5724b54fee61af49e39410cbebe76",
      "file": "src/app/state/exam-process/exam-process.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { GetExamDirectory } from './exam-process.actions';\nimport { IExamOverviewReadOnlyModel } from 'src/app/api/models/examinations/exam-overview-read-only.model';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IExamProcess {\n  examDirectory: IExamOverviewReadOnlyModel[];\n  errors?: IFormErrors | null;\n}\n\nexport const EXAM_PROCESS_STATE_TOKEN = new StateToken<IExamProcess>(\n  'examProcess'\n);\n\n@State<IExamProcess>({\n  name: EXAM_PROCESS_STATE_TOKEN,\n  defaults: {\n    examDirectory: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamProcessState {\n  constructor(\n    private examinationsService: ExaminationsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetExamDirectory)\n  getExamDirectory(\n    ctx: StateContext<IExamProcess>\n  ): Observable<IExamOverviewReadOnlyModel[]> {\n    this.globalDialogService.showLoading();\n    const state = ctx.getState();\n    if (state && state.examDirectory.length > 0) {\n      this.globalDialogService.closeOpenDialog();\n      return of(ctx.getState().examDirectory);\n    }\n    return this.examinationsService.retrieveExamOverviewReadOnly_GetAll().pipe(\n      tap((examDirectory) => {\n        ctx.patchState({\n          examDirectory,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((error) => {\n        console.error('------- In Exam Process', error);\n        console.error(error);\n        this.globalDialogService.closeOpenDialog();\n        return of(error);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "examDirectory",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamOverviewReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamScoreModel",
      "id": "interface-IExamScoreModel-ad3f48d6ebfc3006ada7e06a49ed0814860230c9459f8386ce5d5f281078dc9431f50f21cd65e2d9ca5efc3a89beaf5680c2a7bcd56239275a3991835f702f34",
      "file": "src/app/api/models/ce/exam-score.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamScoreModel {\r\n    examScheduleScoreId: number;\r\n    examScheduleId: number;\r\n    examinerUserId: number;\r\n    examinerScore: number;\r\n    submitted: boolean;\r\n    submittedDateTimeUTC: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n    lastUpdatedAtUtc: string;\r\n}\r\n",
      "properties": [
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "examinerScore",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "examinerUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "examScheduleScoreId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "submitted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "submittedDateTimeUTC",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamScoring",
      "id": "interface-IExamScoring-4147099defbdca943f8882cfbfdfa2efdbf5a47ff289b0325461b47e5888bd96c3968b7e4cb139bd5f5dcb1f313b395cd03b5047951976606b3e0ef181bfded1",
      "file": "src/app/state/exam-scoring/exam-scoring.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CaseContentsService,\n  CaseNotesService,\n  CasesService,\n  ExamSessionsService,\n  ICaseCommentModel,\n  ICaseDetailReadOnlyModel,\n  ICaseRosterReadOnlyModel,\n  IExamSessionReadOnlyModel,\n  CaseScoresService,\n  ICaseScoreReadOnlyModel,\n  ICaseScoreModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCaseRoster,\n  GetCaseContents,\n  GetCaseComment,\n  CreateCaseComment,\n  UpdateCaseComment,\n  GetExamineeList,\n  GetExamScoresList,\n  GetSelectedExamScores, // if no api call is needed create a custom selector for this\n  ClearExamScoringErrors,\n  GetRoster,\n  CreateCaseScore,\n  UpdateCaseScore,\n  DeleteCaseScore,\n  GetExaminee,\n  CreateExamScore,\n  DeleteCaseComment,\n  SkipExam,\n  ResetCaseCommentsData,\n  ResetExamScoringData,\n  GetExamTitle,\n  CreateCaseFeedback,\n  GetCaseFeedback,\n  UpdateCaseFeedback,\n  DeleteCaseFeedback,\n  GetCaseDetailsAndFeedback,\n  GetExaminerAgenda,\n  GetExaminerConflict,\n} from './exam-scoring.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { RostersService } from 'src/app/api/services/scoring/rosters.service';\nimport { IRosterReadOnlyModel } from 'src/app/api/models/scoring/roster-read-only.model';\nimport { DashboardService } from 'src/app/api/services/scoring/dashboard.service';\nimport { IDashboardRosterReadOnlyModel } from 'src/app/api/models/scoring/dashboard-roster-read-only.model';\nimport { IExamineeReadOnlyModel } from 'src/app/api/models/scoring/ce/examinee-read-only.model';\nimport { SessionService } from 'src/app/api/services/scoring/ce/session.service';\nimport { ExamScoreService } from 'src/app/api/services/ce/exam-score.service';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { Router } from '@angular/router';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { IExamTitleReadOnlyModel } from 'src/app/api/models/examinations/exam-title-read-only.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\nimport { CaseFeedbackService } from 'src/app/api/services/scoring/case-feedback.service';\nimport { IAgendaReadOnlyModel } from 'src/app/api/models/examiners/agenda-read-only.model';\nimport { AgendaService } from 'src/app/api/services/examiners/agenda.service';\nimport { ConflictService } from 'src/app/api/services/examiners/conflict.service';\nimport { IConflictReadOnlyModel } from 'src/app/api/models/examiners/conflict-read-only.model';\n\nexport interface IExamScoring {\n  examTitle: IExamTitleReadOnlyModel | undefined;\n  // examination rosters page values\n  caseRoster: ICaseRosterReadOnlyModel[] | undefined; // examination rosters page list values\n  selectedCaseContents: ICaseDetailReadOnlyModel[] | undefined; // examination rosters page details values\n  selectedCaseComment: ICaseCommentModel | undefined; // examination rosters page selected comment value\n  selectedCaseFeedback: ICaseFeedbackModel | undefined; // examination rosters page selected feedback value\n  // oral-examinations list page values\n  examineeList: IExamSessionReadOnlyModel[] | undefined; // oral-examinations list page grid values\n  // oral-examination actual exam page values\n  activeExamination: any[] | undefined; // oral-examination actual exam (includes all cases for selected exam) (no api call)\n  //Daily Exam Scores page values\n  examScoresList: IRosterReadOnlyModel[] | undefined; // Daily Exam Scores page grid values\n  selectedExamScores: ICaseScoreReadOnlyModel[] | undefined; // Daily Exam Scores page details values (no api call)\n  // misc values\n\n  roster: IRosterReadOnlyModel[] | undefined;\n  dashboardRoster: IDashboardRosterReadOnlyModel[] | undefined;\n  examinee: IExamineeReadOnlyModel | undefined;\n  examinerAgenda: IAgendaReadOnlyModel | undefined;\n  examinerConflict: IConflictReadOnlyModel | undefined;\n  errors: IFormErrors | null;\n}\n\nexport const EXAM_SCORING_STATE_TOKEN = new StateToken<IExamScoring>(\n  'examScoring'\n);\n\n@State<IExamScoring>({\n  name: EXAM_SCORING_STATE_TOKEN,\n  defaults: {\n    examTitle: undefined,\n    caseRoster: undefined,\n    selectedCaseContents: undefined,\n    selectedCaseComment: undefined,\n    examScoresList: undefined,\n    selectedExamScores: undefined,\n    examineeList: undefined,\n    activeExamination: undefined,\n    roster: undefined,\n    dashboardRoster: undefined,\n    examinee: undefined,\n    selectedCaseFeedback: undefined,\n    examinerAgenda: undefined,\n    examinerConflict: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamScoringState {\n  examDate!: string;\n\n  constructor(\n    private casesService: CasesService,\n    private caseContentsService: CaseContentsService,\n    private caseCommentsService: CaseNotesService,\n    private examScoreService: ExamScoreService,\n    private rostersService: RostersService,\n    private examSessionsService: ExamSessionsService,\n    private dashboardService: DashboardService,\n    private caseScoresService: CaseScoresService,\n    private sessionService: SessionService,\n    private examinationsService: ExaminationsService,\n    private globalDialogService: GlobalDialogService,\n    private caseFeedbackService: CaseFeedbackService,\n    private agendaService: AgendaService,\n    private conflictSerive: ConflictService,\n    private router: Router\n  ) {}\n\n  @Action(GetExamTitle)\n  getExamTitle(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const sessionId = payload.id;\n\n    if (ctx.getState()?.examTitle) {\n      return of(ctx.getState()?.examTitle);\n    }\n    return this.examinationsService\n      .retrieveExamTitleReadOnly_GetByExamId(sessionId)\n      .pipe(\n        tap((result: IExamTitleReadOnlyModel) => {\n          ctx.patchState({\n            examTitle: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseRoster)\n  getExamCases(\n    ctx: StateContext<IExamScoring>,\n    payload: { id1: number; id2?: number }\n  ) {\n    // const state = ctx.getState();\n    const sessionId1 = payload.id1;\n    const sessionId2 = payload.id2 || undefined;\n    return this.casesService\n      .retrieveCaseRosterReadOnly_GetByScheduleId(sessionId1, sessionId2)\n      .pipe(\n        tap((result: ICaseRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            caseRoster: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseContents)\n  getCaseContents(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const caseId = payload.id;\n    return this.caseContentsService\n      .retrieveCaseDetailReadOnly_GetByCaseHeaderId(caseId)\n      .pipe(\n        tap((result: ICaseDetailReadOnlyModel[]) => {\n          ctx.patchState({\n            selectedCaseContents: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseComment)\n  getCaseComment(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const commentId = payload.id;\n    return this.caseCommentsService.retrieveCaseComment_GetById(commentId).pipe(\n      tap((result: ICaseCommentModel) => {\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateCaseComment)\n  createCaseComment(\n    ctx: StateContext<IExamScoring>,\n    payload: { comment: ICaseCommentModel }\n  ) {\n    const comment = payload.comment;\n    return this.caseCommentsService.createCaseComment(comment).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateCaseComment)\n  updateCaseComment(\n    ctx: StateContext<IExamScoring>,\n    payload: { comment: ICaseCommentModel }\n  ) {\n    const comment = payload.comment;\n    return this.caseCommentsService.updateCaseComment(comment.id, comment).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(DeleteCaseComment)\n  deleteCaseComment(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    const commentId = payload.id;\n    return this.caseCommentsService.deleteCaseComment(commentId).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetExamineeList)\n  getExamineeList(ctx: StateContext<IExamScoring>, payload: { date: string }) {\n    // const state = ctx.getState();\n    const date = payload.date;\n    return this.examSessionsService\n      .retrieveExamSessionReadOnly_GetByUserId(date)\n      .pipe(\n        tap((result: IExamSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            examineeList: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExaminee)\n  getExaminee(\n    ctx: StateContext<IExamScoring>,\n    payload: { examScheduleId: number }\n  ) {\n    const examScheduleId = payload.examScheduleId;\n    this.globalDialogService.showLoading();\n    return this.sessionService\n      .retrieveExamineeReadOnly_GetById(examScheduleId)\n      .pipe(\n        tap((examinee: IExamineeReadOnlyModel) => {\n          ctx.patchState({\n            examinee,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExamScoresList)\n  getExamScoresList(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const examHeaderId = payload.id;\n    return this.rostersService\n      .retrieveRosterReadOnly_GetByExaminationHeaderId(examHeaderId)\n      .pipe(\n        tap((result: IRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            examScoresList: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateCaseScore)\n  createCaseScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { score: ICaseScoreModel; showLoading: boolean }\n  ) {\n    const score = payload.score;\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n\n    return this.caseScoresService.createCaseScore(score).pipe(\n      tap(() => {\n        // figure out how to update the store here\n        ctx.patchState({\n          // selectedCaseComment: result,\n          errors: null,\n        });\n        if (payload.showLoading) {\n          this.globalDialogService.closeOpenDialog();\n        }\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        if (payload.showLoading) {\n          this.globalDialogService.closeOpenDialog();\n        }\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateCaseScore)\n  updateCaseScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { score: ICaseScoreModel; showLoading: boolean }\n  ) {\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n    const score = payload.score;\n    return this.caseScoresService\n      .updateCaseScore(score.examScoringId, score)\n      .pipe(\n        tap(() => {\n          ctx.patchState({\n            errors: null,\n          });\n          if (payload.showLoading) {\n            this.globalDialogService.showSuccessError(\n              'Success',\n              'Score Successfully Updated',\n              true\n            );\n          }\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          if (payload.showLoading) {\n            this.globalDialogService.showSuccessError(\n              'Error',\n              'Score update failed',\n              false\n            );\n          }\n\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeleteCaseScore)\n  deleteCaseScore(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    const examScoringId = payload.id;\n    return this.caseScoresService.deleteCaseScore(examScoringId).pipe(\n      tap((result: ICaseScoreModel) => {\n        // figure out how to update the store here\n        ctx.patchState({\n          // selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetSelectedExamScores)\n  getSelectedExamScores(\n    ctx: StateContext<IExamScoring>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    const examId = payload.id;\n    return this.caseScoresService\n      .retrieveCaseScoreReadOnly_GetByExamScheduleId(examId)\n      .pipe(\n        tap((result: ICaseScoreReadOnlyModel[]) => {\n          ctx.patchState({\n            selectedExamScores: result,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateExamScore)\n  createExamScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: IExamScoreModel; navigate: boolean }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.examScoreService.createExamScore(payload.model).pipe(\n      tap(async (result: IExamScoreModel) => {\n        ctx.patchState({\n          errors: null,\n        });\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Exam Submitted Successfully',\n          true\n        );\n        if (payload.navigate) {\n          this.router.navigate(['/ce-scoring/oral-examinations']);\n        }\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Exam Submission Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetRoster)\n  getRoster(\n    ctx: StateContext<IExamScoring>,\n    payload: { examinerUserId: number; examDate: string }\n  ) {\n    this.examDate = payload.examDate;\n    this.globalDialogService.showLoading();\n    return this.dashboardService\n      .retrieveDashboardRosterReadOnly_GetByUserId(payload.examDate)\n      .pipe(\n        tap((dashboardRoster: IDashboardRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            dashboardRoster: dashboardRoster,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(SkipExam)\n  skipExam(\n    ctx: StateContext<IExamScoring>,\n    payload: { examScheduleId: number; examDate: string; showLoading: boolean }\n  ) {\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n\n    return this.examSessionsService\n      .skipExamSessionReadOnly_SkipByExamScheduleId(payload.examScheduleId)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetExamineeList(payload.examDate));\n          if (payload.showLoading) {\n            this.globalDialogService.closeOpenDialog();\n          }\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Exam Skip Failed',\n            false\n          );\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(ResetCaseCommentsData)\n  resetCaseCommentsData(ctx: StateContext<IExamScoring>) {\n    return this.examScoreService.resetCaseCommentsData().pipe(\n      tap(() => {\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Comments Reset Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Comments Reset Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ResetExamScoringData)\n  resetExamScoringData(ctx: StateContext<IExamScoring>) {\n    return this.examScoreService.resetExamScoring().pipe(\n      tap(() => {\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Exam Data Reset Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Exam Data Reset Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateCaseFeedback)\n  createCaseFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: ICaseFeedbackModel }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService.createCaseFeedback(payload.model).pipe(\n      tap(async (result: ICaseFeedbackModel) => {\n        ctx.patchState({\n          selectedCaseFeedback: result,\n          errors: null,\n        });\n        await this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Feedback Submitted Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Feedback Submission Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCaseFeedback)\n  getCaseFeedback(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService\n      .retrieveCaseFeedback_GetByExaminerId(payload.id)\n      .pipe(\n        tap((result: ICaseFeedbackModel) => {\n          ctx.patchState({\n            selectedCaseFeedback: result,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          if (httpError.status === 404) {\n            ctx.patchState({\n              selectedCaseFeedback: undefined,\n            });\n          }\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateCaseFeedback)\n  updateCaseFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: ICaseFeedbackModel }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService\n      .updateCaseFeedback(payload.model.id, payload.model)\n      .pipe(\n        tap(async (result: ICaseFeedbackModel) => {\n          ctx.patchState({\n            selectedCaseFeedback: result,\n            errors: null,\n          });\n          await this.globalDialogService.showSuccessError(\n            'Success',\n            'Case Feedback Updated Successfully',\n            true\n          );\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Case Feedback Update Failed',\n            false\n          );\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeleteCaseFeedback)\n  deleteCaseFeedback(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService.deleteCaseFeedback(payload.id).pipe(\n      tap(async (result: ICaseFeedbackModel) => {\n        ctx.patchState({\n          selectedCaseFeedback: result,\n          errors: null,\n        });\n        await this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Feedback Deleted Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Feedback Delete Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCaseDetailsAndFeedback)\n  getCaseDetailsAndFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { id: number }\n  ): Observable<IExamScoring> {\n    const joins = [\n      this.getCaseContents(ctx, payload).pipe(catchError((error) => of(error))),\n      this.getCaseFeedback(ctx, payload).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((examScoring: IExamScoring[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Exam Scoring Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(ClearExamScoringErrors)\n  clearGraduateMedicalEducationErrors(ctx: StateContext<IExamScoring>) {\n    ctx.patchState({ errors: null });\n  }\n\n  @Action(GetExaminerAgenda)\n  getExaminerAgenda(\n    ctx: StateContext<IExamScoring>,\n    payload: { examHeaderId: number }\n  ): Observable<IExamScoring> {\n    return this.agendaService\n      .retrieveAgendaReadOnly_GetByExamHeaderId(payload.examHeaderId)\n      .pipe(\n        tap((examinerAgenda: IAgendaReadOnlyModel) => {\n          ctx.patchState({\n            examinerAgenda,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExaminerConflict)\n  getExaminerConflict(\n    ctx: StateContext<IExamScoring>,\n    payload: { examHeaderId: number }\n  ): Observable<IExamScoring> {\n    return this.conflictSerive\n      .retrieveConflictReadOnly_GetByExamHeaderId(payload.examHeaderId)\n      .pipe(\n        tap((examinerConflict: IConflictReadOnlyModel) => {\n          ctx.patchState({\n            examinerConflict,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n}\n",
      "properties": [
        {
          "name": "activeExamination",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[] | undefined",
          "optional": false,
          "description": "",
          "line": 78
        },
        {
          "name": "caseRoster",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseRosterReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "dashboardRoster",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDashboardRosterReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 85
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "examinee",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamineeReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "examineeList",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamSessionReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "examinerAgenda",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAgendaReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "examinerConflict",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IConflictReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "examScoresList",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRosterReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "examTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamTitleReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "roster",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRosterReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "selectedCaseComment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseCommentModel | undefined",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "selectedCaseContents",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseDetailReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "selectedCaseFeedback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseFeedbackModel | undefined",
          "optional": false,
          "description": "",
          "line": 74
        },
        {
          "name": "selectedExamScores",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseScoreReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 81
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamSessionReadOnlyModel",
      "id": "interface-IExamSessionReadOnlyModel-4c4e6ba4439e08365fe076f8fee34329a897a075b03927c0bbf60e31f4f1bc106433cb4e750613b3f5aa87b5bc3d7993d18432d91d702bb4c8313064da6429ab",
      "file": "src/app/api/models/scoring/exam-session-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamSessionReadOnlyModel {\r\n    examScheduleId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    meetingLink: string;\r\n    isSubmitted: boolean;\r\n    isCurrentSession: boolean;\r\n    sessionNumber: number;\r\n    isLocked: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "endTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "firstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "isCurrentSession",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "isLocked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "isSubmitted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "lastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "meetingLink",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "sessionNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "startTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamSpecialtyReadOnlyModel",
      "id": "interface-IExamSpecialtyReadOnlyModel-8f6be8ffb12e8a3714b46b9bd7563f3b49f40a7efdc4c82a26abdba50bdf2c7029567c5a844bd1260366b9de7fb2c3e2b18a4dedbf273e9032a26b01f3df8492",
      "file": "src/app/api/models/picklists/exam-specialty-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamSpecialtyReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamStatusReadOnlyModel",
      "id": "interface-IExamStatusReadOnlyModel-f7731fd8c39e1271e7e3e23b37a496c802403053fc9d772bc361b395a01d0481af0e5632ea30634de86f13eb85344cd193ad845eebd5b9a212e3d8eaad62cfe8",
      "file": "src/app/api/models/picklists/exam-status-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamStatusReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamTitleReadOnlyModel",
      "id": "interface-IExamTitleReadOnlyModel-7c391a77dac339793cf6000e4909592a8d70538f95848bda5c4c69880948360d6b893ce35feb7ed787751a971b6b557498e7c1229c8785a38db77ed84d5d3534",
      "file": "src/app/api/models/examinations/exam-title-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamTitleReadOnlyModel {\r\n    examName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "examName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IExamTypeReadOnlyModel",
      "id": "interface-IExamTypeReadOnlyModel-f045eabfa299af76b2a08d5d2016450a83135e1203f662c31d2f854fb441a924aa2df1be5065de82c3ea6602aabeb64f0aac6b53f03d836cc32553ead6c3d81e",
      "file": "src/app/api/models/picklists/exam-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IExamTypeReadOnlyModel {\r\n    id: number;\r\n    code: string;\r\n}\r\n",
      "properties": [
        {
          "name": "code",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFeatureFlags",
      "id": "interface-IFeatureFlags-bd6ab8630d4d155a22c375471c7172fb97c8e1232e1834160f4227246e14e8d1a2fbef8240e988dbbe03a9ef75e770b3c5c82a59d09da021af5cfdb7392053f8",
      "file": "src/app/state/application/application.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport {\n  CloseApplication,\n  LoadApplication,\n  SetExamInProgress,\n  SetUnsavedChanges,\n} from './application.actions';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { Logout } from '../auth';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IApplicationState {\n  isLoggedIn: boolean;\n  isLoaded: boolean;\n  isAuth: boolean;\n  isUserLoaded: boolean;\n  featureFlags: IFeatureFlags | undefined;\n  hasUnsavedChanges: boolean;\n  examInProgress: boolean;\n}\n\nexport interface IFeatureFlags {\n  ceScoreTesting?: boolean;\n  //page level feature flags\n  dashboardPage?: boolean;\n  myAccountPage?: boolean;\n  personalProfilePage?: boolean;\n  medicalTrainingPage?: boolean;\n  professionalStandingPage?: boolean;\n  cmeRepositoryPage?: boolean;\n  gmeHistoryPage?: boolean;\n  applyRegisterPage?: boolean;\n  examHistoryPage?: boolean;\n  continuousCertificationPage?: boolean;\n  paymentHistoryPage?: boolean;\n  documentsPage?: boolean;\n  examScoringPage?: boolean;\n}\n\nexport const APPLICATION_STATE_TOKEN = new StateToken<IApplicationState>(\n  'application'\n);\n\n@State<IApplicationState>({\n  name: APPLICATION_STATE_TOKEN,\n  defaults: {\n    isLoggedIn: false,\n    isLoaded: false,\n    isAuth: false,\n    isUserLoaded: false,\n    featureFlags: undefined,\n    hasUnsavedChanges: false,\n    examInProgress: false,\n  },\n})\n@Injectable({ providedIn: 'root' })\nexport class ApplicationState {\n  constructor(\n    private store: Store,\n    private router: Router,\n    private httpClient: HttpClient,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(LoadApplication)\n  loadApplication(\n    ctx: StateContext<IApplicationState>\n  ): Observable<IFeatureFlags> {\n    const state = ctx.getState();\n    return this.getFeatureFlags().pipe(\n      tap((response: any) => {\n        ctx.patchState({\n          featureFlags: response as IFeatureFlags,\n        });\n      })\n    );\n  }\n\n  @Action(SetUnsavedChanges)\n  setUnsavedChanges(\n    ctx: StateContext<IApplicationState>,\n    action: SetUnsavedChanges\n  ) {\n    ctx.patchState({\n      hasUnsavedChanges: action.hasUnsavedChanges,\n    });\n  }\n\n  @Action(SetExamInProgress)\n  setExamInProgress(\n    ctx: StateContext<IApplicationState>,\n    action: SetExamInProgress\n  ) {\n    ctx.patchState({\n      examInProgress: action.examInProgress,\n    });\n  }\n\n  @Action(CloseApplication)\n  closeApplication(ctx: StateContext<IApplicationState>) {\n    console.log('closeApplication');\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      this.globalDialogService\n        ?.showConfirmation(\n          'Unsaved Changes',\n          'Do you want to navigate away. close application'\n        )\n        .then((result) => {\n          if (result) {\n            this.store\n              .dispatch(new SetUnsavedChanges(false))\n              .pipe(take(1))\n              .subscribe(() => {\n                this.store.dispatch(new Logout());\n              });\n          }\n        });\n    } else {\n      const examInProgress = this.store.selectSnapshot(\n        (state) => state.application.examInProgress\n      );\n      if (examInProgress) {\n        this.globalDialogService\n          ?.showConfirmation(\n            'Exam in Progress',\n            'Do you want to navigate away from the exam? <br/> Navigating away will result in an incomplete exam.'\n          )\n          .then((result) => {\n            if (result) {\n              this.store\n                .dispatch(new SetExamInProgress(false))\n                .pipe(take(1))\n                .subscribe(() => {\n                  this.store.dispatch(new Logout());\n                });\n            }\n          });\n      } else {\n        this.store.dispatch(new Logout());\n      }\n    }\n  }\n\n  private getFeatureFlags(): Observable<IFeatureFlags> {\n    return this.httpClient.get('/api/features').pipe(\n      map((response: any) => {\n        return response as IFeatureFlags;\n      })\n    );\n  }\n\n  // split up unsaved changes and exam in progress logic\n  private async checkUnsavedChanges(\n    title?: string,\n    text?: string\n  ): Promise<boolean> {\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      const result = await this.globalDialogService?.showConfirmation(\n        title ?? 'Unsaved Changessdfsdfsdf',\n        text ?? 'Do you want to navigate away'\n      );\n\n      if (result) {\n        this.store.dispatch(new SetUnsavedChanges(false));\n      }\n\n      return result;\n    }\n    return true;\n  }\n}\n",
      "properties": [
        {
          "name": "applyRegisterPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 36
        },
        {
          "name": "ceScoreTesting",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 27
        },
        {
          "name": "cmeRepositoryPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 34
        },
        {
          "name": "continuousCertificationPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 38
        },
        {
          "name": "dashboardPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 29
        },
        {
          "name": "documentsPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 40
        },
        {
          "name": "examHistoryPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 37
        },
        {
          "name": "examScoringPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 41
        },
        {
          "name": "gmeHistoryPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 35
        },
        {
          "name": "medicalTrainingPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 32
        },
        {
          "name": "myAccountPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 30
        },
        {
          "name": "paymentHistoryPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 39
        },
        {
          "name": "personalProfilePage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 31
        },
        {
          "name": "professionalStandingPage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 33
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFellowshipModel",
      "id": "interface-IFellowshipModel-694d117085807c4d207c1317df0dfd285cecb75c152c90242ab79f4a2cf6ed2b106f17ef4c07666cc5c975d32792801328ceb9158956d324c6b1ca6bbdc7afb2",
      "file": "src/app/api/models/medicaltraining/fellowship.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFellowshipModel {\r\n    id: number;\r\n    userId: number;\r\n    programName: string;\r\n    completionYear: string;\r\n    programOther: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "completionYear",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "programOther",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFellowshipProgramReadOnlyModel",
      "id": "interface-IFellowshipProgramReadOnlyModel-8d56e60c303b3503a8179563a49565a2bb9d1da78bb5b474e5e4f889efe41958288a7ea33b75b740dc76005bb83c30d40eda7fde43eb41b4f85c6c2974c22f4c",
      "file": "src/app/api/models/picklists/fellowship-program-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFellowshipProgramReadOnlyModel {\r\n    programId: number;\r\n    programName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "programId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFellowshipReadOnlyModel",
      "id": "interface-IFellowshipReadOnlyModel-582ec4926af3543952d38622daed122f347b7c61ea954f359ac51fbc0fda06f3d536e705b62d5dac663e9290f1232525fb672d5ca8f08c6d8e2cb79c39394ef6",
      "file": "src/app/api/models/medicaltraining/fellowship-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFellowshipReadOnlyModel {\r\n    id: number;\r\n    programName: string;\r\n    completionYear: string;\r\n    programOther: string;\r\n}\r\n",
      "properties": [
        {
          "name": "completionYear",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "programOther",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFellowshipTypeReadOnlyModel",
      "id": "interface-IFellowshipTypeReadOnlyModel-0be62ca858bea9c1cfcd45f9e259237e56f6ef55fd9ecc68a317e2b6759e4a49c7bc8e27eb608d4f6b20a42a6323afe569f9bfa287076501beac29d545560b39",
      "file": "src/app/api/models/picklists/fellowship-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFellowshipTypeReadOnlyModel {\r\n    fellowshipType: string;\r\n    fellowshipTypeName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "fellowshipType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "fellowshipTypeName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IFormErrors",
      "id": "interface-IFormErrors-94f368cf035c316ffe3cf0c1422198bf5e2f74f86d548d49ab8b5a5f41f1be3a10ae1b60f072eeae59de0210fe55e5d650928c022f14348ae9f9ae9bc4be5828",
      "file": "src/app/shared/common/interfaces/errors.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFormErrors {\n  [key: string]: string[];\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-94f368cf035c316ffe3cf0c1422198bf5e2f74f86d548d49ab8b5a5f41f1be3a10ae1b60f072eeae59de0210fe55e5d650928c022f14348ae9f9ae9bc4be5828",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "string[]",
          "line": 1,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 178,
      "methods": []
    },
    {
      "name": "IFormFields",
      "id": "interface-IFormFields-8648a49e124db5cd5e8fd223a2c19058ec44b6c0c9876dd246e6fc8fcb1db21b62c5d2da13566003e3f2a5ffa23508d6e23e16d4625707350cf47b51ab3d7449",
      "file": "src/app/shared/models/form-fields/form-fields.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IFormFields {\n  label: string;\n  subLabel?: string;\n  helpText?: string;\n  value?: string;\n  required: boolean;\n  name: string;\n  placeholder?: string;\n  readonly?: boolean;\n  type: string;\n  size: string;\n  options?: any[];\n  filteredOptions?: any[];\n  validators?: any;\n  errorText?: string;\n  helpTextArray?: string[];\n  overlapId?: number;\n}\n",
      "properties": [
        {
          "name": "errorText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "filteredOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "helpText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "helpTextArray",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "overlapId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "subLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 3
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "validators",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGenderReadOnlyModel",
      "id": "interface-IGenderReadOnlyModel-c6fd5d520413633df33441ac98b7d249ab57519e2d93648b23a7a78960c51e012769fc62820829071fb73cb379155d6846acb5589ac48f3cf7cab97bba483d9c",
      "file": "src/app/api/models/picklists/gender-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGenderReadOnlyModel {\r\n    itemValue: number | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGmePicklistOptions",
      "id": "interface-IGmePicklistOptions-dc6596208b78c7f3680ac5a4c82248c87d06908b95f21c1c331acd761a511913a4413d91c8464a3902d32ffaca567942199e176f05e8d8ff9b6c70fdd7807c3d",
      "file": "src/app/gme-history/gme-history.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  DeleteGraduateMedicalEducation,\n  GetGraduateMedicalEducationDetails,\n  ClearGraduateMedicalEducationDetails,\n  IGraduateMedicalEducation,\n  GetAllGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  GetDashboardProgramInformation,\n  DashboardSelectors,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n  IRotationModel,\n} from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\nimport { GmeFormComponent } from './gme-form/gme-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { GetPicklists, PicklistsSelectors } from '../state/picklists';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\ninterface IGmePicklistOptions {\n  clinicalLevelOptions: any[] | undefined;\n  clinicalActivityOptions: any[] | undefined;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n    ButtonModule,\n    GmeFormComponent,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationAll)\n  gmeAll$: Observable<IGraduateMedicalEducation> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors)\n  gmeErrors$: Observable<any> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  createGmeRotationSubscription: Subscription | undefined;\n  updateGmeRotationSubscription: Subscription | undefined;\n  gmeAllSubscription: Subscription | undefined;\n\n  conflictingRecords: IRotationReadOnlyModel[] = [];\n  gapData: IRotationGapReadOnlyModel | undefined;\n  gapConflictDates: any;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  gmeSummaryData!: any[];\n\n  selectedGmeRotation: IRotationReadOnlyModel | undefined;\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  gmePicklistOptions: IGmePicklistOptions | undefined = {\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  };\n\n  userProgram: {\n    programName?: string;\n    clinicalLevel?: string;\n    clinicalLevelId?: number;\n  } = {};\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initPicklistOptions();\n\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      this.selectedGmeRotation = undefined;\n      const selectedRotation = {\n        ...rotation,\n        usingAffiliateOrganization: rotation?.alternateInstitutionName\n          ? true\n          : false,\n        isClinicalActivity:\n          !rotation?.clinicalActivity.includes('Non-Clinical'),\n      };\n      if (!rotation) {\n        selectedRotation.startDate = this.maxEndDate?.toISOString() ?? '';\n      }\n      this.selectedGmeRotation = selectedRotation;\n    });\n  }\n\n  initUserData() {\n    this._store\n      .dispatch(new GetDashboardProgramInformation())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        const userInfo = this._store.selectSnapshot(\n          DashboardSelectors.dashboardProgramInformation\n        );\n        if (userInfo && userInfo.programs) {\n          if (userInfo.programs.programName !== '') {\n            this.userProgram.programName = userInfo.programs.programName;\n          }\n          if (userInfo.programs.clinicalLevel !== '') {\n            switch (userInfo.programs.clinicalLevel) {\n              case 'PGY1':\n                this.userProgram.clinicalLevel = 'Clinical Level 1';\n                break;\n              case 'PGY2':\n                this.userProgram.clinicalLevel = 'Clinical Level 2';\n                break;\n              case 'PGY3':\n                this.userProgram.clinicalLevel = 'Clinical Level 3';\n                break;\n              case 'PGY4':\n                this.userProgram.clinicalLevel = 'Clinical Level 4';\n                break;\n              case 'PGY5':\n                this.userProgram.clinicalLevel = 'Clinical Level 5';\n                break;\n              case 'Research':\n                this.userProgram.clinicalLevel = 'Research';\n                break;\n              case 'Other':\n                this.userProgram.clinicalLevel = 'Other Clinical Fellowship';\n                break;\n              default:\n                this.userProgram.clinicalLevel =\n                  userInfo.programs.clinicalLevel;\n                break;\n            }\n          }\n        }\n        if (this.userProgram.clinicalLevel) {\n          const clinicalLevel =\n            this.gmePicklistOptions?.clinicalLevelOptions?.find((level) => {\n              return level.label === this.userProgram.clinicalLevel;\n            });\n          this.userProgram.clinicalLevelId = clinicalLevel?.value;\n        }\n      });\n  }\n\n  initPicklistOptions() {\n    this.gmePicklistOptions = undefined;\n    const gmePicklistOptions: IGmePicklistOptions = {\n      clinicalLevelOptions: [],\n      clinicalActivityOptions: [],\n    };\n    this._store\n      .dispatch(new GetPicklists())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        gmePicklistOptions.clinicalLevelOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalLevels\n        );\n        if (gmePicklistOptions.clinicalLevelOptions) {\n          gmePicklistOptions.clinicalLevelOptions =\n            gmePicklistOptions.clinicalLevelOptions.map((level) => {\n              return {\n                label: level.name,\n                value: level.id,\n              };\n            });\n        }\n        gmePicklistOptions.clinicalActivityOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalActivities\n        );\n\n        this.gmePicklistOptions = gmePicklistOptions;\n\n        this.initUserData();\n      });\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetAllGraduateMedicalEducation());\n\n    this.gmeAllSubscription = this.gmeAll$?.pipe(untilDestroyed(this)).subscribe((gmeAll) => {\n      this.clinicalActivity = [];\n      this.nonClinicalActivity = [];\n      this.conflicts = [];\n\n      if (gmeAll && (gmeAll.gmeRotations || gmeAll.gmeGaps)) {\n        this.calendarFilterOptions = [\n          {\n            label: 'Activity Types',\n            items: [\n              {\n                label: 'Clinical',\n                value: { value: 'clinical', field: 'type' },\n              },\n              {\n                label: 'Non-Clinical',\n                value: { value: 'non-clinical', field: 'type' },\n              },\n              {\n                label: 'Conflicts',\n                value: { value: 'conflict', field: 'type' },\n              },\n            ],\n          },\n          {\n            label: 'Clinical Levels',\n            items: [],\n          },\n        ];\n\n        // set filter options for grid\n        const clinicalFilterOptions: { value: string; label: string }[] = [];\n        const yearFilterOptions: ICalendarFilter[] = [];\n        this.maxEndDate = undefined;\n        this.minStartDate = undefined;\n        gmeAll.gmeGaps.forEach((item, index) => {\n          // build calendar items\n          if (item.startDate === item.endDate) {\n            // single day event\n          }\n\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const conflictItem: any = {\n            id: 'conflict-' + index,\n            start: item.startDate,\n            class: 'conflict',\n            classNames: ['clickable-event'],\n            color: 'rgba(139, 4, 10, 0.25)',\n            highlightColor: 'rgba(139, 4, 10, 1)',\n            type: 'conflict',\n            eventTitle: 'Rotation Conflict',\n            allDay: true,\n            rawData: item,\n          };\n\n          if (item.startDate !== item.endDate) {\n            conflictItem.end = endDate;\n          }\n          this.conflicts.push(conflictItem);\n        });\n        gmeAll.gmeRotations.forEach((item) => {\n          //get min start date\n          if (this.minStartDate) {\n            if (new Date(item.startDate) < new Date(this.minStartDate)) {\n              this.minStartDate = new Date(item.startDate);\n            }\n          } else {\n            this.minStartDate = new Date(item.startDate);\n          }\n\n          //get max end date\n          if (this.maxEndDate) {\n            if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n              this.maxEndDate = new Date(item.endDate);\n            }\n          } else {\n            this.maxEndDate = new Date(item.endDate);\n          }\n          this.maxEndDate = new Date(\n            this.maxEndDate.setDate(this.maxEndDate.getDate() + 1)\n          );\n\n          // build filter options for grid\n          if (\n            !clinicalFilterOptions.some(\n              (x) => x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n            )\n          ) {\n            clinicalFilterOptions.push({\n              value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              label: item.clinicalLevel,\n            });\n            this.calendarFilterOptions[1].items.push({\n              label: item.clinicalLevel,\n              value: {\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                field: 'clinicalLevel',\n              },\n            });\n          }\n\n          const itemMonth = new Date(item.startDate).getMonth();\n          const itemYear = new Date(item.startDate).getFullYear().toString();\n          let yearFilter = '';\n          // hardcoded to 5 for June\n          if (itemMonth >= 5) {\n            yearFilter = itemYear.concat(\n              ' - ',\n              (parseInt(itemYear) + 1).toString()\n            );\n          } else {\n            yearFilter = (parseInt(itemYear) - 1)\n              .toString()\n              .concat(' - ', itemYear);\n          }\n          if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n            yearFilterOptions.push({\n              label: yearFilter,\n              value: {\n                value: yearFilter?.replaceAll(' ', '_').trim(),\n                field: 'year',\n              },\n            });\n          }\n\n          // build calendar items\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const calendarItem = {\n            id: item.id,\n            start: item.startDate,\n            end: endDate,\n            class: '',\n            color: '',\n            highlightColor: '',\n            eventTitle: item.clinicalActivity,\n            programName: item.programName,\n            type: '',\n            year: yearFilter.replaceAll(' ', '_').trim(),\n            clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n            allDay: true,\n            rawData: item,\n          };\n\n          //if (item.isCredit) {\n          if (!item.clinicalActivity.includes('Non-Clinical')) {\n            // clinical activity\n            calendarItem.class = 'clinical';\n            calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n            calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n            calendarItem.type = 'clinical';\n            this.clinicalActivity.push(calendarItem);\n          } else {\n            // non clinical activity\n            calendarItem.class = 'non-clinical';\n            calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n            calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n            calendarItem.type = 'non-clinical';\n            this.nonClinicalActivity.push(calendarItem);\n          }\n        });\n\n        clinicalFilterOptions.sort((a, b) => {\n          return a.label > b.label ? 1 : -1;\n        });\n        this.calendarFilterOptions.push({\n          label: 'Years',\n          items: yearFilterOptions,\n        });\n        this.calendarFilterOptions.forEach((filterOption) => {\n          if (filterOption.label !== 'Activity Types') {\n            filterOption.items.sort(\n              (a: ICalendarFilter, b: ICalendarFilter) => {\n                return a.label > b.label ? 1 : -1;\n              }\n            );\n          }\n        });\n\n        this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n      }\n\n      this.applyCalendarFilters();\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeAllSubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      this.getConflicts(filters),\n    ];\n  }\n\n  relaunchAddEditGmeRotation($event: any) {\n    this.showConflictResolutionModal = false;\n    if (this.showAddEditGmeRotation) {\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n    if ($event) {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails($event));\n      this.handleAddEditGmeRotation(true);\n    }\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: this.maxEndDate?.toISOString() ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n  }\n\n  handleAddGmeGapRotation($event: any) {\n    if ($event) {\n      this.showConflictResolutionModal = false;\n      this.isEditGmeRotation$.next(false);\n      this.gapConflictDates = $event;\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: $event.startDate ?? '',\n        endDate: $event.endDate ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails(data.id));\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  saveGmeRotation($event: any) {\n    if ($event.data) {\n      const formValues = $event.data;\n      let startDate = '';\n      let endDate = '';\n      if (formValues.startDate) {\n        startDate = new Date(formValues.startDate).toISOString();\n      }\n      if (formValues.endDate) {\n        endDate = new Date(formValues.endDate).toISOString();\n      }\n\n      const newRotation = {\n        id: this.selectedGmeRotation?.id ?? 0,\n        startDate: startDate,\n        endDate: endDate,\n        clinicalLevelId: formValues.clinicalLevelId ?? 0,\n        clinicalActivityId: formValues.clinicalActivityId ?? 0,\n        programName: formValues.programName ?? '',\n        nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n        alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n        isInternationalRotation: formValues.isInternationalRotation ?? false,\n        other: formValues.other ?? '',\n        fourMonthRotationExplain: formValues.fourMonthRotationExplain ?? '',\n        nonPrimaryExplain: formValues.nonPrimaryExplain ?? '',\n        nonClinicalExplain: formValues.nonClinicalExplain ?? '',\n        isEssential: formValues.isEssential ?? false,\n      } as unknown as IRotationModel;\n\n      if ($event.isEdit) {\n        this.updateGmeRotationSubscription = this._store\n          .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      } else {\n        this.createGmeRotationSubscription = this._store\n          .dispatch(new CreateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      }\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflicts: any, gapData: IRotationGapReadOnlyModel) {\n    this.conflictingRecords = [];\n    this.gapData = undefined;\n    const conflictRecords = [];\n    if (conflicts.previousRotation) {\n      conflictRecords.push(conflicts.previousRotation.rawData);\n    }\n    if (conflicts.nextRotation) {\n      conflictRecords.push(conflicts.nextRotation.rawData);\n    }\n\n    this.conflictingRecords = conflictRecords;\n    this.gapData = gapData;\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
      "properties": [
        {
          "name": "clinicalActivityOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[] | undefined",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "clinicalLevelOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[] | undefined",
          "optional": false,
          "description": "",
          "line": 70
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGmeSummaryReadOnlyModel",
      "id": "interface-IGmeSummaryReadOnlyModel-a2c3160a3e75f00613108b7917f87a0f9b3bc83091618f04787a379fe463cf1150ea7bba33fa45c4522a8eb3a8529e46d19532c123bdc09f3d18440bfaa916f3",
      "file": "src/app/api/models/graduatemedicaleducation/gme-summary-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGmeSummaryReadOnlyModel {\r\n    clinicalLevel: string;\r\n    minStartDate: string;\r\n    maxStartDate: string;\r\n    programName: string;\r\n    clinicalWeeks: number;\r\n    nonClinicalWeeks: number;\r\n    essentialsWeeks: number;\r\n}\r\n",
      "properties": [
        {
          "name": "clinicalLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "clinicalWeeks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "essentialsWeeks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "maxStartDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "minStartDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "nonClinicalWeeks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGQAdditionalTraining",
      "id": "interface-IGQAdditionalTraining-ab70a1bf36fe43b4caabe1694e4b3f650bf344f0bae88e72eafe641b8ee67aeac4e3a1b649937cd0bce5ce2ad4d0902f505def5c0baab88b75802949896dbb51",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { AdditionalTrainingsService } from '../../api';\nimport {\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from './examination-gq-additional-training.actions';\n\nexport interface IGQAdditionalTraining {\n  AdditionalTraining: IAdditionalTrainingReadOnlyModel[];\n  selectedAdditionalTraining: IAdditionalTrainingModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GQ_ADDITIONAL_TRAINING_STATE_TOKEN =\n  new StateToken<IGQAdditionalTraining>('gqAdditionalTraining');\n\n@State<IGQAdditionalTraining>({\n  name: GQ_ADDITIONAL_TRAINING_STATE_TOKEN,\n  defaults: {\n    AdditionalTraining: [],\n    selectedAdditionalTraining: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GQAdditionalTrainingState {\n  constructor(private additionalTrainingsService: AdditionalTrainingsService) {}\n\n  @Action(GetAdditionalTrainingList)\n  getAdditionalTrainingList(ctx: StateContext<IGQAdditionalTraining>) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .retrieveAdditionalTrainingReadOnly_GetAllByUserId()\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            AdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetAdditionalTrainingDetails)\n  getAdditionalTrainingDetails(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { trainingId: number }\n  ) {\n    const state = ctx.getState();\n    const trainingId = payload.trainingId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTraining_GetByTrainingId(trainingId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            selectedAdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateAdditionalTraining)\n  updateAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: UpdateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .updateAdditionalTraining(payload.trainingId, payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          const additionalTraining = state.AdditionalTraining.map((item) =>\n            item.trainingId === readOnlyResult.trainingId\n              ? readOnlyResult\n              : item\n          );\n          ctx.setState({\n            ...state,\n            AdditionalTraining: additionalTraining,\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateAdditionalTraining)\n  createAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: CreateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .createAdditionalTraining(payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          ctx.setState({\n            ...state,\n            AdditionalTraining: [readOnlyResult, ...state.AdditionalTraining],\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
      "properties": [
        {
          "name": "AdditionalTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdditionalTrainingReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 23
        },
        {
          "name": "selectedAdditionalTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdditionalTrainingModel | undefined",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGraduateMedicalEducation",
      "id": "interface-IGraduateMedicalEducation-3198619cc1ef763b3862a05516c79dae3810b3c802edaea1173a0d858c3446a56759dd0b8e6ea57d7631203162b329bad0d150d11debfe2ed04a27639c559d87",
      "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, mergeMap, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { RotationService, GmeSummaryService } from '../../api';\nimport {\n  GetGraduateMedicalEducationList,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  DeleteGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  GetGraduateMedicalEducationSummary,\n  ClearGraduateMedicalEducationDetails,\n  GetGraduateMedicalEducationGapList,\n  GetAllGraduateMedicalEducation,\n} from './gme.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IGraduateMedicalEducation {\n  gmeRotations: IRotationReadOnlyModel[];\n  gmeGaps: IRotationGapReadOnlyModel[];\n  gmeSummary: IGmeSummaryReadOnlyModel[];\n  selectedRotation: IRotationModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN =\n  new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation');\n\n@State<IGraduateMedicalEducation>({\n  name: GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN,\n  defaults: {\n    gmeRotations: [],\n    gmeGaps: [],\n    gmeSummary: [],\n    selectedRotation: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GraduateMedicalEducationState {\n  constructor(\n    private rotationService: RotationService,\n    private gmeSummaryService: GmeSummaryService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetGraduateMedicalEducationSummary)\n  getGraduateMedicalEducationSummary(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.gmeSummaryService.retrieveGmeSummaryReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeSummary: this.buildSummaryRows(result),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationList)\n  getGraduateMedicalEducationList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeRotations: result.sort((a: any, b: any) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationGapList)\n  getGraduateMedicalEducationGapList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationGapReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeGaps: result.sort((a: any, b: any) =>\n            new Date(a.startDate).getTime() > new Date(b.startDate).getTime()\n              ? 1\n              : -1\n          ),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetAllGraduateMedicalEducation)\n  getAllGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ): Observable<IGraduateMedicalEducation> {\n    const joins = [\n      this.getGraduateMedicalEducationList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getGraduateMedicalEducationGapList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((gmeAll: IGraduateMedicalEducation[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In GME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationDetails)\n  getGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    payload: { id: number }\n  ) {\n    //const state = ctx.getState();\n    const gmeId = payload.id;\n    return this.rotationService.retrieveRotation_GetById(gmeId).pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          selectedRotation: result,\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationDetails)\n  clearGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({\n      selectedRotation: undefined,\n    });\n  }\n\n  @Action(UpdateGraduateMedicalEducation)\n  updateGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: UpdateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.updateRotation(payload.id, payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        const gmeRotations = state.gmeRotations.map((item) =>\n          item.id === readOnlyResult.id ? readOnlyResult : item\n        );\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Rotation Updated Successfully',\n          true\n        );\n        ctx.patchState({\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        //this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(CreateGraduateMedicalEducation)\n  createGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: CreateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.createRotation(payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Rotation Created Successfully',\n          true\n        );\n        ctx.patchState({\n          gmeRotations: [readOnlyResult, ...state.gmeRotations].sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        //this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(DeleteGraduateMedicalEducation)\n  deleteGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: DeleteGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.deleteRotation(payload).pipe(\n      tap(() => {\n        const gmeRotations = state.gmeRotations.filter(\n          (item) => item.id !== payload\n        );\n        ctx.patchState({\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationErrors)\n  clearGraduateMedicalEducationErrors(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({ errors: null });\n  }\n\n  buildSummaryRows(items: any[]) {\n    let allRows = [];\n    const level4AndChief = {\n      clinicalLevel: 'Clinical Level 4 Totals',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks', 'Clinical Level 4'),\n      nonClinicalWeeks: this.getTotals(\n        items,\n        'nonClinicalWeeks',\n        'Clinical Level 4'\n      ),\n      essentialsWeeks: this.getTotals(\n        items,\n        'essentialsWeeks',\n        'Clinical Level 4'\n      ),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#335b92',\n        color: '#FFF',\n      },\n    };\n    const level5AndChief = {\n      clinicalLevel: 'Clinical Level 5 Totals',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks', 'Clinical Level 5'),\n      nonClinicalWeeks: this.getTotals(\n        items,\n        'nonClinicalWeeks',\n        'Clinical Level 5'\n      ),\n      essentialsWeeks: this.getTotals(\n        items,\n        'essentialsWeeks',\n        'Clinical Level 5'\n      ),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#335b92',\n        color: '#FFF',\n      },\n    };\n\n    const summaryTotals = {\n      clinicalLevel: 'Total Weeks',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks'),\n      nonClinicalWeeks: this.getTotals(items, 'nonClinicalWeeks'),\n      essentialsWeeks: this.getTotals(items, 'essentialsWeeks'),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#1F3758',\n        color: '#FFF',\n      },\n    };\n    const summaryAverages = {\n      clinicalLevel: 'Avg Weeks',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getAverages(items, 'clinicalWeeks'),\n      nonClinicalWeeks: this.getAverages(items, 'nonClinicalWeeks'),\n      essentialsWeeks: this.getAverages(items, 'essentialsWeeks'),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#1F3758',\n        color: '#FFF',\n      },\n    };\n    allRows = [...items, level4AndChief, level5AndChief];\n    allRows.sort((a: any, b: any) =>\n      a.clinicalLevel > b.clinicalLevel ? 1 : -1\n    );\n    allRows.push(summaryTotals);\n    allRows.push(summaryAverages);\n\n    return allRows;\n  }\n\n  getTotals(items: any[], prop: string, filter?: string) {\n    return items.reduce((a, b) => {\n      if (filter) {\n        if (b[prop] && b.clinicalLevel.startsWith(filter)) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      } else {\n        if (b[prop]) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      }\n    }, 0);\n  }\n  getAverages(items: any[], prop: string) {\n    const total = this.getTotals(items, prop);\n    const avg = total / items.length;\n    return Math.round(avg * 10) / 10;\n  }\n}\n",
      "properties": [
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 34
        },
        {
          "name": "gmeGaps",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationGapReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "gmeRotations",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "gmeSummary",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGmeSummaryReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "selectedRotation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationModel | undefined",
          "optional": false,
          "description": "",
          "line": 32
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGraduateProfileReadOnlyModel",
      "id": "interface-IGraduateProfileReadOnlyModel-b86b7f2afc98aa4a74e8acf4d9275f9cd4bcb73ef6f5032b17bdc50b63e018cae2d57bbf7844ab8e15385dc2c1da9dc1e5dbea3a5a7a9ee64ecd8edab2c00698",
      "file": "src/app/api/models/picklists/graduate-profile-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGraduateProfileReadOnlyModel {\r\n    type: string;\r\n    description: string;\r\n}\r\n",
      "properties": [
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGridActions",
      "id": "interface-IGridActions-5cbd8b0dc7fb829407ac27c531417cf9d6faa1f74be570b75ee0e3bc60974b94883b0ebd953435dcc86feaf64b2c70f4c61ff02c395bc1c3ea7729e10ea4af34",
      "file": "src/app/shared/components/grid/abs-grid-models.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGridActions {\n  data: any;\n  fieldKey: string;\n  onClick: any;\n}\n",
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "fieldKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "onClick",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGridColumns",
      "id": "interface-IGridColumns-d174c47c072d7ebec0b65bd6dd0c39bed96f87269464db64e5dd2708735940f2953ac6ae77458fc5fb28e3815d4ca19df74dd5ad8066d9b56f25f3517e5ad4d6",
      "file": "src/app/shared/components/grid/abs-grid-col.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGridColumns {\n  headerName: string;\n  fieldName: string;\n  sortable?: boolean;\n  width?: number;\n  icon?: string;\n  onClick?: (data: any) => void;\n  cellRenderer?:\n    | 'button'\n    | 'conditionalButton'\n    | 'primeButton'\n    | 'yesNo'\n    | 'dateFormatter'\n    | 'customClass'\n    | 'customStyle'\n    | 'expandToggle'\n    | 'fileLink';\n  cellRendererParams?: any;\n  buttonClass?: string;\n  sort?: 'asc' | 'desc';\n  fileType?: string;\n  cellClass?: any;\n  cellStyle?: any;\n  style?: any;\n}\n",
      "properties": [
        {
          "name": "buttonClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 19
        },
        {
          "name": "cellClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 22
        },
        {
          "name": "cellRenderer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"button\" | \"conditionalButton\" | \"primeButton\" | \"yesNo\" | \"dateFormatter\" | \"customClass\" | \"customStyle\" | \"expandToggle\" | \"fileLink\"",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "cellRendererParams",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "cellStyle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 23
        },
        {
          "name": "fieldName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "fileType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 21
        },
        {
          "name": "headerName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "onClick",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "sort",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"asc\" | \"desc\"",
          "optional": true,
          "description": "",
          "line": 20
        },
        {
          "name": "sortable",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 24
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IGridOptions",
      "id": "interface-IGridOptions-a7c8eee7da20db59fdc8ae69787b73a480c191627a9d957268202dea75b96200a82eaef63933369858c887bfbedce7bff349e7b5f5f02b221fa192780d92170b",
      "file": "src/app/shared/components/grid/grid-options.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IGridOptions {\n  showFilter: boolean;\n  filterOn: string;\n  filterType?: string;\n  filterOptions?: IDropdown[];\n  placeholder?: string;\n  noFilteredResultsMessage?: string;\n}\n\nexport interface IDropdown {\n  value: string;\n  label: string;\n}\n",
      "properties": [
        {
          "name": "filterOn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "filterOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDropdown[]",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "filterType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "noFilteredResultsMessage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "showFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IJcahoOrganizationReadOnlyModel",
      "id": "interface-IJcahoOrganizationReadOnlyModel-d5f9f1f9a3efe210c0fb54af2a1b7ed211f73ada3901f703ce084b8d752bc44b87c8bcef3d36d823f7f9ead3d6dd60b8842ff1a9cdf5513ae2e46c551f33c590",
      "file": "src/app/api/models/picklists/jcaho-organization-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IJcahoOrganizationReadOnlyModel {\r\n    organizationId: number;\r\n    organizationName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "organizationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "organizationName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ILanguageReadOnlyModel",
      "id": "interface-ILanguageReadOnlyModel-b00aa845236aab5b4cf957ffb305a1ef782c271e95c5bfcad5d409f76b2e934e064d0b50d223408046458e857cbfa9be55a43be35bc17836c53f98675725a97c",
      "file": "src/app/api/models/picklists/language-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ILanguageReadOnlyModel {\r\n    itemValue: number | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ILegend",
      "id": "interface-ILegend-763bff947960983753bb94ebe40ffbda1c3bee1bd67d10c47fb04ab73fde131dcf675cbadf3887e95adc17366a92abe6b17d46b24cec72a6b82b5d800ed32c80",
      "file": "src/app/shared/components/legend/legend.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ILegend {\n  text: string;\n  color: string;\n}\n",
      "properties": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ILicenseTypeReadOnlyModel",
      "id": "interface-ILicenseTypeReadOnlyModel-905d58aa2cf267fcef4e35360750dec875c94920d76cc7d47b3e57716d095fde93e459e84ec671430c6d34425c62c384d3cef3e8447a379011df73a0984da6a9",
      "file": "src/app/api/models/picklists/license-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ILicenseTypeReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMedicalLicense",
      "id": "interface-IMedicalLicense-396dc4fea357980963b6e232c416f40a86f4119b05a6d545b3851b6b50b8157f8ee2ea5bc7af43bc9b48c3bc138d4e100e80808622c0abebf9d24dcad15937f0",
      "file": "src/app/professional-standing/professional-standing.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  ProfessionalStandingSelectors,\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  GetUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  GetPSAppointmentsAndPrivilegesList,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n  UpdatePSAppointmentAndPrivilege,\n  CreatePSAppointmentAndPrivilege,\n  GetPSAppointmentAndPrivilegeDetails,\n  DeletePSAppointmentAndPrivilege,\n  ClearProfessionalStandingErrors,\n} from '../state';\nimport {\n  GetPicklists,\n  IPickListItemNumber,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IStateReadOnlyModel,\n  IUserProfessionalStandingModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserAppointmentReadOnlyModel,\n} from '../api';\nimport { LicenseFormComponent } from './license-form/license-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SanctionsFormComponent } from './sanctions-form/sanctions-form.component';\nimport { AppointmentsFormComponent } from './appointments-form/appointments-form.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CurrentAppointmentFormComponent } from './current-appointment-form/current-appointment-form.component';\ninterface IMedicalLicensePickLists {\n  licenseStateOptions: IStateReadOnlyModel[] | undefined;\n  licenseTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IProfessionalStandingPickLists {\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  primaryPracticeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IAppointementsPrivilegesPickLists {\n  stateCodeOptions: IStateReadOnlyModel[] | undefined;\n  practiceTypeOptions: IPickListItemNumber[] | undefined;\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  organizationOptions: IPickListItemNumber[] | undefined;\n  appointmentTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IMedicalLicense extends IMedicalLicenseReadOnlyModel {\n  showEdit: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    ButtonModule,\n    LicenseFormComponent,\n    SanctionsFormComponent,\n    AppointmentsFormComponent,\n    CurrentAppointmentFormComponent,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  /* error variables */\n  clearErrors = new ClearProfessionalStandingErrors(); // may need to break this into dividual error clearing actions\n  @Select(ProfessionalStandingSelectors.slices.medicalLicenseErrors)\n  medicalLicenseErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.appointmentErrors)\n  appointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.professionalStandingErrors)\n  currentAppointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.sanctionsErrors)\n  sanctionsErrors$: Observable<any> | undefined;\n\n  /* Medical License variables */\n  @Select(ProfessionalStandingSelectors.slices.medicalLiscenseList)\n  medicalLicenses$: Observable<IMedicalLicense[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedMedicalLicense)\n  selectedMedicalLicense$: Observable<IMedicalLicenseModel> | undefined;\n\n  extendedMedicalLicenses$: Subject<IMedicalLicense[]> | undefined =\n    new BehaviorSubject([] as any);\n\n  licensesCols = LICENSES_COLS;\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  stateMedicalLicenseTitle: string | undefined;\n  showLicensesAddEdit = false;\n  medicalLicensePickLists: IMedicalLicensePickLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  /* Sanctions and Ethics variables */\n  @Select(ProfessionalStandingSelectors.slices.sanctions)\n  sanctionsAndEthics$: Observable<ISanctionsModel> | undefined;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(false);\n\n  sanctionsAndEthics: ISanctionsModel | undefined;\n\n  /* Current Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.userProfessionalStandingDetails)\n  currentAppointments$: Observable<IUserProfessionalStandingModel> | undefined;\n  currentAppointments: any;\n  currentAppointmentPickLists: IProfessionalStandingPickLists = {\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  };\n\n  /* Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.allAppointments)\n  allAppointments$: Observable<IUserAppointmentReadOnlyModel[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedAppointment)\n  selectedAppointment$: Observable<IUserAppointmentModel> | undefined;\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(false);\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  appointmentsTitle: string | undefined;\n  selectedAppointment: IUserAppointmentModel | undefined;\n  showAppointmentsAddEdit = false;\n  appointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists = {\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  };\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initProfileData();\n  }\n\n  ngOnInit() {\n    this.initPicklistValues();\n    this.setStateMedicalLicenseEdit();\n  }\n\n  setStateMedicalLicenseEdit() {\n    this.medicalLicenses$?.pipe(untilDestroyed(this)).subscribe((medicalLicenses: IMedicalLicense[]) => {\n      const extendedLicenses: IMedicalLicense[] = medicalLicenses.map(\n        (license) => ({\n          ...license,\n          showEdit: license.reportingOrganization === 'Self',\n        })\n      );\n      this.extendedMedicalLicenses$?.next(extendedLicenses);\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetPicklists('500'))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        //create new objects to trigger change detection\n        const newMedicalLicensePickLists: IMedicalLicensePickLists = {\n          licenseStateOptions: [],\n          licenseTypeOptions: [],\n        };\n        const newAppointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists =\n          {\n            stateCodeOptions: [],\n            practiceTypeOptions: [],\n            organizationTypeOptions: [],\n            organizationOptions: [],\n            appointmentTypeOptions: [],\n          };\n        const newProfessionalStandingPickLists: IProfessionalStandingPickLists =\n          {\n            organizationTypeOptions: [],\n            primaryPracticeOptions: [],\n          };\n\n        //medical license picklists\n        newMedicalLicensePickLists.licenseStateOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newMedicalLicensePickLists.licenseTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.licenseTypes);\n\n        this.medicalLicensePickLists = newMedicalLicensePickLists;\n\n        //appointments and privileges picklists\n        newAppointmentsPrivilegesPickLists.stateCodeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newAppointmentsPrivilegesPickLists.practiceTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.practiceTypes);\n        newAppointmentsPrivilegesPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newAppointmentsPrivilegesPickLists.organizationOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.jcahoOrganizations\n          );\n        newAppointmentsPrivilegesPickLists.appointmentTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.appointmentTypes\n          );\n        this.appointmentsPrivilegesPickLists =\n          newAppointmentsPrivilegesPickLists;\n\n        //professional standing picklists\n        newProfessionalStandingPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newProfessionalStandingPickLists.primaryPracticeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.primaryPractices\n          );\n        this.currentAppointmentPickLists = newProfessionalStandingPickLists;\n      });\n  }\n\n  initProfileData() {\n    this.getMedicalLicenses();\n    this.getCurrentAppointmentDetails();\n    this.getPreviousAppointmentsAndPrivileges();\n    this.getSanctionsAndEthicsDetails();\n  }\n\n  getCurrentAppointmentDetails() {\n    this._store\n      .dispatch(new GetUserProfessionalStandingDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.currentAppointments$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.currentAppointments = res;\n          if (!res) {\n            this.editHospitalAppointmentsAndPrivileges$.next(true);\n          }\n        });\n      });\n  }\n\n  getSanctionsAndEthicsDetails() {\n    this._store\n      .dispatch(new GetProfessionalStandingSanctionsDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.sanctionsAndEthics$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.sanctionsAndEthics = res;\n          if (!res) {\n            this.editSanctionsAndEthics$.next(true);\n          }\n        });\n      });\n  }\n\n  getPreviousAppointmentsAndPrivileges() {\n    this._store.dispatch(new GetPSAppointmentsAndPrivilegesList());\n  }\n\n  getAppointmentDetails(appointment: IUserAppointmentModel) {\n    if (appointment.apptId) {\n      this._store\n        .dispatch(new GetPSAppointmentAndPrivilegeDetails(appointment.apptId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedAppointment = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedAppointment\n          );\n        });\n    }\n  }\n\n  getMedicalLicenses() {\n    this._store.dispatch(new GetPSMedicalLicenseList());\n  }\n\n  getMedicalLicenseDetails(license: IMedicalLicenseReadOnlyModel) {\n    if (license.licenseId) {\n      this._store\n        .dispatch(new GetPSMedicalLicenseDetails(license.licenseId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedMedicalLicense = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedMedicalLicense\n          );\n        });\n    }\n  }\n\n  /* Medical License Functions */\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: IMedicalLicenseReadOnlyModel | null | undefined) {\n    if (license) {\n      this.getMedicalLicenseDetails(license);\n      this.stateMedicalLicenseTitle = 'Edit Medical License';\n    } else {\n      this.selectedMedicalLicense = undefined;\n      this.stateMedicalLicenseTitle = 'Add Medical License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n\n  saveLicense($event: any) {\n    let issueDate = '';\n    let expireDate = '';\n    if ($event.data.issueDate) {\n      issueDate = new Date($event.data.issueDate).toISOString();\n    }\n    if ($event.data.expireDate) {\n      expireDate = new Date($event.data.expireDate).toISOString();\n    }\n    const newLicense = {\n      licenseId: this.selectedMedicalLicense?.licenseId ?? 0,\n      issuingStateId: $event.data.issuingStateId ?? '',\n      licenseNumber: $event.data.licenseNumber ?? '',\n      licenseTypeId: $event.data.licenseTypeId ?? 0,\n      issueDate: issueDate,\n      expireDate: expireDate,\n      reportingOrganization:\n        this.selectedMedicalLicense?.reportingOrganization ?? 'Self',\n    } as unknown as IMedicalLicenseModel;\n\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    }\n  }\n\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n  }\n\n  /* Sanctions and Ethics Functions */\n  saveSanctionsAndEthics($event: any) {\n    const newSanctionsAndEthics = {\n      ...$event.data,\n    } as unknown as ISanctionsModel;\n\n    if (this.sanctionsAndEthics) {\n      this._store\n        .dispatch(\n          new UpdateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(\n          new CreateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    }\n  }\n\n  /* Current Appointments Functions */\n  saveCurrentAppointments($event: any) {\n    const newCurrentAppointments = {\n      ...$event.data,\n      clinicallyActive: $event.data.clinicallyActive ? 1 : 0,\n    } as unknown as IUserProfessionalStandingModel;\n\n    if (this.currentAppointments) {\n      this._store\n        .dispatch(\n          new UpdateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    } else {\n      // create\n      this._store\n        .dispatch(\n          new CreateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    }\n  }\n\n  /* Appointments List Functions */\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteAppointment($event.data.apptId);\n          }\n        });\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.getAppointmentDetails(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.selectedAppointment = undefined;\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n\n  saveAppointment($event: any) {\n    // get orgId from autocomplete object\n    const orgId = $event.data.organizationId?.itemValue ?? 0;\n    const newAppointment = {\n      apptId: this.selectedAppointment?.apptId ?? 0,\n      practiceTypeId: $event.data.practiceTypeId ?? 0,\n      appointmentTypeId: $event.data.appointmentTypeId ?? 0,\n      organizationTypeId: $event.data.organizationTypeId ?? 0,\n      authorizingOfficial: $event.data.authorizingOfficial ?? '',\n      organizationId: orgId,\n      stateCode: $event.data.stateCode ?? '',\n      other: $event.data.other ?? '',\n    } as unknown as IUserAppointmentModel;\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    }\n  }\n\n  deleteAppointment(apptId: number) {\n    this._store.dispatch(new DeletePSAppointmentAndPrivilege(apptId));\n  }\n\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.selectedAppointment = undefined;\n  }\n\n  /* on page form helper functions */\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n}\n",
      "properties": [
        {
          "name": "showEdit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 76
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "IMedicalLicenseReadOnlyModel"
    },
    {
      "name": "IMedicalLicenseModel",
      "id": "interface-IMedicalLicenseModel-899b6d14ba4ac3858816924e4840345a8caed136ae53ae7c623c3be008b2fb6dd26b004bffca3d7a92d42f29799bf97fd4954f2b5a2ec34ff711edc7163acf8d",
      "file": "src/app/api/models/professionalstanding/medical-license.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IMedicalLicenseModel {\r\n    licenseId: number;\r\n    userId: number;\r\n    issuingStateId: string;\r\n    issuingState: string;\r\n    licenseNumber: string;\r\n    licenseTypeId: number;\r\n    licenseType: string;\r\n    issueDate: string;\r\n    expireDate: string;\r\n    reportingOrganization: string;\r\n}\r\n",
      "properties": [
        {
          "name": "expireDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "issuingState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "issuingStateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "licenseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "licenseNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "licenseType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "licenseTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "reportingOrganization",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMedicalLicensePickLists",
      "id": "interface-IMedicalLicensePickLists-396dc4fea357980963b6e232c416f40a86f4119b05a6d545b3851b6b50b8157f8ee2ea5bc7af43bc9b48c3bc138d4e100e80808622c0abebf9d24dcad15937f0",
      "file": "src/app/professional-standing/professional-standing.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  ProfessionalStandingSelectors,\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  GetUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  GetPSAppointmentsAndPrivilegesList,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n  UpdatePSAppointmentAndPrivilege,\n  CreatePSAppointmentAndPrivilege,\n  GetPSAppointmentAndPrivilegeDetails,\n  DeletePSAppointmentAndPrivilege,\n  ClearProfessionalStandingErrors,\n} from '../state';\nimport {\n  GetPicklists,\n  IPickListItemNumber,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IStateReadOnlyModel,\n  IUserProfessionalStandingModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserAppointmentReadOnlyModel,\n} from '../api';\nimport { LicenseFormComponent } from './license-form/license-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SanctionsFormComponent } from './sanctions-form/sanctions-form.component';\nimport { AppointmentsFormComponent } from './appointments-form/appointments-form.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CurrentAppointmentFormComponent } from './current-appointment-form/current-appointment-form.component';\ninterface IMedicalLicensePickLists {\n  licenseStateOptions: IStateReadOnlyModel[] | undefined;\n  licenseTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IProfessionalStandingPickLists {\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  primaryPracticeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IAppointementsPrivilegesPickLists {\n  stateCodeOptions: IStateReadOnlyModel[] | undefined;\n  practiceTypeOptions: IPickListItemNumber[] | undefined;\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  organizationOptions: IPickListItemNumber[] | undefined;\n  appointmentTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IMedicalLicense extends IMedicalLicenseReadOnlyModel {\n  showEdit: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    ButtonModule,\n    LicenseFormComponent,\n    SanctionsFormComponent,\n    AppointmentsFormComponent,\n    CurrentAppointmentFormComponent,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  /* error variables */\n  clearErrors = new ClearProfessionalStandingErrors(); // may need to break this into dividual error clearing actions\n  @Select(ProfessionalStandingSelectors.slices.medicalLicenseErrors)\n  medicalLicenseErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.appointmentErrors)\n  appointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.professionalStandingErrors)\n  currentAppointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.sanctionsErrors)\n  sanctionsErrors$: Observable<any> | undefined;\n\n  /* Medical License variables */\n  @Select(ProfessionalStandingSelectors.slices.medicalLiscenseList)\n  medicalLicenses$: Observable<IMedicalLicense[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedMedicalLicense)\n  selectedMedicalLicense$: Observable<IMedicalLicenseModel> | undefined;\n\n  extendedMedicalLicenses$: Subject<IMedicalLicense[]> | undefined =\n    new BehaviorSubject([] as any);\n\n  licensesCols = LICENSES_COLS;\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  stateMedicalLicenseTitle: string | undefined;\n  showLicensesAddEdit = false;\n  medicalLicensePickLists: IMedicalLicensePickLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  /* Sanctions and Ethics variables */\n  @Select(ProfessionalStandingSelectors.slices.sanctions)\n  sanctionsAndEthics$: Observable<ISanctionsModel> | undefined;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(false);\n\n  sanctionsAndEthics: ISanctionsModel | undefined;\n\n  /* Current Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.userProfessionalStandingDetails)\n  currentAppointments$: Observable<IUserProfessionalStandingModel> | undefined;\n  currentAppointments: any;\n  currentAppointmentPickLists: IProfessionalStandingPickLists = {\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  };\n\n  /* Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.allAppointments)\n  allAppointments$: Observable<IUserAppointmentReadOnlyModel[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedAppointment)\n  selectedAppointment$: Observable<IUserAppointmentModel> | undefined;\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(false);\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  appointmentsTitle: string | undefined;\n  selectedAppointment: IUserAppointmentModel | undefined;\n  showAppointmentsAddEdit = false;\n  appointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists = {\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  };\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initProfileData();\n  }\n\n  ngOnInit() {\n    this.initPicklistValues();\n    this.setStateMedicalLicenseEdit();\n  }\n\n  setStateMedicalLicenseEdit() {\n    this.medicalLicenses$?.pipe(untilDestroyed(this)).subscribe((medicalLicenses: IMedicalLicense[]) => {\n      const extendedLicenses: IMedicalLicense[] = medicalLicenses.map(\n        (license) => ({\n          ...license,\n          showEdit: license.reportingOrganization === 'Self',\n        })\n      );\n      this.extendedMedicalLicenses$?.next(extendedLicenses);\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetPicklists('500'))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        //create new objects to trigger change detection\n        const newMedicalLicensePickLists: IMedicalLicensePickLists = {\n          licenseStateOptions: [],\n          licenseTypeOptions: [],\n        };\n        const newAppointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists =\n          {\n            stateCodeOptions: [],\n            practiceTypeOptions: [],\n            organizationTypeOptions: [],\n            organizationOptions: [],\n            appointmentTypeOptions: [],\n          };\n        const newProfessionalStandingPickLists: IProfessionalStandingPickLists =\n          {\n            organizationTypeOptions: [],\n            primaryPracticeOptions: [],\n          };\n\n        //medical license picklists\n        newMedicalLicensePickLists.licenseStateOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newMedicalLicensePickLists.licenseTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.licenseTypes);\n\n        this.medicalLicensePickLists = newMedicalLicensePickLists;\n\n        //appointments and privileges picklists\n        newAppointmentsPrivilegesPickLists.stateCodeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newAppointmentsPrivilegesPickLists.practiceTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.practiceTypes);\n        newAppointmentsPrivilegesPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newAppointmentsPrivilegesPickLists.organizationOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.jcahoOrganizations\n          );\n        newAppointmentsPrivilegesPickLists.appointmentTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.appointmentTypes\n          );\n        this.appointmentsPrivilegesPickLists =\n          newAppointmentsPrivilegesPickLists;\n\n        //professional standing picklists\n        newProfessionalStandingPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newProfessionalStandingPickLists.primaryPracticeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.primaryPractices\n          );\n        this.currentAppointmentPickLists = newProfessionalStandingPickLists;\n      });\n  }\n\n  initProfileData() {\n    this.getMedicalLicenses();\n    this.getCurrentAppointmentDetails();\n    this.getPreviousAppointmentsAndPrivileges();\n    this.getSanctionsAndEthicsDetails();\n  }\n\n  getCurrentAppointmentDetails() {\n    this._store\n      .dispatch(new GetUserProfessionalStandingDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.currentAppointments$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.currentAppointments = res;\n          if (!res) {\n            this.editHospitalAppointmentsAndPrivileges$.next(true);\n          }\n        });\n      });\n  }\n\n  getSanctionsAndEthicsDetails() {\n    this._store\n      .dispatch(new GetProfessionalStandingSanctionsDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.sanctionsAndEthics$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.sanctionsAndEthics = res;\n          if (!res) {\n            this.editSanctionsAndEthics$.next(true);\n          }\n        });\n      });\n  }\n\n  getPreviousAppointmentsAndPrivileges() {\n    this._store.dispatch(new GetPSAppointmentsAndPrivilegesList());\n  }\n\n  getAppointmentDetails(appointment: IUserAppointmentModel) {\n    if (appointment.apptId) {\n      this._store\n        .dispatch(new GetPSAppointmentAndPrivilegeDetails(appointment.apptId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedAppointment = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedAppointment\n          );\n        });\n    }\n  }\n\n  getMedicalLicenses() {\n    this._store.dispatch(new GetPSMedicalLicenseList());\n  }\n\n  getMedicalLicenseDetails(license: IMedicalLicenseReadOnlyModel) {\n    if (license.licenseId) {\n      this._store\n        .dispatch(new GetPSMedicalLicenseDetails(license.licenseId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedMedicalLicense = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedMedicalLicense\n          );\n        });\n    }\n  }\n\n  /* Medical License Functions */\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: IMedicalLicenseReadOnlyModel | null | undefined) {\n    if (license) {\n      this.getMedicalLicenseDetails(license);\n      this.stateMedicalLicenseTitle = 'Edit Medical License';\n    } else {\n      this.selectedMedicalLicense = undefined;\n      this.stateMedicalLicenseTitle = 'Add Medical License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n\n  saveLicense($event: any) {\n    let issueDate = '';\n    let expireDate = '';\n    if ($event.data.issueDate) {\n      issueDate = new Date($event.data.issueDate).toISOString();\n    }\n    if ($event.data.expireDate) {\n      expireDate = new Date($event.data.expireDate).toISOString();\n    }\n    const newLicense = {\n      licenseId: this.selectedMedicalLicense?.licenseId ?? 0,\n      issuingStateId: $event.data.issuingStateId ?? '',\n      licenseNumber: $event.data.licenseNumber ?? '',\n      licenseTypeId: $event.data.licenseTypeId ?? 0,\n      issueDate: issueDate,\n      expireDate: expireDate,\n      reportingOrganization:\n        this.selectedMedicalLicense?.reportingOrganization ?? 'Self',\n    } as unknown as IMedicalLicenseModel;\n\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    }\n  }\n\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n  }\n\n  /* Sanctions and Ethics Functions */\n  saveSanctionsAndEthics($event: any) {\n    const newSanctionsAndEthics = {\n      ...$event.data,\n    } as unknown as ISanctionsModel;\n\n    if (this.sanctionsAndEthics) {\n      this._store\n        .dispatch(\n          new UpdateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(\n          new CreateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    }\n  }\n\n  /* Current Appointments Functions */\n  saveCurrentAppointments($event: any) {\n    const newCurrentAppointments = {\n      ...$event.data,\n      clinicallyActive: $event.data.clinicallyActive ? 1 : 0,\n    } as unknown as IUserProfessionalStandingModel;\n\n    if (this.currentAppointments) {\n      this._store\n        .dispatch(\n          new UpdateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    } else {\n      // create\n      this._store\n        .dispatch(\n          new CreateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    }\n  }\n\n  /* Appointments List Functions */\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteAppointment($event.data.apptId);\n          }\n        });\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.getAppointmentDetails(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.selectedAppointment = undefined;\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n\n  saveAppointment($event: any) {\n    // get orgId from autocomplete object\n    const orgId = $event.data.organizationId?.itemValue ?? 0;\n    const newAppointment = {\n      apptId: this.selectedAppointment?.apptId ?? 0,\n      practiceTypeId: $event.data.practiceTypeId ?? 0,\n      appointmentTypeId: $event.data.appointmentTypeId ?? 0,\n      organizationTypeId: $event.data.organizationTypeId ?? 0,\n      authorizingOfficial: $event.data.authorizingOfficial ?? '',\n      organizationId: orgId,\n      stateCode: $event.data.stateCode ?? '',\n      other: $event.data.other ?? '',\n    } as unknown as IUserAppointmentModel;\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    }\n  }\n\n  deleteAppointment(apptId: number) {\n    this._store.dispatch(new DeletePSAppointmentAndPrivilege(apptId));\n  }\n\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.selectedAppointment = undefined;\n  }\n\n  /* on page form helper functions */\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n}\n",
      "properties": [
        {
          "name": "licenseStateOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "licenseTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 59
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMedicalLicenseReadOnlyModel",
      "id": "interface-IMedicalLicenseReadOnlyModel-c0542b772493e65ffc5ef7932b80b05318f502ed48a47e601a817401efc01f0a5cf37d90a197df2d6feb96088aba38fe5cbd202175d44d1bda9f5acd143dc420",
      "file": "src/app/api/models/professionalstanding/medical-license-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IMedicalLicenseReadOnlyModel {\r\n    licenseId: number;\r\n    userId: number;\r\n    issuingStateId: string;\r\n    issuingState: string;\r\n    licenseNumber: string;\r\n    licenseTypeId: number;\r\n    licenseType: string;\r\n    issueDate: string;\r\n    expireDate: string;\r\n    reportingOrganization: string;\r\n}\r\n",
      "properties": [
        {
          "name": "expireDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "issuingState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "issuingStateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "licenseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "licenseNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "licenseType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "licenseTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "reportingOrganization",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMedicalTraining",
      "id": "interface-IMedicalTraining-e6d4de1d330550eefa1791e0494c48355c93a74ea0890873c61347913c7d13bf3726e67a7c74ebe3bbc0b1ef51b4a706f2073a8c6986a4c98d5a5fdc7d7a38c9",
      "file": "src/app/state/medical-training/medical-training.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { MedicalTrainingService } from 'src/app/api/services/medicaltraining/medical-training.service';\nimport {\n  CreateMedicalTraining,\n  GetAdvancedTrainingData,\n  GetMedicalTraining,\n  GetUserCertificates,\n  GetOtherCertifications,\n  UpdateMedicalTraining,\n  CreateOtherCertification,\n  UpdateOtherCertifications,\n  GetFellowships,\n  UpdateFellowship,\n  CreateFellowship,\n  DeleteFellowship,\n  ClearMedicalTrainingErrors,\n  CreateAdvancedTraining,\n  UpdateAdvancedTraining,\n} from './medical-training.actions';\nimport { AdvancedTrainingService } from 'src/app/api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from 'src/app/api/models/medicaltraining/advanced-training-read-only.model';\nimport { IUserCertificateReadOnlyModel } from 'src/app/api/models/medicaltraining/user-certificate-read-only.model';\nimport { UserCertificateService } from 'src/app/api/services/medicaltraining/user-certificate.service';\nimport { OtherCertificationsService } from 'src/app/api/services/medicaltraining/other-certifications.service';\nimport { IOtherCertificationsReadOnlyModel } from 'src/app/api/models/medicaltraining/other-certifications-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { FellowshipService } from 'src/app/api/services/medicaltraining/fellowship.service';\nimport { IFellowshipReadOnlyModel } from 'src/app/api/models/medicaltraining/fellowship-read-only.model';\n\nexport interface IMedicalTraining {\n  medicalTraining: IMedicalTrainingModel | undefined;\n  additionalTraining: IAdvancedTrainingReadOnlyModel[] | undefined;\n  userCertificates: IUserCertificateReadOnlyModel[] | undefined;\n  otherCertifications: IOtherCertificationsReadOnlyModel[] | undefined;\n  fellowships: IFellowshipReadOnlyModel[] | undefined;\n  errors?: IFormErrors | null;\n}\n\nexport const MEDICALSTATE_STATE_TOKEN = new StateToken<IMedicalTraining>(\n  'medical_training'\n);\n\n@State<IMedicalTraining>({\n  name: MEDICALSTATE_STATE_TOKEN,\n  defaults: {\n    medicalTraining: undefined,\n    additionalTraining: undefined,\n    userCertificates: undefined,\n    otherCertifications: undefined,\n    fellowships: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MedicalTrainingState {\n  constructor(\n    private medicalTrainingService: MedicalTrainingService,\n    private advancedTrainingService: AdvancedTrainingService,\n    private userCertificateService: UserCertificateService,\n    private otherCertificationsService: OtherCertificationsService,\n    private fellowshipService: FellowshipService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetMedicalTraining)\n  getMedicalTraining(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    if (ctx.getState()?.medicalTraining) {\n      this.globalDialogService.closeOpenDialog();\n      return of(ctx.getState()?.medicalTraining);\n    }\n\n    return this.medicalTrainingService\n      .retrieveMedicalTraining_GetByUserId()\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(CreateMedicalTraining)\n  createMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    return this.medicalTrainingService\n      .createMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Create failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateMedicalTraining)\n  updateMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    return this.medicalTrainingService\n      .updateMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Updated successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          this.globalDialogService.closeOpenDialog();\n          console.error('------- In Medical Training Store', error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetAdvancedTrainingData)\n  getAdvancedTrainingData(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IAdvancedTrainingReadOnlyModel[] | undefined> {\n    return this.advancedTrainingService\n      .retrieveAdvancedTrainingReadOnly_GetByUserId()\n      .pipe(\n        tap((additionalTraining: IAdvancedTrainingReadOnlyModel[]) => {\n          ctx.patchState({\n            additionalTraining,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetUserCertificates)\n  getUserCertificates(\n    ctx: StateContext<IMedicalTraining>,\n    payload: GetUserCertificates\n  ): Observable<IUserCertificateReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.userCertificates && !payload?.isUpload) {\n      return of(ctx.getState()?.userCertificates);\n    }\n    return this.userCertificateService\n      .retrieveUserCertificateReadOnly_GetByUserId()\n      .pipe(\n        tap((userCertificates: IUserCertificateReadOnlyModel[]) => {\n          ctx.patchState({\n            userCertificates,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetOtherCertifications)\n  GetOtherCertifications(\n    ctx: StateContext<IMedicalTraining>,\n    payload: GetOtherCertifications\n  ): Observable<IOtherCertificationsReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.otherCertifications && !payload?.isUpdate) {\n      return of(ctx.getState()?.otherCertifications);\n    }\n\n    return this.otherCertificationsService\n      .retrieveOtherCertificationsReadOnly_GetByUserId()\n      .pipe(\n        tap((otherCertifications: IOtherCertificationsReadOnlyModel[]) => {\n          ctx.patchState({\n            otherCertifications,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(CreateOtherCertification)\n  createOtherCertification(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateOtherCertification\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.otherCertificationsService\n      .createOtherCertifications(payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetOtherCertifications(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateOtherCertifications)\n  updateOtherCertifications(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateOtherCertifications\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.otherCertificationsService\n      .updateOtherCertifications(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetOtherCertifications(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetFellowships)\n  getFellowships(ctx: StateContext<IMedicalTraining>, payload: GetFellowships) {\n    if (ctx.getState()?.fellowships && !payload?.isUpdate) {\n      return of(ctx.getState()?.fellowships);\n    }\n\n    return this.fellowshipService.retrieveFellowshipReadOnly_GetByUserId().pipe(\n      tap((fellowships: IFellowshipReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowships,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(CreateFellowship)\n  createFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService.createFellowship(payload.model).pipe(\n      tap(() => {\n        ctx.dispatch(new GetFellowships(true));\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Created successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        ctx.patchState({\n          errors: error.error.errors,\n        });\n        this.globalDialogService.closeOpenDialog();\n        return of(error);\n      })\n    );\n  }\n\n  @Action(UpdateFellowship)\n  updateFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService\n      .updateFellowship(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetFellowships(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(DeleteFellowship)\n  deleteFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: DeleteFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService.deleteFellowship(payload.id).pipe(\n      tap(() => {\n        ctx.dispatch(new GetFellowships(true));\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Deleted successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        ctx.patchState({\n          errors: error.error.errors,\n        });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Delete failed',\n          false\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(ClearMedicalTrainingErrors)\n  clearGraduateMedicalEducationErrors(ctx: StateContext<IMedicalTraining>) {\n    ctx.patchState({ errors: null });\n  }\n\n  @Action(CreateAdvancedTraining)\n  createAdvancedTraining(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateAdvancedTraining\n  ) {\n    this.globalDialogService.showLoading();\n    return this.advancedTrainingService\n      .createAdvancedTraining(payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetAdvancedTrainingData());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateAdvancedTraining)\n  updateAdvancedTraining(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateAdvancedTraining\n  ) {\n    this.globalDialogService.showLoading();\n    return this.advancedTrainingService\n      .updateAdvancedTraining(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetAdvancedTrainingData());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Updated successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n}\n",
      "properties": [
        {
          "name": "additionalTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdvancedTrainingReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 41
        },
        {
          "name": "fellowships",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "medicalTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalTrainingModel | undefined",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "otherCertifications",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IOtherCertificationsReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "userCertificates",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserCertificateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 38
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMedicalTrainingModel",
      "id": "interface-IMedicalTrainingModel-59d10d97e67bc920afb393fd472f2cd355b82911b43254f9df6ab15966de4c2de0b365d46dcc93b493587e16505b4e11591c2f29cd46735ef192e06eeb5d237c",
      "file": "src/app/api/models/medicaltraining/medical-training.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IMedicalTrainingModel {\r\n    id: number;\r\n    userId: number;\r\n    graduateProfileId: number;\r\n    graduateProfileDescription: string;\r\n    medicalSchoolName: string;\r\n    medicalSchoolCity: string;\r\n    medicalSchoolStateId: string;\r\n    medicalSchoolStateName: string;\r\n    medicalSchoolCountryId: string;\r\n    medicalSchoolCountryName: string;\r\n    degreeId: number;\r\n    degreeName: string;\r\n    medicalSchoolCompletionYear: string;\r\n    residencyProgramName: string;\r\n    residencyCompletionYear: string;\r\n    residencyProgramOther: string;\r\n    createdAtUtc: string;\r\n    createdByUserId: number;\r\n    lastUpdatedByUserId: number;\r\n    lastUpdatedAtUtc: string;\r\n}\r\n",
      "properties": [
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "degreeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "degreeName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "graduateProfileDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "graduateProfileId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "medicalSchoolCity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "medicalSchoolCompletionYear",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "medicalSchoolCountryId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "medicalSchoolCountryName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "medicalSchoolName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "medicalSchoolStateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "medicalSchoolStateName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "residencyCompletionYear",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "residencyProgramName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "residencyProgramOther",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IMenuItem",
      "id": "interface-IMenuItem-ec59c28012ffdbcc7744a09c163a0ebd1ac41d548b4ee7ff42bd2f1d1e96fdeb768508c169103ab560eeabc2be61728afd396eea3664b93adb7dc0ef8686c291",
      "file": "src/web-components/menuItem.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IMenuItem {\n  display: string;\n  displayKey?: string;\n  action: string;\n  icon?: string;\n  feature?: string;\n  children?: Array<IMenuItem>;\n}\n",
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "children",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<IMenuItem>",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "display",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "displayKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 3
        },
        {
          "name": "feature",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IOrganizationTypeReadOnlyModel",
      "id": "interface-IOrganizationTypeReadOnlyModel-31bf0a118aa96a371182aed81e6328430c1f41f9cd408551fd76f56e7660efc902634c93534f88307040c65ff6245530cf785434bcc5cc413c17162458cab1dd",
      "file": "src/app/api/models/picklists/organization-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IOrganizationTypeReadOnlyModel {\r\n    id: number;\r\n    type: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IOtherCertificationsModel",
      "id": "interface-IOtherCertificationsModel-c35ad41bb870de8a0c15fe3735751a97bd74d28166d2e83063b4244fe70f66ca0a2224d434c2636e2a8d4c41168253861af6e4479e895790be728fc8edc40bf5",
      "file": "src/app/api/models/medicaltraining/other-certifications.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IOtherCertificationsModel {\r\n    id: number;\r\n    userId: number;\r\n    certificateTypeId: number;\r\n    certificateTypeName: string;\r\n    issueDate: string;\r\n    certificateNumber: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "certificateNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "certificateTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "certificateTypeName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IOtherCertificationsReadOnlyModel",
      "id": "interface-IOtherCertificationsReadOnlyModel-e9ad7ee1c11c059f81cec182454092a0c8cdf19fe48eb5f6b3ec2c1f5a1d0d095802a86973af7a57d225aa27978bf7ce878824bc72ba89ad72720292f3d55071",
      "file": "src/app/api/models/medicaltraining/other-certifications-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IOtherCertificationsReadOnlyModel {\r\n    id: number;\r\n    userId: number;\r\n    certificateTypeId: number;\r\n    certificateTypeName: string;\r\n    issueDate: string;\r\n    certificateNumber: string;\r\n}\r\n",
      "properties": [
        {
          "name": "certificateNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "certificateTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "certificateTypeName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IOutcomeRegistryModel",
      "id": "interface-IOutcomeRegistryModel-ecd9f2de2b61bac8249baf08eefb0a6bcac48dfb47f7344e00ddc01bc0fcad83ddb4873066c90af4e10f7af72a86773e6142cbeff6844aa27b8ed8dc3fbacab6",
      "file": "src/app/api/models/continuouscertification/outcome-registry.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IOutcomeRegistryModel {\r\n    surgeonSpecificRegistry: boolean;\r\n    registryComments: string;\r\n    registeredWithACHQC: boolean;\r\n    registeredWithCESQIP: boolean;\r\n    registeredWithMBSAQIP: boolean;\r\n    registeredWithABA: boolean;\r\n    registeredWithASBS: boolean;\r\n    registeredWithStatewideCollaboratives: boolean;\r\n    registeredWithABMS: boolean;\r\n    registeredWithNCDB: boolean;\r\n    registeredWithRQRS: boolean;\r\n    registeredWithNSQIP: boolean;\r\n    registeredWithNTDB: boolean;\r\n    registeredWithSTS: boolean;\r\n    registeredWithTQIP: boolean;\r\n    registeredWithUNOS: boolean;\r\n    registeredWithNCDR: boolean;\r\n    registeredWithSVS: boolean;\r\n    registeredWithELSO: boolean;\r\n    userConfirmed: boolean;\r\n    userConfirmedDateUtc: string;\r\n    userId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "registeredWithABA",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "registeredWithABMS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "registeredWithACHQC",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "registeredWithASBS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "registeredWithCESQIP",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "registeredWithELSO",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "registeredWithMBSAQIP",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "registeredWithNCDB",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "registeredWithNCDR",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "registeredWithNSQIP",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "registeredWithNTDB",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "registeredWithRQRS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "registeredWithStatewideCollaboratives",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "registeredWithSTS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "registeredWithSVS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "registeredWithTQIP",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "registeredWithUNOS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "registryComments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "surgeonSpecificRegistry",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "userConfirmed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "userConfirmedDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPicklist",
      "id": "interface-IPicklist-2ef1d995581a464ddbdb6402df045b1960d44e08e3feec75d2a10bfea7ac9b99745c6c228e2c4b937c632a3daa830e5fffca03e5d2aff9002375627aae91444d",
      "file": "src/app/state/picklists/picklists.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n  ILicenseTypeReadOnlyModel,\n  IPracticeTypeReadOnlyModel,\n  IOrganizationTypeReadOnlyModel,\n  IAppointmentTypeReadOnlyModel,\n  IJcahoOrganizationReadOnlyModel,\n  IPrimaryPracticeReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  GetCertificateTypes,\n  GetDocumentTypes,\n  GetLicenseTypeList,\n  GetPracticeTypeList,\n  GetOrganizationTypeList,\n  GetAppointmentTypeList,\n  GetJcahoOrganizationList,\n  GetPrimaryPracticeList,\n  GetScoringSessionList,\n  GetFellowshipTypes,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from 'src/app/api/models/picklists/document-type-read-only.model';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  certificateTypes: ICertificateTypeReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n  licenseTypes: IPickListItemNumber[] | undefined;\n  practiceTypes: IPickListItemNumber[] | undefined;\n  organizationTypes: IPickListItemNumber[] | undefined;\n  appointmentTypes: IPickListItemNumber[] | undefined;\n  jcahoOrganizations: IPickListItemNumber[] | undefined;\n  primaryPractices: IPickListItemNumber[] | undefined;\n  scoringSessions: IScoringSessionReadOnlyModel[] | undefined;\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\nexport interface IPickListItemNumber {\n  itemValue: number | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n    certificateTypes: undefined,\n    documentTypes: undefined,\n    licenseTypes: undefined,\n    practiceTypes: undefined,\n    organizationTypes: undefined,\n    appointmentTypes: undefined,\n    jcahoOrganizations: undefined,\n    primaryPractices: undefined,\n    scoringSessions: undefined,\n    fellowshipTypes: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipTypes)\n  getFellowshipTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipTypes) {\n      return of(ctx.getState()?.fellowshipTypes);\n    }\n    return this.picklistsService.retrieveFellowshipTypeReadOnly_Get().pipe(\n      tap((fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowshipTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>,\n    payload: { fellowshipType: string }\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    this.globalDialogService.showLoading();\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll(payload.fellowshipType)\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCertificateTypes)\n  getCertificateTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICertificateTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.certificateTypes) {\n      return of(ctx.getState()?.certificateTypes);\n    }\n    return this.picklistsService.retrieveCertificateTypeReadOnly_GetAll().pipe(\n      tap((certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          certificateTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Certificate Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLicenseTypeList)\n  getLicenseTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.licenseTypes) {\n      return of(ctx.getState()?.licenseTypes);\n    }\n    return this.picklistsService.retrieveLicenseTypeReadOnly_GetAll().pipe(\n      tap((licenseTypes: ILicenseTypeReadOnlyModel[]) => {\n        const licenseTypesList = [] as IPickListItemNumber[];\n        licenseTypes.forEach((type) => {\n          licenseTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          licenseTypes: licenseTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: License Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPracticeTypeList)\n  getPracticeTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.practiceTypes) {\n      return of(ctx.getState()?.practiceTypes);\n    }\n    return this.picklistsService.retrievePracticeTypeReadOnly_GetAll().pipe(\n      tap((practiceTypes: IPracticeTypeReadOnlyModel[]) => {\n        const practiceTypesList = [] as IPickListItemNumber[];\n        practiceTypes.forEach((type) => {\n          practiceTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          practiceTypes: practiceTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Practice Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetOrganizationTypeList)\n  getOrganizationTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.organizationTypes) {\n      return of(ctx.getState()?.organizationTypes);\n    }\n    return this.picklistsService.retrieveOrganizationTypeReadOnly_GetAll().pipe(\n      tap((orgTypes: IOrganizationTypeReadOnlyModel[]) => {\n        const orgTypesList = [] as IPickListItemNumber[];\n        orgTypes.forEach((type) => {\n          orgTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.type,\n          });\n        });\n\n        ctx.patchState({\n          organizationTypes: orgTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Organization Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetAppointmentTypeList)\n  getAppointmentTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.appointmentTypes) {\n      return of(ctx.getState()?.appointmentTypes);\n    }\n    return this.picklistsService.retrieveAppointmentTypeReadOnly_GetAll().pipe(\n      tap((appointmentTypes: IAppointmentTypeReadOnlyModel[]) => {\n        const appointmentTypesList = [] as IPickListItemNumber[];\n        appointmentTypes.forEach((type) => {\n          appointmentTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          appointmentTypes: appointmentTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Appointment Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetJcahoOrganizationList)\n  getJcahoOrganizationList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.jcahoOrganizations) {\n      return of(ctx.getState()?.jcahoOrganizations);\n    }\n    return this.picklistsService\n      .retrieveJcahoOrganizationReadOnly_GetAll()\n      .pipe(\n        tap((jcahoOrganizations: IJcahoOrganizationReadOnlyModel[]) => {\n          const jcahoOrganizationList = [] as IPickListItemNumber[];\n          jcahoOrganizations.forEach((type) => {\n            jcahoOrganizationList.push({\n              itemValue: type.organizationId,\n              itemDescription: type.organizationName,\n            });\n          });\n\n          ctx.patchState({\n            jcahoOrganizations: jcahoOrganizationList,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Appointment Types', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPrimaryPracticeList)\n  getPrimaryPracticeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.primaryPractices) {\n      return of(ctx.getState()?.primaryPractices);\n    }\n    return this.picklistsService.retrievePrimaryPracticeReadOnly_GetAll().pipe(\n      tap((primaryPractices: IPrimaryPracticeReadOnlyModel[]) => {\n        const primaryPracticeList = [] as IPickListItemNumber[];\n        primaryPractices.forEach((type) => {\n          primaryPracticeList.push({\n            itemValue: type.id,\n            itemDescription: type.practice,\n          });\n        });\n\n        ctx.patchState({\n          primaryPractices: primaryPracticeList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Primary Practices', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetScoringSessionList)\n  getScoringSessionList(\n    ctx: StateContext<IPicklist>\n    //payload: { date: string }\n  ): Observable<IPickListItemNumber[] | undefined> {\n    //const examHeaderId = payload.id;\n    const currentDate = new Date().toISOString();\n    // removed because we don't want to save this value in the store because it will change based on passed in id\n    // if (ctx.getState()?.primaryPractices) {\n    //   return of(ctx.getState()?.primaryPractices);\n    // }\n    return this.picklistsService\n      .retrieveScoringSessionReadOnly_GetByKeys(currentDate)\n      .pipe(\n        tap((scoringSessions: IScoringSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            scoringSessions: scoringSessions,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Scoring Sessions', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string; fellowshipType: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getCertificateTypes(ctx).pipe(catchError((error) => of(error))),\n      this.getLicenseTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getPracticeTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getOrganizationTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getAppointmentTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getJcahoOrganizationList(ctx).pipe(catchError((error) => of(error))),\n      this.getPrimaryPracticeList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalLevelList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalActivityList(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    if (payload?.fellowshipType) {\n      joins.push(\n        this.getFellowshipPrograms(ctx, {\n          fellowshipType: payload.fellowshipType,\n        }).pipe(catchError((error) => of(error)))\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "accreditedInstitutions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAccreditedProgramInstitutionReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "appointmentTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "certificateTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICertificateTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "clinicalActivities",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IClinicalActivityReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "clinicalLevels",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IClinicalLevelReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "countries",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICountryReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "defaultStates",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "degrees",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDegreeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "documentTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDocumentTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | undefined",
          "optional": true,
          "description": "",
          "line": 91
        },
        {
          "name": "ethnicities",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IEthnicityReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "fellowshipPrograms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipProgramReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "fellowshipTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "genders",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[] | undefined",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "graduateProfiles",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGraduateProfileReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "jcahoOrganizations",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "languages",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[] | undefined",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "licenseTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "organizationTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 85
        },
        {
          "name": "practiceTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "primaryPractices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "races",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRaceReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "residencyPrograms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IResidencyProgramReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 78
        },
        {
          "name": "scoringSessions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IScoringSessionReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "states",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "statesMap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "trainingTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ITrainingTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 74
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPickListItem",
      "id": "interface-IPickListItem-2ef1d995581a464ddbdb6402df045b1960d44e08e3feec75d2a10bfea7ac9b99745c6c228e2c4b937c632a3daa830e5fffca03e5d2aff9002375627aae91444d",
      "file": "src/app/state/picklists/picklists.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n  ILicenseTypeReadOnlyModel,\n  IPracticeTypeReadOnlyModel,\n  IOrganizationTypeReadOnlyModel,\n  IAppointmentTypeReadOnlyModel,\n  IJcahoOrganizationReadOnlyModel,\n  IPrimaryPracticeReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  GetCertificateTypes,\n  GetDocumentTypes,\n  GetLicenseTypeList,\n  GetPracticeTypeList,\n  GetOrganizationTypeList,\n  GetAppointmentTypeList,\n  GetJcahoOrganizationList,\n  GetPrimaryPracticeList,\n  GetScoringSessionList,\n  GetFellowshipTypes,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from 'src/app/api/models/picklists/document-type-read-only.model';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  certificateTypes: ICertificateTypeReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n  licenseTypes: IPickListItemNumber[] | undefined;\n  practiceTypes: IPickListItemNumber[] | undefined;\n  organizationTypes: IPickListItemNumber[] | undefined;\n  appointmentTypes: IPickListItemNumber[] | undefined;\n  jcahoOrganizations: IPickListItemNumber[] | undefined;\n  primaryPractices: IPickListItemNumber[] | undefined;\n  scoringSessions: IScoringSessionReadOnlyModel[] | undefined;\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\nexport interface IPickListItemNumber {\n  itemValue: number | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n    certificateTypes: undefined,\n    documentTypes: undefined,\n    licenseTypes: undefined,\n    practiceTypes: undefined,\n    organizationTypes: undefined,\n    appointmentTypes: undefined,\n    jcahoOrganizations: undefined,\n    primaryPractices: undefined,\n    scoringSessions: undefined,\n    fellowshipTypes: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipTypes)\n  getFellowshipTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipTypes) {\n      return of(ctx.getState()?.fellowshipTypes);\n    }\n    return this.picklistsService.retrieveFellowshipTypeReadOnly_Get().pipe(\n      tap((fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowshipTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>,\n    payload: { fellowshipType: string }\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    this.globalDialogService.showLoading();\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll(payload.fellowshipType)\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCertificateTypes)\n  getCertificateTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICertificateTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.certificateTypes) {\n      return of(ctx.getState()?.certificateTypes);\n    }\n    return this.picklistsService.retrieveCertificateTypeReadOnly_GetAll().pipe(\n      tap((certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          certificateTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Certificate Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLicenseTypeList)\n  getLicenseTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.licenseTypes) {\n      return of(ctx.getState()?.licenseTypes);\n    }\n    return this.picklistsService.retrieveLicenseTypeReadOnly_GetAll().pipe(\n      tap((licenseTypes: ILicenseTypeReadOnlyModel[]) => {\n        const licenseTypesList = [] as IPickListItemNumber[];\n        licenseTypes.forEach((type) => {\n          licenseTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          licenseTypes: licenseTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: License Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPracticeTypeList)\n  getPracticeTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.practiceTypes) {\n      return of(ctx.getState()?.practiceTypes);\n    }\n    return this.picklistsService.retrievePracticeTypeReadOnly_GetAll().pipe(\n      tap((practiceTypes: IPracticeTypeReadOnlyModel[]) => {\n        const practiceTypesList = [] as IPickListItemNumber[];\n        practiceTypes.forEach((type) => {\n          practiceTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          practiceTypes: practiceTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Practice Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetOrganizationTypeList)\n  getOrganizationTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.organizationTypes) {\n      return of(ctx.getState()?.organizationTypes);\n    }\n    return this.picklistsService.retrieveOrganizationTypeReadOnly_GetAll().pipe(\n      tap((orgTypes: IOrganizationTypeReadOnlyModel[]) => {\n        const orgTypesList = [] as IPickListItemNumber[];\n        orgTypes.forEach((type) => {\n          orgTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.type,\n          });\n        });\n\n        ctx.patchState({\n          organizationTypes: orgTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Organization Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetAppointmentTypeList)\n  getAppointmentTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.appointmentTypes) {\n      return of(ctx.getState()?.appointmentTypes);\n    }\n    return this.picklistsService.retrieveAppointmentTypeReadOnly_GetAll().pipe(\n      tap((appointmentTypes: IAppointmentTypeReadOnlyModel[]) => {\n        const appointmentTypesList = [] as IPickListItemNumber[];\n        appointmentTypes.forEach((type) => {\n          appointmentTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          appointmentTypes: appointmentTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Appointment Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetJcahoOrganizationList)\n  getJcahoOrganizationList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.jcahoOrganizations) {\n      return of(ctx.getState()?.jcahoOrganizations);\n    }\n    return this.picklistsService\n      .retrieveJcahoOrganizationReadOnly_GetAll()\n      .pipe(\n        tap((jcahoOrganizations: IJcahoOrganizationReadOnlyModel[]) => {\n          const jcahoOrganizationList = [] as IPickListItemNumber[];\n          jcahoOrganizations.forEach((type) => {\n            jcahoOrganizationList.push({\n              itemValue: type.organizationId,\n              itemDescription: type.organizationName,\n            });\n          });\n\n          ctx.patchState({\n            jcahoOrganizations: jcahoOrganizationList,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Appointment Types', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPrimaryPracticeList)\n  getPrimaryPracticeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.primaryPractices) {\n      return of(ctx.getState()?.primaryPractices);\n    }\n    return this.picklistsService.retrievePrimaryPracticeReadOnly_GetAll().pipe(\n      tap((primaryPractices: IPrimaryPracticeReadOnlyModel[]) => {\n        const primaryPracticeList = [] as IPickListItemNumber[];\n        primaryPractices.forEach((type) => {\n          primaryPracticeList.push({\n            itemValue: type.id,\n            itemDescription: type.practice,\n          });\n        });\n\n        ctx.patchState({\n          primaryPractices: primaryPracticeList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Primary Practices', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetScoringSessionList)\n  getScoringSessionList(\n    ctx: StateContext<IPicklist>\n    //payload: { date: string }\n  ): Observable<IPickListItemNumber[] | undefined> {\n    //const examHeaderId = payload.id;\n    const currentDate = new Date().toISOString();\n    // removed because we don't want to save this value in the store because it will change based on passed in id\n    // if (ctx.getState()?.primaryPractices) {\n    //   return of(ctx.getState()?.primaryPractices);\n    // }\n    return this.picklistsService\n      .retrieveScoringSessionReadOnly_GetByKeys(currentDate)\n      .pipe(\n        tap((scoringSessions: IScoringSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            scoringSessions: scoringSessions,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Scoring Sessions', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string; fellowshipType: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getCertificateTypes(ctx).pipe(catchError((error) => of(error))),\n      this.getLicenseTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getPracticeTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getOrganizationTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getAppointmentTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getJcahoOrganizationList(ctx).pipe(catchError((error) => of(error))),\n      this.getPrimaryPracticeList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalLevelList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalActivityList(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    if (payload?.fellowshipType) {\n      joins.push(\n        this.getFellowshipPrograms(ctx, {\n          fellowshipType: payload.fellowshipType,\n        }).pipe(catchError((error) => of(error)))\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "isCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | null | undefined",
          "optional": true,
          "description": "",
          "line": 98
        },
        {
          "name": "isEssential",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | null | undefined",
          "optional": true,
          "description": "",
          "line": 99
        },
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": false,
          "description": "",
          "line": 96
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "modifier",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": true,
          "description": "",
          "line": 97
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPickListItemNumber",
      "id": "interface-IPickListItemNumber-2ef1d995581a464ddbdb6402df045b1960d44e08e3feec75d2a10bfea7ac9b99745c6c228e2c4b937c632a3daa830e5fffca03e5d2aff9002375627aae91444d",
      "file": "src/app/state/picklists/picklists.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n  ILicenseTypeReadOnlyModel,\n  IPracticeTypeReadOnlyModel,\n  IOrganizationTypeReadOnlyModel,\n  IAppointmentTypeReadOnlyModel,\n  IJcahoOrganizationReadOnlyModel,\n  IPrimaryPracticeReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  GetCertificateTypes,\n  GetDocumentTypes,\n  GetLicenseTypeList,\n  GetPracticeTypeList,\n  GetOrganizationTypeList,\n  GetAppointmentTypeList,\n  GetJcahoOrganizationList,\n  GetPrimaryPracticeList,\n  GetScoringSessionList,\n  GetFellowshipTypes,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from 'src/app/api/models/picklists/document-type-read-only.model';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  certificateTypes: ICertificateTypeReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n  licenseTypes: IPickListItemNumber[] | undefined;\n  practiceTypes: IPickListItemNumber[] | undefined;\n  organizationTypes: IPickListItemNumber[] | undefined;\n  appointmentTypes: IPickListItemNumber[] | undefined;\n  jcahoOrganizations: IPickListItemNumber[] | undefined;\n  primaryPractices: IPickListItemNumber[] | undefined;\n  scoringSessions: IScoringSessionReadOnlyModel[] | undefined;\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\nexport interface IPickListItemNumber {\n  itemValue: number | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n    certificateTypes: undefined,\n    documentTypes: undefined,\n    licenseTypes: undefined,\n    practiceTypes: undefined,\n    organizationTypes: undefined,\n    appointmentTypes: undefined,\n    jcahoOrganizations: undefined,\n    primaryPractices: undefined,\n    scoringSessions: undefined,\n    fellowshipTypes: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipTypes)\n  getFellowshipTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipTypes) {\n      return of(ctx.getState()?.fellowshipTypes);\n    }\n    return this.picklistsService.retrieveFellowshipTypeReadOnly_Get().pipe(\n      tap((fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowshipTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>,\n    payload: { fellowshipType: string }\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    this.globalDialogService.showLoading();\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll(payload.fellowshipType)\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCertificateTypes)\n  getCertificateTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICertificateTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.certificateTypes) {\n      return of(ctx.getState()?.certificateTypes);\n    }\n    return this.picklistsService.retrieveCertificateTypeReadOnly_GetAll().pipe(\n      tap((certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          certificateTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Certificate Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLicenseTypeList)\n  getLicenseTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.licenseTypes) {\n      return of(ctx.getState()?.licenseTypes);\n    }\n    return this.picklistsService.retrieveLicenseTypeReadOnly_GetAll().pipe(\n      tap((licenseTypes: ILicenseTypeReadOnlyModel[]) => {\n        const licenseTypesList = [] as IPickListItemNumber[];\n        licenseTypes.forEach((type) => {\n          licenseTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          licenseTypes: licenseTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: License Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPracticeTypeList)\n  getPracticeTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.practiceTypes) {\n      return of(ctx.getState()?.practiceTypes);\n    }\n    return this.picklistsService.retrievePracticeTypeReadOnly_GetAll().pipe(\n      tap((practiceTypes: IPracticeTypeReadOnlyModel[]) => {\n        const practiceTypesList = [] as IPickListItemNumber[];\n        practiceTypes.forEach((type) => {\n          practiceTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          practiceTypes: practiceTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Practice Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetOrganizationTypeList)\n  getOrganizationTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.organizationTypes) {\n      return of(ctx.getState()?.organizationTypes);\n    }\n    return this.picklistsService.retrieveOrganizationTypeReadOnly_GetAll().pipe(\n      tap((orgTypes: IOrganizationTypeReadOnlyModel[]) => {\n        const orgTypesList = [] as IPickListItemNumber[];\n        orgTypes.forEach((type) => {\n          orgTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.type,\n          });\n        });\n\n        ctx.patchState({\n          organizationTypes: orgTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Organization Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetAppointmentTypeList)\n  getAppointmentTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.appointmentTypes) {\n      return of(ctx.getState()?.appointmentTypes);\n    }\n    return this.picklistsService.retrieveAppointmentTypeReadOnly_GetAll().pipe(\n      tap((appointmentTypes: IAppointmentTypeReadOnlyModel[]) => {\n        const appointmentTypesList = [] as IPickListItemNumber[];\n        appointmentTypes.forEach((type) => {\n          appointmentTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          appointmentTypes: appointmentTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Appointment Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetJcahoOrganizationList)\n  getJcahoOrganizationList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.jcahoOrganizations) {\n      return of(ctx.getState()?.jcahoOrganizations);\n    }\n    return this.picklistsService\n      .retrieveJcahoOrganizationReadOnly_GetAll()\n      .pipe(\n        tap((jcahoOrganizations: IJcahoOrganizationReadOnlyModel[]) => {\n          const jcahoOrganizationList = [] as IPickListItemNumber[];\n          jcahoOrganizations.forEach((type) => {\n            jcahoOrganizationList.push({\n              itemValue: type.organizationId,\n              itemDescription: type.organizationName,\n            });\n          });\n\n          ctx.patchState({\n            jcahoOrganizations: jcahoOrganizationList,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Appointment Types', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPrimaryPracticeList)\n  getPrimaryPracticeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.primaryPractices) {\n      return of(ctx.getState()?.primaryPractices);\n    }\n    return this.picklistsService.retrievePrimaryPracticeReadOnly_GetAll().pipe(\n      tap((primaryPractices: IPrimaryPracticeReadOnlyModel[]) => {\n        const primaryPracticeList = [] as IPickListItemNumber[];\n        primaryPractices.forEach((type) => {\n          primaryPracticeList.push({\n            itemValue: type.id,\n            itemDescription: type.practice,\n          });\n        });\n\n        ctx.patchState({\n          primaryPractices: primaryPracticeList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Primary Practices', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetScoringSessionList)\n  getScoringSessionList(\n    ctx: StateContext<IPicklist>\n    //payload: { date: string }\n  ): Observable<IPickListItemNumber[] | undefined> {\n    //const examHeaderId = payload.id;\n    const currentDate = new Date().toISOString();\n    // removed because we don't want to save this value in the store because it will change based on passed in id\n    // if (ctx.getState()?.primaryPractices) {\n    //   return of(ctx.getState()?.primaryPractices);\n    // }\n    return this.picklistsService\n      .retrieveScoringSessionReadOnly_GetByKeys(currentDate)\n      .pipe(\n        tap((scoringSessions: IScoringSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            scoringSessions: scoringSessions,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Scoring Sessions', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string; fellowshipType: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getCertificateTypes(ctx).pipe(catchError((error) => of(error))),\n      this.getLicenseTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getPracticeTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getOrganizationTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getAppointmentTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getJcahoOrganizationList(ctx).pipe(catchError((error) => of(error))),\n      this.getPrimaryPracticeList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalLevelList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalActivityList(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    if (payload?.fellowshipType) {\n      joins.push(\n        this.getFellowshipPrograms(ctx, {\n          fellowshipType: payload.fellowshipType,\n        }).pipe(catchError((error) => of(error)))\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "isCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | null | undefined",
          "optional": true,
          "description": "",
          "line": 105
        },
        {
          "name": "isEssential",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | null | undefined",
          "optional": true,
          "description": "",
          "line": 106
        },
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": false,
          "description": "",
          "line": 103
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null | undefined",
          "optional": false,
          "description": "",
          "line": 102
        },
        {
          "name": "modifier",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": true,
          "description": "",
          "line": 104
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPicklistUserValues",
      "id": "interface-IPicklistUserValues-2ef1d995581a464ddbdb6402df045b1960d44e08e3feec75d2a10bfea7ac9b99745c6c228e2c4b937c632a3daa830e5fffca03e5d2aff9002375627aae91444d",
      "file": "src/app/state/picklists/picklists.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n  ILicenseTypeReadOnlyModel,\n  IPracticeTypeReadOnlyModel,\n  IOrganizationTypeReadOnlyModel,\n  IAppointmentTypeReadOnlyModel,\n  IJcahoOrganizationReadOnlyModel,\n  IPrimaryPracticeReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  GetCertificateTypes,\n  GetDocumentTypes,\n  GetLicenseTypeList,\n  GetPracticeTypeList,\n  GetOrganizationTypeList,\n  GetAppointmentTypeList,\n  GetJcahoOrganizationList,\n  GetPrimaryPracticeList,\n  GetScoringSessionList,\n  GetFellowshipTypes,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from 'src/app/api/models/picklists/document-type-read-only.model';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  certificateTypes: ICertificateTypeReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n  licenseTypes: IPickListItemNumber[] | undefined;\n  practiceTypes: IPickListItemNumber[] | undefined;\n  organizationTypes: IPickListItemNumber[] | undefined;\n  appointmentTypes: IPickListItemNumber[] | undefined;\n  jcahoOrganizations: IPickListItemNumber[] | undefined;\n  primaryPractices: IPickListItemNumber[] | undefined;\n  scoringSessions: IScoringSessionReadOnlyModel[] | undefined;\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\nexport interface IPickListItemNumber {\n  itemValue: number | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n    certificateTypes: undefined,\n    documentTypes: undefined,\n    licenseTypes: undefined,\n    practiceTypes: undefined,\n    organizationTypes: undefined,\n    appointmentTypes: undefined,\n    jcahoOrganizations: undefined,\n    primaryPractices: undefined,\n    scoringSessions: undefined,\n    fellowshipTypes: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipTypes)\n  getFellowshipTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipTypes) {\n      return of(ctx.getState()?.fellowshipTypes);\n    }\n    return this.picklistsService.retrieveFellowshipTypeReadOnly_Get().pipe(\n      tap((fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowshipTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>,\n    payload: { fellowshipType: string }\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    this.globalDialogService.showLoading();\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll(payload.fellowshipType)\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCertificateTypes)\n  getCertificateTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICertificateTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.certificateTypes) {\n      return of(ctx.getState()?.certificateTypes);\n    }\n    return this.picklistsService.retrieveCertificateTypeReadOnly_GetAll().pipe(\n      tap((certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          certificateTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Certificate Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLicenseTypeList)\n  getLicenseTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.licenseTypes) {\n      return of(ctx.getState()?.licenseTypes);\n    }\n    return this.picklistsService.retrieveLicenseTypeReadOnly_GetAll().pipe(\n      tap((licenseTypes: ILicenseTypeReadOnlyModel[]) => {\n        const licenseTypesList = [] as IPickListItemNumber[];\n        licenseTypes.forEach((type) => {\n          licenseTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          licenseTypes: licenseTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: License Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPracticeTypeList)\n  getPracticeTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.practiceTypes) {\n      return of(ctx.getState()?.practiceTypes);\n    }\n    return this.picklistsService.retrievePracticeTypeReadOnly_GetAll().pipe(\n      tap((practiceTypes: IPracticeTypeReadOnlyModel[]) => {\n        const practiceTypesList = [] as IPickListItemNumber[];\n        practiceTypes.forEach((type) => {\n          practiceTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          practiceTypes: practiceTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Practice Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetOrganizationTypeList)\n  getOrganizationTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.organizationTypes) {\n      return of(ctx.getState()?.organizationTypes);\n    }\n    return this.picklistsService.retrieveOrganizationTypeReadOnly_GetAll().pipe(\n      tap((orgTypes: IOrganizationTypeReadOnlyModel[]) => {\n        const orgTypesList = [] as IPickListItemNumber[];\n        orgTypes.forEach((type) => {\n          orgTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.type,\n          });\n        });\n\n        ctx.patchState({\n          organizationTypes: orgTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Organization Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetAppointmentTypeList)\n  getAppointmentTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.appointmentTypes) {\n      return of(ctx.getState()?.appointmentTypes);\n    }\n    return this.picklistsService.retrieveAppointmentTypeReadOnly_GetAll().pipe(\n      tap((appointmentTypes: IAppointmentTypeReadOnlyModel[]) => {\n        const appointmentTypesList = [] as IPickListItemNumber[];\n        appointmentTypes.forEach((type) => {\n          appointmentTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          appointmentTypes: appointmentTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Appointment Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetJcahoOrganizationList)\n  getJcahoOrganizationList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.jcahoOrganizations) {\n      return of(ctx.getState()?.jcahoOrganizations);\n    }\n    return this.picklistsService\n      .retrieveJcahoOrganizationReadOnly_GetAll()\n      .pipe(\n        tap((jcahoOrganizations: IJcahoOrganizationReadOnlyModel[]) => {\n          const jcahoOrganizationList = [] as IPickListItemNumber[];\n          jcahoOrganizations.forEach((type) => {\n            jcahoOrganizationList.push({\n              itemValue: type.organizationId,\n              itemDescription: type.organizationName,\n            });\n          });\n\n          ctx.patchState({\n            jcahoOrganizations: jcahoOrganizationList,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Appointment Types', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPrimaryPracticeList)\n  getPrimaryPracticeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.primaryPractices) {\n      return of(ctx.getState()?.primaryPractices);\n    }\n    return this.picklistsService.retrievePrimaryPracticeReadOnly_GetAll().pipe(\n      tap((primaryPractices: IPrimaryPracticeReadOnlyModel[]) => {\n        const primaryPracticeList = [] as IPickListItemNumber[];\n        primaryPractices.forEach((type) => {\n          primaryPracticeList.push({\n            itemValue: type.id,\n            itemDescription: type.practice,\n          });\n        });\n\n        ctx.patchState({\n          primaryPractices: primaryPracticeList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Primary Practices', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetScoringSessionList)\n  getScoringSessionList(\n    ctx: StateContext<IPicklist>\n    //payload: { date: string }\n  ): Observable<IPickListItemNumber[] | undefined> {\n    //const examHeaderId = payload.id;\n    const currentDate = new Date().toISOString();\n    // removed because we don't want to save this value in the store because it will change based on passed in id\n    // if (ctx.getState()?.primaryPractices) {\n    //   return of(ctx.getState()?.primaryPractices);\n    // }\n    return this.picklistsService\n      .retrieveScoringSessionReadOnly_GetByKeys(currentDate)\n      .pipe(\n        tap((scoringSessions: IScoringSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            scoringSessions: scoringSessions,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Scoring Sessions', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string; fellowshipType: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getCertificateTypes(ctx).pipe(catchError((error) => of(error))),\n      this.getLicenseTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getPracticeTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getOrganizationTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getAppointmentTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getJcahoOrganizationList(ctx).pipe(catchError((error) => of(error))),\n      this.getPrimaryPracticeList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalLevelList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalActivityList(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    if (payload?.fellowshipType) {\n      joins.push(\n        this.getFellowshipPrograms(ctx, {\n          fellowshipType: payload.fellowshipType,\n        }).pipe(catchError((error) => of(error)))\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "accreditedInstitutions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAccreditedProgramInstitutionReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 118
        },
        {
          "name": "clinicalLevels",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IClinicalLevelReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 126
        },
        {
          "name": "countries",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICountryReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 110
        },
        {
          "name": "defaultStates",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 117
        },
        {
          "name": "degrees",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDegreeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 123
        },
        {
          "name": "documentTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDocumentTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 127
        },
        {
          "name": "ethnicities",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IEthnicityReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 111
        },
        {
          "name": "fellowshipPrograms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipProgramReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 124
        },
        {
          "name": "genders",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[] | undefined",
          "optional": false,
          "description": "",
          "line": 112
        },
        {
          "name": "graduateProfiles",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGraduateProfileReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 122
        },
        {
          "name": "languages",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[] | undefined",
          "optional": false,
          "description": "",
          "line": 113
        },
        {
          "name": "races",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRaceReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 114
        },
        {
          "name": "residencyPrograms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IResidencyProgramReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "states",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 115
        },
        {
          "name": "statesMap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type | undefined",
          "optional": false,
          "description": "",
          "line": 116
        },
        {
          "name": "trainingTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ITrainingTypeReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 121
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPracticeTypeReadOnlyModel",
      "id": "interface-IPracticeTypeReadOnlyModel-e28c57c042dde23f674d0153a57375d83a90c1006a1055d60447d2140c349860cf056481695abaed9dc761aaccbaccfe9f507a4acb887be53a161eaef40dde79",
      "file": "src/app/api/models/picklists/practice-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IPracticeTypeReadOnlyModel {\r\n    id: number;\r\n    name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IPrimaryPracticeReadOnlyModel",
      "id": "interface-IPrimaryPracticeReadOnlyModel-266b790fd0fddb8754a9068d613738babc8c82203ea37cab0e63c99833ba7b8e38f2cb58bd1106a77d84a94fa92a3b9953d131f5a066b8145b94fd0e05845fe1",
      "file": "src/app/api/models/picklists/primary-practice-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IPrimaryPracticeReadOnlyModel {\r\n    id: number;\r\n    practice: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "practice",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IProfessionalStanding",
      "id": "interface-IProfessionalStanding-9fee9e20e7f26aeb9cc74e272b2667d788d22e81d5ac554df2c5253719d2a62b4a006e433e9e3cf1e1eac8ee81b9a349f04a9bccf3252226741f997df10225f5",
      "file": "src/app/state/professional-standing/professional-standing.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IUserProfessionalStandingModel,\n  MedicalLicenseService,\n  UserProfessionalStandingService,\n  UserAppointmentService,\n  IUserAppointmentModel,\n  SanctionsService,\n  ISanctionsModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  DeletePSMedicalLicense,\n  GetPSAppointmentsAndPrivilegesList,\n  GetPSAppointmentAndPrivilegeDetails,\n  CreatePSAppointmentAndPrivilege,\n  UpdatePSAppointmentAndPrivilege,\n  DeletePSAppointmentAndPrivilege,\n  GetUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  ClearProfessionalStandingErrors,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n} from './professional-standing.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IProfessionalStanding {\n  medicalLiscenseList: IMedicalLicenseReadOnlyModel[];\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  userProfessionalStandingDetails: IUserProfessionalStandingModel | undefined;\n  sanctions: ISanctionsModel | undefined;\n  allAppointments: any[];\n  selectedAppointment: any;\n  claims: string[];\n  medicalLicenseErrors?: IFormErrors | null;\n  appointmentErrors?: IFormErrors | null;\n  professionalStandingErrors?: IFormErrors | null;\n  sanctionsErrors?: IFormErrors | null;\n}\n\nexport const PROFESSIONAL_STANDING_STATE_TOKEN =\n  new StateToken<IProfessionalStanding>('professionalStanding');\n\n@State<IProfessionalStanding>({\n  name: PROFESSIONAL_STANDING_STATE_TOKEN,\n  defaults: {\n    medicalLiscenseList: [],\n    selectedMedicalLicense: undefined,\n    userProfessionalStandingDetails: undefined,\n    sanctions: undefined,\n    allAppointments: [],\n    selectedAppointment: undefined,\n    claims: [],\n    medicalLicenseErrors: null,\n    appointmentErrors: null,\n    professionalStandingErrors: null,\n    sanctionsErrors: null,\n  },\n})\n@Injectable()\nexport class ProfessionalStandingState {\n  constructor(\n    private medicalLicenseService: MedicalLicenseService,\n    private userProfessionalStandingService: UserProfessionalStandingService,\n    private userAppointmentService: UserAppointmentService,\n    private sanctionsService: SanctionsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetPSMedicalLicenseList)\n  getMedicalLicenseList(ctx: StateContext<IProfessionalStanding>) {\n    // const state = ctx.getState();\n    return this.medicalLicenseService\n      .retrieveMedicalLicenseReadOnly_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            medicalLiscenseList: response,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetPSMedicalLicenseDetails)\n  getMedicalLicenseDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    const licenseId = payload.id;\n    return this.medicalLicenseService\n      .retrieveMedicalLicense_GetById(licenseId)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            selectedMedicalLicense: response,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreatePSMedicalLicense)\n  createMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { license: IMedicalLicenseModel }\n  ) {\n    const state = ctx.getState();\n    const medicalLicense = payload.license;\n    return this.medicalLicenseService.createMedicalLicense(medicalLicense).pipe(\n      tap((response) => {\n        const readOnlyResult = {\n          licenseId: response.licenseId,\n          userId: response.userId,\n          issuingStateId: response.issuingStateId,\n          issuingState: response.issuingState,\n          licenseNumber: response.licenseNumber,\n          licenseTypeId: response.licenseTypeId,\n          licenseType: response.licenseType,\n          issueDate: response.issueDate,\n          expireDate: response.expireDate,\n          reportingOrganization: response.reportingOrganization,\n        };\n        ctx.patchState({\n          medicalLiscenseList: [readOnlyResult, ...state.medicalLiscenseList],\n          selectedMedicalLicense: undefined,\n          medicalLicenseErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ medicalLicenseErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdatePSMedicalLicense)\n  updateMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { license: IMedicalLicenseModel }\n  ) {\n    const state = ctx.getState();\n    const medicalLicense = payload.license;\n    return this.medicalLicenseService\n      .updateMedicalLicense(medicalLicense.licenseId, medicalLicense)\n      .pipe(\n        tap((response) => {\n          const readOnlyResult = {\n            licenseId: response.licenseId,\n            userId: response.userId,\n            issuingStateId: response.issuingStateId,\n            issuingState: response.issuingState,\n            licenseNumber: response.licenseNumber,\n            licenseTypeId: response.licenseTypeId,\n            licenseType: response.licenseType,\n            issueDate: response.issueDate,\n            expireDate: response.expireDate,\n            reportingOrganization: response.reportingOrganization,\n          };\n          const updatedMedicalLicenseList = state.medicalLiscenseList.map(\n            (item) =>\n              item.licenseId === readOnlyResult.licenseId\n                ? readOnlyResult\n                : item\n          );\n          ctx.patchState({\n            medicalLiscenseList: updatedMedicalLicenseList,\n            selectedMedicalLicense: undefined,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeletePSMedicalLicense)\n  deleteMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    { id }: DeletePSMedicalLicense\n  ) {\n    const state = ctx.getState();\n    return this.medicalLicenseService.deleteMedicalLicense(id).pipe(\n      tap(() => {\n        const updatedMedicalLicenseList = state.medicalLiscenseList.filter(\n          (item) => item.licenseId !== id\n        );\n        ctx.patchState({\n          medicalLiscenseList: updatedMedicalLicenseList,\n          selectedMedicalLicense: undefined,\n          medicalLicenseErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ medicalLicenseErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetPSAppointmentsAndPrivilegesList)\n  getPSAppointmentsAndPrivilegesList(ctx: StateContext<IProfessionalStanding>) {\n    // const state = ctx.getState();\n    return this.userAppointmentService\n      .retrieveUserAppointmentReadOnly_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            allAppointments: response,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetPSAppointmentAndPrivilegeDetails)\n  getPSAppointmentAndPrivilegeDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    const appointmentId = payload.id;\n    return this.userAppointmentService\n      .retrieveUserAppointment_GetById(appointmentId)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            selectedAppointment: response,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreatePSAppointmentAndPrivilege)\n  createPSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: IUserAppointmentModel }\n  ) {\n    const state = ctx.getState();\n    const appointment = payload.data;\n    return this.userAppointmentService.createUserAppointment(appointment).pipe(\n      tap((response) => {\n        const readOnlyResult = {\n          apptId: response.apptId,\n          userId: response.userId,\n          practiceTypeId: response.practiceTypeId,\n          practiceType: response.practiceType,\n          appointmentTypeId: response.appointmentTypeId,\n          appointmentType: response.appointmentType,\n          organizationTypeId: response.organizationTypeId,\n          authorizingOfficial: response.authorizingOfficial,\n          organizationType: response.organizationType,\n          organizationId: response.organizationId,\n          stateCode: response.stateCode,\n          other: response.other,\n          organizationName: response.organizationName,\n        };\n        ctx.patchState({\n          allAppointments: [readOnlyResult, ...state.allAppointments],\n          selectedAppointment: undefined,\n          appointmentErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ appointmentErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdatePSAppointmentAndPrivilege)\n  updatePSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: IUserAppointmentModel }\n  ) {\n    const state = ctx.getState();\n    const appointment = payload.data;\n    return this.userAppointmentService\n      .updateUserAppointment(appointment.apptId, appointment)\n      .pipe(\n        tap((response) => {\n          const readOnlyResult = {\n            apptId: response.apptId,\n            userId: response.userId,\n            practiceTypeId: response.practiceTypeId,\n            practiceType: response.practiceType,\n            appointmentTypeId: response.appointmentTypeId,\n            appointmentType: response.appointmentType,\n            organizationTypeId: response.organizationTypeId,\n            authorizingOfficial: response.authorizingOfficial,\n            organizationType: response.organizationType,\n            organizationId: response.organizationId,\n            stateCode: response.stateCode,\n            other: response.other,\n            organizationName: response.organizationName,\n          };\n          const updatedAppointmentsList = state.allAppointments.map((item) =>\n            item.apptId === readOnlyResult.apptId ? readOnlyResult : item\n          );\n          ctx.patchState({\n            allAppointments: updatedAppointmentsList,\n            selectedAppointment: undefined,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeletePSAppointmentAndPrivilege)\n  deletePSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    { id }: DeletePSAppointmentAndPrivilege\n  ) {\n    const state = ctx.getState();\n    return this.userAppointmentService.deleteUserAppointment(id).pipe(\n      tap(() => {\n        const updatedAppointmentsList = state.allAppointments.filter(\n          (item) => item.apptId !== id\n        );\n        ctx.patchState({\n          allAppointments: updatedAppointmentsList,\n          selectedAppointment: undefined,\n          appointmentErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ appointmentErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetUserProfessionalStandingDetails)\n  getUserProfessionalStandingDetails(ctx: StateContext<IProfessionalStanding>) {\n    //const state = ctx.getState();\n    return this.userProfessionalStandingService\n      .retrieveUserProfessionalStanding_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateUserProfessionalStandingDetails)\n  createUserProfessionalStandingDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { details: IUserProfessionalStandingModel }\n  ) {\n    // const state = ctx.getState();\n    const details = payload.details;\n    return this.userProfessionalStandingService\n      .createUserProfessionalStanding(details)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfessionalStandingDetails)\n  updateUserProfessionalStandingDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { details: IUserProfessionalStandingModel }\n  ) {\n    // const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    const details = payload.details;\n    return this.userProfessionalStandingService\n      .updateUserProfessionalStanding(details)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Professional Standing Details Updated Successfully',\n            true\n          );\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetProfessionalStandingSanctionsDetails)\n  getProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>\n  ) {\n    //const state = ctx.getState();\n    return this.sanctionsService.retrieveSanctions_GetByUserId().pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateProfessionalStandingSanctionsDetails)\n  createProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: ISanctionsModel }\n  ) {\n    const sanctions = payload.data;\n    return this.sanctionsService.createSanctions(sanctions).pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateProfessionalStandingSanctionsDetails)\n  updateProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: ISanctionsModel }\n  ) {\n    // const state = ctx.getState();\n    const sanctions = payload.data;\n    return this.sanctionsService.updateSanctions(sanctions).pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearProfessionalStandingErrors)\n  clearProfessionalStandingErrors(ctx: StateContext<IProfessionalStanding>) {\n    ctx.patchState({\n      medicalLicenseErrors: null,\n      appointmentErrors: null,\n      professionalStandingErrors: null,\n      sanctionsErrors: null,\n    });\n  }\n}\n",
      "properties": [
        {
          "name": "allAppointments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "appointmentErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 48
        },
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "medicalLicenseErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 47
        },
        {
          "name": "medicalLiscenseList",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicenseReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "professionalStandingErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 49
        },
        {
          "name": "sanctions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ISanctionsModel | undefined",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "sanctionsErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 50
        },
        {
          "name": "selectedAppointment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "selectedMedicalLicense",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicenseModel | undefined",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "userProfessionalStandingDetails",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfessionalStandingModel | undefined",
          "optional": false,
          "description": "",
          "line": 42
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IProfessionalStandingPickLists",
      "id": "interface-IProfessionalStandingPickLists-396dc4fea357980963b6e232c416f40a86f4119b05a6d545b3851b6b50b8157f8ee2ea5bc7af43bc9b48c3bc138d4e100e80808622c0abebf9d24dcad15937f0",
      "file": "src/app/professional-standing/professional-standing.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  ProfessionalStandingSelectors,\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  GetUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  GetPSAppointmentsAndPrivilegesList,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n  UpdatePSAppointmentAndPrivilege,\n  CreatePSAppointmentAndPrivilege,\n  GetPSAppointmentAndPrivilegeDetails,\n  DeletePSAppointmentAndPrivilege,\n  ClearProfessionalStandingErrors,\n} from '../state';\nimport {\n  GetPicklists,\n  IPickListItemNumber,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IStateReadOnlyModel,\n  IUserProfessionalStandingModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserAppointmentReadOnlyModel,\n} from '../api';\nimport { LicenseFormComponent } from './license-form/license-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SanctionsFormComponent } from './sanctions-form/sanctions-form.component';\nimport { AppointmentsFormComponent } from './appointments-form/appointments-form.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CurrentAppointmentFormComponent } from './current-appointment-form/current-appointment-form.component';\ninterface IMedicalLicensePickLists {\n  licenseStateOptions: IStateReadOnlyModel[] | undefined;\n  licenseTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IProfessionalStandingPickLists {\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  primaryPracticeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IAppointementsPrivilegesPickLists {\n  stateCodeOptions: IStateReadOnlyModel[] | undefined;\n  practiceTypeOptions: IPickListItemNumber[] | undefined;\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  organizationOptions: IPickListItemNumber[] | undefined;\n  appointmentTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IMedicalLicense extends IMedicalLicenseReadOnlyModel {\n  showEdit: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    ButtonModule,\n    LicenseFormComponent,\n    SanctionsFormComponent,\n    AppointmentsFormComponent,\n    CurrentAppointmentFormComponent,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  /* error variables */\n  clearErrors = new ClearProfessionalStandingErrors(); // may need to break this into dividual error clearing actions\n  @Select(ProfessionalStandingSelectors.slices.medicalLicenseErrors)\n  medicalLicenseErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.appointmentErrors)\n  appointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.professionalStandingErrors)\n  currentAppointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.sanctionsErrors)\n  sanctionsErrors$: Observable<any> | undefined;\n\n  /* Medical License variables */\n  @Select(ProfessionalStandingSelectors.slices.medicalLiscenseList)\n  medicalLicenses$: Observable<IMedicalLicense[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedMedicalLicense)\n  selectedMedicalLicense$: Observable<IMedicalLicenseModel> | undefined;\n\n  extendedMedicalLicenses$: Subject<IMedicalLicense[]> | undefined =\n    new BehaviorSubject([] as any);\n\n  licensesCols = LICENSES_COLS;\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  stateMedicalLicenseTitle: string | undefined;\n  showLicensesAddEdit = false;\n  medicalLicensePickLists: IMedicalLicensePickLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  /* Sanctions and Ethics variables */\n  @Select(ProfessionalStandingSelectors.slices.sanctions)\n  sanctionsAndEthics$: Observable<ISanctionsModel> | undefined;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(false);\n\n  sanctionsAndEthics: ISanctionsModel | undefined;\n\n  /* Current Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.userProfessionalStandingDetails)\n  currentAppointments$: Observable<IUserProfessionalStandingModel> | undefined;\n  currentAppointments: any;\n  currentAppointmentPickLists: IProfessionalStandingPickLists = {\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  };\n\n  /* Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.allAppointments)\n  allAppointments$: Observable<IUserAppointmentReadOnlyModel[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedAppointment)\n  selectedAppointment$: Observable<IUserAppointmentModel> | undefined;\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(false);\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  appointmentsTitle: string | undefined;\n  selectedAppointment: IUserAppointmentModel | undefined;\n  showAppointmentsAddEdit = false;\n  appointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists = {\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  };\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initProfileData();\n  }\n\n  ngOnInit() {\n    this.initPicklistValues();\n    this.setStateMedicalLicenseEdit();\n  }\n\n  setStateMedicalLicenseEdit() {\n    this.medicalLicenses$?.pipe(untilDestroyed(this)).subscribe((medicalLicenses: IMedicalLicense[]) => {\n      const extendedLicenses: IMedicalLicense[] = medicalLicenses.map(\n        (license) => ({\n          ...license,\n          showEdit: license.reportingOrganization === 'Self',\n        })\n      );\n      this.extendedMedicalLicenses$?.next(extendedLicenses);\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetPicklists('500'))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        //create new objects to trigger change detection\n        const newMedicalLicensePickLists: IMedicalLicensePickLists = {\n          licenseStateOptions: [],\n          licenseTypeOptions: [],\n        };\n        const newAppointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists =\n          {\n            stateCodeOptions: [],\n            practiceTypeOptions: [],\n            organizationTypeOptions: [],\n            organizationOptions: [],\n            appointmentTypeOptions: [],\n          };\n        const newProfessionalStandingPickLists: IProfessionalStandingPickLists =\n          {\n            organizationTypeOptions: [],\n            primaryPracticeOptions: [],\n          };\n\n        //medical license picklists\n        newMedicalLicensePickLists.licenseStateOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newMedicalLicensePickLists.licenseTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.licenseTypes);\n\n        this.medicalLicensePickLists = newMedicalLicensePickLists;\n\n        //appointments and privileges picklists\n        newAppointmentsPrivilegesPickLists.stateCodeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newAppointmentsPrivilegesPickLists.practiceTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.practiceTypes);\n        newAppointmentsPrivilegesPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newAppointmentsPrivilegesPickLists.organizationOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.jcahoOrganizations\n          );\n        newAppointmentsPrivilegesPickLists.appointmentTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.appointmentTypes\n          );\n        this.appointmentsPrivilegesPickLists =\n          newAppointmentsPrivilegesPickLists;\n\n        //professional standing picklists\n        newProfessionalStandingPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newProfessionalStandingPickLists.primaryPracticeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.primaryPractices\n          );\n        this.currentAppointmentPickLists = newProfessionalStandingPickLists;\n      });\n  }\n\n  initProfileData() {\n    this.getMedicalLicenses();\n    this.getCurrentAppointmentDetails();\n    this.getPreviousAppointmentsAndPrivileges();\n    this.getSanctionsAndEthicsDetails();\n  }\n\n  getCurrentAppointmentDetails() {\n    this._store\n      .dispatch(new GetUserProfessionalStandingDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.currentAppointments$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.currentAppointments = res;\n          if (!res) {\n            this.editHospitalAppointmentsAndPrivileges$.next(true);\n          }\n        });\n      });\n  }\n\n  getSanctionsAndEthicsDetails() {\n    this._store\n      .dispatch(new GetProfessionalStandingSanctionsDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.sanctionsAndEthics$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.sanctionsAndEthics = res;\n          if (!res) {\n            this.editSanctionsAndEthics$.next(true);\n          }\n        });\n      });\n  }\n\n  getPreviousAppointmentsAndPrivileges() {\n    this._store.dispatch(new GetPSAppointmentsAndPrivilegesList());\n  }\n\n  getAppointmentDetails(appointment: IUserAppointmentModel) {\n    if (appointment.apptId) {\n      this._store\n        .dispatch(new GetPSAppointmentAndPrivilegeDetails(appointment.apptId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedAppointment = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedAppointment\n          );\n        });\n    }\n  }\n\n  getMedicalLicenses() {\n    this._store.dispatch(new GetPSMedicalLicenseList());\n  }\n\n  getMedicalLicenseDetails(license: IMedicalLicenseReadOnlyModel) {\n    if (license.licenseId) {\n      this._store\n        .dispatch(new GetPSMedicalLicenseDetails(license.licenseId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedMedicalLicense = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedMedicalLicense\n          );\n        });\n    }\n  }\n\n  /* Medical License Functions */\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: IMedicalLicenseReadOnlyModel | null | undefined) {\n    if (license) {\n      this.getMedicalLicenseDetails(license);\n      this.stateMedicalLicenseTitle = 'Edit Medical License';\n    } else {\n      this.selectedMedicalLicense = undefined;\n      this.stateMedicalLicenseTitle = 'Add Medical License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n\n  saveLicense($event: any) {\n    let issueDate = '';\n    let expireDate = '';\n    if ($event.data.issueDate) {\n      issueDate = new Date($event.data.issueDate).toISOString();\n    }\n    if ($event.data.expireDate) {\n      expireDate = new Date($event.data.expireDate).toISOString();\n    }\n    const newLicense = {\n      licenseId: this.selectedMedicalLicense?.licenseId ?? 0,\n      issuingStateId: $event.data.issuingStateId ?? '',\n      licenseNumber: $event.data.licenseNumber ?? '',\n      licenseTypeId: $event.data.licenseTypeId ?? 0,\n      issueDate: issueDate,\n      expireDate: expireDate,\n      reportingOrganization:\n        this.selectedMedicalLicense?.reportingOrganization ?? 'Self',\n    } as unknown as IMedicalLicenseModel;\n\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    }\n  }\n\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n  }\n\n  /* Sanctions and Ethics Functions */\n  saveSanctionsAndEthics($event: any) {\n    const newSanctionsAndEthics = {\n      ...$event.data,\n    } as unknown as ISanctionsModel;\n\n    if (this.sanctionsAndEthics) {\n      this._store\n        .dispatch(\n          new UpdateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(\n          new CreateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    }\n  }\n\n  /* Current Appointments Functions */\n  saveCurrentAppointments($event: any) {\n    const newCurrentAppointments = {\n      ...$event.data,\n      clinicallyActive: $event.data.clinicallyActive ? 1 : 0,\n    } as unknown as IUserProfessionalStandingModel;\n\n    if (this.currentAppointments) {\n      this._store\n        .dispatch(\n          new UpdateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    } else {\n      // create\n      this._store\n        .dispatch(\n          new CreateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    }\n  }\n\n  /* Appointments List Functions */\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteAppointment($event.data.apptId);\n          }\n        });\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.getAppointmentDetails(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.selectedAppointment = undefined;\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n\n  saveAppointment($event: any) {\n    // get orgId from autocomplete object\n    const orgId = $event.data.organizationId?.itemValue ?? 0;\n    const newAppointment = {\n      apptId: this.selectedAppointment?.apptId ?? 0,\n      practiceTypeId: $event.data.practiceTypeId ?? 0,\n      appointmentTypeId: $event.data.appointmentTypeId ?? 0,\n      organizationTypeId: $event.data.organizationTypeId ?? 0,\n      authorizingOfficial: $event.data.authorizingOfficial ?? '',\n      organizationId: orgId,\n      stateCode: $event.data.stateCode ?? '',\n      other: $event.data.other ?? '',\n    } as unknown as IUserAppointmentModel;\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    }\n  }\n\n  deleteAppointment(apptId: number) {\n    this._store.dispatch(new DeletePSAppointmentAndPrivilege(apptId));\n  }\n\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.selectedAppointment = undefined;\n  }\n\n  /* on page form helper functions */\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n}\n",
      "properties": [
        {
          "name": "organizationTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "primaryPracticeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItemNumber[] | undefined",
          "optional": false,
          "description": "",
          "line": 64
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IProgramReadOnlyModel",
      "id": "interface-IProgramReadOnlyModel-156c34c87cc3189e1d9583977ab8da2ce5020503452ae24f58848de62476ddbf5bddac39dd5ca7b22544af4e5340aa48c9a138d57b0b90ece9ea02e3ae6c3f49",
      "file": "src/app/api/models/trainees/program-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IProgramReadOnlyModel {\r\n    programName: string;\r\n    programDirector: string;\r\n    programNumber: string;\r\n    exam: string;\r\n    clinicalLevel: string;\r\n    city: string;\r\n    state: string;\r\n}\r\n",
      "properties": [
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "clinicalLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "exam",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "programDirector",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "programNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IQualifyingExamReadOnlyModel",
      "id": "interface-IQualifyingExamReadOnlyModel-2383a64d9969129f6a2f12e961f1f59af5fe856cb66819a50ea682eb5064408f28ced25f4b8a5a2003df594a5bb9fb3d4eee5578c2fe75b80cd92f83774406f1",
      "file": "src/app/api/models/examinations/qualifying-exam-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IQualifyingExamReadOnlyModel {\r\n    examName: string;\r\n    regOpenDate: string;\r\n    regEndDate: string;\r\n    examStartDate: string;\r\n    examEndDate: string;\r\n}\r\n",
      "properties": [
        {
          "name": "examEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "examStartDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "regEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "regOpenDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRaceReadOnlyModel",
      "id": "interface-IRaceReadOnlyModel-e13d20c5888de7b1c8f119552d4006b0d1ed914f7797533af7cb842271e64faf662d66e609f3f0b98806e1332760cd752d7a38983aeb69704ec28818d2fed9d9",
      "file": "src/app/api/models/picklists/race-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRaceReadOnlyModel {\r\n    itemValue: string | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRefreshToken",
      "id": "interface-IRefreshToken-5a2ab24127bd3e25edc8dba6d8ecd85a8a844fc8214c85317492129edef8b66dd61fd28057294bc130a89dfd185ba9c662e991bf2f94ad5aeda1b5f7be81fc0c",
      "file": "src/app/state/auth/auth.interfaces.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { IAppUserReadOnlyModel } from '../../api';\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IRefreshToken {\n  refreshToken: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  [key: string]: any;\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n  isBusy: boolean;\n  isPasswordReset: boolean;\n  passwordResetComplete: boolean;\n  isAuthenticated: boolean;\n}\n",
      "properties": [
        {
          "name": "refreshToken",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRegistrationStatusReadOnlyModel",
      "id": "interface-IRegistrationStatusReadOnlyModel-2019ce1fec69635e1367876b9557e415efbd0aac640134a0fa7ae731cc30a2a66af7ca4acbb76b93729b5c1dd18a7f3c8fcc5fbe07987ad4aaf23a3097a5d4b4",
      "file": "src/app/api/models/trainees/registration-status-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRegistrationStatusReadOnlyModel {\r\n    regOpenDate: string;\r\n    regEndDate: string;\r\n    isRegOpen: number;\r\n    regLateDate: string;\r\n    isRegLate: number;\r\n}\r\n",
      "properties": [
        {
          "name": "isRegLate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "isRegOpen",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "regEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "regLateDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "regOpenDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IResidencyProgramReadOnlyModel",
      "id": "interface-IResidencyProgramReadOnlyModel-577eb9346971d781c159f94b5237f1e9139fd2770c5cbbe87d9add82acbd514ff0b97191a6a0ee675c8a67670b496b3b4ed5525814fe7dc5e13e3831a6a150ac",
      "file": "src/app/api/models/picklists/residency-program-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IResidencyProgramReadOnlyModel {\r\n    programId: number;\r\n    programName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "programId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRosterReadOnlyModel",
      "id": "interface-IRosterReadOnlyModel-3a69debe534eceebf622093a258217127d9916045364ffa50a82d8bd1349c0dd8db3e3da2c9e3115e5e2da9443203422eeaa792aad069cd0ed208faae8c533af",
      "file": "src/app/api/models/scoring/roster-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRosterReadOnlyModel {\r\n    examScheduleId: number;\r\n    dayNumber: number;\r\n    sessionNumber: number;\r\n    roster: string;\r\n    displayName: string;\r\n    isSubmitted: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "dayNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "displayName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isSubmitted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "roster",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "sessionNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRotationGapReadOnlyModel",
      "id": "interface-IRotationGapReadOnlyModel-942668312f73fda7b0a751522595c3c80368f1b2a1d1d53d1d5ae3b60dde4f3a650df6cf5078f29740659f1edf5f3222d79147731207c4994a50eec6bcd7543d",
      "file": "src/app/api/models/graduatemedicaleducation/rotation-gap-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRotationGapReadOnlyModel {\r\n    startDate: string;\r\n    endDate: string;\r\n    previousRotationId: number;\r\n    nextRotationId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "nextRotationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "previousRotationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRotationModel",
      "id": "interface-IRotationModel-8429d4c74aa55a7df5aee35e09a539fc44dbb3a9653b2e333034f092b4fc7bb11e793ceff6ab416336027a53b8b0c5370b6ed73e961b3056b30be5d861e072b1",
      "file": "src/app/api/models/graduatemedicaleducation/rotation.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRotationModel {\r\n    id: number;\r\n    userId: number;\r\n    startDate: string;\r\n    endDate: string;\r\n    clinicalLevelId: number;\r\n    clinicalLevel: string;\r\n    clinicalActivityId: number;\r\n    programName: string;\r\n    nonSurgicalActivity: string;\r\n    alternateInstitutionName: string;\r\n    isInternationalRotation: boolean;\r\n    isEssential: boolean;\r\n    isCredit: boolean;\r\n    other: string;\r\n    fourMonthRotationExplain: string;\r\n    nonPrimaryExplain: string;\r\n    nonClinicalExplain: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n    clinicalActivity: string;\r\n}\r\n",
      "properties": [
        {
          "name": "alternateInstitutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "clinicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "clinicalActivityId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "clinicalLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "clinicalLevelId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "fourMonthRotationExplain",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "isEssential",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "isInternationalRotation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "nonClinicalExplain",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "nonPrimaryExplain",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "nonSurgicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IRotationReadOnlyModel",
      "id": "interface-IRotationReadOnlyModel-7c2b6ffb5881f3fcb514efd1eb8bdcb24e90a1c191ebec16aa17274139170021a9da8c92773648ca01f83601446ee85d8d813ea7454f539cf4e670f92b72e5d0",
      "file": "src/app/api/models/graduatemedicaleducation/rotation-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IRotationReadOnlyModel {\r\n    id: number;\r\n    startDate: string;\r\n    endDate: string;\r\n    programName: string;\r\n    alternateInstitutionName: string;\r\n    clinicalLevelId: number;\r\n    clinicalLevel: string;\r\n    isEssential: boolean;\r\n    isCredit: boolean;\r\n    other: string;\r\n    nonSurgicalActivity: string;\r\n    isInternationalRotation: boolean;\r\n    clinicalActivity: string;\r\n}\r\n",
      "properties": [
        {
          "name": "alternateInstitutionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "clinicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "clinicalLevel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "clinicalLevelId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "isCredit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "isEssential",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "isInternationalRotation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "nonSurgicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "programName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ISanctionsModel",
      "id": "interface-ISanctionsModel-e6fc1987f31143698cdf9dbb2aafa85acda58a3d2baa42779b42bdf67a4643303dfbae5c4f333d20c9c9d1eed6ad8cd5fffe48843c9e1634e35cafeb4d21e857",
      "file": "src/app/api/models/professionalstanding/sanctions.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ISanctionsModel {\r\n    id: number;\r\n    userId: number;\r\n    hadDrugAlchoholTreatment: boolean;\r\n    hadHospitalPrivilegesDenied: boolean;\r\n    hadLicenseRestricted: boolean;\r\n    hadHospitalPrivilegesRestricted: boolean;\r\n    hadFelonyConviction: boolean;\r\n    hadCensure: boolean;\r\n    explanation: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "explanation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "hadCensure",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "hadDrugAlchoholTreatment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "hadFelonyConviction",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "hadHospitalPrivilegesDenied",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "hadHospitalPrivilegesRestricted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "hadLicenseRestricted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IScoringSessionReadOnlyModel",
      "id": "interface-IScoringSessionReadOnlyModel-a3d8ea0ddba22c75aaa89c74460964c5c9586762f492035aa092b0daf64dd24cb50cbddd3809eb12711177930064e400cd80ad2a787aca30adcf3219b1c336c8",
      "file": "src/app/api/models/picklists/scoring-session-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IScoringSessionReadOnlyModel {\r\n    examSchedule: string;\r\n    session1Id: number;\r\n    session2Id: number;\r\n}\r\n",
      "properties": [
        {
          "name": "examSchedule",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "session1Id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "session2Id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IStateReadOnlyModel",
      "id": "interface-IStateReadOnlyModel-fb6232523b369ec9dfa05d9d31ddb7ca66cb6d2a4a75020f6e1c064de6f8b3fcf64f9ce4e55b0d92de6e0c40d995a5fa072700323878316b20b6bdbce496cea4",
      "file": "src/app/api/models/picklists/state-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IStateReadOnlyModel {\r\n    country: string | null;\r\n    itemValue: string | null;\r\n    itemDescription: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "country",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "itemDescription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "itemValue",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ITitleReadOnlyModel",
      "id": "interface-ITitleReadOnlyModel-f65caa574fc01077c88e37672b8e38bf69cc9dae174440ce100f5de0d36740a6d0113f688ab3187e4bf12c63f90afc6945dfe639fe95f3e52a128dc33b3f292c",
      "file": "src/app/api/models/scoring/ce/title-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ITitleReadOnlyModel {\r\n    title: string;\r\n    caseId: number;\r\n    examCaseId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "caseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "examCaseId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ITrainingTypeReadOnlyModel",
      "id": "interface-ITrainingTypeReadOnlyModel-7a1242420381a5cefaa2eb521fd160a58cc185c31895870a39af60b31689efc6341d6b3373d7009d56fe74e8b24981e41f7c772a51d316e3b55931ab013d7b20",
      "file": "src/app/api/models/picklists/training-type-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ITrainingTypeReadOnlyModel {\r\n    id: number;\r\n    trainingType: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "trainingType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserAppointmentModel",
      "id": "interface-IUserAppointmentModel-127dad517ee3fa09fe2c2985b07f42544276cb1af7463d292acf06b14692c9e804b4ff5b9b214b80415a7c71f914378d3f3b5eb56b18cfab221d98326cab7485",
      "file": "src/app/api/models/professionalstanding/user-appointment.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserAppointmentModel {\r\n    apptId: number;\r\n    userId: number;\r\n    practiceTypeId: number;\r\n    practiceType: string;\r\n    appointmentTypeId: number;\r\n    appointmentType: string;\r\n    organizationTypeId: number;\r\n    authorizingOfficial: string;\r\n    organizationType: string;\r\n    organizationId: number;\r\n    stateCode: string;\r\n    other: string;\r\n    organizationName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "appointmentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "appointmentTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "apptId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "authorizingOfficial",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "organizationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "organizationName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "organizationType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "organizationTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "practiceType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "practiceTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "stateCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserAppointmentReadOnlyModel",
      "id": "interface-IUserAppointmentReadOnlyModel-3fd4571a31a2bd9b8165b71cf8d8b4e8e663288ef24725d9f9987c4fdc55acfe137ca12a7fa2579272b7e7d67e2d10762bd4d8f80a0f8cbff4c77f6d6b24f515",
      "file": "src/app/api/models/professionalstanding/user-appointment-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserAppointmentReadOnlyModel {\r\n    apptId: number;\r\n    userId: number;\r\n    practiceTypeId: number;\r\n    practiceType: string;\r\n    appointmentTypeId: number;\r\n    appointmentType: string;\r\n    organizationTypeId: number;\r\n    authorizingOfficial: string;\r\n    organizationType: string;\r\n    organizationId: number;\r\n    stateCode: string;\r\n    other: string;\r\n    organizationName: string;\r\n}\r\n",
      "properties": [
        {
          "name": "appointmentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "appointmentTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "apptId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "authorizingOfficial",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "organizationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "organizationName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "organizationType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "organizationTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "other",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "practiceType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "practiceTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "stateCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserCertificateModel",
      "id": "interface-IUserCertificateModel-e536bd0a065153e8fbf7bc94b8ef6ca459d85be193ce05bdecedbc10d685ff5a3d7c2ac712fee52f62c3e60d93dc876a2e91d8caf71e3d9c57b6ba34608136e8",
      "file": "src/app/api/models/medicaltraining/user-certificate.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserCertificateModel {\r\n    certificateId: number;\r\n    userId: number;\r\n    documentId: number;\r\n    certificateTypeId: number;\r\n    certificateType: string;\r\n    issueDate: string;\r\n    certificateNumber: string;\r\n    file: File;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n    [key: string]: any;\r\n}\r\n",
      "properties": [
        {
          "name": "certificateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "certificateNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "certificateType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "certificateTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "documentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "file",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "File",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [
        {
          "id": "index-declaration-e536bd0a065153e8fbf7bc94b8ef6ca459d85be193ce05bdecedbc10d685ff5a3d7c2ac712fee52f62c3e60d93dc876a2e91d8caf71e3d9c57b6ba34608136e8",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "any",
          "line": 14,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 178,
      "methods": []
    },
    {
      "name": "IUserCertificateReadOnlyModel",
      "id": "interface-IUserCertificateReadOnlyModel-06032bf33b9c9bf6e2a37d7849c4d859c30aad16464358756aa696d9589b36a37d704d32d725eff7c852437d2641578f8caf81d0421fb052982f8f540e22fe84",
      "file": "src/app/api/models/medicaltraining/user-certificate-read-only.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserCertificateReadOnlyModel {\r\n    certificateId: number;\r\n    userId: number;\r\n    documentId: number;\r\n    certificateTypeId: number;\r\n    certificateType: string;\r\n    issueDate: string;\r\n    certificateNumber: string;\r\n    documentName: string;\r\n    uploadDateUtc: string;\r\n}\r\n",
      "properties": [
        {
          "name": "certificateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "certificateNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "certificateType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "certificateTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "documentId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "issueDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "uploadDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserCredential",
      "id": "interface-IUserCredential-aff2657c1c28213977362620afacd0d06cb11a5f07d02ea0fc7cebf357db646588ad6de0f035e4ccf2999d3270592d1ca403c61c2d338a6dc771c4cc918964d2",
      "file": "src/app/state/my-account/my-account.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { of, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { SaveMyAccountChanges, ClearErrors } from './my-account.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredentialModel } from '../../api';\nimport { UserCredentialsService } from '../../api';\nimport { Logout } from '../auth';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IUserCredential extends IUserCredentialModel {\n  errors?: IFormErrors | null;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IUserCredential>('userAccount');\n@State<IUserCredential>({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    emailAddress: null,\n    password: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MyAccountState {\n  constructor(\n    private authStore: Store,\n    private userCredentialsService: UserCredentialsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(SaveMyAccountChanges)\n  saveMyAccountChanges(\n    ctx: StateContext<IUserCredential>,\n    { payload }: SaveMyAccountChanges\n  ) {\n    this.globalDialogService.showLoading();\n    return this.userCredentialsService.updateUserCredential(payload).pipe(\n      tap((result: IUserCredentialModel) => {\n        // Succeeded in changing the user's credentials so logout\n        ctx.setState({\n          emailAddress: null,\n          password: null,\n          errors: null,\n        });\n        this.authStore.dispatch(new Logout());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Saved successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Save failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearErrors)\n  clearErrors(ctx: StateContext<IUserCredential>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
      "properties": [
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 14
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "IUserCredentialModel"
    },
    {
      "name": "IUserCredentialModel",
      "id": "interface-IUserCredentialModel-1b576ea4800d26b593a2edd53f5bf10f44474fbbd44a39174a04a52d670c3c3e29bdee4d54cab6b5fcd7380353460a25c10ed5dd1fd132228cf560e2e73e1cf6",
      "file": "src/app/api/models/users/user-credential.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserCredentialModel {\r\n    emailAddress: string | null;\r\n    password: string | null;\r\n}\r\n",
      "properties": [
        {
          "name": "emailAddress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "password",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserLoginModel",
      "id": "interface-IUserLoginModel-0c74006f6912c1c0d74305ed6009cac0499321cd38b0f3686c4aa6826e9ae32b402ad8eb6ce4a0aac4db7acef0e74ef680f7be003f66e44a77bc6cc7bc4f6164",
      "file": "src/app/api/models/users/user-login.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserLoginModel {\r\n  userName: string;\r\n  emailAddress: string;\r\n  password: string;\r\n}\r\n",
      "properties": [
        {
          "name": "emailAddress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "password",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "userName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserProfessionalStandingModel",
      "id": "interface-IUserProfessionalStandingModel-5b4efe53084311024142ff823f6ff9c665f54ca12fcdae531a1a34f5dc86c39c91b5d4049a6861b9d9d7996b0e0c0edc21df2ba4071c72cb39d8b37d2d739f28",
      "file": "src/app/api/models/professionalstanding/user-professional-standing.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserProfessionalStandingModel {\r\n    id: number;\r\n    userId: number;\r\n    primaryPracticeId: number;\r\n    primaryPractice: string;\r\n    organizationTypeId: number;\r\n    organizationType: string;\r\n    explanationOfNonPrivileges: string;\r\n    explanationOfNonClinicalActivities: string;\r\n    clinicallyActive: number;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n}\r\n",
      "properties": [
        {
          "name": "clinicallyActive",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "explanationOfNonClinicalActivities",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "explanationOfNonPrivileges",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "organizationType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "organizationTypeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "primaryPractice",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "primaryPracticeId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserProfile",
      "id": "interface-IUserProfile-938171ece0a5b1e5d2716af499c2a4ea6ad96b23bae745c2ed8eb85f133df4c6818765bd5cd5cec52676ddbb87c7d7764393408826d77c45c36569ae2dd2b044",
      "file": "src/app/state/user-profile/user-profile.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IUserProfileModel } from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { UserProfilesService } from '../../api';\nimport {\n  ClearUserProfileErrors,\n  GetUserProfile,\n  UpdateUserProfile,\n} from './user-profile.actions';\nimport { GetPicklists, GetStateList } from '../picklists';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IUserProfile {\n  userProfileId: number;\n  userId: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  suffix: string;\n  displayName: string;\n  officePhoneNumber: string;\n  mobilePhoneNumber: string;\n  birthCity: string;\n  birthState: string;\n  birthCountry: string;\n  countryCitizenship: string;\n  absId: string;\n  certificationStatus: string;\n  npi: string;\n  genderId: string; // Need to cast as number on saves\n  birthDate: string;\n  race: string;\n  ethnicity: string;\n  firstLanguageId: string; // Need to cast as number on saves\n  bestLanguageId: string; // Need to cast as number on saves\n  receiveComms: boolean;\n  userConfirmed: boolean;\n  userConfirmedDate: string;\n  createdByUserId: number;\n  createdAtUtc: string;\n  lastUpdatedAtUtc: string;\n  lastLoginDateUtc: string;\n  lastUpdatedByUserId: number;\n  street1: string;\n  street2: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  emailAddress: string;\n  fullName: string;\n  profilePicture: string;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const USER_PROFILE_STATE_TOKEN = new StateToken<IUserProfile>(\n  'userProfile'\n);\n\n@State<IUserProfile>({\n  name: USER_PROFILE_STATE_TOKEN,\n  defaults: {\n    userProfileId: 0,\n    userId: 0,\n    firstName: '',\n    middleName: '',\n    lastName: '',\n    suffix: '',\n    displayName: '',\n    officePhoneNumber: '',\n    mobilePhoneNumber: '',\n    birthCity: '',\n    birthState: '',\n    birthCountry: '',\n    countryCitizenship: '',\n    absId: '',\n    certificationStatus: '',\n    npi: '',\n    genderId: '',\n    birthDate: '',\n    race: '',\n    ethnicity: '',\n    firstLanguageId: '',\n    bestLanguageId: '',\n    receiveComms: false,\n    userConfirmed: false,\n    userConfirmedDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastLoginDateUtc: '',\n    lastUpdatedByUserId: 0,\n    street1: '',\n    street2: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: '',\n    emailAddress: '',\n    fullName: '',\n    profilePicture: '',\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class UserProfileState {\n  constructor(\n    private store: Store,\n    private userProfilesService: UserProfilesService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetUserProfile)\n  getUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { loginUser, claims }: GetUserProfile\n  ) {\n    this.globalDialogService.showLoading();\n    const state = ctx.getState();\n    const userId = loginUser?.userId;\n    return this.userProfilesService\n      .retrieveUserProfile_GetByUserId(userId)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const res = result as unknown as IUserProfile;\n          res.firstLanguageId = res.firstLanguageId?.toString();\n          res.bestLanguageId = res.bestLanguageId?.toString();\n          res.genderId = res.genderId?.toString();\n          ctx.setState({\n            ...state,\n            ...loginUser,\n            ...res,\n            userConfirmed: false,\n            claims,\n            profilePicture:\n              'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n            errors: null,\n          });\n          this.store.dispatch(new GetStateList(ctx.getState().birthCountry));\n          this.store.dispatch(new GetPicklists(ctx.getState().country));\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfile)\n  updateUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { payload }: UpdateUserProfile\n  ) {\n    this.globalDialogService.showLoading();\n    const model = {} as unknown as IUserProfileModel;\n\n    ctx.setState({\n      ...ctx.getState(),\n      ...payload,\n    });\n\n    Object.assign(model, ctx.getState());\n    const userProfile: IUserProfileModel =\n      model as unknown as IUserProfileModel;\n    userProfile.userConfirmedDate = new Date().toISOString();\n    userProfile.userConfirmed = true;\n    userProfile.genderId = +userProfile.genderId;\n    userProfile.firstLanguageId = +userProfile.firstLanguageId;\n    userProfile.bestLanguageId = +userProfile.bestLanguageId;\n    userProfile.lastUpdatedByUserId = ctx.getState().userId;\n\n    this.globalDialogService.showLoading();\n\n    return this.userProfilesService\n      .updateUserProfile(ctx.getState().userId, userProfile)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const userProfile = result as unknown as IUserProfile;\n          userProfile.genderId = userProfile.genderId.toString();\n          userProfile.firstLanguageId = userProfile.firstLanguageId.toString();\n          userProfile.bestLanguageId = userProfile.bestLanguageId.toString();\n          ctx.patchState({\n            ...userProfile,\n            errors: null,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          // const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(ClearUserProfileErrors)\n  clearUserProfileErrors(ctx: StateContext<IUserProfile>) {\n    ctx.patchState({\n      ...ctx.getState(),\n      errors: null,\n    });\n  }\n}\n",
      "properties": [
        {
          "name": "absId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "bestLanguageId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "birthCity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "birthCountry",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "birthDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "birthState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "certificationStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "country",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "countryCitizenship",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "displayName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "emailAddress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormErrors | null",
          "optional": true,
          "description": "",
          "line": 58
        },
        {
          "name": "ethnicity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "firstLanguageId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "firstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "fullName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "genderId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "lastLoginDateUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "lastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "middleName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "mobilePhoneNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "npi",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "officePhoneNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "profilePicture",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "race",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "receiveComms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "street1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "street2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "suffix",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "userConfirmed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "userConfirmedDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "userProfileId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "zipCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "IUserProfileModel",
      "id": "interface-IUserProfileModel-04d6534d9165d1ee7a084b6a52bc7505113e8383077d9e9ac079b7be9f4c2cda9742bd8b694708a8f44d82b1cfef451f8480d307feaae0a4491432552f1beec1",
      "file": "src/app/api/models/users/user-profile.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IUserProfileModel {\r\n    userProfileId: number;\r\n    userId: number;\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    suffix: string;\r\n    displayName: string;\r\n    officePhoneNumber: string;\r\n    mobilePhoneNumber: string;\r\n    birthCity: string;\r\n    birthState: string;\r\n    birthCountry: string;\r\n    countryCitizenship: string;\r\n    absId: string;\r\n    certificationStatus: string;\r\n    nPI: string;\r\n    genderId: number;\r\n    birthDate: string;\r\n    race: string;\r\n    ethnicity: string;\r\n    firstLanguageId: number;\r\n    bestLanguageId: number;\r\n    receiveComms: boolean;\r\n    userConfirmed: boolean;\r\n    userConfirmedDate: string;\r\n    createdByUserId: number;\r\n    createdAtUtc: string;\r\n    lastUpdatedAtUtc: string;\r\n    lastUpdatedByUserId: number;\r\n    street1: string;\r\n    street2: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    country: string;\r\n}\r\n",
      "properties": [
        {
          "name": "absId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "bestLanguageId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "birthCity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "birthCountry",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "birthDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "birthState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "certificationStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "city",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "country",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "countryCitizenship",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "createdAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "createdByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "displayName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "ethnicity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "firstLanguageId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "firstName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "genderId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "lastName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "lastUpdatedAtUtc",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "lastUpdatedByUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "middleName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "mobilePhoneNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "nPI",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "officePhoneNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "race",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "receiveComms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "street1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "street2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "suffix",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "userConfirmed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "userConfirmedDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "userProfileId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "zipCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "MedicalTrainingActions",
      "id": "interface-MedicalTrainingActions-815f9807be898d2845690096e249510eea09b6a0aa560da125c00717a763243ab86c3cffdb759c4633ec9daaacf48a070ef7e29fb39dcbb2fd454951a02789dd",
      "file": "src/app/medical-training/medical-training-models.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface MedicalTrainingActions {\n  [key: string]: {\n    [key: string]: () => void;\n  };\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-815f9807be898d2845690096e249510eea09b6a0aa560da125c00717a763243ab86c3cffdb759c4633ec9daaacf48a070ef7e29fb39dcbb2fd454951a02789dd",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "literal type",
          "line": 1,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 178,
      "methods": []
    },
    {
      "name": "MedicalTrainingData",
      "id": "interface-MedicalTrainingData-e0fa4aa21262121f7c176c76e8e32d89d9e8d77201cd177b0678b14e70845871bc2fddccb0aacfd63bc313faaa4132e917faf454f34e1136117bbb3bcff115a5",
      "file": "src/app/registration-requirements/training-modal/training-modal.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { FileUploadButtonComponent } from 'src/app/shared/components/file-upload-button/file-upload-button.component';\nimport { ModalComponent } from 'src/app/shared/components/modal/modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../../shared/gridDefinitions/medical-training-cols';\nimport { BASIC_DOCUMENT_COLS } from '../../shared/gridDefinitions/basic-document-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport {\n  UserProfileSelectors,\n  GQAdditionalTrainingSelectors,\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\n\ninterface MedicalTrainingData {\n  medicalSchool: any;\n  residency: any;\n  additionalDocuments: any;\n}\n\n@Component({\n  selector: 'abs-training-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    FileUploadButtonComponent,\n    ModalComponent,\n    InputTextModule,\n    InputTextareaModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioButtonModule,\n    ButtonModule,\n  ],\n  templateUrl: './training-modal.component.html',\n  styleUrls: ['./training-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.additionalTrainingList)\n  additionalTrainingList$:\n    | Observable<IAdditionalTrainingReadOnlyModel[]>\n    | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails)\n  selectedTraining$: Observable<any> | undefined;\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ];\n\n  userSubscription: Subscription | undefined;\n  selectedTrainingSubscription: Subscription | undefined;\n\n  trainingCols = MEDICAL_TRAINING_COLS;\n  documentCols = BASIC_DOCUMENT_COLS;\n  showTrainingAddEdit = false;\n  trainingAddEditTitle: string | undefined;\n  emptyTraining: IAdvancedTrainingModel = {\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  };\n  tempTraining$: BehaviorSubject<IAdvancedTrainingModel> = new BehaviorSubject(\n    this.emptyTraining\n  );\n  panels = [\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ];\n  activePanel = 0;\n\n  medicalTraining: MedicalTrainingData = {\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  };\n  userId: number | undefined;\n\n  constructor(private _store: Store) {\n    this.initTrainingData();\n  }\n  ngOnDestroy(): void {\n    this.userSubscription?.unsubscribe();\n    this.selectedTrainingSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.getMedicalTraining();\n  }\n\n  initTrainingData() {\n    this._store.dispatch(new GetAdditionalTrainingList());\n\n    this.selectedTrainingSubscription = this.selectedTraining$?.pipe(untilDestroyed(this)).subscribe(\n      (selectedTraining) => {\n        if (selectedTraining?.trainingId > -1) {\n          this.tempTraining$.next(selectedTraining);\n        }\n      }\n    );\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining.medicalSchool = {\n      statement: 'USA',\n      name: 'Johns Hopkins University',\n      city: 'Baltimore',\n      state: 'MD',\n      country: 'USA',\n      degree: 'MD',\n      yearGraduated: '2010',\n    };\n    this.medicalTraining.residency = {\n      programName: 'General Surgery',\n      yearOfCompletion: '2015',\n      programNotListed: 'an explanation goes here',\n      completedInCanada: null,\n      postResidencyPlans: null,\n      postFellowshipPlans: null,\n      vascularTraining: null,\n      vascularFellowship: null,\n      thoracicTraining: null,\n      thoracicFellowship: null,\n    };\n    this.medicalTraining.additionalDocuments = {\n      multiplePrograms: null,\n      completionDocuments: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n      recievedABSApprovalLetter: null,\n      approvalLetters: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#trainingTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n\n  uploadFile(event: any, fileList: any[]) {\n    if (event.file) {\n      fileList.push(event.file);\n    }\n  }\n\n  showTrainingModal(trainingId?: number | undefined) {\n    if (trainingId) {\n      this._store.dispatch(new GetAdditionalTrainingDetails(trainingId));\n      const selectedTraining = this._store.selectSnapshot<any>(\n        GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails\n      );\n\n      this.trainingAddEditTitle = 'Edit Additional / Advanced Training';\n    } else {\n      this.tempTraining$.next(this.emptyTraining);\n      this.trainingAddEditTitle = 'Add Additional / Advanced Training';\n    }\n    this.showTrainingAddEdit = true;\n  }\n  saveTraining($event: any) {\n    $event.trainingRecord.institutionId = parseInt(\n      $event.trainingRecord.institutionId\n    );\n    if ($event.trainingRecord.dateEnded) {\n      $event.trainingRecord.dateEnded = new Date(\n        $event.trainingRecord.dateEnded\n      );\n    }\n    if ($event.trainingRecord.dateStarted) {\n      $event.trainingRecord.dateStarted = new Date(\n        $event.trainingRecord.dateStarted\n      );\n    }\n    // TODO: [Joe] show the universal success/error message\n    if ($event.trainingRecord.trainingId > -1) {\n      this._store.dispatch(new UpdateAdditionalTraining($event.trainingRecord));\n    } else {\n      this._store.dispatch(new CreateAdditionalTraining($event.trainingRecord));\n    }\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n\n  handleGridAction($event: any, fileList?: any[] | undefined) {\n    if ($event.fieldKey === 'edit') {\n      this.showTrainingModal($event.data.trainingId);\n    } else if ($event.fieldKey === 'delete') {\n      // TODO: [Joe] once we have the ngx-store implemented see if this can be done cleaner without passing in the fileList\n      if (fileList) {\n        const index = fileList.indexOf($event.data);\n        if (index > -1) {\n          fileList.splice(index, 1);\n        }\n      } else {\n        console.log('handle delete', $event);\n      }\n    } else if ($event.fieldKey === 'download') {\n      const link = document.createElement('a');\n      link.setAttribute('href', URL.createObjectURL($event.data.file));\n      link.setAttribute('download', $event.data.fileName);\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n}\n",
      "properties": [
        {
          "name": "additionalDocuments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "medicalSchool",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "residency",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 42
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "ModalComponentArgs",
      "id": "interface-ModalComponentArgs-dd5cfee10d29b8fd1d308512b7fca926c52eaf775ddfd24afcee4ea6eb9acd396750aca375693fe1749b4cd6ec8900388ff8da7244fd74c550e3009cef148514",
      "file": "src/app/shared/components/modal/modal.stories.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  componentWrapperDecorator,\n  type Meta,\n  type StoryObj,\n} from '@storybook/angular';\nimport { ModalComponent } from './modal.component';\n\ninterface ModalComponentArgs extends ModalComponent {\n  modalContent: string;\n  // openModal: (data: any) => void;\n}\n\n// More on how to set up stories at: https://storybook.js.org/docs/angular/writing-stories/introduction\nconst meta: Meta<ModalComponentArgs> = {\n  title: 'Components/Modal',\n  tags: ['autodocs'],\n  component: ModalComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (ModalComponent) => `${ModalComponent}`\n    ),\n  ],\n  render: (args: ModalComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<p>Toggle the value of \"open\" in the inputs below to display the modal.</p>\n    <abs-modal [open]=\"open\" [title]=\"title\" [status]=\"status\" [modalName]=\"modalName\" [preventOverlayClose]=\"preventOverlayClose\" [hideClose]=\"hideClose\" [width]=\"width\">\n      <div [innerHTML]=\"'${args.modalContent}'\"></div>\n    </abs-modal>`,\n    props: {\n      ...args,\n    },\n  }),\n};\n\nexport default meta;\ntype Story = StoryObj<ModalComponentArgs>;\n\n// More on writing stories with args: https://storybook.js.org/docs/angular/writing-stories/args\nexport const Default: Story = {\n  args: {\n    // openModal: (data: any) => {\n    //   console.log(data);\n    // },\n    open: false,\n    title: 'Modal Title',\n    modalName: 'modalName',\n    modalContent: 'Modal Content<br><br>More content.',\n    width: 70,\n  },\n};\n\nexport const StatusComplete: Story = {\n  args: {\n    ...Default.args,\n    status: 'completed',\n  },\n};\n\nexport const StatusInProgress: Story = {\n  args: {\n    ...Default.args,\n    status: 'in-progress',\n  },\n};\n\nexport const StatusAlert: Story = {\n  args: {\n    ...Default.args,\n    status: 'alert',\n  },\n};\n\nexport const PreventOverlayClose: Story = {\n  args: {\n    ...Default.args,\n    preventOverlayClose: true,\n  },\n};\n\nexport const HideCloseButton: Story = {\n  args: {\n    ...Default.args,\n    hideClose: true,\n  },\n};\n\nexport const WIdthSmall: Story = {\n  args: {\n    ...Default.args,\n    width: 40,\n  },\n};\n\nexport const WidthLarge: Story = {\n  args: {\n    ...Default.args,\n    width: 90,\n  },\n};\n",
      "properties": [
        {
          "name": "modalContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "extends": "ModalComponent"
    },
    {
      "name": "OptionList",
      "id": "interface-OptionList-b1182b571f4716939dde8bf4659859b5daab4e017aabbb0794d906071fe3a1903419a124b37a1aa6451f4c7e4d5eada554f572e7ec4604cb362181dafb36e788",
      "file": "src/app/gme-history/gme-form/gme-form.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Observable, pairwise } from 'rxjs';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CheckboxModule } from 'primeng/checkbox';\n\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CalendarModule } from 'primeng/calendar';\nimport {\n  validateMaxDuration,\n  validateMinDuration,\n  validateStartAndEndDates,\n} from 'src/app/shared/validators/validators';\nimport { IRotationReadOnlyModel } from 'src/app/api';\nimport { Select } from '@ngxs/store';\nimport { GraduateMedicalEducationSelectors } from 'src/app/state';\nimport { FormErrorsComponent } from '../../shared/components/form-errors/form-errors.component';\n\ninterface OptionList {\n  clinicalLevelOptions: any[];\n\n  isClinicalActivityOptions: any[];\n\n  clinicalActivityOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    CheckboxModule,\n    RadioButtonModule,\n    CalendarModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './gme-form.component.html',\n  styleUrls: ['./gme-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GmeFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Output() relaunchDialog: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  localRotationsList: IRotationReadOnlyModel[] = [];\n\n  optionLists: OptionList = {\n    clinicalLevelOptions: [],\n\n    isClinicalActivityOptions: [\n      { label: 'Clinical', value: true },\n      { label: 'Non-Clinical', value: false },\n    ],\n    clinicalActivityOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  gemRotationForm = new FormGroup(\n    {\n      programName: new FormControl({ value: '', disabled: false }),\n      clinicalLevelId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      startDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      endDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      weeks: new FormControl({ value: '', disabled: false }),\n      usingAffiliateOrganization: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n      alternateInstitutionName: new FormControl({ value: '', disabled: false }),\n      isClinicalActivity: new FormControl({ value: true, disabled: false }, [\n        Validators.required,\n      ]),\n      clinicalActivityId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      other: new FormControl({ value: '', disabled: false }),\n      nonPrimaryExplain: new FormControl({ value: '', disabled: false }), //nonPrimary\n      fourMonthRotationExplain: new FormControl({ value: '', disabled: false }), //duration\n      nonClinicalExplain: new FormControl({ value: '', disabled: false }), //non-surgical\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }),\n      isInternationalRotation: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n    },\n    {\n      validators: [\n        validateStartAndEndDates('startDate', 'endDate'),\n        validateMinDuration('startDate', 'endDate', 2),\n        validateMaxDuration('startDate', 'endDate', 364),\n      ],\n    }\n  );\n\n  /* Toggle variables */\n  weeksLabel = 'Weeks';\n  startDateOptions: any = {\n    maxDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  };\n  endDateOptions: any = {\n    minDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  };\n  displaySurgicalDescription = false;\n  displayExplainFellowship = false;\n  displayExplainNonPrimary = false;\n  displayExplainDuration = false;\n  displayExplainNonSurgical = false;\n\n  startDateOverlap: IRotationReadOnlyModel | undefined;\n  endDateOverlap: IRotationReadOnlyModel | undefined;\n\n  clinicalActivities: any[] = [];\n  nonClinicalActivities: any[] = [];\n\n  groupedClinicalActivities: any[] = [];\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n\n    this.gmeRotations$?.pipe(untilDestroyed(this)).subscribe((gmeRotations) => {\n      this.localRotationsList = gmeRotations;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n      this.clinicalActivities = this.optionLists.clinicalActivityOptions.filter(\n        (activity) => {\n          if (activity.name.includes('Non-Clinical')) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      );\n      this.nonClinicalActivities =\n        this.optionLists.clinicalActivityOptions.filter((activity) => {\n          if (activity.name.includes('Non-Clinical')) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      const essentialActivities = this.clinicalActivities.filter((activity) => {\n        return activity.isEssential;\n      });\n      const otherActivities = this.clinicalActivities.filter((activity) => {\n        return !activity.isEssential;\n      });\n\n      this.groupedClinicalActivities = [\n        {\n          label: 'Essential Activities',\n          items: essentialActivities.map((activity) => {\n            return {\n              label: activity.name,\n              value: activity.id,\n            };\n          }),\n        },\n        {\n          label: 'Non-Essential Activities',\n          items: otherActivities.map((activity) => {\n            return {\n              label: activity.name,\n              value: activity.id,\n            };\n          }),\n        },\n      ];\n    }\n  }\n\n  setFormValues(data: any) {\n    this.gemRotationForm.reset();\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n        this.gemRotationForm.get(key)?.setValue(newValue);\n      }\n    }\n  }\n\n  onFormChanges() {\n    let durationInWeeks = 0;\n\n    const calculateWeeks = () => {\n      const startDate = this.gemRotationForm.get('endDate')?.value\n        ? new Date(this.gemRotationForm.get('endDate')?.value as string)\n        : undefined;\n\n      const endDate = this.gemRotationForm.get('startDate')?.value\n        ? new Date(this.gemRotationForm.get('startDate')?.value as string)\n        : undefined;\n\n      if (startDate && endDate) {\n        const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n        const weeks = diffDays / 7;\n        let weeksValue: string | undefined;\n        if (weeks >= 1) {\n          durationInWeeks = weeks;\n          weeksValue = Math.round(weeks).toString();\n          this.weeksLabel = 'Weeks';\n        } else {\n          durationInWeeks = 0;\n          this.weeksLabel = 'Day(s)';\n          weeksValue = diffDays.toString();\n        }\n\n        this.gemRotationForm.get('weeks')?.setValue(weeksValue.toString());\n      }\n    };\n\n    const setDurationErrors = () => {\n      if (this.gemRotationForm.errors) {\n        if (this.gemRotationForm.errors['minDurationValid'] === false) {\n          this.startDateOptions.errorText =\n            'Rotations must be at least 2 days long';\n          this.startDateOptions.overlapId = undefined;\n        } else if (this.gemRotationForm.errors['maxDurationValid'] === false) {\n          this.startDateOptions.errorText =\n            'Rotations must be less than 364 days long';\n          this.startDateOptions.overlapId = undefined;\n        } else {\n          //this.startDateOptions.errorText = undefined;\n        }\n      } else {\n        //this.startDateOptions.errorText = undefined;\n      }\n    };\n\n    const checkForOverlap = () => {\n      const startDate = this.gemRotationForm.get('startDate')?.value\n        ? new Date(this.gemRotationForm.get('startDate')?.value as string)\n        : undefined;\n\n      const endDate = this.gemRotationForm.get('endDate')?.value\n        ? new Date(this.gemRotationForm.get('endDate')?.value as string)\n        : undefined;\n\n      if (startDate) {\n        this.startDateOverlap = this.localRotationsList.find((rotation) => {\n          // check rotation.id against this.originalFormValues.id\n          if (\n            new Date(rotation.startDate) <= startDate &&\n            new Date(rotation.endDate) >= startDate &&\n            // rotation.id !== this.rotationToEdit?.id\n            rotation.id !== this.originalFormValues?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        if (this.startDateOverlap) {\n          this.startDateOptions.errorText =\n            'This start date overlaps with an existing rotation';\n          this.startDateOptions.overlapId = this.startDateOverlap.id;\n        } else {\n          this.startDateOptions.errorText = undefined;\n          this.startDateOptions.overlapId = undefined;\n        }\n      } else {\n        //this.startDateOptions.errorText = undefined;\n      }\n\n      if (endDate) {\n        this.endDateOverlap = this.localRotationsList.find((rotation) => {\n          if (\n            new Date(rotation.startDate) <= endDate &&\n            new Date(rotation.endDate) >= endDate &&\n            // rotation.id !== this.rotationToEdit?.id\n            rotation.id !== this.originalFormValues?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        if (this.endDateOverlap) {\n          this.endDateOptions.errorText =\n            'This end date overlaps with an existing rotation';\n          this.endDateOptions.overlapId = this.endDateOverlap.id;\n        } else {\n          this.endDateOptions.errorText = undefined;\n          this.endDateOptions.overlapId = undefined;\n        }\n      } else {\n        this.endDateOptions.errorText = undefined;\n      }\n    };\n\n    const setClinicalActivityErrors = (\n      clinicalLevelId?: number | null,\n      clinicalActivityId?: number | null\n    ) => {\n      const activity = this.optionLists.clinicalActivityOptions.find(\n        (activity) => activity.id === clinicalActivityId\n      );\n\n      // if clinical level = 9, then show other field\n      if (clinicalLevelId && clinicalLevelId === 9) {\n        this.displayExplainFellowship = true;\n        this.gemRotationForm.get('other')?.enable();\n        this.gemRotationForm.get('other')?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainFellowship = false;\n        this.gemRotationForm.get('other')?.setValue('');\n        this.gemRotationForm.get('other')?.disable();\n        this.gemRotationForm.get('other')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 4 or 6 && clinicalActivityId = 5 or 17, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 4 || clinicalLevelId === 6) &&\n        clinicalActivityId &&\n        (clinicalActivityId === 5 || clinicalActivityId === 17)\n      ) {\n        this.displayExplainNonSurgical = true;\n        this.gemRotationForm.get('nonClinicalExplain')?.enable();\n        this.gemRotationForm\n          .get('nonClinicalExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainNonSurgical = false;\n        this.gemRotationForm.get('nonClinicalExplain')?.setValue('');\n        this.gemRotationForm.get('nonClinicalExplain')?.disable();\n        this.gemRotationForm.get('nonClinicalExplain')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 5 or 7 && duration > 16 weeks, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        durationInWeeks >= 17\n      ) {\n        this.displayExplainDuration = true;\n        this.gemRotationForm.get('fourMonthRotationExplain')?.enable();\n        this.gemRotationForm\n          .get('fourMonthRotationExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainDuration = false;\n        this.gemRotationForm.get('fourMonthRotationExplain')?.setValue('');\n        this.gemRotationForm.get('fourMonthRotationExplain')?.disable();\n        this.gemRotationForm.get('fourMonthRotationExplain')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 5 or 7 and clinical activity is essential === false\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        activity &&\n        !activity.isEssential\n      ) {\n        this.displayExplainNonPrimary = true;\n        this.gemRotationForm.get('nonPrimaryExplain')?.enable();\n        this.gemRotationForm\n          .get('nonPrimaryExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainNonPrimary = false;\n        this.gemRotationForm.get('nonPrimaryExplain')?.setValue('');\n        this.gemRotationForm.get('nonPrimaryExplain')?.disable();\n        this.gemRotationForm.get('nonPrimaryExplain')?.setValidators([]);\n      }\n    };\n\n    this.gemRotationForm\n      .get('endDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.startDateOptions.maxDate = new Date(val);\n        } else {\n          this.startDateOptions.maxDate = null;\n        }\n\n        this.startDateOptions.errorText = undefined;\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.gemRotationForm\n      .get('startDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.endDateOptions.minDate = new Date(val);\n        } else {\n          this.endDateOptions.minDate = null;\n        }\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.gemRotationForm\n      .get('clinicalLevelId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        setClinicalActivityErrors(val, clinicalActivityId);\n      });\n\n    this.gemRotationForm\n      .get('clinicalActivityId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        setClinicalActivityErrors(clinicalLevelId, val);\n\n        if (val) {\n          const activity = this.optionLists.clinicalActivityOptions.find(\n            (activity) =>\n              activity.id === val && activity.name.includes('Non-Surgical')\n          );\n          if (activity) {\n            this.displaySurgicalDescription = true;\n            this.gemRotationForm.get('nonSurgicalActivity')?.enable();\n            this.gemRotationForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([Validators.required]);\n          } else {\n            this.displaySurgicalDescription = false;\n            this.gemRotationForm.get('nonSurgicalActivity')?.setValue('');\n            this.gemRotationForm.get('nonSurgicalActivity')?.disable();\n            this.gemRotationForm.get('nonSurgicalActivity')?.setValidators([]);\n          }\n        }\n      });\n\n    this.gemRotationForm\n      .get('usingAffiliateOrganization')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.gemRotationForm.get('alternateInstitutionName')?.enable();\n          this.gemRotationForm\n            .get('alternateInstitutionName')\n            ?.setValidators([Validators.required]);\n        } else {\n          this.gemRotationForm.get('alternateInstitutionName')?.setValue('');\n          this.gemRotationForm.get('alternateInstitutionName')?.disable();\n          this.gemRotationForm\n            .get('alternateInstitutionName')\n            ?.setValidators([]);\n        }\n      });\n\n    this.gemRotationForm\n      .get('isClinicalActivity')\n      ?.valueChanges.pipe(untilDestroyed(this), pairwise())\n      .subscribe(([prev, next]) => {\n        if (prev !== null && next !== null && prev !== next) {\n          this.gemRotationForm.get('clinicalActivityId')?.setValue(null);\n        }\n      });\n  }\n\n  onSubmit() {\n    const formData: any = this.gemRotationForm.getRawValue();\n    const activity = this.optionLists.clinicalActivityOptions.find(\n      (activity) => {\n        return activity.id === formData.clinicalActivityId;\n      }\n    );\n\n    if (activity) {\n      formData.isEssential = activity.isEssential;\n    }\n    this.saveForm.emit({\n      show: false,\n      data: formData,\n      isEdit: this.localEdit,\n    });\n  }\n\n  changeModalData(id: number) {\n    this.relaunchDialog.emit(id);\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "properties": [
        {
          "name": "clinicalActivityOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "clinicalLevelOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "isClinicalActivityOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 43
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    },
    {
      "name": "OptionList",
      "id": "interface-OptionList-26118820f38c0df690d574267facb986c760fc8bb83ce29802311660b11fca99b0614e1588824a92343348d02909d096f07f92a9b7bdbc42f6817bf36adb597c-1",
      "file": "src/app/professional-standing/appointments-form/appointments-form.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\n\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\n\ninterface OptionList {\n  practiceTypeOptions: any[];\n  appointmentTypeOptions: any[];\n  organizationTypeOptions: any[];\n  stateCodeOptions: any[];\n  organizationOptions: any[];\n  filteredOrganizationOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-appointments-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DropdownModule,\n\n    AutoCompleteModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './appointments-form.component.html',\n  styleUrls: ['./appointments-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AppointmentsFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists: OptionList = {\n    practiceTypeOptions: [],\n\n    appointmentTypeOptions: [],\n\n    organizationTypeOptions: [],\n\n    stateCodeOptions: [],\n\n    organizationOptions: [],\n\n    filteredOrganizationOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  hospitalAppointmentForm = new FormGroup({\n    practiceTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    appointmentTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    stateCode: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationId: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    other: new FormControl({ value: '', disabled: false }),\n\n    authorizingOfficial: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  onFormChanges() {\n    this.hospitalAppointmentForm\n      .get('organizationId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.hospitalAppointmentForm\n            .get('other')\n            ?.setValue('', { emitEvent: false });\n          this.hospitalAppointmentForm.get('other')?.disable();\n          this.hospitalAppointmentForm.get('other')?.clearValidators();\n        } else {\n          this.hospitalAppointmentForm.get('other')?.enable();\n          this.hospitalAppointmentForm\n            .get('other')\n            ?.setValidators([Validators.required]);\n        }\n      });\n    this.hospitalAppointmentForm\n      .get('other')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.hospitalAppointmentForm.get('organizationId')?.clearValidators();\n          this.hospitalAppointmentForm\n            .get('organizationId')\n            ?.updateValueAndValidity();\n        } else {\n          this.hospitalAppointmentForm\n            .get('organizationId')\n            ?.setValidators([Validators.required]);\n        }\n      });\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n\n        if (key === 'organizationId') {\n          newValue = this.optionLists.organizationOptions.find(\n            (i) => i.itemValue === value\n          );\n        }\n        this.hospitalAppointmentForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.hospitalAppointmentForm.reset();\n    }\n  }\n\n  filterItems($event: any, options: string, filteredOptions: string) {\n    const value = $event.query;\n    this.optionLists[filteredOptions as keyof OptionList] = this.optionLists[\n      options as keyof OptionList\n    ]?.filter((i) => {\n      return i.itemDescription.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  onSubmit() {\n    this.saveForm.emit({\n      show: false,\n      data: this.hospitalAppointmentForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "properties": [
        {
          "name": "appointmentTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "filteredOrganizationOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "organizationOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "organizationTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "practiceTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "stateCodeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 34
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "OptionList-1"
    },
    {
      "name": "OptionList",
      "id": "interface-OptionList-a8d28ef62b8df4ef3d68c52cad516204fab871c1cd1ee2dd10295e78da333f037ba91bf6a1d1d03501f062710159de6c9dfde20fb9838d99f1649362b4afec67-2",
      "file": "src/app/professional-standing/current-appointment-form/current-appointment-form.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n// add error handling to this schematic\n\ninterface OptionList {\n  primaryPracticeOptions: any[];\n\n  organizationTypeOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-current-appointment-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    DropdownModule,\n    InputTextareaModule,\n    FormErrorsComponent,\n    CheckboxModule,\n  ],\n  templateUrl: './current-appointment-form.component.html',\n  styleUrls: ['./current-appointment-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class CurrentAppointmentFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists: OptionList = {\n    primaryPracticeOptions: [],\n\n    organizationTypeOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  currentAppointmentForm = new FormGroup({\n    clinicallyActive: new FormControl({ value: false, disabled: true }),\n    primaryPracticeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    explanationOfNonPrivileges: new FormControl({ value: '', disabled: false }),\n\n    explanationOfNonClinicalActivities: new FormControl({\n      value: '',\n      disabled: false,\n    }),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  onClinicalActiveChange(event: any) {\n    const checked = event.checked;\n\n    if (checked) {\n      this.currentAppointmentForm.get('primaryPracticeId')?.enable();\n      this.currentAppointmentForm.get('organizationTypeId')?.enable();\n      this.currentAppointmentForm.get('explanationOfNonPrivileges')?.disable();\n      this.currentAppointmentForm\n        .get('explanationOfNonClinicalActivities')\n        ?.disable();\n    } else {\n      this.currentAppointmentForm.get('primaryPracticeId')?.disable();\n      this.currentAppointmentForm.get('organizationTypeId')?.disable();\n      this.currentAppointmentForm.get('explanationOfNonPrivileges')?.enable();\n      this.currentAppointmentForm\n        .get('explanationOfNonClinicalActivities')\n        ?.enable();\n    }\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n\n        if (key === 'clinicallyActive') {\n          this.onClinicalActiveChange({ checked: [value] });\n          newValue = value === 1 ? true : false;\n        }\n\n        this.currentAppointmentForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.currentAppointmentForm.reset();\n    }\n  }\n\n  onFormChanges() {\n    // include subscriptions to .valueChanges here for the reactive form\n    // be sure to include .pipe(untilDestroyed(this)) to the subscriptions\n  }\n\n  onSubmit() {\n    this.saveForm.emit({\n      show: false,\n      data: this.currentAppointmentForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "properties": [
        {
          "name": "organizationTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "primaryPracticeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 31
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 2,
      "duplicateName": "OptionList-2"
    },
    {
      "name": "User",
      "id": "interface-User-26c8362700e148edf5a3a2903e1a61f143b6bd56bf30c86708a40eaced552a24ffad018bb787d5cb23e4a4ffb2dde5bd38b9bffc8c8894748005c9a68b8f7ca8",
      "file": "src/web-components/user.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {\n  id: number;\n  fullName: string;\n  role: string;\n  avatar?: string;\n}\n",
      "properties": [
        {
          "name": "avatar",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "fullName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "role",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 168,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AdditionalTrainingsService",
      "id": "injectable-AdditionalTrainingsService-d048a801c8b0af288502a72242700e0b5dbe014488279d4506eb792474fed9eecf0e06853a51ddefe8fcdbb3e5884c43dd7919c5319c24debc6c71e3d6655602",
      "file": "src/app/api/services/examinations/gq/additional-trainings.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createAdditionalTraining",
          "args": [
            {
              "name": "model",
              "type": "IAdditionalTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdditionalTrainingModel>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IAdditionalTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveAdditionalTraining_GetByTrainingId",
          "args": [
            {
              "name": "trainingId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdditionalTrainingModel>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "trainingId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveAdditionalTrainingReadOnly_GetAllByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdditionalTrainingReadOnlyModel[]>",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAdditionalTraining",
          "args": [
            {
              "name": "trainingId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IAdditionalTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdditionalTrainingModel>",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "trainingId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IAdditionalTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAdditionalTrainingModel } from '../../../models/examinations/gq/additional-training.model';\r\nimport { IAdditionalTrainingReadOnlyModel } from '../../../models/examinations/gq/additional-training-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdditionalTrainingsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveAdditionalTraining_GetByTrainingId(trainingId: number,\r\n        apiVersion = '1.0'): Observable<IAdditionalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * trainingId:Number\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_additionaltraining_bytrainingid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAdditionalTrainingModel>(`api/examinations/gq/additional-trainings?api-version=${apiVersion}&trainingId=${trainingId}`);\r\n        }\r\n\r\n        public createAdditionalTraining(model: IAdditionalTrainingModel,\r\n            apiVersion = '1.0'): Observable<IAdditionalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * dateEnded:String\r\n            * dateStarted:String\r\n            * other:String\r\n            * institutionId:Number\r\n            * city:String\r\n            * stateId:String\r\n            * typeOfTraining:String\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_additionaltraining_bytrainingid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IAdditionalTrainingModel>(`api/examinations/gq/additional-trainings?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n\r\n        public updateAdditionalTraining(trainingId: number,\r\n        model: IAdditionalTrainingModel,\r\n        apiVersion = '1.0') : Observable<IAdditionalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * trainingId:Number\r\n            * dateEnded:String\r\n            * dateStarted:String\r\n            * other:String\r\n            * institutionId:Number\r\n            * city:String\r\n            * stateId:String\r\n            * typeOfTraining:String\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_additionaltraining_bytrainingid]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IAdditionalTrainingModel>(`api/examinations/gq/additional-trainings?api-version=${apiVersion}&trainingId=${trainingId}`,\r\n            model);\r\n        }\r\n\r\n        public retrieveAdditionalTrainingReadOnly_GetAllByUserId(apiVersion = '1.0'): Observable<IAdditionalTrainingReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_additionaltrainingreadonly_allbyuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAdditionalTrainingReadOnlyModel[]>(`api/examinations/gq/additional-trainings/all?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AdvancedTrainingService",
      "id": "injectable-AdvancedTrainingService-e80d0a975982f748e6c3405c89c48f8d114cf7240fa62e17b87742d1a199b7e4eea836b81ef32be1745b7840a2505b4b1a98e87054d6a3df021bdd027ef323f8",
      "file": "src/app/api/services/medicaltraining/advanced-training.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createAdvancedTraining",
          "args": [
            {
              "name": "model",
              "type": "IAdvancedTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdvancedTrainingModel>",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IAdvancedTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveAdvancedTraining_GetByTrainingId",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdvancedTrainingModel>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveAdvancedTrainingReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdvancedTrainingReadOnlyModel[]>",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAdvancedTraining",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IAdvancedTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAdvancedTrainingModel>",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IAdvancedTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAdvancedTrainingModel } from '../../models/medicaltraining/advanced-training.model';\r\nimport { IAdvancedTrainingReadOnlyModel } from '../../models/medicaltraining/advanced-training-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdvancedTrainingService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveAdvancedTraining_GetByTrainingId(id: number,\r\n        apiVersion = '1.0'): Observable<IAdvancedTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: TrainingTypeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: StartDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: EndDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_advanced_training_by_trainingid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAdvancedTrainingModel>(`api/advanced-training/by-trainingid?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createAdvancedTraining(model: IAdvancedTrainingModel, \r\n            apiVersion = '1.0'): Observable<IAdvancedTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: TrainingTypeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: StartDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: EndDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * trainingTypeId:Number\r\n            * programId:Number\r\n            * other:String\r\n            * startDate:String\r\n            * endDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_advanced_training]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IAdvancedTrainingModel>(`api/advanced-training?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateAdvancedTraining(id: number,\r\n        model: IAdvancedTrainingModel,\r\n        apiVersion = '1.0') : Observable<IAdvancedTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: TrainingTypeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: StartDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: EndDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * trainingTypeId:Number\r\n            * programId:Number\r\n            * other:String\r\n            * startDate:String\r\n            * endDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_advanced_training]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IAdvancedTrainingModel>(`api/advanced-training?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveAdvancedTrainingReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IAdvancedTrainingReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_advanced_training_by_userid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAdvancedTrainingReadOnlyModel[]>(`api/advanced-training/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AgendaService",
      "id": "injectable-AgendaService-82496982e6e68be1366c78b7b038a2ca33d86f72477f20aae24720e341b5d086c85b125d56c2473e266bfafa44b0352e1017e9ef108618f9aeb0677a98647ca9",
      "file": "src/app/api/services/examiners/agenda.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveAgendaReadOnly_GetByExamHeaderId",
          "args": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAgendaReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAgendaReadOnlyModel } from '../../models/examiners/agenda-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AgendaService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveAgendaReadOnly_GetByExamHeaderId(examHeaderId: number,\r\n        apiVersion = '1.0'): Observable<IAgendaReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examHeaderId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examiner_agenda]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAgendaReadOnlyModel>(`api/examiners/agenda/by-exam-header-id?api-version=${apiVersion}&examHeaderId=${examHeaderId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AnalyticsService",
      "id": "injectable-AnalyticsService-52cbba615ad682c7454a46d9d6b43cc64757a35d7d90e71ab716dea910b489e002107098ae2ae7bd9e2f9fa3efde9ff4fc6542e149145046dd1ac799f28dd83a",
      "file": "src/app/shared/services/analytics.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "registerClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 5,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class AnalyticsService {\n  registerClick() {\n    console.log('Clicked!');\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ApplicationState",
      "id": "injectable-ApplicationState-bd6ab8630d4d155a22c375471c7172fb97c8e1232e1834160f4227246e14e8d1a2fbef8240e988dbbe03a9ef75e770b3c5c82a59d09da021af5cfdb7392053f8",
      "file": "src/app/state/application/application.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "checkUnsavedChanges",
          "args": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "text",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121, 132],
          "jsdoctags": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "text",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "closeApplication",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CloseApplication"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFeatureFlags",
          "args": [],
          "optional": false,
          "returnType": "Observable<IFeatureFlags>",
          "typeParameters": [],
          "line": 151,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "loadApplication",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IFeatureFlags>",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "LoadApplication"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setExamInProgress",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "SetExamInProgress",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "SetExamInProgress"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "SetExamInProgress",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setUnsavedChanges",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "SetUnsavedChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "SetUnsavedChanges"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IApplicationState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "SetUnsavedChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport {\n  CloseApplication,\n  LoadApplication,\n  SetExamInProgress,\n  SetUnsavedChanges,\n} from './application.actions';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { Logout } from '../auth';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IApplicationState {\n  isLoggedIn: boolean;\n  isLoaded: boolean;\n  isAuth: boolean;\n  isUserLoaded: boolean;\n  featureFlags: IFeatureFlags | undefined;\n  hasUnsavedChanges: boolean;\n  examInProgress: boolean;\n}\n\nexport interface IFeatureFlags {\n  ceScoreTesting?: boolean;\n  //page level feature flags\n  dashboardPage?: boolean;\n  myAccountPage?: boolean;\n  personalProfilePage?: boolean;\n  medicalTrainingPage?: boolean;\n  professionalStandingPage?: boolean;\n  cmeRepositoryPage?: boolean;\n  gmeHistoryPage?: boolean;\n  applyRegisterPage?: boolean;\n  examHistoryPage?: boolean;\n  continuousCertificationPage?: boolean;\n  paymentHistoryPage?: boolean;\n  documentsPage?: boolean;\n  examScoringPage?: boolean;\n}\n\nexport const APPLICATION_STATE_TOKEN = new StateToken<IApplicationState>(\n  'application'\n);\n\n@State<IApplicationState>({\n  name: APPLICATION_STATE_TOKEN,\n  defaults: {\n    isLoggedIn: false,\n    isLoaded: false,\n    isAuth: false,\n    isUserLoaded: false,\n    featureFlags: undefined,\n    hasUnsavedChanges: false,\n    examInProgress: false,\n  },\n})\n@Injectable({ providedIn: 'root' })\nexport class ApplicationState {\n  constructor(\n    private store: Store,\n    private router: Router,\n    private httpClient: HttpClient,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(LoadApplication)\n  loadApplication(\n    ctx: StateContext<IApplicationState>\n  ): Observable<IFeatureFlags> {\n    const state = ctx.getState();\n    return this.getFeatureFlags().pipe(\n      tap((response: any) => {\n        ctx.patchState({\n          featureFlags: response as IFeatureFlags,\n        });\n      })\n    );\n  }\n\n  @Action(SetUnsavedChanges)\n  setUnsavedChanges(\n    ctx: StateContext<IApplicationState>,\n    action: SetUnsavedChanges\n  ) {\n    ctx.patchState({\n      hasUnsavedChanges: action.hasUnsavedChanges,\n    });\n  }\n\n  @Action(SetExamInProgress)\n  setExamInProgress(\n    ctx: StateContext<IApplicationState>,\n    action: SetExamInProgress\n  ) {\n    ctx.patchState({\n      examInProgress: action.examInProgress,\n    });\n  }\n\n  @Action(CloseApplication)\n  closeApplication(ctx: StateContext<IApplicationState>) {\n    console.log('closeApplication');\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      this.globalDialogService\n        ?.showConfirmation(\n          'Unsaved Changes',\n          'Do you want to navigate away. close application'\n        )\n        .then((result) => {\n          if (result) {\n            this.store\n              .dispatch(new SetUnsavedChanges(false))\n              .pipe(take(1))\n              .subscribe(() => {\n                this.store.dispatch(new Logout());\n              });\n          }\n        });\n    } else {\n      const examInProgress = this.store.selectSnapshot(\n        (state) => state.application.examInProgress\n      );\n      if (examInProgress) {\n        this.globalDialogService\n          ?.showConfirmation(\n            'Exam in Progress',\n            'Do you want to navigate away from the exam? <br/> Navigating away will result in an incomplete exam.'\n          )\n          .then((result) => {\n            if (result) {\n              this.store\n                .dispatch(new SetExamInProgress(false))\n                .pipe(take(1))\n                .subscribe(() => {\n                  this.store.dispatch(new Logout());\n                });\n            }\n          });\n      } else {\n        this.store.dispatch(new Logout());\n      }\n    }\n  }\n\n  private getFeatureFlags(): Observable<IFeatureFlags> {\n    return this.httpClient.get('/api/features').pipe(\n      map((response: any) => {\n        return response as IFeatureFlags;\n      })\n    );\n  }\n\n  // split up unsaved changes and exam in progress logic\n  private async checkUnsavedChanges(\n    title?: string,\n    text?: string\n  ): Promise<boolean> {\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      const result = await this.globalDialogService?.showConfirmation(\n        title ?? 'Unsaved Changessdfsdfsdf',\n        text ?? 'Do you want to navigate away'\n      );\n\n      if (result) {\n        this.store.dispatch(new SetUnsavedChanges(false));\n      }\n\n      return result;\n    }\n    return true;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "httpClient",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 61,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "httpClient",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AuthService",
      "id": "injectable-AuthService-baeca19c26e4e5c72524080507bb61bdaa68014cfc2c61e63949b2a685eaab16298b8f0fcf2f2d8e85d4e3d3548200ced6e74df83f5630f181974fa24229e2db",
      "file": "src/app/api/services/auth/auth.service.ts",
      "properties": [
        {
          "name": "token",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "login",
          "args": [
            {
              "name": "payload",
              "type": "IAuthCredentials",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IAuthState | IError>",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "payload",
              "type": "IAuthCredentials",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "refreshToken",
          "args": [
            {
              "name": "payload",
              "type": "IRefreshToken",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IAuthState | IError>",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "payload",
              "type": "IRefreshToken",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetPassword",
          "args": [
            {
              "name": "body",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<boolean | IError>",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "body",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { IAuthCredentials, IAuthState, IError, IRefreshToken } from \"../../../state\";\r\nimport { ApiService } from \"ytg-angular\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  token: string | undefined;\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  login(payload: IAuthCredentials): Observable<IAuthState | IError> {\r\n    return this.apiService\r\n      .post<IAuthState>(`/api/users/authenticate`, {\r\n        userName: payload.userName,\r\n        password: payload.password,\r\n      })\r\n      .pipe(\r\n        map((resp) => {\r\n          //sessionStorage.setItem('access_token', <string>resp.access_token);\r\n          return resp;\r\n        }),\r\n        catchError((err: HttpErrorResponse) => {\r\n          return of(err.error as IError);\r\n        })\r\n      );\r\n  }\r\n\r\n  refreshToken(payload: IRefreshToken): Observable<IAuthState | IError> {\r\n    return this.apiService\r\n      .post<IAuthState>(`/api/users/refresh`, {\r\n        refreshToken: payload.refreshToken,\r\n      })\r\n      .pipe(\r\n        map((resp) => {\r\n          //sessionStorage.setItem('access_token', <string>resp.access_token);\r\n          return resp;\r\n        }),\r\n        catchError((err: HttpErrorResponse) => {\r\n          return of(err.error as IError);\r\n        })\r\n      );\r\n  }\r\n\r\n  resetPassword(body: {oldPassword: string, newPassword: string}): Observable<boolean | IError> {\r\n    return this.apiService.post<boolean>(`/api/users/reset-password`, {\r\n      oldPassword: body.oldPassword,\r\n      newPassword: body.newPassword,\r\n    }).pipe(\r\n      map((result) => {\r\n        return true;\r\n      }),\r\n      catchError((err: HttpErrorResponse) => {\r\n        return of(err.error as IError);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AuthState",
      "id": "injectable-AuthState-259e607a6ce90ab6c4faf328efabd5c477f004b04ca53183669698f24b4e6ed881aed6ec9cade962b76189c9b3d44819199636176bcdfbc2e2d114985b933439",
      "file": "src/app/state/auth/auth.state.ts",
      "properties": [
        {
          "name": "loginParams",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAuthCredentials | null",
          "optional": false,
          "description": "<p>The login parameters</p>\n",
          "line": 53,
          "rawdescription": "\n\nThe login parameters\n"
        },
        {
          "name": "refreshTimer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "<p>Timer for refreshing the token</p>\n",
          "line": 49,
          "rawdescription": "\n\nTimer for refreshing the token\n"
        }
      ],
      "methods": [
        {
          "name": "clearErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 219,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nClear the errors\n",
          "description": "<p>Clear the errors</p>\n",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearAuthErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": {
                "pos": 5627,
                "end": 5630,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5621,
                "end": 5626,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleAuthError",
          "args": [
            {
              "name": "error",
              "type": "AuthStateModel | IError | string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 271,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandle the error from the login\n",
          "description": "<p>Handle the error from the login</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 6746,
                "end": 6751,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "error"
              },
              "type": "AuthStateModel | IError | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6740,
                "end": 6745,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 6764,
                "end": 6767,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6758,
                "end": 6763,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 6774,
                "end": 6781,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleAuthSuccess",
          "args": [
            {
              "name": "res",
              "type": "AuthStateModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "Login",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 251,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandle the successful login\n",
          "description": "<p>Handle the successful login</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 6313,
                "end": 6316,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "res"
              },
              "type": "AuthStateModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6307,
                "end": 6312,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 6329,
                "end": 6335,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "action"
              },
              "type": "Login",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6323,
                "end": 6328,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 6342,
                "end": 6349,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handlePasswordResetError",
          "args": [
            {
              "name": "error",
              "type": "IError",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 325,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf there is an error while resetting the password\nHandle it differently than a login error\n",
          "description": "<p>If there is an error while resetting the password\nHandle it differently than a login error</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 8108,
                "end": 8113,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "error"
              },
              "type": "IError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8102,
                "end": 8107,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 8126,
                "end": 8129,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8120,
                "end": 8125,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 8136,
                "end": 8143,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleResetPassword",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 261,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandle the reset password\n",
          "description": "<p>Handle the reset password</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "tagName": {
                "pos": 6562,
                "end": 6569,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "isAuthStateModel",
          "args": [
            {
              "name": "test",
              "type": "IAuthState | IError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IAuthState",
          "typeParameters": [],
          "line": 349,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCheck the type of the object to see if it is an IAuthState\n",
          "description": "<p>Check the type of the object to see if it is an IAuthState</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 8609,
                "end": 8613,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "test"
              },
              "type": "IAuthState | IError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8603,
                "end": 8608,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 8620,
                "end": 8627,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "isLoginError",
          "args": [
            {
              "name": "test",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IError",
          "typeParameters": [],
          "line": 340,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nCheck the type of the object to see if it is an IError\n",
          "description": "<p>Check the type of the object to see if it is an IError</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 8399,
                "end": 8403,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "test"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8393,
                "end": 8398,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 8410,
                "end": 8417,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "login",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "Login",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLogin to the application\n",
          "description": "<p>Login to the application</p>\n",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "Login"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": {
                "pos": 2045,
                "end": 2048,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2039,
                "end": 2044,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2061,
                "end": 2067,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "action"
              },
              "type": "Login",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2055,
                "end": 2060,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "logout",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 192,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLogout of the application\n",
          "description": "<p>Logout of the application</p>\n",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "Logout"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": {
                "pos": 5045,
                "end": 5048,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5039,
                "end": 5044,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "parseJwt",
          "args": [
            {
              "name": "token",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "literal type",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nParse the JWT token to get the claims\n",
          "description": "<p>Parse the JWT token to get the claims</p>\n",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": {
                "pos": 1263,
                "end": 1268,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "token"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1257,
                "end": 1262,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "refreshToken",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRefresh the token\n",
          "description": "<p>Refresh the token</p>\n",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "RefreshToken"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": {
                "pos": 3403,
                "end": 3406,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3397,
                "end": 3402,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 3419,
                "end": 3426,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "payload"
              },
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 3413,
                "end": 3418,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "resetPassword",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "ResetPassword",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nReset the password\n",
          "description": "<p>Reset the password</p>\n",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ResetPassword"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": {
                "pos": 4405,
                "end": 4408,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "ctx"
              },
              "type": "StateContext<IAuthState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4399,
                "end": 4404,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 4421,
                "end": 4427,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "action"
              },
              "type": "ResetPassword",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4415,
                "end": 4420,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "setRefreshTimer",
          "args": [
            {
              "name": "expiresInMinutes",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "0"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 228,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSet the refresh timer\n",
          "description": "<p>Set the refresh timer</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 5799,
                "end": 5815,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "expiresInMinutes"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "0",
              "tagName": {
                "pos": 5793,
                "end": 5798,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 5822,
                "end": 5829,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "private"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport {\n  Login,\n  Logout,\n  ClearAuthErrors,\n  RefreshToken,\n  ResetPassword,\n} from './auth.actions';\nimport { AuthService, IAppUserReadOnlyModel } from '../../api';\nimport {\n  AuthStateModel,\n  IAuthState,\n  IError,\n  IAuthCredentials,\n  IRefreshToken,\n} from './auth.interfaces';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\n/**\n * The state token for the auth state\n */\nexport const AUTH_STATE_TOKEN = new StateToken<IAuthState>('auth');\n\n@State<IAuthState>({\n  name: AUTH_STATE_TOKEN,\n  defaults: {\n    access_token: null,\n    refresh_token: null,\n    token_type: null,\n    userName: null,\n    expiration: null,\n    expires_in_minutes: null,\n    user: null,\n    claims: null,\n    errors: null,\n    isBusy: false,\n    isPasswordReset: false,\n    passwordResetComplete: false,\n    isAuthenticated: false,\n  },\n})\n@Injectable()\nexport class AuthState {\n  /**\n   * Timer for refreshing the token\n   */\n  refreshTimer: any;\n  /**\n   * The login parameters\n   */\n  loginParams: IAuthCredentials | null = null;\n  /**\n   * Parse the JWT token to get the claims\n   * @param token\n   */\n  static parseJwt(token: string): { claims: string[] } {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      window\n        .atob(base64)\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n\n    const returnObj = JSON.parse(jsonPayload);\n    returnObj.claims =\n      returnObj['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n\n    return returnObj;\n  }\n\n  constructor(\n    private authService: AuthService,\n    private store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  /**\n   * Login to the application\n   * @param ctx\n   * @param action\n   */\n  @Action(Login)\n  login(ctx: StateContext<IAuthState>, action: Login) {\n    if (\n      this.loginParams?.userName === action.payload.userName &&\n      this.loginParams?.password === action.payload.password\n    ) {\n      return;\n    }\n    this.loginParams = action.payload;\n    ctx.patchState({ isBusy: true, errors: null }); // Reset errors and set busy\n    return this.authService.login(action.payload).pipe(\n      tap((result: AuthStateModel | IError | string) => {\n        if (this.isAuthStateModel(result as unknown as IAuthState | IError)) {\n          const state = ctx.getState();\n          const res = result as AuthStateModel;\n          ctx.setState({\n            ...state,\n            ...res,\n            claims: AuthState.parseJwt(<string>res.access_token).claims,\n            errors: null,\n            isBusy: false,\n            isPasswordReset: res.user?.resetRequired ?? false,\n            isAuthenticated: true,\n          });\n          this.loginParams = null;\n          if (res.user?.resetRequired) {\n            this.handleResetPassword(ctx);\n            return;\n          } else {\n            this.handleAuthSuccess(res, action);\n          }\n        } else {\n          this.loginParams = null;\n          this.handleAuthError(result, ctx);\n        }\n      })\n    );\n  }\n\n  /**\n   * Refresh the token\n   * @param ctx\n   * @param payload\n   */\n  @Action(RefreshToken)\n  refreshToken(\n    ctx: StateContext<IAuthState>,\n    payload?: { refreshToken: string }\n  ) {\n    let refreshToken: IRefreshToken = {\n      refreshToken: ctx.getState()?.refresh_token ?? '',\n    };\n    if (payload?.refreshToken) {\n      refreshToken = payload;\n    }\n    return this.authService.refreshToken(refreshToken).pipe(\n      tap((result: AuthStateModel | IError) => {\n        // eslint-disable-next-line no-prototype-builtins\n        if (!result.hasOwnProperty('status')) {\n          const state = ctx.getState();\n          const res = result as AuthStateModel;\n          ctx.setState({\n            ...state,\n            ...result,\n            claims: AuthState.parseJwt(<string>res.access_token).claims,\n            errors: null,\n          });\n          // if (res.expires_in_minutes) {\n          //   this.setRefreshTimer(res.expires_in_minutes);\n          // }\n        }\n      })\n    );\n  }\n\n  /**\n   * Reset the password\n   * @param ctx\n   * @param action\n   */\n  @Action(ResetPassword)\n  resetPassword(ctx: StateContext<IAuthState>, action: ResetPassword) {\n    ctx.patchState({ isBusy: true, errors: null }); // Reset errors and set busy\n    return this.authService.resetPassword(action.payload).pipe(\n      tap((result: boolean | IError) => {\n        if (this.isLoginError(result)) {\n          this.handlePasswordResetError(result, ctx);\n        } else {\n          ctx.patchState({\n            isBusy: false,\n            passwordResetComplete: true,\n            errors: null,\n          });\n        }\n      })\n    );\n  }\n\n  /**\n   * Logout of the application\n   * @param ctx\n   */\n  @Action(Logout)\n  logout(ctx: StateContext<IAuthState>) {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n    sessionStorage.clear();\n    ctx.setState({\n      access_token: '',\n      refresh_token: '',\n      token_type: '',\n      userName: '',\n      expiration: '',\n      expires_in_minutes: 0,\n      user: {} as IAppUserReadOnlyModel,\n      claims: [],\n      errors: null,\n      isBusy: false,\n      isPasswordReset: false,\n      passwordResetComplete: false,\n      isAuthenticated: false,\n    });\n  }\n\n  /**\n   * Clear the errors\n   * @param ctx\n   */\n  @Action(ClearAuthErrors)\n  clearErrors(ctx: StateContext<IAuthState>) {\n    ctx.patchState({ errors: null });\n  }\n\n  /**\n   * Set the refresh timer\n   * @param expiresInMinutes\n   * @private\n   */\n  private setRefreshTimer(expiresInMinutes = 0) {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n    let expires = expiresInMinutes;\n    if (expires < 0) {\n      expires = 0;\n    }\n    this.refreshTimer = setTimeout(() => {\n      this.store.dispatch(\n        new RefreshToken(\n          this.store.selectSnapshot((state) => state.auth.refresh_token)\n        )\n      );\n    }, expires * 60000);\n  }\n\n  /**\n   * Handle the successful login\n   * @param res\n   * @param action\n   * @private\n   */\n  private handleAuthSuccess(res: AuthStateModel, action: Login) {\n    if (res.expires_in_minutes) {\n      this.setRefreshTimer(res.expires_in_minutes);\n    }\n  }\n\n  /**\n   * Handle the reset password\n   * @private\n   */\n  private handleResetPassword(ctx: StateContext<IAuthState>) {\n    ctx.patchState({ isPasswordReset: true });\n  }\n\n  /**\n   * Handle the error from the login\n   * @param error\n   * @param ctx\n   * @private\n   */\n  private handleAuthError(\n    error: AuthStateModel | IError | string,\n    ctx: StateContext<IAuthState>\n  ) {\n    if (this.isLoginError(error)) {\n      ctx.setState({\n        access_token: '',\n        refresh_token: '',\n        token_type: '',\n        userName: '',\n        expiration: '',\n        expires_in_minutes: 0,\n        user: {} as IAppUserReadOnlyModel,\n        claims: [],\n        errors: <IError>error,\n        isBusy: false,\n        isPasswordReset: false,\n        passwordResetComplete: false,\n        isAuthenticated: false,\n      });\n    } else {\n      if (error === 'Login failed') {\n        ctx.setState({\n          access_token: '',\n          refresh_token: '',\n          token_type: '',\n          userName: '',\n          expiration: '',\n          expires_in_minutes: 0,\n          user: {} as IAppUserReadOnlyModel,\n          claims: [],\n          errors: {\n            type: 'Login failed',\n            title: 'Login failed',\n            status: 400,\n            traceId: '',\n            errors: null,\n          },\n          isBusy: false,\n          isPasswordReset: false,\n          passwordResetComplete: false,\n          isAuthenticated: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * If there is an error while resetting the password\n   * Handle it differently than a login error\n   * @param error\n   * @param ctx\n   * @private\n   */\n  private handlePasswordResetError(\n    error: IError,\n    ctx: StateContext<IAuthState>\n  ) {\n    ctx.patchState({\n      errors: error,\n      isBusy: false,\n    });\n  }\n\n  /**\n   * Check the type of the object to see if it is an IError\n   * @param test\n   * @private\n   */\n  private isLoginError(test: any): test is IError {\n    return (<IError>test).type !== undefined;\n  }\n\n  /**\n   * Check the type of the object to see if it is an IAuthState\n   * @param test\n   * @private\n   */\n  private isAuthStateModel(test: IAuthState | IError): test is IAuthState {\n    return (<IAuthState>test).access_token !== undefined;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CaseContentsService",
      "id": "injectable-CaseContentsService-7abf6db26d892a0ce33a14b9d94d37677abe403da7139a21c1618633813e779faa411f1339d9f528fe2764d25846e0f50cf14bd2e55070724d65cfbf6eacc8af",
      "file": "src/app/api/services/scoring/case-contents.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveCaseDetailReadOnly_GetByCaseHeaderId",
          "args": [
            {
              "name": "caseHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseDetailReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "caseHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICaseDetailReadOnlyModel } from '../../models/scoring/case-detail-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CaseContentsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveCaseDetailReadOnly_GetByCaseHeaderId(caseHeaderId: number,\r\n        apiVersion = '1.0'): Observable<ICaseDetailReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * caseHeaderId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_case_details_by_id]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseDetailReadOnlyModel[]>(`api/case-contents/by-case-header-id?api-version=${apiVersion}&caseHeaderId=${caseHeaderId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CaseFeedbackService",
      "id": "injectable-CaseFeedbackService-d26ce99937278869d95279813ca40c0341738acc172875cf7afe4291f89c0bb9a0724874323f39b2cb2829890041cfbe99571083f02610f0eba7c9e0790159b8",
      "file": "src/app/api/services/scoring/case-feedback.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createCaseFeedback",
          "args": [
            {
              "name": "model",
              "type": "ICaseFeedbackModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseFeedbackModel>",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "ICaseFeedbackModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseFeedback",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCaseFeedback_GetByExaminerId",
          "args": [
            {
              "name": "caseHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseFeedbackModel>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "caseHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCaseFeedback_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseFeedbackModel>",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseFeedback",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "ICaseFeedbackModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseFeedbackModel>",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "ICaseFeedbackModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICaseFeedbackModel } from '../../models/scoring/case-feedback.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CaseFeedbackService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteCaseFeedback(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_case_feedback_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<ICaseFeedbackModel>(`api/cases/feedback?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveCaseFeedback_GetByExaminerId(caseHeaderId: number,\r\n        apiVersion = '1.0'): Observable<ICaseFeedbackModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * caseHeaderId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_case_feedback_by_examinerId]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseFeedbackModel>(`api/cases/feedback/by-examiner-id?api-version=${apiVersion}&caseHeaderId=${caseHeaderId}`);\r\n        }\r\n \r\n        public retrieveCaseFeedback_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<ICaseFeedbackModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_case_feedback_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseFeedbackModel>(`api/cases/feedback/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createCaseFeedback(model: ICaseFeedbackModel, \r\n            apiVersion = '1.0'): Observable<ICaseFeedbackModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * userId:Number\r\n            * caseHeaderId:Number\r\n            * feedback:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_case_feedback]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<ICaseFeedbackModel>(`api/cases/feedback?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateCaseFeedback(id: number,\r\n        model: ICaseFeedbackModel,\r\n        apiVersion = '1.0') : Observable<ICaseFeedbackModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * caseHeaderId:Number\r\n            * feedback:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_case_feedback]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<ICaseFeedbackModel>(`api/cases/feedback?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CaseNotesService",
      "id": "injectable-CaseNotesService-e05ec4219f64f41621a6a90dbfc9386660aaa6246664ca8d58e49045f62daa05db8d3778afefe4b6b5efe9a7b365e9207a35509300f6110ae10d9c0459d845b8",
      "file": "src/app/api/services/scoring/case-notes.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createCaseComment",
          "args": [
            {
              "name": "model",
              "type": "ICaseCommentModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseCommentModel>",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "ICaseCommentModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseComment",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCaseComment_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseCommentModel>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseComment",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "ICaseCommentModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseCommentModel>",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "ICaseCommentModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICaseCommentModel } from '../../models/scoring/case-comment.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CaseNotesService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteCaseComment(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_case_comments_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<ICaseCommentModel>(`api/case-comments?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveCaseComment_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<ICaseCommentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_case_comments_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseCommentModel>(`api/case-comments/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createCaseComment(model: ICaseCommentModel, \r\n            apiVersion = '1.0'): Observable<ICaseCommentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * caseContentId:Number\r\n            * comments:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_user_case_comments]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<ICaseCommentModel>(`api/case-comments?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateCaseComment(id: number,\r\n        model: ICaseCommentModel,\r\n        apiVersion = '1.0') : Observable<ICaseCommentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * caseContentId:Number\r\n            * comments:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_case_comments]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<ICaseCommentModel>(`api/case-comments?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CaseScoresService",
      "id": "injectable-CaseScoresService-058362627009cdaf1473669c20fe4ae84e24b081f74a9dc5b23b97d0494d6b5221aeacd3b93f3a32a7964fb32fa851771059140069ceeb903895cf2837270243",
      "file": "src/app/api/services/scoring/case-scores.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createCaseScore",
          "args": [
            {
              "name": "model",
              "type": "ICaseScoreModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseScoreModel>",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "ICaseScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseScore",
          "args": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCaseScore_GetById",
          "args": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseScoreModel>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCaseScoreReadOnly_GetByExamScheduleId",
          "args": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseScoreReadOnlyModel[]>",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseScore",
          "args": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "ICaseScoreModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseScoreModel>",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScoringId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "ICaseScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICaseScoreModel } from '../../models/scoring/case-score.model';\r\nimport { ICaseScoreReadOnlyModel } from '../../models/scoring/case-score-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CaseScoresService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteCaseScore(examScoringId: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScoringId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_examinerscore_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<ICaseScoreModel>(`api/cases/scores?api-version=${apiVersion}&examScoringId=${examScoringId}`);\r\n        }\r\n \r\n        public retrieveCaseScore_GetById(examScoringId: number,\r\n        apiVersion = '1.0'): Observable<ICaseScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScoringId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examcasescore_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseScoreModel>(`api/cases/scores?api-version=${apiVersion}&examScoringId=${examScoringId}`);\r\n        }\r\n \r\n        public createCaseScore(model: ICaseScoreModel, \r\n            apiVersion = '1.0'): Observable<ICaseScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examineeUserId:Number\r\n            * examCaseId:Number\r\n            * score:Number\r\n            * remarks:String\r\n            * criticalFail:Boolean\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [upsert_examinerscore]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<ICaseScoreModel>(`api/cases/scores?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateCaseScore(examScoringId: number,\r\n        model: ICaseScoreModel,\r\n        apiVersion = '1.0') : Observable<ICaseScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examineeUserId:Number\r\n            * examCaseId:Number\r\n            * score:Number\r\n            * remarks:String\r\n            * criticalFail:Boolean\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [upsert_examinerscore]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<ICaseScoreModel>(`api/cases/scores?api-version=${apiVersion}&examScoringId=${examScoringId}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveCaseScoreReadOnly_GetByExamScheduleId(examScheduleId: number,\r\n        apiVersion = '1.0'): Observable<ICaseScoreReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScheduleId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examinerscores_byexamscheduleId]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICaseScoreReadOnlyModel[]>(`api/cases/scores/all-by-examschedule-id?api-version=${apiVersion}&examScheduleId=${examScheduleId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CasesService",
      "id": "injectable-CasesService-903ad431cac1fca1cdbbfa4c63954c5c00b74fd3642a7df11c9778a9962fc86ebb61e4540881b11e47a329a9a80e8d927f07ba96803fb8e877fcb762a01b5142",
      "file": "src/app/api/services/scoring/cases.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveCaseRosterReadOnly_GetByScheduleId",
          "args": [
            {
              "name": "scheduleId1",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "scheduleId2",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICaseRosterReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "scheduleId1",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "scheduleId2",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICaseRosterReadOnlyModel } from '../../models/scoring/case-roster-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CasesService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveCaseRosterReadOnly_GetByScheduleId(scheduleId1: number,\r\n        scheduleId2?: number,\r\n        apiVersion = '1.0'): Observable<ICaseRosterReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * scheduleId1:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_toc_case_list]\r\n            */\r\n          //Tim - made this change because we need to support optional parameters\r\n          let apiURL = `api/case-rosters?api-version=${apiVersion}&scheduleId1=${scheduleId1}`;\r\n            if (scheduleId2) {\r\n              apiURL += `&scheduleId2=${scheduleId2}`;\r\n            }\r\n            \r\n            return this.apiService.get<ICaseRosterReadOnlyModel[]>(apiURL);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CertificationsService",
      "id": "injectable-CertificationsService-9cece9faf21e731759d9643d82ee65b7fd777589e26dc5fe2c293e770ef5f174a8ed58b8253cd144bf69673e2f6dc70164ac0ac5f07c27da5d3aff1cd1ee992c",
      "file": "src/app/api/services/surgeons/certifications.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveCertificationReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICertificationReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICertificationReadOnlyModel } from '../../models/surgeons/certification-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CertificationsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveCertificationReadOnly_GetByUserId(apiVersion = '1.0'): Observable<ICertificationReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_certifications]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICertificationReadOnlyModel[]>(`api/surgeons/certifications?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "CmeService",
      "id": "injectable-CmeService-4ac48fe14ce2f7455371152aebaf689d8e2420767d88c0000ff00cc97c4f7a4501f8215bf4b181995840ea71140a157428af8f8b6b22eff5a2efb1f24629a2de",
      "file": "src/app/api/services/continuingmedicaleducation/cme.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveCmeAdjustmentReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICmeAdjustmentReadOnlyModel[]>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCmeCreditReadOnly_GetById",
          "args": [
            {
              "name": "cmeId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICmeCreditReadOnlyModel>",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "cmeId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCmeCreditReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICmeCreditReadOnlyModel[]>",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICmeAdjustmentReadOnlyModel } from '../../models/continuingmedicaleducation/cme-adjustment-read-only.model';\r\nimport { ICmeCreditReadOnlyModel } from '../../models/continuingmedicaleducation/cme-credit-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmeService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveCmeAdjustmentReadOnly_GetByUserId(apiVersion = '1.0'): Observable<ICmeAdjustmentReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_usercme_waivers_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICmeAdjustmentReadOnlyModel[]>(`api/cme/adjustments?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveCmeCreditReadOnly_GetById(cmeId: number,\r\n        apiVersion = '1.0'): Observable<ICmeCreditReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * cmeId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_usercme_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICmeCreditReadOnlyModel>(`api/cme/by-id?api-version=${apiVersion}&cmeId=${cmeId}`);\r\n        }\r\n \r\n        public retrieveCmeCreditReadOnly_GetByUserId(apiVersion = '1.0'): Observable<ICmeCreditReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_usercme_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICmeCreditReadOnlyModel[]>(`api/cme/itemized-cme?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ConflictService",
      "id": "injectable-ConflictService-f386be90cc4b53b2728d34e743b9cc5d61fb4cdbc452c65922e1265cbc2610bd6bf6a4e33bb2946ce4ffda08e7436cdf740923e4b68c7f3a906418fcd42ab512",
      "file": "src/app/api/services/examiners/conflict.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveConflictReadOnly_GetByExamHeaderId",
          "args": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IConflictReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IConflictReadOnlyModel } from '../../models/examiners/conflict-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConflictService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveConflictReadOnly_GetByExamHeaderId(examHeaderId: number,\r\n        apiVersion = '1.0'): Observable<IConflictReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examHeaderId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examiner_conflicts]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IConflictReadOnlyModel>(`api/examiners/conflict/by-exam-header-id?api-version=${apiVersion}&examHeaderId=${examHeaderId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ContinuingMedicalEducationState",
      "id": "injectable-ContinuingMedicalEducationState-0ce0dda997735ffba2aae837c70da4e0638ecae4ae015dd1259dcede036db099b638e834cf563882b0305c532de3d63577d7134ca09ca2ae85f5bc5821d4a3ec",
      "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "calculateCmeDroppingCredits",
          "args": [
            {
              "name": "credits",
              "type": "ICmeCredit[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "adjustments",
              "type": "ICmeAdjustment[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDroppingCmeCredits",
          "typeParameters": [],
          "line": 290,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "credits",
              "type": "ICmeCredit[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "adjustments",
              "type": "ICmeAdjustment[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "calculateCmeSummary",
          "args": [
            {
              "name": "credits",
              "type": "ICmeCredit[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "adjustments",
              "type": "ICmeAdjustment[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 215,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "credits",
              "type": "ICmeCredit[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "adjustments",
              "type": "ICmeAdjustment[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clearCMEErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 209,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearCMEErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCMEAdjustments",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCMEAdjustments"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCMECreditDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "GetCMECreditDetails",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCMECreditDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "GetCMECreditDetails",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCMECredits",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCMECredits"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCmeSummary",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IContinuingMedicalEducation>",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCmeSummary"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuingMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CmeService,\n  ICmeAdjustmentReadOnlyModel,\n  ICmeCreditReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCMECredits,\n  GetCMEAdjustments,\n  GetCMECreditDetails,\n  ClearCMEErrors,\n  GetCmeSummary,\n} from './cme.actions';\n\nexport interface ICmeSummaryRow {\n  rowLabel: string;\n  credits: number | string;\n  saCredits: number | string;\n  rowStyle?: any;\n}\n\nexport interface IDroppingCmeCredits {\n  credits: number;\n  saCredits: number;\n}\n\nexport interface ICmeCredit extends ICmeCreditReadOnlyModel {\n  credits: number;\n  cmeDirect: string;\n  rowStyle?: any;\n}\nexport interface ICmeAdjustment extends ICmeAdjustmentReadOnlyModel {\n  credits: number;\n  rowStyle?: any;\n}\n\nexport interface IContinuingMedicalEducation {\n  cmeCredits: ICmeCredit[];\n  cmeAdjustments: ICmeAdjustment[];\n  cmeSummary: ICmeSummaryRow[];\n  cmeDroppingCredits: IDroppingCmeCredits | undefined;\n  selectedCmeCredit: ICmeCredit | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const CME_STATE_TOKEN = new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n);\n\n@State<IContinuingMedicalEducation>({\n  name: CME_STATE_TOKEN,\n  defaults: {\n    cmeCredits: [],\n    cmeAdjustments: [],\n    cmeSummary: [],\n    cmeDroppingCredits: undefined,\n    selectedCmeCredit: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuingMedicalEducationState {\n  constructor(private cmeService: CmeService) {}\n\n  @Action(GetCmeSummary)\n  getCmeSummary(\n    ctx: StateContext<IContinuingMedicalEducation>\n  ): Observable<IContinuingMedicalEducation> {\n    const joins = [\n      this.getCMECredits(ctx).pipe(catchError((error) => of(error))),\n      this.getCMEAdjustments(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((ContinuingMedicalEducation: IContinuingMedicalEducation[]) => {\n        const cmeCredits = ctx.getState().cmeCredits;\n        const cmeAdjustments = ctx.getState().cmeAdjustments;\n        const cmeSummary = this.calculateCmeSummary(cmeCredits, cmeAdjustments);\n        const cmeDroppingCredits = this.calculateCmeDroppingCredits(\n          cmeCredits,\n          cmeAdjustments\n        );\n        ctx.patchState({\n          cmeSummary: cmeSummary,\n          cmeDroppingCredits: cmeDroppingCredits,\n        });\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In CME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCMECredits)\n  getCMECredits(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const creditsList = [] as ICmeCredit[];\n        response.forEach((credit) => {\n          let rowStyle = undefined;\n          if (\n            credit.creditExpDate &&\n            new Date(credit.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          creditsList.push({\n            ...credit,\n            credits: credit.creditsTotal - credit.creditsSA,\n            cmeDirect: credit.cMEDirect === 0 ? 'No' : 'Yes',\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeCredits: creditsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMECreditDetails)\n  getCMECreditDetails(\n    ctx: StateContext<IContinuingMedicalEducation>,\n    payload: GetCMECreditDetails\n  ) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeCreditReadOnly_GetById(payload.id).pipe(\n      tap((response) => {\n        ctx.patchState({\n          selectedCmeCredit: {\n            ...response,\n            credits: response.creditsTotal - response.creditsSA,\n            cmeDirect: response.cMEDirect === 0 ? 'No' : 'Yes',\n          },\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCMEAdjustments)\n  getCMEAdjustments(ctx: StateContext<IContinuingMedicalEducation>) {\n    // const state = ctx.getState();\n    return this.cmeService.retrieveCmeAdjustmentReadOnly_GetByUserId().pipe(\n      tap((response) => {\n        const adjustmentsList = [] as ICmeAdjustment[];\n        response.forEach((adjustment) => {\n          let rowStyle = undefined;\n          if (\n            adjustment.creditExpDate &&\n            new Date(adjustment.creditExpDate) < new Date()\n          ) {\n            rowStyle = { color: '#8b040a' };\n          }\n\n          adjustmentsList.push({\n            ...adjustment,\n            credits: adjustment.creditsTotal - adjustment.creditsSA,\n            rowStyle: rowStyle,\n          });\n        });\n        ctx.patchState({\n          cmeAdjustments: adjustmentsList.sort((a, b) => {\n            return (\n              new Date(b.date).getTime() - new Date(a.date).getTime() ||\n              b.cmeId - a.cmeId\n            );\n          }),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearCMEErrors)\n  clearCMEErrors(ctx: StateContext<IContinuingMedicalEducation>) {\n    ctx.patchState({\n      errors: null,\n    });\n  }\n\n  private calculateCmeSummary(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const totalCreditsRequired = 150;\n    const totalSACreditsRequired = 50;\n    let creditsAdjustment = 0;\n    let saCreditsAdjustment = 0;\n    let creditsEarned = 0;\n    let saCreditsEarned = 0;\n\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          if (new Date(adjustment.creditExpDate) < new Date()) return;\n        }\n        saCreditsAdjustment += adjustment.creditsSA;\n        creditsAdjustment += adjustment.creditsTotal - adjustment.creditsSA;\n      });\n    }\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          if (new Date(credit.creditExpDate) < new Date()) return;\n        }\n        saCreditsEarned += credit.creditsSA;\n        creditsEarned += credit.creditsTotal - credit.creditsSA;\n      });\n    }\n\n    const requiredCredits = totalCreditsRequired - creditsAdjustment;\n    const requiredSACredits = totalSACreditsRequired - saCreditsAdjustment;\n    const remainingCredits =\n      totalCreditsRequired - creditsAdjustment - creditsEarned;\n    const remainingSACredits =\n      totalSACreditsRequired - saCreditsAdjustment - saCreditsEarned;\n\n    const summary: ICmeSummaryRow[] = [\n      {\n        rowLabel: 'ABS Requirements',\n        credits: totalCreditsRequired,\n        saCredits: totalSACreditsRequired,\n      },\n      {\n        rowLabel: 'Your ABS Waivers',\n        credits: `(${creditsAdjustment})`,\n        saCredits: `(${saCreditsAdjustment})`,\n      },\n      {\n        rowLabel: 'YOUR REQUIREMENTS',\n        credits: requiredCredits >= 0 ? requiredCredits : 0,\n        saCredits: requiredSACredits >= 0 ? requiredSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#000',\n        },\n      },\n      {\n        rowLabel: 'Credits-to-date',\n        credits: creditsEarned,\n        saCredits: saCreditsEarned,\n      },\n      {\n        rowLabel: 'CREDITS NEEDED',\n        credits: remainingCredits >= 0 ? remainingCredits : 0,\n        saCredits: remainingSACredits >= 0 ? remainingSACredits : 0,\n        rowStyle: {\n          'font-weight': 'bold',\n          color: '#8b040a',\n        },\n      },\n    ];\n    return summary;\n  }\n\n  private calculateCmeDroppingCredits(\n    credits: ICmeCredit[],\n    adjustments: ICmeAdjustment[]\n  ) {\n    const droppingCredits: IDroppingCmeCredits = {\n      credits: 0,\n      saCredits: 0,\n    };\n    const today = new Date();\n    const dropDateEnd = new Date(today.getFullYear(), 11, 31);\n    if (credits.length > 0) {\n      credits.forEach((credit) => {\n        if (credit.creditExpDate) {\n          const expirationDate = new Date(credit.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits += credit.creditsTotal - credit.creditsSA;\n            droppingCredits.saCredits += credit.creditsSA;\n          }\n        }\n      });\n    }\n    if (adjustments.length > 0) {\n      adjustments.forEach((adjustment) => {\n        if (adjustment.creditExpDate) {\n          const expirationDate = new Date(adjustment.creditExpDate);\n          if (expirationDate >= today && expirationDate <= dropDateEnd) {\n            droppingCredits.credits +=\n              adjustment.creditsTotal - adjustment.creditsSA;\n            droppingCredits.saCredits += adjustment.creditsSA;\n          }\n        }\n      });\n    }\n    return droppingCredits;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "cmeService",
            "type": "CmeService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 69,
        "jsdoctags": [
          {
            "name": "cmeService",
            "type": "CmeService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ContinuousCertificationState",
      "id": "injectable-ContinuousCertificationState-14ca569a4c67a9b8414d79134b03e5a7eae43c4d590fa5cc90895754d33523572771e1c6f5fea628b6a2a33832b492396d881dfef0dd16b32d7db04fcbc1c093",
      "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "getOutcomeRegistries",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuousCertication>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IOutcomeRegistryModel | undefined>",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetOutcomeRegistries"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuousCertication>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateOutcomeRegistries",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuousCertication>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "UpdateOutcomeRegistries",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateOutcomeRegistries"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IContinuousCertication>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "UpdateOutcomeRegistries",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { OutcomeRegistriesService } from 'src/app/api/services/continuouscertification/outcome-registries.service';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport {\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from './continuous-certification.actions';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport interface IContinuousCertication {\n  outcomeRegistries?: IOutcomeRegistryModel;\n  errors?: IFormErrors | null;\n}\n\nexport const CONTCERT_STATE_TOKEN = new StateToken<IContinuousCertication>(\n  'continuous_certification'\n);\n\n@State<IContinuousCertication>({\n  name: CONTCERT_STATE_TOKEN,\n  defaults: {\n    outcomeRegistries: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuousCertificationState {\n  constructor(private outcomeRegistriesService: OutcomeRegistriesService) {}\n\n  @Action(GetOutcomeRegistries)\n  getOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>\n  ): Observable<IOutcomeRegistryModel | undefined> {\n    if (ctx.getState().outcomeRegistries) {\n      return of(ctx.getState()?.outcomeRegistries);\n    }\n\n    return this.outcomeRegistriesService\n      .retrieveOutcomeRegistry_GetByUserId()\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateOutcomeRegistries)\n  updateOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    { payload }: UpdateOutcomeRegistries\n  ) {\n    ctx.patchState({\n      outcomeRegistries: payload,\n    });\n\n    return this.outcomeRegistriesService.updateOutcomeRegistry(payload).pipe(\n      tap((outcomeRegistries: IOutcomeRegistryModel) => {\n        ctx.patchState({\n          outcomeRegistries,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        return of(errors);\n      })\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "outcomeRegistriesService",
            "type": "OutcomeRegistriesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 31,
        "jsdoctags": [
          {
            "name": "outcomeRegistriesService",
            "type": "OutcomeRegistriesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DashboardService",
      "id": "injectable-DashboardService-515691285cb05dbb9856e588c653a79db3e103401113f52dcdec851d6302c013bab7be7b75c2d49be573794b6f025bf9b1f557624c93d480a2139fd557d8d8ac",
      "file": "src/app/api/services/scoring/dashboard.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveDashboardRosterReadOnly_GetByUserId",
          "args": [
            {
              "name": "examDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IDashboardRosterReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDashboardRosterReadOnlyModel } from '../../models/scoring/dashboard-roster-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DashboardService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveDashboardRosterReadOnly_GetByUserId(examDate: string,\r\n        apiVersion = '1.0'): Observable<IDashboardRosterReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examinerschedule_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IDashboardRosterReadOnlyModel[]>(`api/scoring/dashboard/dashboard-roster?api-version=${apiVersion}&examDate=${examDate}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DashboardState",
      "id": "injectable-DashboardState-152866538edeb10155ac49e8061bf4f4d24623e6983c4c61167be099a3d4aa97d80f77445ed92af4ea46279c138fbfa3182150ff3c798cf02e7cc7de45c52979",
      "file": "src/app/state/dashboard/dashboard.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "getAlertsAndNotices",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAlertsAndNotices"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDashboardCertificationInformation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetDashboardCertificationInformation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDashboardProgramInformation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetDashboardProgramInformation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTraineeRegistrationStatus",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "GetTraineeRegistrationStatus",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetTraineeRegistrationStatus"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDashboardState>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "GetTraineeRegistrationStatus",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IProgramReadOnlyModel } from 'src/app/api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from 'src/app/api/models/surgeons/certification-read-only.model';\nimport { ProgramsService } from 'src/app/api/services/trainees/programs.service';\nimport { CertificationsService } from 'src/app/api/services/surgeons/certifications.service';\nimport {\n  GetAlertsAndNotices,\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n  GetTraineeRegistrationStatus,\n} from './dashboard.actions';\nimport { catchError, of, tap } from 'rxjs';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { ExamService } from 'src/app/api/services/trainees/exam.service';\nimport { IRegistrationStatusReadOnlyModel } from 'src/app/api/models/trainees/registration-status-read-only.model';\nimport { IQualifyingExamReadOnlyModel } from 'src/app/api/models/examinations/qualifying-exam-read-only.model';\nimport { QualifyingExamService } from 'src/app/api/services/examinations/qualifying-exam.service';\n\nexport interface ICertification extends ICertificationReadOnlyModel {\n  status?: string;\n}\n\nexport interface IDashboardState {\n  certificates: ICertificationReadOnlyModel[];\n  registrationStatus: IRegistrationStatusReadOnlyModel | null;\n  alertsAndNotices: IQualifyingExamReadOnlyModel | undefined;\n  programs: IProgramReadOnlyModel;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IDashboardState>('dashboard');\n\n@State({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    certificates: [],\n    registrationStatus: null,\n    alertsAndNotices: undefined,\n    programs: {\n      programName: '',\n      programDirector: '',\n      programNumber: '',\n      exam: '',\n      clinicalLevel: '',\n      city: '',\n      state: '',\n    },\n  },\n})\n@Injectable()\nexport class DashboardState {\n  constructor(\n    private programsService: ProgramsService,\n    private certificationsService: CertificationsService,\n    private examService: ExamService,\n    private globalDialogService: GlobalDialogService,\n    private qualifyingExamService: QualifyingExamService\n  ) {}\n  // trainee\n  @Action(GetDashboardProgramInformation) getDashboardProgramInformation(\n    ctx: StateContext<IDashboardState>\n  ) {\n    const state = ctx.getState();\n    return this.programsService.retrieveProgramReadOnly_GetByUserId().pipe(\n      tap((result: IProgramReadOnlyModel) => {\n        const res = result as IProgramReadOnlyModel;\n        ctx.patchState({\n          programs: res,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        return of(errors);\n      })\n    );\n  }\n\n  // surgeon\n  @Action(GetDashboardCertificationInformation)\n  getDashboardCertificationInformation(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.certificationsService\n      .retrieveCertificationReadOnly_GetByUserId()\n      .pipe(\n        tap((result: ICertificationReadOnlyModel[]) => {\n          const res = result as ICertification[];\n          res.forEach((cert) => {\n            if (\n              cert.isClinicallyInactive !== null &&\n              cert.isClinicallyInactive !== undefined\n            ) {\n              cert.status = cert.isClinicallyInactive\n                ? 'Clinically Inactive'\n                : 'Active';\n            }\n          });\n          ctx.patchState({\n            certificates: res,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetTraineeRegistrationStatus)\n  getTraineeRegistrationStatus(\n    ctx: StateContext<IDashboardState>,\n    payload: GetTraineeRegistrationStatus\n  ) {\n    const state = ctx.getState();\n    return this.examService\n      .retrieveRegistrationStatusReadOnly_GetByExamCode(payload.examCode)\n      .pipe(\n        tap((result: IRegistrationStatusReadOnlyModel) => {\n          ctx.patchState({\n            registrationStatus: result,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  // trainee\n  @Action(GetAlertsAndNotices)\n  getAlertsAndNotices(ctx: StateContext<IDashboardState>) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.qualifyingExamService.retrieveQualifyingExamReadOnly_Get().pipe(\n      tap((result: IQualifyingExamReadOnlyModel) => {\n        const alertsAndNotices = result as IQualifyingExamReadOnlyModel;\n        ctx.patchState({\n          alertsAndNotices: alertsAndNotices,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        this.globalDialogService.closeOpenDialog();\n        return of(errors);\n      })\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "programsService",
            "type": "ProgramsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "certificationsService",
            "type": "CertificationsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examService",
            "type": "ExamService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "qualifyingExamService",
            "type": "QualifyingExamService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 52,
        "jsdoctags": [
          {
            "name": "programsService",
            "type": "ProgramsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "certificationsService",
            "type": "CertificationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examService",
            "type": "ExamService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "qualifyingExamService",
            "type": "QualifyingExamService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DocumentService",
      "id": "injectable-DocumentService-f69bcf304b2cd6b5e1d33d122089d4f0a50ca03741dbf16d86fd63e1acb40fc18e82af108744755515645cafed665e74349df483ed1d04e1f7d0419139cefd7c",
      "file": "src/app/api/services/documents/document.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "deleteDocument",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "downloadDocument_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<File>",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveDocument_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IDocumentModel>",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveDocumentReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IDocumentReadOnlyModel[]>",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDocumentModel } from '../../models/documents/document.model';\r\nimport { IDocumentReadOnlyModel } from '../../models/documents/document-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DocumentService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteDocument(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: Id\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_userdocument_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IDocumentModel>(`api/documents?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveDocument_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<IDocumentModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: Id\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_document_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IDocumentModel>(`api/documents/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveDocumentReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IDocumentReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_documents_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IDocumentReadOnlyModel[]>(`api/documents/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n        public downloadDocument_GetById(id: number, apiVersion = '1.0'): Observable<File> {\r\n\r\n          return this.apiService.get<File>(`api/documents/${id}?api-version=${apiVersion}`, {\r\n            responseType: 'blob' as 'json'\r\n          });\r\n        }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DocumentsState",
      "id": "injectable-DocumentsState-821981f4789a8c8598c8af853a05b97cd02415fc7232e4d56ed8e43df71d73fad668d9b5689f7bacb984f48887f5996485f46267eca3a88ef1e507a797fa0ab5",
      "file": "src/app/state/documents/documents.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "DeleteCertificate",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteCertificate"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteDocument",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteDocument"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "downloadDocument",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<Blob>",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DownloadDocument"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAllDocuments",
          "args": [
            {
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IDocumentReadOnlyModel[]>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAllDocuments"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "uploadDocument",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UploadDocument"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IDocuments>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { IDocumentReadOnlyModel } from 'src/app/api/models/documents/document-read-only.model';\nimport { DocumentService } from 'src/app/api/services/documents/document.service';\nimport {\n  DeleteCertificate,\n  DeleteDocument,\n  DownloadDocument,\n  GetAllDocuments,\n  UploadDocument,\n} from './documents.actions';\nimport { UserCertificateService } from 'src/app/api/services/medicaltraining/user-certificate.service';\nimport { GetUserCertificates } from '../medical-training/medical-training.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IDocuments {\n  documents: IDocumentReadOnlyModel[] | undefined;\n  errors?: IFormErrors;\n}\n\nexport const DOCUMENTS_STATE_TOKEN = new StateToken<IDocuments>('documents');\n\n@State<IDocuments>({\n  name: DOCUMENTS_STATE_TOKEN,\n  defaults: {\n    documents: undefined,\n  },\n})\n@Injectable()\nexport class DocumentsState {\n  constructor(\n    private documentService: DocumentService,\n    private userCertificateService: UserCertificateService,\n    private globalDialogService: GlobalDialogService,\n    private _store: Store\n  ) {}\n\n  @Action(GetAllDocuments)\n  getAllDocuments({\n    patchState,\n  }: StateContext<IDocuments>): Observable<IDocumentReadOnlyModel[]> {\n    return this.documentService.retrieveDocumentReadOnly_GetByUserId().pipe(\n      tap((documents) => {\n        patchState({\n          documents,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(DownloadDocument)\n  downloadDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: { documentId: number; documentName: string } }\n  ): Observable<Blob> {\n    this.globalDialogService.showLoading();\n    return this.documentService\n      .downloadDocument_GetById(action.payload.documentId)\n      .pipe(\n        tap((blob) => {\n          const url = window.URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = action.payload.documentName;\n          link.click();\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Documents Store', error);\n          console.error(error);\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Document download failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(DeleteCertificate)\n  DeleteCertificate(\n    ctx: StateContext<IDocuments>,\n    action: { payload: number }\n  ): Observable<void> {\n    const id = action.payload;\n    this.globalDialogService.showLoading();\n    return this.userCertificateService.deleteUserCertificate(id).pipe(\n      tap(() => {\n        this._store.dispatch(new GetUserCertificates(true));\n        this._store.dispatch(new GetAllDocuments());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Document Deleted Successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(DeleteDocument)\n  deleteDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: number }\n  ): Observable<void> {\n    const id = action.payload;\n    this.globalDialogService.showLoading();\n    return this.documentService.deleteDocument(id).pipe(\n      tap(() => {\n        this._store.dispatch(new GetUserCertificates(true));\n        this._store.dispatch(new GetAllDocuments());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Document Deleted Successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(UploadDocument)\n  uploadDocument(\n    ctx: StateContext<IDocuments>,\n    action: { payload: { model: FormData } }\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.userCertificateService\n      .createUserCertificate(action.payload.model)\n      .pipe(\n        tap(() => {\n          this._store.dispatch(new GetUserCertificates(true));\n          this._store.dispatch(new GetAllDocuments());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Document uploaded successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Documents Store', error);\n          console.error(error);\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Document uploaded failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "documentService",
            "type": "DocumentService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userCertificateService",
            "type": "UserCertificateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "documentService",
            "type": "DocumentService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userCertificateService",
            "type": "UserCertificateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamHistoryState",
      "id": "injectable-ExamHistoryState-3cb8df5b5fc872a4604f407c72a5f08fd92afb5d864b27611f356c7f6c97c8d6d4dc3f03c2737e8ce379960b1191dfde494d641db8f98897cca827c8e2f97088",
      "file": "src/app/state/exam-history/exam-history.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "getExamHistory",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamHistory>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExamHistory"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamHistory>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { GetExamHistory } from './exam-history.actions';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { IExamHistoryReadOnlyModel } from 'src/app/api/models/examinations/exam-history-read-only.model';\n\nexport interface IExamHistory {\n  examHistory: IExamHistoryReadOnlyModel[];\n  errors?: IFormErrors | null;\n}\n\nexport const EXAM_HISTORY_STATE_TOKEN = new StateToken<IExamHistory>(\n  'examHistory'\n);\n\n@State<IExamHistory>({\n  name: EXAM_HISTORY_STATE_TOKEN,\n  defaults: {\n    examHistory: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamHistoryState {\n  constructor(private examinationService: ExaminationsService) {}\n\n  @Action(GetExamHistory)\n  getExamHistory(\n    ctx: StateContext<IExamHistory>\n  ): Observable<IExamHistoryReadOnlyModel[] | undefined> {\n    // if (ctx.getState()?.examHistory) {\n    //   return of(ctx.getState()?.examHistory);\n    // }\n\n    return this.examinationService\n      .retrieveExamHistoryReadOnly_GetByUserId()\n      .pipe(\n        tap((examHistory: IExamHistoryReadOnlyModel[]) => {\n          examHistory.forEach((exam) => {\n            if (exam.result === 'P') exam.result = 'Pass';\n            else if (exam.result === 'F') exam.result = 'Fail';\n          });\n          ctx.patchState({\n            examHistory,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examinationService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "examinationService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExaminationsService",
      "id": "injectable-ExaminationsService-3becdb532889d0b7cbc94f347fc3481c33987cab83fbb2fc98f1e2a9e587c6e2357c4561f108fd0a27f269a4972dd700797ff2882990eba3ca86c2dd8636d933",
      "file": "src/app/api/services/examinations/examinations.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveExamHistoryReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamHistoryReadOnlyModel[]>",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamOverviewReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamOverviewReadOnlyModel[]>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamTitleReadOnly_GetByExamId",
          "args": [
            {
              "name": "examId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamTitleReadOnlyModel>",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IExamHistoryReadOnlyModel } from '../../models/examinations/exam-history-read-only.model';\r\nimport { IExamOverviewReadOnlyModel } from '../../models/examinations/exam-overview-read-only.model';\r\nimport { IExamTitleReadOnlyModel } from '../../models/examinations/exam-title-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExaminationsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveExamHistoryReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IExamHistoryReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userexamhistory]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamHistoryReadOnlyModel[]>(`api/examinations/history?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveExamOverviewReadOnly_GetAll(apiVersion = '1.0'): Observable<IExamOverviewReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_exam_overview]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamOverviewReadOnlyModel[]>(`api/examinations/overview?api-version=${apiVersion}`);\r\n        }\r\n\r\n        public retrieveExamTitleReadOnly_GetByExamId(examId: number,\r\n        apiVersion = '1.0'): Observable<IExamTitleReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_exam_title_byExamId]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamTitleReadOnlyModel>(`api/examinations/title?api-version=${apiVersion}&examId=${examId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamProcessState",
      "id": "injectable-ExamProcessState-c7a5bd9b2a9145607203f42004298500954ecda4aa00a3b633bcb67c4d0fe107374f9f71119f210ec41c6ad481dcf0dbfab5724b54fee61af49e39410cbebe76",
      "file": "src/app/state/exam-process/exam-process.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "getExamDirectory",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamProcess>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamOverviewReadOnlyModel[]>",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExamDirectory"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamProcess>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { GetExamDirectory } from './exam-process.actions';\nimport { IExamOverviewReadOnlyModel } from 'src/app/api/models/examinations/exam-overview-read-only.model';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IExamProcess {\n  examDirectory: IExamOverviewReadOnlyModel[];\n  errors?: IFormErrors | null;\n}\n\nexport const EXAM_PROCESS_STATE_TOKEN = new StateToken<IExamProcess>(\n  'examProcess'\n);\n\n@State<IExamProcess>({\n  name: EXAM_PROCESS_STATE_TOKEN,\n  defaults: {\n    examDirectory: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamProcessState {\n  constructor(\n    private examinationsService: ExaminationsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetExamDirectory)\n  getExamDirectory(\n    ctx: StateContext<IExamProcess>\n  ): Observable<IExamOverviewReadOnlyModel[]> {\n    this.globalDialogService.showLoading();\n    const state = ctx.getState();\n    if (state && state.examDirectory.length > 0) {\n      this.globalDialogService.closeOpenDialog();\n      return of(ctx.getState().examDirectory);\n    }\n    return this.examinationsService.retrieveExamOverviewReadOnly_GetAll().pipe(\n      tap((examDirectory) => {\n        ctx.patchState({\n          examDirectory,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((error) => {\n        console.error('------- In Exam Process', error);\n        console.error(error);\n        this.globalDialogService.closeOpenDialog();\n        return of(error);\n      })\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examinationsService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "examinationsService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamScoreService",
      "id": "injectable-ExamScoreService-4e3b5234ce897b83355702f6466ac7640f525d66b6b7bd7b66af4c5029762e57fd6e0d7bb66f95fc0ccbb424afed7d46b9ebc58cf6783da78f64d36a3c5a741b",
      "file": "src/app/api/services/ce/exam-score.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createExamScore",
          "args": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoreModel>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetCaseCommentsData",
          "args": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoreModel>",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetExamScoring",
          "args": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoreModel>",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamScore_GetById",
          "args": [
            {
              "name": "examScheduleScoreId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoreModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScheduleScoreId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateExamScore",
          "args": [
            {
              "name": "examScheduleScoreId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoreModel>",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScheduleScoreId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IExamScoreModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IExamScoreModel } from '../../models/ce/exam-score.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExamScoreService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveExamScore_GetById(examScheduleScoreId: number,\r\n        apiVersion = '1.0'): Observable<IExamScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScheduleScoreId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_exam_schedule_scores]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamScoreModel>(`api/exam-scores/by-id?api-version=${apiVersion}&examScheduleScoreId=${examScheduleScoreId}`);\r\n        }\r\n \r\n        public createExamScore(model: IExamScoreModel, \r\n            apiVersion = '1.0'): Observable<IExamScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScheduleId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_exam_schedule_scores]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IExamScoreModel>(`api/exam-scores?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateExamScore(examScheduleScoreId: number,\r\n        model: IExamScoreModel,\r\n        apiVersion = '1.0') : Observable<IExamScoreModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScheduleScoreId:Number\r\n            * examinerScore:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_exam_schedule_scores]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IExamScoreModel>(`api/exam-scores?api-version=${apiVersion}&examScheduleScoreId=${examScheduleScoreId}`,\r\n            model);\r\n        }\r\n\r\n        public resetCaseCommentsData(model?: IExamScoreModel,\r\n            apiVersion = '1.0') : Observable<IExamScoreModel> {\r\n                /**\r\n                * Claims\r\n                */\r\n                \r\n                /**\r\n                * Business Rules\r\n                * No business rules exist for this model\r\n                */\r\n                \r\n                /**\r\n                * Required Parameters\r\n                * apiVersion\r\n                */\r\n                \r\n                /**\r\n                * Calls Sp(s)\r\n                * [dev_reset_case_comments_by_ExaminerId]\r\n                */\r\n                \r\n                \r\n                \r\n                return this.apiService.post<IExamScoreModel>(`api/dev/reset/case-comments?api-version=${apiVersion}`,\r\n                { model: null});\r\n        }\r\n\r\n        public resetExamScoring(model?: IExamScoreModel,\r\n            apiVersion = '1.0') : Observable<IExamScoreModel> {\r\n                /**\r\n                * Claims\r\n                */\r\n                \r\n                /**\r\n                * Business Rules\r\n                * No business rules exist for this model\r\n                */\r\n                \r\n                /**\r\n                * Required Parameters\r\n                * apiVersion\r\n                */\r\n                \r\n                /**\r\n                * Calls Sp(s)\r\n                * [dev_reset_scoring_by_ExaminerId]\r\n                */\r\n                \r\n                \r\n                \r\n                return this.apiService.post<IExamScoreModel>(`api/dev/reset/exam-scores?api-version=${apiVersion}`,\r\n                {model: null});\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamScoringState",
      "id": "injectable-ExamScoringState-4147099defbdca943f8882cfbfdfa2efdbf5a47ff289b0325461b47e5888bd96c3968b7e4cb139bd5f5dcb1f313b395cd03b5047951976606b3e0ef181bfded1",
      "file": "src/app/state/exam-scoring/exam-scoring.state.ts",
      "properties": [
        {
          "name": "examDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 118
        }
      ],
      "methods": [
        {
          "name": "clearGraduateMedicalEducationErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 755,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearExamScoringErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createCaseComment",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 229,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateCaseComment"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createCaseFeedback",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 614,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateCaseFeedback"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createCaseScore",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 360,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateCaseScore"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createExamScore",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 478,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateExamScore"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseComment",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 273,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteCaseComment"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseFeedback",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 705,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteCaseFeedback"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseScore",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 432,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteCaseScore"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCaseComment",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCaseComment"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCaseContents",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 189,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCaseContents"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCaseDetailsAndFeedback",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoring>",
          "typeParameters": [],
          "line": 733,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCaseDetailsAndFeedback"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCaseFeedback",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 645,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCaseFeedback"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExamCases",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 164,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCaseRoster"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExaminee",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 313,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExaminee"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExamineeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 292,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExamineeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExaminerAgenda",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoring>",
          "typeParameters": [],
          "line": 760,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExaminerAgenda"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExaminerConflict",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamScoring>",
          "typeParameters": [],
          "line": 782,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExaminerConflict"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExamScoresList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 339,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExamScoresList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExamTitle",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetExamTitle"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRoster",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 511,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetRoster"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSelectedExamScores",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 451,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetSelectedExamScores"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetCaseCommentsData",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 568,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ResetCaseCommentsData"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetExamScoringData",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 591,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ResetExamScoringData"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "skipExam",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 537,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "SkipExam"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseComment",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 251,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateCaseComment"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseFeedback",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 672,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateCaseFeedback"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateCaseScore",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 392,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateCaseScore"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IExamScoring>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  CaseContentsService,\n  CaseNotesService,\n  CasesService,\n  ExamSessionsService,\n  ICaseCommentModel,\n  ICaseDetailReadOnlyModel,\n  ICaseRosterReadOnlyModel,\n  IExamSessionReadOnlyModel,\n  CaseScoresService,\n  ICaseScoreReadOnlyModel,\n  ICaseScoreModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetCaseRoster,\n  GetCaseContents,\n  GetCaseComment,\n  CreateCaseComment,\n  UpdateCaseComment,\n  GetExamineeList,\n  GetExamScoresList,\n  GetSelectedExamScores, // if no api call is needed create a custom selector for this\n  ClearExamScoringErrors,\n  GetRoster,\n  CreateCaseScore,\n  UpdateCaseScore,\n  DeleteCaseScore,\n  GetExaminee,\n  CreateExamScore,\n  DeleteCaseComment,\n  SkipExam,\n  ResetCaseCommentsData,\n  ResetExamScoringData,\n  GetExamTitle,\n  CreateCaseFeedback,\n  GetCaseFeedback,\n  UpdateCaseFeedback,\n  DeleteCaseFeedback,\n  GetCaseDetailsAndFeedback,\n  GetExaminerAgenda,\n  GetExaminerConflict,\n} from './exam-scoring.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { RostersService } from 'src/app/api/services/scoring/rosters.service';\nimport { IRosterReadOnlyModel } from 'src/app/api/models/scoring/roster-read-only.model';\nimport { DashboardService } from 'src/app/api/services/scoring/dashboard.service';\nimport { IDashboardRosterReadOnlyModel } from 'src/app/api/models/scoring/dashboard-roster-read-only.model';\nimport { IExamineeReadOnlyModel } from 'src/app/api/models/scoring/ce/examinee-read-only.model';\nimport { SessionService } from 'src/app/api/services/scoring/ce/session.service';\nimport { ExamScoreService } from 'src/app/api/services/ce/exam-score.service';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { Router } from '@angular/router';\nimport { ExaminationsService } from 'src/app/api/services/examinations/examinations.service';\nimport { IExamTitleReadOnlyModel } from 'src/app/api/models/examinations/exam-title-read-only.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\nimport { CaseFeedbackService } from 'src/app/api/services/scoring/case-feedback.service';\nimport { IAgendaReadOnlyModel } from 'src/app/api/models/examiners/agenda-read-only.model';\nimport { AgendaService } from 'src/app/api/services/examiners/agenda.service';\nimport { ConflictService } from 'src/app/api/services/examiners/conflict.service';\nimport { IConflictReadOnlyModel } from 'src/app/api/models/examiners/conflict-read-only.model';\n\nexport interface IExamScoring {\n  examTitle: IExamTitleReadOnlyModel | undefined;\n  // examination rosters page values\n  caseRoster: ICaseRosterReadOnlyModel[] | undefined; // examination rosters page list values\n  selectedCaseContents: ICaseDetailReadOnlyModel[] | undefined; // examination rosters page details values\n  selectedCaseComment: ICaseCommentModel | undefined; // examination rosters page selected comment value\n  selectedCaseFeedback: ICaseFeedbackModel | undefined; // examination rosters page selected feedback value\n  // oral-examinations list page values\n  examineeList: IExamSessionReadOnlyModel[] | undefined; // oral-examinations list page grid values\n  // oral-examination actual exam page values\n  activeExamination: any[] | undefined; // oral-examination actual exam (includes all cases for selected exam) (no api call)\n  //Daily Exam Scores page values\n  examScoresList: IRosterReadOnlyModel[] | undefined; // Daily Exam Scores page grid values\n  selectedExamScores: ICaseScoreReadOnlyModel[] | undefined; // Daily Exam Scores page details values (no api call)\n  // misc values\n\n  roster: IRosterReadOnlyModel[] | undefined;\n  dashboardRoster: IDashboardRosterReadOnlyModel[] | undefined;\n  examinee: IExamineeReadOnlyModel | undefined;\n  examinerAgenda: IAgendaReadOnlyModel | undefined;\n  examinerConflict: IConflictReadOnlyModel | undefined;\n  errors: IFormErrors | null;\n}\n\nexport const EXAM_SCORING_STATE_TOKEN = new StateToken<IExamScoring>(\n  'examScoring'\n);\n\n@State<IExamScoring>({\n  name: EXAM_SCORING_STATE_TOKEN,\n  defaults: {\n    examTitle: undefined,\n    caseRoster: undefined,\n    selectedCaseContents: undefined,\n    selectedCaseComment: undefined,\n    examScoresList: undefined,\n    selectedExamScores: undefined,\n    examineeList: undefined,\n    activeExamination: undefined,\n    roster: undefined,\n    dashboardRoster: undefined,\n    examinee: undefined,\n    selectedCaseFeedback: undefined,\n    examinerAgenda: undefined,\n    examinerConflict: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ExamScoringState {\n  examDate!: string;\n\n  constructor(\n    private casesService: CasesService,\n    private caseContentsService: CaseContentsService,\n    private caseCommentsService: CaseNotesService,\n    private examScoreService: ExamScoreService,\n    private rostersService: RostersService,\n    private examSessionsService: ExamSessionsService,\n    private dashboardService: DashboardService,\n    private caseScoresService: CaseScoresService,\n    private sessionService: SessionService,\n    private examinationsService: ExaminationsService,\n    private globalDialogService: GlobalDialogService,\n    private caseFeedbackService: CaseFeedbackService,\n    private agendaService: AgendaService,\n    private conflictSerive: ConflictService,\n    private router: Router\n  ) {}\n\n  @Action(GetExamTitle)\n  getExamTitle(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const sessionId = payload.id;\n\n    if (ctx.getState()?.examTitle) {\n      return of(ctx.getState()?.examTitle);\n    }\n    return this.examinationsService\n      .retrieveExamTitleReadOnly_GetByExamId(sessionId)\n      .pipe(\n        tap((result: IExamTitleReadOnlyModel) => {\n          ctx.patchState({\n            examTitle: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseRoster)\n  getExamCases(\n    ctx: StateContext<IExamScoring>,\n    payload: { id1: number; id2?: number }\n  ) {\n    // const state = ctx.getState();\n    const sessionId1 = payload.id1;\n    const sessionId2 = payload.id2 || undefined;\n    return this.casesService\n      .retrieveCaseRosterReadOnly_GetByScheduleId(sessionId1, sessionId2)\n      .pipe(\n        tap((result: ICaseRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            caseRoster: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseContents)\n  getCaseContents(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const caseId = payload.id;\n    return this.caseContentsService\n      .retrieveCaseDetailReadOnly_GetByCaseHeaderId(caseId)\n      .pipe(\n        tap((result: ICaseDetailReadOnlyModel[]) => {\n          ctx.patchState({\n            selectedCaseContents: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetCaseComment)\n  getCaseComment(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const commentId = payload.id;\n    return this.caseCommentsService.retrieveCaseComment_GetById(commentId).pipe(\n      tap((result: ICaseCommentModel) => {\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateCaseComment)\n  createCaseComment(\n    ctx: StateContext<IExamScoring>,\n    payload: { comment: ICaseCommentModel }\n  ) {\n    const comment = payload.comment;\n    return this.caseCommentsService.createCaseComment(comment).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateCaseComment)\n  updateCaseComment(\n    ctx: StateContext<IExamScoring>,\n    payload: { comment: ICaseCommentModel }\n  ) {\n    const comment = payload.comment;\n    return this.caseCommentsService.updateCaseComment(comment.id, comment).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(DeleteCaseComment)\n  deleteCaseComment(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    const commentId = payload.id;\n    return this.caseCommentsService.deleteCaseComment(commentId).pipe(\n      tap((result: ICaseCommentModel) => {\n        // action does not currently update value of selectedCaseConents, relying on UI to refresh as needed\n        ctx.patchState({\n          selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetExamineeList)\n  getExamineeList(ctx: StateContext<IExamScoring>, payload: { date: string }) {\n    // const state = ctx.getState();\n    const date = payload.date;\n    return this.examSessionsService\n      .retrieveExamSessionReadOnly_GetByUserId(date)\n      .pipe(\n        tap((result: IExamSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            examineeList: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExaminee)\n  getExaminee(\n    ctx: StateContext<IExamScoring>,\n    payload: { examScheduleId: number }\n  ) {\n    const examScheduleId = payload.examScheduleId;\n    this.globalDialogService.showLoading();\n    return this.sessionService\n      .retrieveExamineeReadOnly_GetById(examScheduleId)\n      .pipe(\n        tap((examinee: IExamineeReadOnlyModel) => {\n          ctx.patchState({\n            examinee,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExamScoresList)\n  getExamScoresList(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    // const state = ctx.getState();\n    const examHeaderId = payload.id;\n    return this.rostersService\n      .retrieveRosterReadOnly_GetByExaminationHeaderId(examHeaderId)\n      .pipe(\n        tap((result: IRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            examScoresList: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateCaseScore)\n  createCaseScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { score: ICaseScoreModel; showLoading: boolean }\n  ) {\n    const score = payload.score;\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n\n    return this.caseScoresService.createCaseScore(score).pipe(\n      tap(() => {\n        // figure out how to update the store here\n        ctx.patchState({\n          // selectedCaseComment: result,\n          errors: null,\n        });\n        if (payload.showLoading) {\n          this.globalDialogService.closeOpenDialog();\n        }\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        if (payload.showLoading) {\n          this.globalDialogService.closeOpenDialog();\n        }\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateCaseScore)\n  updateCaseScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { score: ICaseScoreModel; showLoading: boolean }\n  ) {\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n    const score = payload.score;\n    return this.caseScoresService\n      .updateCaseScore(score.examScoringId, score)\n      .pipe(\n        tap(() => {\n          ctx.patchState({\n            errors: null,\n          });\n          if (payload.showLoading) {\n            this.globalDialogService.showSuccessError(\n              'Success',\n              'Score Successfully Updated',\n              true\n            );\n          }\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          if (payload.showLoading) {\n            this.globalDialogService.showSuccessError(\n              'Error',\n              'Score update failed',\n              false\n            );\n          }\n\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeleteCaseScore)\n  deleteCaseScore(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    const examScoringId = payload.id;\n    return this.caseScoresService.deleteCaseScore(examScoringId).pipe(\n      tap((result: ICaseScoreModel) => {\n        // figure out how to update the store here\n        ctx.patchState({\n          // selectedCaseComment: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetSelectedExamScores)\n  getSelectedExamScores(\n    ctx: StateContext<IExamScoring>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    const examId = payload.id;\n    return this.caseScoresService\n      .retrieveCaseScoreReadOnly_GetByExamScheduleId(examId)\n      .pipe(\n        tap((result: ICaseScoreReadOnlyModel[]) => {\n          ctx.patchState({\n            selectedExamScores: result,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateExamScore)\n  createExamScore(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: IExamScoreModel; navigate: boolean }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.examScoreService.createExamScore(payload.model).pipe(\n      tap(async (result: IExamScoreModel) => {\n        ctx.patchState({\n          errors: null,\n        });\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Exam Submitted Successfully',\n          true\n        );\n        if (payload.navigate) {\n          this.router.navigate(['/ce-scoring/oral-examinations']);\n        }\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Exam Submission Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetRoster)\n  getRoster(\n    ctx: StateContext<IExamScoring>,\n    payload: { examinerUserId: number; examDate: string }\n  ) {\n    this.examDate = payload.examDate;\n    this.globalDialogService.showLoading();\n    return this.dashboardService\n      .retrieveDashboardRosterReadOnly_GetByUserId(payload.examDate)\n      .pipe(\n        tap((dashboardRoster: IDashboardRosterReadOnlyModel[]) => {\n          ctx.patchState({\n            dashboardRoster: dashboardRoster,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(SkipExam)\n  skipExam(\n    ctx: StateContext<IExamScoring>,\n    payload: { examScheduleId: number; examDate: string; showLoading: boolean }\n  ) {\n    if (payload.showLoading) {\n      this.globalDialogService.showLoading();\n    }\n\n    return this.examSessionsService\n      .skipExamSessionReadOnly_SkipByExamScheduleId(payload.examScheduleId)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetExamineeList(payload.examDate));\n          if (payload.showLoading) {\n            this.globalDialogService.closeOpenDialog();\n          }\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Exam Skip Failed',\n            false\n          );\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(ResetCaseCommentsData)\n  resetCaseCommentsData(ctx: StateContext<IExamScoring>) {\n    return this.examScoreService.resetCaseCommentsData().pipe(\n      tap(() => {\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Comments Reset Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Comments Reset Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ResetExamScoringData)\n  resetExamScoringData(ctx: StateContext<IExamScoring>) {\n    return this.examScoreService.resetExamScoring().pipe(\n      tap(() => {\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Exam Data Reset Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Exam Data Reset Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateCaseFeedback)\n  createCaseFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: ICaseFeedbackModel }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService.createCaseFeedback(payload.model).pipe(\n      tap(async (result: ICaseFeedbackModel) => {\n        ctx.patchState({\n          selectedCaseFeedback: result,\n          errors: null,\n        });\n        await this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Feedback Submitted Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Feedback Submission Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCaseFeedback)\n  getCaseFeedback(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService\n      .retrieveCaseFeedback_GetByExaminerId(payload.id)\n      .pipe(\n        tap((result: ICaseFeedbackModel) => {\n          ctx.patchState({\n            selectedCaseFeedback: result,\n            errors: null,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          if (httpError.status === 404) {\n            ctx.patchState({\n              selectedCaseFeedback: undefined,\n            });\n          }\n          ctx.patchState({ errors });\n          this.globalDialogService.closeOpenDialog();\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateCaseFeedback)\n  updateCaseFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { model: ICaseFeedbackModel }\n  ) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService\n      .updateCaseFeedback(payload.model.id, payload.model)\n      .pipe(\n        tap(async (result: ICaseFeedbackModel) => {\n          ctx.patchState({\n            selectedCaseFeedback: result,\n            errors: null,\n          });\n          await this.globalDialogService.showSuccessError(\n            'Success',\n            'Case Feedback Updated Successfully',\n            true\n          );\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Case Feedback Update Failed',\n            false\n          );\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeleteCaseFeedback)\n  deleteCaseFeedback(ctx: StateContext<IExamScoring>, payload: { id: number }) {\n    this.globalDialogService.showLoading();\n    return this.caseFeedbackService.deleteCaseFeedback(payload.id).pipe(\n      tap(async (result: ICaseFeedbackModel) => {\n        ctx.patchState({\n          selectedCaseFeedback: result,\n          errors: null,\n        });\n        await this.globalDialogService.showSuccessError(\n          'Success',\n          'Case Feedback Deleted Successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Case Feedback Delete Failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetCaseDetailsAndFeedback)\n  getCaseDetailsAndFeedback(\n    ctx: StateContext<IExamScoring>,\n    payload: { id: number }\n  ): Observable<IExamScoring> {\n    const joins = [\n      this.getCaseContents(ctx, payload).pipe(catchError((error) => of(error))),\n      this.getCaseFeedback(ctx, payload).pipe(catchError((error) => of(error))),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((examScoring: IExamScoring[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Exam Scoring Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(ClearExamScoringErrors)\n  clearGraduateMedicalEducationErrors(ctx: StateContext<IExamScoring>) {\n    ctx.patchState({ errors: null });\n  }\n\n  @Action(GetExaminerAgenda)\n  getExaminerAgenda(\n    ctx: StateContext<IExamScoring>,\n    payload: { examHeaderId: number }\n  ): Observable<IExamScoring> {\n    return this.agendaService\n      .retrieveAgendaReadOnly_GetByExamHeaderId(payload.examHeaderId)\n      .pipe(\n        tap((examinerAgenda: IAgendaReadOnlyModel) => {\n          ctx.patchState({\n            examinerAgenda,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetExaminerConflict)\n  getExaminerConflict(\n    ctx: StateContext<IExamScoring>,\n    payload: { examHeaderId: number }\n  ): Observable<IExamScoring> {\n    return this.conflictSerive\n      .retrieveConflictReadOnly_GetByExamHeaderId(payload.examHeaderId)\n      .pipe(\n        tap((examinerConflict: IConflictReadOnlyModel) => {\n          ctx.patchState({\n            examinerConflict,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "casesService",
            "type": "CasesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "caseContentsService",
            "type": "CaseContentsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "caseCommentsService",
            "type": "CaseNotesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examScoreService",
            "type": "ExamScoreService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "rostersService",
            "type": "RostersService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examSessionsService",
            "type": "ExamSessionsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "dashboardService",
            "type": "DashboardService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "caseScoresService",
            "type": "CaseScoresService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "sessionService",
            "type": "SessionService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examinationsService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "caseFeedbackService",
            "type": "CaseFeedbackService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "agendaService",
            "type": "AgendaService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "conflictSerive",
            "type": "ConflictService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 118,
        "jsdoctags": [
          {
            "name": "casesService",
            "type": "CasesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "caseContentsService",
            "type": "CaseContentsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "caseCommentsService",
            "type": "CaseNotesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examScoreService",
            "type": "ExamScoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rostersService",
            "type": "RostersService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examSessionsService",
            "type": "ExamSessionsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dashboardService",
            "type": "DashboardService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "caseScoresService",
            "type": "CaseScoresService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "sessionService",
            "type": "SessionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examinationsService",
            "type": "ExaminationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "caseFeedbackService",
            "type": "CaseFeedbackService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "agendaService",
            "type": "AgendaService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "conflictSerive",
            "type": "ConflictService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamService",
      "id": "injectable-ExamService-113c7774e9c0686a59bc5c4b706b58d8f168381b42c780b00b9ef7147c311e27091a2bf8cfc6186befe7add22aa7abf38dd42294a3b72765a4873116027e6850",
      "file": "src/app/api/services/trainees/exam.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveRegistrationStatusReadOnly_GetByExamCode",
          "args": [
            {
              "name": "examCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRegistrationStatusReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IRegistrationStatusReadOnlyModel } from '../../models/trainees/registration-status-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExamService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveRegistrationStatusReadOnly_GetByExamCode(examCode: string,\r\n        apiVersion = '1.0'): Observable<IRegistrationStatusReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examCode:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_registration_open]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRegistrationStatusReadOnlyModel>(`api/trainees/exams/registration-status?api-version=${apiVersion}&examCode=${examCode}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ExamSessionsService",
      "id": "injectable-ExamSessionsService-ac2b1632f57708a837899de5ad748d983aaff1465fcc9189dd6cc2566be0c4021d1cb113b3d0dcec8a3a5833006a6e8229c6501c86789b67b5298eff02591290",
      "file": "src/app/api/services/scoring/exam-sessions.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveExamSessionReadOnly_GetByUserId",
          "args": [
            {
              "name": "examDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamSessionReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "skipExamSessionReadOnly_SkipByExamScheduleId",
          "args": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IExamSessionReadOnlyModel } from '../../models/scoring/exam-session-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExamSessionsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveExamSessionReadOnly_GetByUserId(examDate: string,\r\n        apiVersion = '1.0'): Observable<IExamSessionReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examinee_sessions]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamSessionReadOnlyModel[]>(`api/exam-sessions/by-date?api-version=${apiVersion}&examDate=${examDate}`);\r\n        }\r\n\r\n        public skipExamSessionReadOnly_SkipByExamScheduleId(examScheduleId: number,\r\n          apiVersion = '1.0'){\r\n              /**\r\n              * Claims\r\n              */\r\n              \r\n              /**\r\n              * Business Rules\r\n              * No business rules exist for this model\r\n              */\r\n              \r\n              /**\r\n              * Required Parameters\r\n              * examScheduleId:number\r\n              * apiVersion\r\n              */\r\n              \r\n              /**\r\n              * Calls Sp(s)\r\n              * [update_skip_exam]\r\n              */\r\n              \r\n              \r\n              return this.apiService.post<IExamSessionReadOnlyModel[]>(`api/exam-sessions/skip?api-version=${apiVersion}`, {examScheduleId});\r\n          }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "FellowshipService",
      "id": "injectable-FellowshipService-9c932ec31393d8522478602a59a8e5664b111e51f74a89263beb6d02e698db10192f7dd24728de3aabb724c51a4364aae3ed03186d8fd1734dc0f419150b9250",
      "file": "src/app/api/services/medicaltraining/fellowship.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createFellowship",
          "args": [
            {
              "name": "model",
              "type": "IFellowshipModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipModel>",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IFellowshipModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteFellowship",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveFellowship_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipModel>",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveFellowshipReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipReadOnlyModel[]>",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateFellowship",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IFellowshipModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipModel>",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IFellowshipModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IFellowshipModel } from '../../models/medicaltraining/fellowship.model';\r\nimport { IFellowshipReadOnlyModel } from '../../models/medicaltraining/fellowship-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FellowshipService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteFellowship(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: ProgramOther\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_userfellowships]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IFellowshipModel>(`api/fellowships?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveFellowship_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<IFellowshipModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: ProgramOther\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userfellowships_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IFellowshipModel>(`api/fellowships/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createFellowship(model: IFellowshipModel, \r\n            apiVersion = '1.0'): Observable<IFellowshipModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: ProgramOther\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * programName:String\r\n            * completionYear:String\r\n            * programOther:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_userfellowships]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IFellowshipModel>(`api/fellowships?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateFellowship(id: number,\r\n        model: IFellowshipModel,\r\n        apiVersion = '1.0') : Observable<IFellowshipModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: ProgramOther\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * programName:String\r\n            * completionYear:String\r\n            * programOther:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_userfellowships]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IFellowshipModel>(`api/fellowships?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveFellowshipReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IFellowshipReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userfellowships_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IFellowshipReadOnlyModel[]>(`api/fellowships/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "GlobalDialogService",
      "id": "injectable-GlobalDialogService-17fe160d0cb17cb1da8f8621669c03c9e8b0820755790db094f4a93b717c0e60ac4af37feb1ff2e5314bd52b1425d7c06c885246e7f908153f326678df264fa6",
      "file": "src/app/shared/services/global-dialog.service.ts",
      "properties": [
        {
          "name": "_componentRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ComponentRef<any>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        },
        {
          "name": "_dialog",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "viewContainerRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": true,
          "description": "",
          "line": 13,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "closeOpenDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 350,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "hide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 356,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "showComponentModal",
          "args": [
            {
              "name": "component",
              "type": "Type<any>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "title",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "status",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "saveButtonText",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "cancelButtonText",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "saveCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": []
            },
            {
              "name": "cancelCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "status",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saveButtonText",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cancelButtonText",
              "type": "string | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saveCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cancelCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showConfirmation",
          "args": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showConfirmationWithWarning",
          "args": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "warning",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "warning",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showLoading",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 323,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "showSuccessError",
          "args": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "isSuccess",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isSuccess",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  ComponentRef,\n  Injectable,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobalDialogService {\n  private _dialog!: any;\n  private _componentRef!: ComponentRef<any>;\n\n  public viewContainerRef?: ViewContainerRef;\n\n  // setter used by other components to pass in a ViewContainerRef\n  // TODO: [Joe] I'd love to make this purely standalone if possible\n  set setViewContainerRef(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  constructor() {\n    // create initial dialog element\n    this._dialog = document.createElement('sl-dialog');\n    // set an id attribute so that we can get at the dialog from outside of the service if needed\n    this._dialog.setAttribute('id', 'global-dialog');\n    // set the aria-modal attribute to better support screen readers\n    this._dialog.setAttribute('aria-modal', 'true');\n\n    // set any event listeners that should be universal (and not type specific) here\n    // this._dialog.addEventListener('sl-initial-focus', () => {\n    //   console.log('sl-initial-focus');\n    // });\n  }\n\n  // handle the Success/Error dialog\n  showSuccessError(title: string, message: string, isSuccess: boolean) {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create button text and icon based on success or error\n    const buttonText = isSuccess ? 'Continue' : 'Okay';\n    const icon = isSuccess ? 'fa-circle-check' : 'fa-circle-xmark';\n    const iconClass = isSuccess ? 'success-icon' : 'error-icon';\n\n    // create the dialog content\n    this._dialog.innerHTML = `<div class=\"global-dialog flex flex-column justify-content-center align-items-center\">\n      <i class=\"fa-regular ${icon} ${iconClass}\"></i>\n      <h2 class=\"font-normal mt-3 mb-1\">${title}</h2>\n      <p class=\"font-bold mt-0 mb-1 text-center\" *ngIf=\"message\">${message}</p>\n      <sl-button\n        slot=\"footer\"\n        class=\"mt-5\"\n        style=\"width: 337px\"\n        variant=\"primary\"\n        >${buttonText}</sl-button\n      >\n    </div>`;\n\n    // add the click event listener to the button and set initial focus\n    const button = this._dialog.querySelector('sl-button');\n    button.setAttribute('autofocus', '');\n    button.addEventListener('click', () => {\n      this.hide();\n    });\n\n    // add click event listener to the dialog overlay so that the close cleans up the DOM\n    this._dialog.addEventListener('sl-request-close', () => {\n      this.hide();\n    });\n\n    // set modal specific attributes (this can be done with param options)\n    this._dialog.setAttribute('style', '--width: unset');\n    this._dialog.setAttribute('no-header', 'true');\n\n    // add the dialog to the DOM and show\n    document.body.appendChild(this._dialog);\n    this._dialog.show();\n  }\n\n  // handle the Confirmation dialog\n  showConfirmation(title: string, message: string): Promise<boolean> {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create dialog content inside of a promise so that click events can use a .then() after the promise resolves\n    return new Promise((resolve) => {\n      // create the dialog content\n      this._dialog.innerHTML = `<div class=\"global-dialog flex flex-column justify-content-center align-items-center\">\n        <i class=\"fa-solid fa-triangle-exclamation confirmation-icon\"></i>\n        <h2 class=\"font-normal mt-3 mb-1\">${title}</h2>\n        <p class=\"font-bold mt-0 mb-1 text-center\" *ngIf=\"message\">${message}</p>\n        <div class=\"mt-5\" slot=\"footer\">\n        <sl-button id=\"declineButton\" variant=\"default\" outline style=\"width: 200px\">\n        <i slot=\"prefix\" class=\"fa-solid fa-xmark\"></i>\n        No\n        </sl-button>\n        <sl-button id=\"confirmButton\" variant=\"primary\" style=\"width: 200px\">\n        <i slot=\"prefix\" class=\"fa-solid fa-check\"></i>\n        Yes\n        </sl-button>\n        </div>\n      </div>`;\n\n      // add the click event listener to the decline button and set initial focus\n      const declineButton = this._dialog.querySelector('#declineButton');\n      declineButton.setAttribute('autofocus', '');\n      declineButton.addEventListener('click', () => {\n        this.hide();\n        resolve(false);\n      });\n\n      // add the click event listener to the confirm button\n      const confirmButton = this._dialog.querySelector('#confirmButton');\n      confirmButton.addEventListener('click', () => {\n        this.hide();\n        resolve(true);\n      });\n\n      // add click event listener to the dialog overlay to prevent default close\n      this._dialog.addEventListener('sl-request-close', (event: any) => {\n        event.preventDefault();\n      });\n\n      // set modal specific attributes (this can be done with param options)\n      this._dialog.setAttribute('style', '--width: unset');\n      this._dialog.setAttribute('no-header', 'true');\n\n      // add the dialog to the DOM and show\n      document.body.appendChild(this._dialog);\n      this._dialog.show();\n    });\n  }\n\n  // handle the Confirmation dialog\n  showConfirmationWithWarning(\n    title: string,\n    message: string,\n    warning: string\n  ): Promise<boolean> {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create dialog content inside of a promise so that click events can use a .then() after the promise resolves\n    return new Promise((resolve) => {\n      const dialogLabel = `<div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n      <span class=\"text-2xl\">${title}</span></div>`;\n      const dialogContent = `<div class=\"global-dialog flex flex-column\">\n        <p class=\"mt-0 mb-2\">${message}</p>\n        <p class=\"mt-0 mb-2 text-warning\"><i class=\"fa-solid fa-triangle-exclamation mr-2\"></i>${warning}</p>\n        <div class=\"mt-5 flex justify-content-end\" slot=\"footer\">\n        <sl-button id=\"declineButton\" variant=\"text\" outline style=\"width: 100px\">\n        Cancel\n        </sl-button>\n        <sl-button id=\"confirmButton\" variant=\"primary\" style=\"margin-left: .5rem; width: 337px\">\n        Confirm\n        </sl-button>\n        </div>\n      </div>`;\n\n      // create the dialog content\n      this._dialog.innerHTML = dialogLabel + dialogContent;\n\n      // add the click event listener to the decline button and set initial focus\n      const declineButton = this._dialog.querySelector('#declineButton');\n      declineButton.setAttribute('autofocus', '');\n      declineButton.addEventListener('click', () => {\n        this.hide();\n        resolve(false);\n      });\n\n      // add the click event listener to the confirm button\n      const confirmButton = this._dialog.querySelector('#confirmButton');\n      confirmButton.addEventListener('click', () => {\n        this.hide();\n        resolve(true);\n      });\n\n      // add click event listener to the dialog overlay to prevent default close\n      this._dialog.addEventListener('sl-request-close', (event: any) => {\n        event.preventDefault();\n      });\n\n      // set modal specific attributes (this can be done with param options)\n      this._dialog.setAttribute('style', '--width: 50%');\n      this._dialog.removeAttribute('no-header');\n\n      // add the dialog to the DOM and show\n      document.body.appendChild(this._dialog);\n      this._dialog.show();\n    });\n  }\n\n  // this is a proof of concept, if this works it should be broken out into specific modal types\n  // currently replicating surgeon profile dialog from registration requirements page\n  showComponentModal(\n    component: Type<any>,\n    title?: string | undefined,\n    status?: string | undefined,\n    saveButtonText?: string | undefined,\n    cancelButtonText?: string | undefined,\n    saveCallback?: () => void,\n    cancelCallback?: () => void\n  ) {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // if a ViewContainerRef was set by the component that is calling this service, create the component\n    if (this.viewContainerRef) {\n      this._componentRef = this.viewContainerRef.createComponent(component);\n    }\n\n    // initialize the dialog label content as empty\n    let dialogLabel = ``;\n\n    // if there is a title create the dialog label content\n    if (title) {\n      // if there is a status add it to the dialog label content\n      if (status) {\n        dialogLabel = `<div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n        <span class=\"text-2xl\">${title}</span>\n        <span class=\"text-base\">\n          Status:\n          <span class=\"status ${status}\">\n            ${status.replace('-', ' ')}\n          </span></span></div>`;\n      }\n      // else just add the title to the dialog label content\n      else {\n        dialogLabel = `<div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n        <span class=\"text-2xl\">${title}</span></div>`;\n      }\n    }\n\n    // initialize the dialog footer content as empty\n    let dialogFooter = ``;\n    // if there are any footer buttons create the dialog footer content\n    if (saveButtonText || cancelButtonText) {\n      dialogFooter = `<div class=\"flex justify-content-end\" slot=\"footer\">`;\n      // if there is a cancel button, add it\n      if (cancelButtonText) {\n        dialogFooter =\n          dialogFooter +\n          `<sl-button id=\"cancelButton\" variant=\"text\">${cancelButtonText}</sl-button>`;\n      }\n      // if there is a save button, add it\n      if (saveButtonText) {\n        dialogFooter =\n          dialogFooter +\n          `<sl-button id=\"saveButton\" variant=\"primary\" style=\"width: 337px\">\n          ${saveButtonText}\n          </sl-button>`;\n      }\n      dialogFooter = dialogFooter + `</div>`;\n    }\n\n    // create the dialog content\n    // TODO: [Joe] should alternate content be shown if no ViewContainerRef was set?\n    this._dialog.innerHTML = `${dialogLabel}\n      <div class=\"global-dialog component-dialog\">\n      <ng-container></ng-container></div>\n      ${dialogFooter}`;\n\n    // if there is a cancel button\n    const cancelButton = this._dialog.querySelector('#cancelButton');\n    if (cancelButton) {\n      // add the click event listener to the cancel button and set initial focus\n      cancelButton.setAttribute('autofocus', '');\n      cancelButton.addEventListener('click', () => {\n        this.hide();\n        // if there is a cancel callback, call it\n        if (cancelCallback) {\n          cancelCallback();\n        }\n      });\n    }\n\n    // if there is a save button\n    const saveButton = this._dialog.querySelector('#saveButton');\n    if (saveButton) {\n      // if there is no other button, set initial focus\n      if (!cancelButton) {\n        saveButton.setAttribute('autofocus', '');\n      }\n      // add the click event listener to the save button\n      saveButton.addEventListener('click', () => {\n        this.hide();\n        // if there is a save callback, call it\n        if (saveCallback) {\n          saveCallback();\n        }\n      });\n    }\n\n    // TODO: [Joe] need to handle the case where no component was created (no ViewContainerRef was set)\n    if (this._componentRef) {\n      const ngContainer = this._dialog.querySelector('ng-container');\n      ngContainer.appendChild(this._componentRef.location.nativeElement);\n    }\n\n    // add click event listener to the dialog overlay to prevent default close\n    this._dialog.addEventListener('sl-request-close', (event: any) => {\n      event.preventDefault();\n    });\n\n    // set modal specific attributes (this can be done with param options)\n    this._dialog.removeAttribute('no-header');\n    this._dialog.setAttribute('class', 'status-header-dialog hide-close');\n    this._dialog.setAttribute('style', '--width: 70%');\n\n    // add the dialog to the DOM and show\n    document.body.appendChild(this._dialog);\n    this._dialog.show();\n  }\n\n  showLoading() {\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create the dialog content\n    this._dialog.innerHTML = `<div class=\"global-dialog flex flex-column justify-content-center align-items-center\">\n    <sl-spinner style=\"font-size: 150px; --track-width: 10px;\"></sl-spinner>\n    </div>`;\n\n    // add click event listener to the dialog overlay so that the close cleans up the DOM\n    this._dialog.addEventListener('sl-request-close', () => {\n      this.hide();\n    });\n\n    // set modal specific attributes (this can be done with param options)\n    this._dialog.setAttribute('style', '--width: unset');\n    this._dialog.setAttribute('no-header', 'true');\n    this._dialog.setAttribute('class', 'loading');\n\n    // add the dialog to the DOM and show\n    document.body.appendChild(this._dialog);\n\n    this._dialog.show();\n  }\n\n  // can be used to trigger a close from outside of dialog service\n  closeOpenDialog() {\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n  }\n\n  private hide() {\n    // if there is a component, destroy it\n    if (this._componentRef) {\n      this._componentRef.destroy();\n    }\n\n    // hide and remove the dialog\n    if (document.body.contains(this._dialog)) {\n      this._dialog.hide();\n      document.body.removeChild(this._dialog);\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 19
      },
      "accessors": {
        "setViewContainerRef": {
          "name": "setViewContainerRef",
          "setSignature": {
            "name": "setViewContainerRef",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "vcr",
                "type": "ViewContainerRef",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "vcr",
                "type": "ViewContainerRef",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "GlobalToastService",
      "id": "injectable-GlobalToastService-23d3d64a8fdb2725a47e1f53f3e3cd9dddae5816007e38798c94b8bf43e0cbcb79fa7f88d08f58eca5cadc07e4fd8d820159c1fb03b24a48ffcbc7f85f5e70a6",
      "file": "src/app/shared/services/global-toast.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "showCustom",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "type",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000"
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "type",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showError",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000"
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showInfo",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000"
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showSuccess",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000"
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showToast",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "type",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 5,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "type",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showWarning",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000"
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5000",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "containerId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'#toast-container'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobalToastService {\n  private showToast(\n    message: string,\n    type: string,\n    duration: number,\n    containerId: string\n  ) {\n    const container = document.querySelector(containerId);\n    let toastIcon = 'info-circle';\n    let toastType = 'primary';\n    if (type === 'success') {\n      toastIcon = 'check2-circle';\n      toastType = 'success';\n    } else if (type === 'warning') {\n      toastIcon = 'exclamation-triangle';\n      toastType = 'warning';\n    } else if (type === 'error') {\n      toastIcon = 'exclamation-octagon';\n      toastType = 'danger';\n    }\n    const toast = document.createElement('sl-alert');\n    toast.setAttribute('variant', toastType);\n    if (duration > 0) {\n      toast.setAttribute('duration', duration.toString());\n    }\n    toast.setAttribute('open', 'true');\n    toast.setAttribute('closable', 'true');\n\n    toast.innerHTML = `<sl-icon slot=\"icon\" name=\"${toastIcon}\"></sl-icon>\n        <p class=\"toast__title\">${type}</p>\n        <p class=\"toast__message\">${message}</p>`;\n\n    if (container) {\n      container.appendChild(toast);\n    } else {\n      document.body.appendChild(toast);\n    }\n  }\n\n  showInfo(message: string, duration = 5000, containerId = '#toast-container') {\n    this.showToast(message, 'info', duration, containerId);\n  }\n\n  showSuccess(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'success', duration, containerId);\n  }\n\n  showWarning(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'warning', duration, containerId);\n  }\n\n  showError(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'error', duration, containerId);\n  }\n\n  showCustom(\n    message: string,\n    type: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, type, duration, containerId);\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "GmeSummaryService",
      "id": "injectable-GmeSummaryService-5b56e949441bf83383bc87e529d47f55d671caf1e9534a824baf959889918b956e9eaf9d23a179a8cadc3888cdf4b99d85ae63dfb79968cdac79da518d10f835",
      "file": "src/app/api/services/graduatemedicaleducation/gme-summary.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveGmeSummaryReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IGmeSummaryReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IGmeSummaryReadOnlyModel } from '../../models/graduatemedicaleducation/gme-summary-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GmeSummaryService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveGmeSummaryReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IGmeSummaryReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_gmesummary_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IGmeSummaryReadOnlyModel[]>(`api/gme-summary/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "GQAdditionalTrainingState",
      "id": "injectable-GQAdditionalTrainingState-ab70a1bf36fe43b4caabe1694e4b3f650bf344f0bae88e72eafe641b8ee67aeac4e3a1b649937cd0bce5ce2ad4d0902f505def5c0baab88b75802949896dbb51",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "createAdditionalTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "CreateAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateAdditionalTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "CreateAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAdditionalTrainingDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAdditionalTrainingDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAdditionalTrainingList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAdditionalTrainingList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAdditionalTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "UpdateAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateAdditionalTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGQAdditionalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "UpdateAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { AdditionalTrainingsService } from '../../api';\nimport {\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from './examination-gq-additional-training.actions';\n\nexport interface IGQAdditionalTraining {\n  AdditionalTraining: IAdditionalTrainingReadOnlyModel[];\n  selectedAdditionalTraining: IAdditionalTrainingModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GQ_ADDITIONAL_TRAINING_STATE_TOKEN =\n  new StateToken<IGQAdditionalTraining>('gqAdditionalTraining');\n\n@State<IGQAdditionalTraining>({\n  name: GQ_ADDITIONAL_TRAINING_STATE_TOKEN,\n  defaults: {\n    AdditionalTraining: [],\n    selectedAdditionalTraining: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GQAdditionalTrainingState {\n  constructor(private additionalTrainingsService: AdditionalTrainingsService) {}\n\n  @Action(GetAdditionalTrainingList)\n  getAdditionalTrainingList(ctx: StateContext<IGQAdditionalTraining>) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .retrieveAdditionalTrainingReadOnly_GetAllByUserId()\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            AdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetAdditionalTrainingDetails)\n  getAdditionalTrainingDetails(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { trainingId: number }\n  ) {\n    const state = ctx.getState();\n    const trainingId = payload.trainingId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTraining_GetByTrainingId(trainingId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            selectedAdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateAdditionalTraining)\n  updateAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: UpdateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .updateAdditionalTraining(payload.trainingId, payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          const additionalTraining = state.AdditionalTraining.map((item) =>\n            item.trainingId === readOnlyResult.trainingId\n              ? readOnlyResult\n              : item\n          );\n          ctx.setState({\n            ...state,\n            AdditionalTraining: additionalTraining,\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateAdditionalTraining)\n  createAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: CreateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .createAdditionalTraining(payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          ctx.setState({\n            ...state,\n            AdditionalTraining: [readOnlyResult, ...state.AdditionalTraining],\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "additionalTrainingsService",
            "type": "AdditionalTrainingsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "additionalTrainingsService",
            "type": "AdditionalTrainingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "GraduateMedicalEducationState",
      "id": "injectable-GraduateMedicalEducationState-3198619cc1ef763b3862a05516c79dae3810b3c802edaea1173a0d858c3446a56759dd0b8e6ea57d7631203162b329bad0d150d11debfe2ed04a27639c559d87",
      "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "buildSummaryRows",
          "args": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 323,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clearGraduateMedicalEducationDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearGraduateMedicalEducationDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clearGraduateMedicalEducationErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 317,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearGraduateMedicalEducationErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createGraduateMedicalEducation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "CreateGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 236,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateGraduateMedicalEducation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "CreateGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteGraduateMedicalEducation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "DeleteGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 285,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteGraduateMedicalEducation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "DeleteGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAllGraduateMedicalEducation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IGraduateMedicalEducation>",
          "typeParameters": [],
          "line": 128,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAllGraduateMedicalEducation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAverages",
          "args": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "prop",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 423,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "prop",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGraduateMedicalEducationDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGraduateMedicalEducationDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGraduateMedicalEducationGapList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGraduateMedicalEducationGapList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGraduateMedicalEducationList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGraduateMedicalEducationList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGraduateMedicalEducationSummary",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGraduateMedicalEducationSummary"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTotals",
          "args": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "prop",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "filter",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 408,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "items",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "prop",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "filter",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateGraduateMedicalEducation",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "UpdateGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateGraduateMedicalEducation"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IGraduateMedicalEducation>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "UpdateGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, mergeMap, share, tap } from 'rxjs/operators';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { RotationService, GmeSummaryService } from '../../api';\nimport {\n  GetGraduateMedicalEducationList,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  DeleteGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  GetGraduateMedicalEducationSummary,\n  ClearGraduateMedicalEducationDetails,\n  GetGraduateMedicalEducationGapList,\n  GetAllGraduateMedicalEducation,\n} from './gme.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IGraduateMedicalEducation {\n  gmeRotations: IRotationReadOnlyModel[];\n  gmeGaps: IRotationGapReadOnlyModel[];\n  gmeSummary: IGmeSummaryReadOnlyModel[];\n  selectedRotation: IRotationModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN =\n  new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation');\n\n@State<IGraduateMedicalEducation>({\n  name: GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN,\n  defaults: {\n    gmeRotations: [],\n    gmeGaps: [],\n    gmeSummary: [],\n    selectedRotation: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GraduateMedicalEducationState {\n  constructor(\n    private rotationService: RotationService,\n    private gmeSummaryService: GmeSummaryService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetGraduateMedicalEducationSummary)\n  getGraduateMedicalEducationSummary(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.gmeSummaryService.retrieveGmeSummaryReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeSummary: this.buildSummaryRows(result),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationList)\n  getGraduateMedicalEducationList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeRotations: result.sort((a: any, b: any) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationGapList)\n  getGraduateMedicalEducationGapList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationGapReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          gmeGaps: result.sort((a: any, b: any) =>\n            new Date(a.startDate).getTime() > new Date(b.startDate).getTime()\n              ? 1\n              : -1\n          ),\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetAllGraduateMedicalEducation)\n  getAllGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ): Observable<IGraduateMedicalEducation> {\n    const joins = [\n      this.getGraduateMedicalEducationList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getGraduateMedicalEducationGapList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n    ];\n\n    return forkJoin(joins).pipe(\n      map((gmeAll: IGraduateMedicalEducation[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In GME Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationDetails)\n  getGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    payload: { id: number }\n  ) {\n    //const state = ctx.getState();\n    const gmeId = payload.id;\n    return this.rotationService.retrieveRotation_GetById(gmeId).pipe(\n      tap((result: any) => {\n        ctx.patchState({\n          selectedRotation: result,\n          //errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationDetails)\n  clearGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({\n      selectedRotation: undefined,\n    });\n  }\n\n  @Action(UpdateGraduateMedicalEducation)\n  updateGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: UpdateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.updateRotation(payload.id, payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        const gmeRotations = state.gmeRotations.map((item) =>\n          item.id === readOnlyResult.id ? readOnlyResult : item\n        );\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Rotation Updated Successfully',\n          true\n        );\n        ctx.patchState({\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        //this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(CreateGraduateMedicalEducation)\n  createGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: CreateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.createRotation(payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Rotation Created Successfully',\n          true\n        );\n        ctx.patchState({\n          gmeRotations: [readOnlyResult, ...state.gmeRotations].sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        //this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(DeleteGraduateMedicalEducation)\n  deleteGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: DeleteGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    return this.rotationService.deleteRotation(payload).pipe(\n      tap(() => {\n        const gmeRotations = state.gmeRotations.filter(\n          (item) => item.id !== payload\n        );\n        ctx.patchState({\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n        this.globalDialogService.closeOpenDialog();\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        this.globalDialogService.closeOpenDialog();\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary())),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationGapList()))\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationErrors)\n  clearGraduateMedicalEducationErrors(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({ errors: null });\n  }\n\n  buildSummaryRows(items: any[]) {\n    let allRows = [];\n    const level4AndChief = {\n      clinicalLevel: 'Clinical Level 4 Totals',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks', 'Clinical Level 4'),\n      nonClinicalWeeks: this.getTotals(\n        items,\n        'nonClinicalWeeks',\n        'Clinical Level 4'\n      ),\n      essentialsWeeks: this.getTotals(\n        items,\n        'essentialsWeeks',\n        'Clinical Level 4'\n      ),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#335b92',\n        color: '#FFF',\n      },\n    };\n    const level5AndChief = {\n      clinicalLevel: 'Clinical Level 5 Totals',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks', 'Clinical Level 5'),\n      nonClinicalWeeks: this.getTotals(\n        items,\n        'nonClinicalWeeks',\n        'Clinical Level 5'\n      ),\n      essentialsWeeks: this.getTotals(\n        items,\n        'essentialsWeeks',\n        'Clinical Level 5'\n      ),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#335b92',\n        color: '#FFF',\n      },\n    };\n\n    const summaryTotals = {\n      clinicalLevel: 'Total Weeks',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getTotals(items, 'clinicalWeeks'),\n      nonClinicalWeeks: this.getTotals(items, 'nonClinicalWeeks'),\n      essentialsWeeks: this.getTotals(items, 'essentialsWeeks'),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#1F3758',\n        color: '#FFF',\n      },\n    };\n    const summaryAverages = {\n      clinicalLevel: 'Avg Weeks',\n      minStartDate: '',\n      maxStartDate: '',\n      programName: '',\n      clinicalWeeks: this.getAverages(items, 'clinicalWeeks'),\n      nonClinicalWeeks: this.getAverages(items, 'nonClinicalWeeks'),\n      essentialsWeeks: this.getAverages(items, 'essentialsWeeks'),\n      rowStyle: {\n        'font-weight': 'bold',\n        'background-color': '#1F3758',\n        color: '#FFF',\n      },\n    };\n    allRows = [...items, level4AndChief, level5AndChief];\n    allRows.sort((a: any, b: any) =>\n      a.clinicalLevel > b.clinicalLevel ? 1 : -1\n    );\n    allRows.push(summaryTotals);\n    allRows.push(summaryAverages);\n\n    return allRows;\n  }\n\n  getTotals(items: any[], prop: string, filter?: string) {\n    return items.reduce((a, b) => {\n      if (filter) {\n        if (b[prop] && b.clinicalLevel.startsWith(filter)) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      } else {\n        if (b[prop]) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      }\n    }, 0);\n  }\n  getAverages(items: any[], prop: string) {\n    const total = this.getTotals(items, prop);\n    const avg = total / items.length;\n    return Math.round(avg * 10) / 10;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "rotationService",
            "type": "RotationService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "gmeSummaryService",
            "type": "GmeSummaryService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 52,
        "jsdoctags": [
          {
            "name": "rotationService",
            "type": "RotationService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "gmeSummaryService",
            "type": "GmeSummaryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MedicalLicenseService",
      "id": "injectable-MedicalLicenseService-86f212a2f78ff2c8ca0fd5a3633f5f860e3dec4022c1ef82e747779960a1af2deb8757a9ad2e87cba22925d0bd789dfb3149951eeb3a8525f65de763a27d2dca",
      "file": "src/app/api/services/professionalstanding/medical-license.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createMedicalLicense",
          "args": [
            {
              "name": "model",
              "type": "IMedicalLicenseModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalLicenseModel>",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IMedicalLicenseModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteMedicalLicense",
          "args": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveMedicalLicense_GetById",
          "args": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalLicenseModel>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveMedicalLicenseReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalLicenseReadOnlyModel[]>",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateMedicalLicense",
          "args": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IMedicalLicenseModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalLicenseModel>",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "licenseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IMedicalLicenseModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IMedicalLicenseModel } from '../../models/professionalstanding/medical-license.model';\r\nimport { IMedicalLicenseReadOnlyModel } from '../../models/professionalstanding/medical-license-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MedicalLicenseService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteMedicalLicense(licenseId: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * licenseId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [del_userlicense]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IMedicalLicenseModel>(`api/professional-standing/medical-license?api-version=${apiVersion}&licenseId=${licenseId}`);\r\n        }\r\n \r\n        public retrieveMedicalLicense_GetById(licenseId: number,\r\n        apiVersion = '1.0'): Observable<IMedicalLicenseModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * licenseId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userlicenses_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IMedicalLicenseModel>(`api/professional-standing/medical-license/by-id?api-version=${apiVersion}&licenseId=${licenseId}`);\r\n        }\r\n \r\n        public createMedicalLicense(model: IMedicalLicenseModel, \r\n            apiVersion = '1.0'): Observable<IMedicalLicenseModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * issuingStateId:String\r\n            * licenseNumber:String\r\n            * licenseTypeId:Number\r\n            * reportingOrganization:String\r\n            * issueDate:String\r\n            * expireDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [insert_userlicenses]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IMedicalLicenseModel>(`api/professional-standing/medical-license?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateMedicalLicense(licenseId: number,\r\n        model: IMedicalLicenseModel,\r\n        apiVersion = '1.0') : Observable<IMedicalLicenseModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * licenseId:Number\r\n            * issuingStateId:String\r\n            * licenseNumber:String\r\n            * licenseTypeId:Number\r\n            * reportingOrganization:String\r\n            * issueDate:String\r\n            * expireDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_userlicenses]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IMedicalLicenseModel>(`api/professional-standing/medical-license?api-version=${apiVersion}&licenseId=${licenseId}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveMedicalLicenseReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IMedicalLicenseReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userlicenses_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IMedicalLicenseReadOnlyModel[]>(`api/professional-standing/medical-license/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MedicalTrainingService",
      "id": "injectable-MedicalTrainingService-70b268e25370606537aae75fa05f153f47108e19113bc66e8512831b6fad4f39f0afee6ef66371f2f2422d4fbb9b406143104c8fca8c56b03d3960c159a2da84",
      "file": "src/app/api/services/medicaltraining/medical-training.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createMedicalTraining",
          "args": [
            {
              "name": "model",
              "type": "IMedicalTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel>",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IMedicalTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveMedicalTraining_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateMedicalTraining",
          "args": [
            {
              "name": "model",
              "type": "IMedicalTrainingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel>",
          "typeParameters": [],
          "line": 161,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IMedicalTrainingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IMedicalTrainingModel } from '../../models/medicaltraining/medical-training.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MedicalTrainingService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveMedicalTraining_GetByUserId(apiVersion = '1.0'): Observable<IMedicalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: Id\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GraduateProfileId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCountryId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DegreeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramOther\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_medical_training_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IMedicalTrainingModel>(`api/medical-training/by-userid?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public createMedicalTraining(model: IMedicalTrainingModel, \r\n            apiVersion = '1.0'): Observable<IMedicalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: Id\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GraduateProfileId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCountryId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DegreeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramOther\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * graduateProfileId:Number\r\n            * medicalSchoolName:String\r\n            * medicalSchoolCity:String\r\n            * medicalSchoolCountryId:String\r\n            * degreeId:Number\r\n            * medicalSchoolCompletionYear:String\r\n            * residencyProgramName:String\r\n            * residencyCompletionYear:String\r\n            * residencyProgramOther:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_medical_training]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IMedicalTrainingModel>(`api/medical-training?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateMedicalTraining(model: IMedicalTrainingModel,\r\n        apiVersion = '1.0') : Observable<IMedicalTrainingModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: Id\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GraduateProfileId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolName\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCity\r\n            *   Rule Name: MaxLength\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCountryId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DegreeId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: MedicalSchoolCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyCompletionYear\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ResidencyProgramOther\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * userId:Number\r\n            * graduateProfileId:Number\r\n            * medicalSchoolName:String\r\n            * medicalSchoolCity:String\r\n            * medicalSchoolCountryId:String\r\n            * degreeId:Number\r\n            * medicalSchoolCompletionYear:String\r\n            * residencyProgramName:String\r\n            * residencyCompletionYear:String\r\n            * residencyProgramOther:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_medical_training]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IMedicalTrainingModel>(`api/medical-training?api-version=${apiVersion}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MedicalTrainingState",
      "id": "injectable-MedicalTrainingState-e6d4de1d330550eefa1791e0494c48355c93a74ea0890873c61347913c7d13bf3726e67a7c74ebe3bbc0b1ef51b4a706f2073a8c6986a4c98d5a5fdc7d7a38c9",
      "file": "src/app/state/medical-training/medical-training.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearGraduateMedicalEducationErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 399,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearMedicalTrainingErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createAdvancedTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "CreateAdvancedTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 404,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateAdvancedTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "CreateAdvancedTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createFellowship",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "CreateFellowship",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 312,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateFellowship"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "CreateFellowship",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createMedicalTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "CreateMedicalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel | undefined>",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateMedicalTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "CreateMedicalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createOtherCertification",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "CreateOtherCertification",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 234,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateOtherCertification"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "CreateOtherCertification",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteFellowship",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "DeleteFellowship",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 368,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeleteFellowship"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "DeleteFellowship",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAdvancedTrainingData",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAdvancedTrainingData"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFellowships",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "GetFellowships",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 292,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetFellowships"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "GetFellowships",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMedicalTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel | undefined>",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetMedicalTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "GetOtherCertifications",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "GetOtherCertifications",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 209,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetOtherCertifications"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "GetOtherCertifications",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getUserCertificates",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "GetUserCertificates",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetUserCertificates"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "GetUserCertificates",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAdvancedTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "UpdateAdvancedTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 433,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateAdvancedTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "UpdateAdvancedTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateFellowship",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "UpdateFellowship",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 339,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateFellowship"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "UpdateFellowship",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateMedicalTraining",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "CreateMedicalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<IMedicalTrainingModel | undefined>",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateMedicalTraining"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "CreateMedicalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateOtherCertifications",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "UpdateOtherCertifications",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 263,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateOtherCertifications"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IMedicalTraining>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "UpdateOtherCertifications",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { MedicalTrainingService } from 'src/app/api/services/medicaltraining/medical-training.service';\nimport {\n  CreateMedicalTraining,\n  GetAdvancedTrainingData,\n  GetMedicalTraining,\n  GetUserCertificates,\n  GetOtherCertifications,\n  UpdateMedicalTraining,\n  CreateOtherCertification,\n  UpdateOtherCertifications,\n  GetFellowships,\n  UpdateFellowship,\n  CreateFellowship,\n  DeleteFellowship,\n  ClearMedicalTrainingErrors,\n  CreateAdvancedTraining,\n  UpdateAdvancedTraining,\n} from './medical-training.actions';\nimport { AdvancedTrainingService } from 'src/app/api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from 'src/app/api/models/medicaltraining/advanced-training-read-only.model';\nimport { IUserCertificateReadOnlyModel } from 'src/app/api/models/medicaltraining/user-certificate-read-only.model';\nimport { UserCertificateService } from 'src/app/api/services/medicaltraining/user-certificate.service';\nimport { OtherCertificationsService } from 'src/app/api/services/medicaltraining/other-certifications.service';\nimport { IOtherCertificationsReadOnlyModel } from 'src/app/api/models/medicaltraining/other-certifications-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { FellowshipService } from 'src/app/api/services/medicaltraining/fellowship.service';\nimport { IFellowshipReadOnlyModel } from 'src/app/api/models/medicaltraining/fellowship-read-only.model';\n\nexport interface IMedicalTraining {\n  medicalTraining: IMedicalTrainingModel | undefined;\n  additionalTraining: IAdvancedTrainingReadOnlyModel[] | undefined;\n  userCertificates: IUserCertificateReadOnlyModel[] | undefined;\n  otherCertifications: IOtherCertificationsReadOnlyModel[] | undefined;\n  fellowships: IFellowshipReadOnlyModel[] | undefined;\n  errors?: IFormErrors | null;\n}\n\nexport const MEDICALSTATE_STATE_TOKEN = new StateToken<IMedicalTraining>(\n  'medical_training'\n);\n\n@State<IMedicalTraining>({\n  name: MEDICALSTATE_STATE_TOKEN,\n  defaults: {\n    medicalTraining: undefined,\n    additionalTraining: undefined,\n    userCertificates: undefined,\n    otherCertifications: undefined,\n    fellowships: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MedicalTrainingState {\n  constructor(\n    private medicalTrainingService: MedicalTrainingService,\n    private advancedTrainingService: AdvancedTrainingService,\n    private userCertificateService: UserCertificateService,\n    private otherCertificationsService: OtherCertificationsService,\n    private fellowshipService: FellowshipService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetMedicalTraining)\n  getMedicalTraining(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    if (ctx.getState()?.medicalTraining) {\n      this.globalDialogService.closeOpenDialog();\n      return of(ctx.getState()?.medicalTraining);\n    }\n\n    return this.medicalTrainingService\n      .retrieveMedicalTraining_GetByUserId()\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(CreateMedicalTraining)\n  createMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    return this.medicalTrainingService\n      .createMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Create failed',\n            false\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateMedicalTraining)\n  updateMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    this.globalDialogService.showLoading();\n    return this.medicalTrainingService\n      .updateMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Updated successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          this.globalDialogService.closeOpenDialog();\n          console.error('------- In Medical Training Store', error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetAdvancedTrainingData)\n  getAdvancedTrainingData(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IAdvancedTrainingReadOnlyModel[] | undefined> {\n    return this.advancedTrainingService\n      .retrieveAdvancedTrainingReadOnly_GetByUserId()\n      .pipe(\n        tap((additionalTraining: IAdvancedTrainingReadOnlyModel[]) => {\n          ctx.patchState({\n            additionalTraining,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetUserCertificates)\n  getUserCertificates(\n    ctx: StateContext<IMedicalTraining>,\n    payload: GetUserCertificates\n  ): Observable<IUserCertificateReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.userCertificates && !payload?.isUpload) {\n      return of(ctx.getState()?.userCertificates);\n    }\n    return this.userCertificateService\n      .retrieveUserCertificateReadOnly_GetByUserId()\n      .pipe(\n        tap((userCertificates: IUserCertificateReadOnlyModel[]) => {\n          ctx.patchState({\n            userCertificates,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetOtherCertifications)\n  GetOtherCertifications(\n    ctx: StateContext<IMedicalTraining>,\n    payload: GetOtherCertifications\n  ): Observable<IOtherCertificationsReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.otherCertifications && !payload?.isUpdate) {\n      return of(ctx.getState()?.otherCertifications);\n    }\n\n    return this.otherCertificationsService\n      .retrieveOtherCertificationsReadOnly_GetByUserId()\n      .pipe(\n        tap((otherCertifications: IOtherCertificationsReadOnlyModel[]) => {\n          ctx.patchState({\n            otherCertifications,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(CreateOtherCertification)\n  createOtherCertification(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateOtherCertification\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.otherCertificationsService\n      .createOtherCertifications(payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetOtherCertifications(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateOtherCertifications)\n  updateOtherCertifications(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateOtherCertifications\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.otherCertificationsService\n      .updateOtherCertifications(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetOtherCertifications(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetFellowships)\n  getFellowships(ctx: StateContext<IMedicalTraining>, payload: GetFellowships) {\n    if (ctx.getState()?.fellowships && !payload?.isUpdate) {\n      return of(ctx.getState()?.fellowships);\n    }\n\n    return this.fellowshipService.retrieveFellowshipReadOnly_GetByUserId().pipe(\n      tap((fellowships: IFellowshipReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowships,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(CreateFellowship)\n  createFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService.createFellowship(payload.model).pipe(\n      tap(() => {\n        ctx.dispatch(new GetFellowships(true));\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Created successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        ctx.patchState({\n          errors: error.error.errors,\n        });\n        this.globalDialogService.closeOpenDialog();\n        return of(error);\n      })\n    );\n  }\n\n  @Action(UpdateFellowship)\n  updateFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService\n      .updateFellowship(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetFellowships(true));\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(DeleteFellowship)\n  deleteFellowship(\n    ctx: StateContext<IMedicalTraining>,\n    payload: DeleteFellowship\n  ): Observable<void> {\n    this.globalDialogService.showLoading();\n    return this.fellowshipService.deleteFellowship(payload.id).pipe(\n      tap(() => {\n        ctx.dispatch(new GetFellowships(true));\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Deleted successfully',\n          true\n        );\n      }),\n      catchError((error) => {\n        console.error('------- In Medical Training Store', error);\n        console.error(error);\n        ctx.patchState({\n          errors: error.error.errors,\n        });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Delete failed',\n          false\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(ClearMedicalTrainingErrors)\n  clearGraduateMedicalEducationErrors(ctx: StateContext<IMedicalTraining>) {\n    ctx.patchState({ errors: null });\n  }\n\n  @Action(CreateAdvancedTraining)\n  createAdvancedTraining(\n    ctx: StateContext<IMedicalTraining>,\n    payload: CreateAdvancedTraining\n  ) {\n    this.globalDialogService.showLoading();\n    return this.advancedTrainingService\n      .createAdvancedTraining(payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetAdvancedTrainingData());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Created successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(UpdateAdvancedTraining)\n  updateAdvancedTraining(\n    ctx: StateContext<IMedicalTraining>,\n    payload: UpdateAdvancedTraining\n  ) {\n    this.globalDialogService.showLoading();\n    return this.advancedTrainingService\n      .updateAdvancedTraining(payload.model.id, payload.model)\n      .pipe(\n        tap(() => {\n          ctx.dispatch(new GetAdvancedTrainingData());\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Updated successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          console.error('------- In Medical Training Store', error);\n          console.error(error);\n          ctx.patchState({\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "medicalTrainingService",
            "type": "MedicalTrainingService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "advancedTrainingService",
            "type": "AdvancedTrainingService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userCertificateService",
            "type": "UserCertificateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "otherCertificationsService",
            "type": "OtherCertificationsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fellowshipService",
            "type": "FellowshipService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 60,
        "jsdoctags": [
          {
            "name": "medicalTrainingService",
            "type": "MedicalTrainingService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "advancedTrainingService",
            "type": "AdvancedTrainingService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userCertificateService",
            "type": "UserCertificateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "otherCertificationsService",
            "type": "OtherCertificationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fellowshipService",
            "type": "FellowshipService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MyAccountState",
      "id": "injectable-MyAccountState-aff2657c1c28213977362620afacd0d06cb11a5f07d02ea0fc7cebf357db646588ad6de0f035e4ccf2999d3270592d1ca403c61c2d338a6dc771c4cc918964d2",
      "file": "src/app/state/my-account/my-account.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IUserCredential>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IUserCredential>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveMyAccountChanges",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IUserCredential>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "SaveMyAccountChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "SaveMyAccountChanges"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IUserCredential>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "SaveMyAccountChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { of, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { SaveMyAccountChanges, ClearErrors } from './my-account.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredentialModel } from '../../api';\nimport { UserCredentialsService } from '../../api';\nimport { Logout } from '../auth';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IUserCredential extends IUserCredentialModel {\n  errors?: IFormErrors | null;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IUserCredential>('userAccount');\n@State<IUserCredential>({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    emailAddress: null,\n    password: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MyAccountState {\n  constructor(\n    private authStore: Store,\n    private userCredentialsService: UserCredentialsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(SaveMyAccountChanges)\n  saveMyAccountChanges(\n    ctx: StateContext<IUserCredential>,\n    { payload }: SaveMyAccountChanges\n  ) {\n    this.globalDialogService.showLoading();\n    return this.userCredentialsService.updateUserCredential(payload).pipe(\n      tap((result: IUserCredentialModel) => {\n        // Succeeded in changing the user's credentials so logout\n        ctx.setState({\n          emailAddress: null,\n          password: null,\n          errors: null,\n        });\n        this.authStore.dispatch(new Logout());\n        this.globalDialogService.showSuccessError(\n          'Success',\n          'Saved successfully',\n          true\n        );\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        this.globalDialogService.showSuccessError(\n          'Error',\n          'Save failed',\n          false\n        );\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearErrors)\n  clearErrors(ctx: StateContext<IUserCredential>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "authStore",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userCredentialsService",
            "type": "UserCredentialsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "authStore",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userCredentialsService",
            "type": "UserCredentialsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "OtherCertificationsService",
      "id": "injectable-OtherCertificationsService-148f1c1b764c968f82579d3fc10fc23e13573920834ba821d631d9ec33c5f0cb9cdf76cd17241bf8655a6d52dcc6bb9ab3426ea47790675698fe0856b21b6465",
      "file": "src/app/api/services/medicaltraining/other-certifications.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createOtherCertifications",
          "args": [
            {
              "name": "model",
              "type": "IOtherCertificationsModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOtherCertificationsModel>",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IOtherCertificationsModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteOtherCertifications",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveOtherCertifications_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOtherCertificationsModel>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveOtherCertificationsReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOtherCertificationsReadOnlyModel[]>",
          "typeParameters": [],
          "line": 128,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateOtherCertifications",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IOtherCertificationsModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOtherCertificationsModel>",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IOtherCertificationsModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IOtherCertificationsModel } from '../../models/medicaltraining/other-certifications.model';\r\nimport { IOtherCertificationsReadOnlyModel } from '../../models/medicaltraining/other-certifications-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OtherCertificationsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteOtherCertifications(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [del_user_certificates_other_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IOtherCertificationsModel>(`api/medical-training/other-certifications?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveOtherCertifications_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<IOtherCertificationsModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_certificates_other_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IOtherCertificationsModel>(`api/medical-training/other-certifications/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createOtherCertifications(model: IOtherCertificationsModel, \r\n            apiVersion = '1.0'): Observable<IOtherCertificationsModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * certificateTypeId:Number\r\n            * issueDate:String\r\n            * certificateNumber:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_user_certificates_other]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IOtherCertificationsModel>(`api/medical-training/other-certifications?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateOtherCertifications(id: number,\r\n        model: IOtherCertificationsModel,\r\n        apiVersion = '1.0') : Observable<IOtherCertificationsModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * certificateTypeId:Number\r\n            * issueDate:String\r\n            * certificateNumber:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_user_certificates_other_byid]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IOtherCertificationsModel>(`api/medical-training/other-certifications?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveOtherCertificationsReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IOtherCertificationsReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_certificates_other_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IOtherCertificationsReadOnlyModel[]>(`api/medical-training/other-certifications/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "OutcomeRegistriesService",
      "id": "injectable-OutcomeRegistriesService-0c25e053e8cc16d0629976d7845121c36cffe6bd25175f75a9433ba4f26cf6bb3ac57fee8902495d0d40d622feb7b2f33c6a76776ffe7307b6eca6afe81ec7e0",
      "file": "src/app/api/services/continuouscertification/outcome-registries.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createOutcomeRegistry",
          "args": [
            {
              "name": "model",
              "type": "IOutcomeRegistryModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOutcomeRegistryModel>",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IOutcomeRegistryModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveOutcomeRegistry_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOutcomeRegistryModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateOutcomeRegistry",
          "args": [
            {
              "name": "model",
              "type": "IOutcomeRegistryModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOutcomeRegistryModel>",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IOutcomeRegistryModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IOutcomeRegistryModel } from '../../models/continuouscertification/outcome-registry.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OutcomeRegistriesService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveOutcomeRegistry_GetByUserId(apiVersion = '1.0'): Observable<IOutcomeRegistryModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_outcomeregistry_getbyuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IOutcomeRegistryModel>(`api/continuous-certification/outcome-registries?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public createOutcomeRegistry(model: IOutcomeRegistryModel, \r\n            apiVersion = '1.0'): Observable<IOutcomeRegistryModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * surgeonSpecificRegistry:Boolean\r\n            * registryComments:String\r\n            * registeredWithACHQC:Boolean\r\n            * registeredWithCESQIP:Boolean\r\n            * registeredWithMBSAQIP:Boolean\r\n            * registeredWithABA:Boolean\r\n            * registeredWithASBS:Boolean\r\n            * registeredWithStatewideCollaboratives:Boolean\r\n            * registeredWithABMS:Boolean\r\n            * registeredWithNCDB:Boolean\r\n            * registeredWithRQRS:Boolean\r\n            * registeredWithNSQIP:Boolean\r\n            * registeredWithNTDB:Boolean\r\n            * registeredWithSTS:Boolean\r\n            * registeredWithTQIP:Boolean\r\n            * registeredWithUNOS:Boolean\r\n            * registeredWithNCDR:Boolean\r\n            * registeredWithSVS:Boolean\r\n            * registeredWithELSO:Boolean\r\n            * userConfirmed:Boolean\r\n            * userConfirmedDateUtc:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_outcomeregistry_getbyuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IOutcomeRegistryModel>(`api/continuous-certification/outcome-registries?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateOutcomeRegistry(model: IOutcomeRegistryModel,\r\n        apiVersion = '1.0') : Observable<IOutcomeRegistryModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * surgeonSpecificRegistry:Boolean\r\n            * registryComments:String\r\n            * registeredWithACHQC:Boolean\r\n            * registeredWithCESQIP:Boolean\r\n            * registeredWithMBSAQIP:Boolean\r\n            * registeredWithABA:Boolean\r\n            * registeredWithASBS:Boolean\r\n            * registeredWithStatewideCollaboratives:Boolean\r\n            * registeredWithABMS:Boolean\r\n            * registeredWithNCDB:Boolean\r\n            * registeredWithRQRS:Boolean\r\n            * registeredWithNSQIP:Boolean\r\n            * registeredWithNTDB:Boolean\r\n            * registeredWithSTS:Boolean\r\n            * registeredWithTQIP:Boolean\r\n            * registeredWithUNOS:Boolean\r\n            * registeredWithNCDR:Boolean\r\n            * registeredWithSVS:Boolean\r\n            * registeredWithELSO:Boolean\r\n            * userConfirmed:Boolean\r\n            * userConfirmedDateUtc:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_outcomeregistry_getbyuserid]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IOutcomeRegistryModel>(`api/continuous-certification/outcome-registries?api-version=${apiVersion}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PicklistsService",
      "id": "injectable-PicklistsService-d23c1849d5910510d770d23210f0644bd9bf861a24cc9db141c3729fee71b3106aa0226802669355fe224a6ad3a386dade4bedf85fedc7d34975bdd154c3bd13",
      "file": "src/app/api/services/picklists/picklists.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveAccreditedProgramInstitutionReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]>",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveAppointmentTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAppointmentTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCertificateTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICertificateTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveClinicalActivityReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IClinicalActivityReadOnlyModel[]>",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveClinicalLevelReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IClinicalLevelReadOnlyModel[]>",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveCountryReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ICountryReadOnlyModel[]>",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveDegreeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IDegreeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveDocumentTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IDocumentTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 208,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveEthnicityReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IEthnicityReadOnlyModel[]>",
          "typeParameters": [],
          "line": 232,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamSpecialtyReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamSpecialtyReadOnlyModel[]>",
          "typeParameters": [],
          "line": 256,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamStatusReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamStatusReadOnlyModel[]>",
          "typeParameters": [],
          "line": 280,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveExamTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 304,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveFellowshipProgramReadOnly_GetAll",
          "args": [
            {
              "name": "fellowshipType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipProgramReadOnlyModel[]>",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "fellowshipType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveFellowshipTypeReadOnly_Get",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IFellowshipTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 354,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveGenderReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IGenderReadOnlyModel[]>",
          "typeParameters": [],
          "line": 378,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveGraduateProfileReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IGraduateProfileReadOnlyModel[]>",
          "typeParameters": [],
          "line": 402,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveJcahoOrganizationReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IJcahoOrganizationReadOnlyModel[]>",
          "typeParameters": [],
          "line": 426,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveLanguageReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ILanguageReadOnlyModel[]>",
          "typeParameters": [],
          "line": 450,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveLicenseTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ILicenseTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 474,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveOrganizationTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IOrganizationTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 498,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrievePracticeTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IPracticeTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 522,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrievePrimaryPracticeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IPrimaryPracticeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 546,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveRaceReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRaceReadOnlyModel[]>",
          "typeParameters": [],
          "line": 570,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveResidencyProgramReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IResidencyProgramReadOnlyModel[]>",
          "typeParameters": [],
          "line": 594,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveScoringSessionReadOnly_GetByKeys",
          "args": [
            {
              "name": "currentDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IScoringSessionReadOnlyModel[]>",
          "typeParameters": [],
          "line": 618,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "currentDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveStateReadOnly_GetByCountry",
          "args": [
            {
              "name": "countryCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IStateReadOnlyModel[]>",
          "typeParameters": [],
          "line": 644,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "countryCode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveTrainingTypeReadOnly_GetAll",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ITrainingTypeReadOnlyModel[]>",
          "typeParameters": [],
          "line": 670,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAccreditedProgramInstitutionReadOnlyModel } from '../../models/picklists/accredited-program-institution-read-only.model';\r\nimport { IAppointmentTypeReadOnlyModel } from '../../models/picklists/appointment-type-read-only.model';\r\nimport { ICertificateTypeReadOnlyModel } from '../../models/picklists/certificate-type-read-only.model';\r\nimport { IClinicalActivityReadOnlyModel } from '../../models/picklists/clinical-activity-read-only.model';\r\nimport { IClinicalLevelReadOnlyModel } from '../../models/picklists/clinical-level-read-only.model';\r\nimport { ICountryReadOnlyModel } from '../../models/picklists/country-read-only.model';\r\nimport { IDegreeReadOnlyModel } from '../../models/picklists/degree-read-only.model';\r\nimport { IDocumentTypeReadOnlyModel } from '../../models/picklists/document-type-read-only.model';\r\nimport { IEthnicityReadOnlyModel } from '../../models/picklists/ethnicity-read-only.model';\r\nimport { IExamSpecialtyReadOnlyModel } from '../../models/picklists/exam-specialty-read-only.model';\r\nimport { IExamStatusReadOnlyModel } from '../../models/picklists/exam-status-read-only.model';\r\nimport { IExamTypeReadOnlyModel } from '../../models/picklists/exam-type-read-only.model';\r\nimport { IFellowshipProgramReadOnlyModel } from '../../models/picklists/fellowship-program-read-only.model';\r\nimport { IFellowshipTypeReadOnlyModel } from '../../models/picklists/fellowship-type-read-only.model';\r\nimport { IGenderReadOnlyModel } from '../../models/picklists/gender-read-only.model';\r\nimport { IGraduateProfileReadOnlyModel } from '../../models/picklists/graduate-profile-read-only.model';\r\nimport { IJcahoOrganizationReadOnlyModel } from '../../models/picklists/jcaho-organization-read-only.model';\r\nimport { ILanguageReadOnlyModel } from '../../models/picklists/language-read-only.model';\r\nimport { ILicenseTypeReadOnlyModel } from '../../models/picklists/license-type-read-only.model';\r\nimport { IOrganizationTypeReadOnlyModel } from '../../models/picklists/organization-type-read-only.model';\r\nimport { IPracticeTypeReadOnlyModel } from '../../models/picklists/practice-type-read-only.model';\r\nimport { IPrimaryPracticeReadOnlyModel } from '../../models/picklists/primary-practice-read-only.model';\r\nimport { IRaceReadOnlyModel } from '../../models/picklists/race-read-only.model';\r\nimport { IResidencyProgramReadOnlyModel } from '../../models/picklists/residency-program-read-only.model';\r\nimport { IScoringSessionReadOnlyModel } from '../../models/picklists/scoring-session-read-only.model';\r\nimport { IStateReadOnlyModel } from '../../models/picklists/state-read-only.model';\r\nimport { ITrainingTypeReadOnlyModel } from '../../models/picklists/training-type-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PicklistsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveAccreditedProgramInstitutionReadOnly_GetAll(apiVersion = '1.0'): Observable<IAccreditedProgramInstitutionReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_accredited_program_institutions]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAccreditedProgramInstitutionReadOnlyModel[]>(`api/picklists/accredited-program-institutions?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveAppointmentTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IAppointmentTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_appointment_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IAppointmentTypeReadOnlyModel[]>(`api/picklists/appointment-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveCertificateTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<ICertificateTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_certificate_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICertificateTypeReadOnlyModel[]>(`api/picklists/certificate-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveClinicalActivityReadOnly_GetAll(apiVersion = '1.0'): Observable<IClinicalActivityReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_clinicalactivity]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IClinicalActivityReadOnlyModel[]>(`api/picklists/clinical-activities?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveClinicalLevelReadOnly_GetAll(apiVersion = '1.0'): Observable<IClinicalLevelReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_clinicallevel]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IClinicalLevelReadOnlyModel[]>(`api/picklists/clinical-levels?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveCountryReadOnly_GetAll(apiVersion = '1.0'): Observable<ICountryReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklist_country_all]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ICountryReadOnlyModel[]>(`api/picklists/countries?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveDegreeReadOnly_GetAll(apiVersion = '1.0'): Observable<IDegreeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_degree]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IDegreeReadOnlyModel[]>(`api/picklists/degrees?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveDocumentTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IDocumentTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_document_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IDocumentTypeReadOnlyModel[]>(`api/picklists/document-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveEthnicityReadOnly_GetAll(apiVersion = '1.0'): Observable<IEthnicityReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklists_ethnicities_all]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IEthnicityReadOnlyModel[]>(`api/picklists/ethnicities?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveExamSpecialtyReadOnly_GetAll(apiVersion = '1.0'): Observable<IExamSpecialtyReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examspecialties]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamSpecialtyReadOnlyModel[]>(`api/picklists/exam-specialties?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveExamStatusReadOnly_GetAll(apiVersion = '1.0'): Observable<IExamStatusReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examstatus]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamStatusReadOnlyModel[]>(`api/picklists/exam-statuses?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveExamTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IExamTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examtypes]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamTypeReadOnlyModel[]>(`api/picklists/exam-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveFellowshipProgramReadOnly_GetAll(fellowshipType: string,\r\n        apiVersion = '1.0'): Observable<IFellowshipProgramReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * fellowshipType:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_fellowship_program]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IFellowshipProgramReadOnlyModel[]>(`api/picklists/fellowship-programs?api-version=${apiVersion}&fellowshipType=${fellowshipType}`);\r\n        }\r\n \r\n        public retrieveFellowshipTypeReadOnly_Get(apiVersion = '1.0'): Observable<IFellowshipTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_fellowship_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IFellowshipTypeReadOnlyModel[]>(`api/picklists/fellowship-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveGenderReadOnly_GetAll(apiVersion = '1.0'): Observable<IGenderReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklist_genders_all]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IGenderReadOnlyModel[]>(`api/picklists/genders?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveGraduateProfileReadOnly_GetAll(apiVersion = '1.0'): Observable<IGraduateProfileReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_graduate_profile]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IGraduateProfileReadOnlyModel[]>(`api/picklists/graduate-profile?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveJcahoOrganizationReadOnly_GetAll(apiVersion = '1.0'): Observable<IJcahoOrganizationReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_jcaho]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IJcahoOrganizationReadOnlyModel[]>(`api/picklists/jcaho-organizations?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveLanguageReadOnly_GetAll(apiVersion = '1.0'): Observable<ILanguageReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklist_languages_all]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ILanguageReadOnlyModel[]>(`api/picklists/languages?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveLicenseTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<ILicenseTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_license_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ILicenseTypeReadOnlyModel[]>(`api/picklists/license-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveOrganizationTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IOrganizationTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_organization_type]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IOrganizationTypeReadOnlyModel[]>(`api/picklists/organization-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrievePracticeTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IPracticeTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_practice_types]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IPracticeTypeReadOnlyModel[]>(`api/picklists/practice-types?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrievePrimaryPracticeReadOnly_GetAll(apiVersion = '1.0'): Observable<IPrimaryPracticeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_primary_practice]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IPrimaryPracticeReadOnlyModel[]>(`api/picklists/primary-practices?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveRaceReadOnly_GetAll(apiVersion = '1.0'): Observable<IRaceReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklist_races_all]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRaceReadOnlyModel[]>(`api/picklists/races?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveResidencyProgramReadOnly_GetAll(apiVersion = '1.0'): Observable<IResidencyProgramReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_residency_program]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IResidencyProgramReadOnlyModel[]>(`api/picklists/residency-programs?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveScoringSessionReadOnly_GetByKeys(currentDate: string,\r\n        apiVersion = '1.0'): Observable<IScoringSessionReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * currentDate:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_day_session_picklist]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IScoringSessionReadOnlyModel[]>(`api/picklists/examiner-sessions?api-version=${apiVersion}&currentDate=${currentDate}`);\r\n        }\r\n \r\n        public retrieveStateReadOnly_GetByCountry(countryCode: string,\r\n        apiVersion = '1.0'): Observable<IStateReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * countryCode:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_picklist_states_bycountry]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IStateReadOnlyModel[]>(`api/picklists/states?api-version=${apiVersion}&countryCode=${countryCode}`);\r\n        }\r\n \r\n        public retrieveTrainingTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<ITrainingTypeReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_training_type]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ITrainingTypeReadOnlyModel[]>(`api/picklists/training-types?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PicklistsState",
      "id": "injectable-PicklistsState-2ef1d995581a464ddbdb6402df045b1960d44e08e3feec75d2a10bfea7ac9b99745c6c228e2c4b937c632a3daa830e5fffca03e5d2aff9002375627aae91444d",
      "file": "src/app/state/picklists/picklists.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "getAccreditedProgramInstitutionsList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAccreditedProgramInstitutionsList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAppointmentTypeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 623,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetAppointmentTypeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCertificateTypes",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 519,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCertificateTypes"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getClinicalActivityList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 499,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetClinicalActivityList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getClinicalLevelList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 396,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetClinicalLevelList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCountryList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetCountryList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDegrees",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 416,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetDegrees"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getEthnicityList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 192,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetEthnicityList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFellowshipPrograms",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 456,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetFellowshipPrograms"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFellowshipTypes",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 436,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetFellowshipTypes"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGenderList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 212,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGenderList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getGraduateProfiles",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 376,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetGraduateProfiles"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getJcahoOrganizationList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 651,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetJcahoOrganizationList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getLanguageList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 240,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetLanguageList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getLicenseTypeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 539,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetLicenseTypeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOrganizationTypeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 595,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetOrganizationTypeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPicklists",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<IPicklist>",
          "typeParameters": [],
          "line": 735,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPicklists"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPracticeTypeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 567,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPracticeTypeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPrimaryPracticeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 681,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPrimaryPracticeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRaceList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 267,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetRaceList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getResidencyPrograms",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 479,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetResidencyPrograms"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getScoringSessionList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 709,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetScoringSessionList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getStateList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 287,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetStateList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTrainingTypeList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<[] | undefined>",
          "typeParameters": [],
          "line": 353,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetTrainingTypeList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IPicklist>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n  ILicenseTypeReadOnlyModel,\n  IPracticeTypeReadOnlyModel,\n  IOrganizationTypeReadOnlyModel,\n  IAppointmentTypeReadOnlyModel,\n  IJcahoOrganizationReadOnlyModel,\n  IPrimaryPracticeReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  GetCertificateTypes,\n  GetDocumentTypes,\n  GetLicenseTypeList,\n  GetPracticeTypeList,\n  GetOrganizationTypeList,\n  GetAppointmentTypeList,\n  GetJcahoOrganizationList,\n  GetPrimaryPracticeList,\n  GetScoringSessionList,\n  GetFellowshipTypes,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from 'src/app/api/models/picklists/document-type-read-only.model';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  certificateTypes: ICertificateTypeReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n  licenseTypes: IPickListItemNumber[] | undefined;\n  practiceTypes: IPickListItemNumber[] | undefined;\n  organizationTypes: IPickListItemNumber[] | undefined;\n  appointmentTypes: IPickListItemNumber[] | undefined;\n  jcahoOrganizations: IPickListItemNumber[] | undefined;\n  primaryPractices: IPickListItemNumber[] | undefined;\n  scoringSessions: IScoringSessionReadOnlyModel[] | undefined;\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\nexport interface IPickListItemNumber {\n  itemValue: number | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  documentTypes: IDocumentTypeReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n    certificateTypes: undefined,\n    documentTypes: undefined,\n    licenseTypes: undefined,\n    practiceTypes: undefined,\n    organizationTypes: undefined,\n    appointmentTypes: undefined,\n    jcahoOrganizations: undefined,\n    primaryPractices: undefined,\n    scoringSessions: undefined,\n    fellowshipTypes: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipTypes)\n  getFellowshipTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipTypes) {\n      return of(ctx.getState()?.fellowshipTypes);\n    }\n    return this.picklistsService.retrieveFellowshipTypeReadOnly_Get().pipe(\n      tap((fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          fellowshipTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>,\n    payload: { fellowshipType: string }\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    this.globalDialogService.showLoading();\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll(payload.fellowshipType)\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetCertificateTypes)\n  getCertificateTypes(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICertificateTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.certificateTypes) {\n      return of(ctx.getState()?.certificateTypes);\n    }\n    return this.picklistsService.retrieveCertificateTypeReadOnly_GetAll().pipe(\n      tap((certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          certificateTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Certificate Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLicenseTypeList)\n  getLicenseTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.licenseTypes) {\n      return of(ctx.getState()?.licenseTypes);\n    }\n    return this.picklistsService.retrieveLicenseTypeReadOnly_GetAll().pipe(\n      tap((licenseTypes: ILicenseTypeReadOnlyModel[]) => {\n        const licenseTypesList = [] as IPickListItemNumber[];\n        licenseTypes.forEach((type) => {\n          licenseTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          licenseTypes: licenseTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: License Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPracticeTypeList)\n  getPracticeTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.practiceTypes) {\n      return of(ctx.getState()?.practiceTypes);\n    }\n    return this.picklistsService.retrievePracticeTypeReadOnly_GetAll().pipe(\n      tap((practiceTypes: IPracticeTypeReadOnlyModel[]) => {\n        const practiceTypesList = [] as IPickListItemNumber[];\n        practiceTypes.forEach((type) => {\n          practiceTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          practiceTypes: practiceTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Practice Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetOrganizationTypeList)\n  getOrganizationTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.organizationTypes) {\n      return of(ctx.getState()?.organizationTypes);\n    }\n    return this.picklistsService.retrieveOrganizationTypeReadOnly_GetAll().pipe(\n      tap((orgTypes: IOrganizationTypeReadOnlyModel[]) => {\n        const orgTypesList = [] as IPickListItemNumber[];\n        orgTypes.forEach((type) => {\n          orgTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.type,\n          });\n        });\n\n        ctx.patchState({\n          organizationTypes: orgTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Organization Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetAppointmentTypeList)\n  getAppointmentTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.appointmentTypes) {\n      return of(ctx.getState()?.appointmentTypes);\n    }\n    return this.picklistsService.retrieveAppointmentTypeReadOnly_GetAll().pipe(\n      tap((appointmentTypes: IAppointmentTypeReadOnlyModel[]) => {\n        const appointmentTypesList = [] as IPickListItemNumber[];\n        appointmentTypes.forEach((type) => {\n          appointmentTypesList.push({\n            itemValue: type.id,\n            itemDescription: type.name,\n          });\n        });\n\n        ctx.patchState({\n          appointmentTypes: appointmentTypesList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Appointment Types', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetJcahoOrganizationList)\n  getJcahoOrganizationList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.jcahoOrganizations) {\n      return of(ctx.getState()?.jcahoOrganizations);\n    }\n    return this.picklistsService\n      .retrieveJcahoOrganizationReadOnly_GetAll()\n      .pipe(\n        tap((jcahoOrganizations: IJcahoOrganizationReadOnlyModel[]) => {\n          const jcahoOrganizationList = [] as IPickListItemNumber[];\n          jcahoOrganizations.forEach((type) => {\n            jcahoOrganizationList.push({\n              itemValue: type.organizationId,\n              itemDescription: type.organizationName,\n            });\n          });\n\n          ctx.patchState({\n            jcahoOrganizations: jcahoOrganizationList,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Appointment Types', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPrimaryPracticeList)\n  getPrimaryPracticeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItemNumber[] | undefined> {\n    if (ctx.getState()?.primaryPractices) {\n      return of(ctx.getState()?.primaryPractices);\n    }\n    return this.picklistsService.retrievePrimaryPracticeReadOnly_GetAll().pipe(\n      tap((primaryPractices: IPrimaryPracticeReadOnlyModel[]) => {\n        const primaryPracticeList = [] as IPickListItemNumber[];\n        primaryPractices.forEach((type) => {\n          primaryPracticeList.push({\n            itemValue: type.id,\n            itemDescription: type.practice,\n          });\n        });\n\n        ctx.patchState({\n          primaryPractices: primaryPracticeList,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Primary Practices', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetScoringSessionList)\n  getScoringSessionList(\n    ctx: StateContext<IPicklist>\n    //payload: { date: string }\n  ): Observable<IPickListItemNumber[] | undefined> {\n    //const examHeaderId = payload.id;\n    const currentDate = new Date().toISOString();\n    // removed because we don't want to save this value in the store because it will change based on passed in id\n    // if (ctx.getState()?.primaryPractices) {\n    //   return of(ctx.getState()?.primaryPractices);\n    // }\n    return this.picklistsService\n      .retrieveScoringSessionReadOnly_GetByKeys(currentDate)\n      .pipe(\n        tap((scoringSessions: IScoringSessionReadOnlyModel[]) => {\n          ctx.patchState({\n            scoringSessions: scoringSessions,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: Scoring Sessions', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string; fellowshipType: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getCertificateTypes(ctx).pipe(catchError((error) => of(error))),\n      this.getLicenseTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getPracticeTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getOrganizationTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getAppointmentTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getJcahoOrganizationList(ctx).pipe(catchError((error) => of(error))),\n      this.getPrimaryPracticeList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalLevelList(ctx).pipe(catchError((error) => of(error))),\n      this.getClinicalActivityList(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    if (payload?.fellowshipType) {\n      joins.push(\n        this.getFellowshipPrograms(ctx, {\n          fellowshipType: payload.fellowshipType,\n        }).pipe(catchError((error) => of(error)))\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "picklistsService",
            "type": "PicklistsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 164,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "picklistsService",
            "type": "PicklistsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ProfessionalStandingState",
      "id": "injectable-ProfessionalStandingState-9fee9e20e7f26aeb9cc74e272b2667d788d22e81d5ac554df2c5253719d2a62b4a006e433e9e3cf1e1eac8ee81b9a349f04a9bccf3252226741f997df10225f5",
      "file": "src/app/state/professional-standing/professional-standing.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearProfessionalStandingErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 517,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearProfessionalStandingErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createMedicalLicense",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreatePSMedicalLicense"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createProfessionalStandingSanctionsDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 474,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateProfessionalStandingSanctionsDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createPSAppointmentAndPrivilege",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 274,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreatePSAppointmentAndPrivilege"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createUserProfessionalStandingDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 400,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "CreateUserProfessionalStandingDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteMedicalLicense",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "DeletePSMedicalLicense",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeletePSMedicalLicense"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "DeletePSMedicalLicense",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deletePSAppointmentAndPrivilege",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "DeletePSAppointmentAndPrivilege",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 355,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "DeletePSAppointmentAndPrivilege"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "DeletePSAppointmentAndPrivilege",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMedicalLicenseDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPSMedicalLicenseDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMedicalLicenseList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPSMedicalLicenseList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getProfessionalStandingSanctionsDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 454,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetProfessionalStandingSanctionsDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPSAppointmentAndPrivilegeDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 250,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPSAppointmentAndPrivilegeDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPSAppointmentsAndPrivilegesList",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 230,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetPSAppointmentsAndPrivilegesList"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getUserProfessionalStandingDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 380,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetUserProfessionalStandingDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateMedicalLicense",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 162,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdatePSMedicalLicense"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateProfessionalStandingSanctionsDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 495,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateProfessionalStandingSanctionsDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updatePSAppointmentAndPrivilege",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 312,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdatePSAppointmentAndPrivilege"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserProfessionalStandingDetails",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 424,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateUserProfessionalStandingDetails"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IProfessionalStanding>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "payload",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IUserProfessionalStandingModel,\n  MedicalLicenseService,\n  UserProfessionalStandingService,\n  UserAppointmentService,\n  IUserAppointmentModel,\n  SanctionsService,\n  ISanctionsModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport {\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  DeletePSMedicalLicense,\n  GetPSAppointmentsAndPrivilegesList,\n  GetPSAppointmentAndPrivilegeDetails,\n  CreatePSAppointmentAndPrivilege,\n  UpdatePSAppointmentAndPrivilege,\n  DeletePSAppointmentAndPrivilege,\n  GetUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  ClearProfessionalStandingErrors,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n} from './professional-standing.actions';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IProfessionalStanding {\n  medicalLiscenseList: IMedicalLicenseReadOnlyModel[];\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  userProfessionalStandingDetails: IUserProfessionalStandingModel | undefined;\n  sanctions: ISanctionsModel | undefined;\n  allAppointments: any[];\n  selectedAppointment: any;\n  claims: string[];\n  medicalLicenseErrors?: IFormErrors | null;\n  appointmentErrors?: IFormErrors | null;\n  professionalStandingErrors?: IFormErrors | null;\n  sanctionsErrors?: IFormErrors | null;\n}\n\nexport const PROFESSIONAL_STANDING_STATE_TOKEN =\n  new StateToken<IProfessionalStanding>('professionalStanding');\n\n@State<IProfessionalStanding>({\n  name: PROFESSIONAL_STANDING_STATE_TOKEN,\n  defaults: {\n    medicalLiscenseList: [],\n    selectedMedicalLicense: undefined,\n    userProfessionalStandingDetails: undefined,\n    sanctions: undefined,\n    allAppointments: [],\n    selectedAppointment: undefined,\n    claims: [],\n    medicalLicenseErrors: null,\n    appointmentErrors: null,\n    professionalStandingErrors: null,\n    sanctionsErrors: null,\n  },\n})\n@Injectable()\nexport class ProfessionalStandingState {\n  constructor(\n    private medicalLicenseService: MedicalLicenseService,\n    private userProfessionalStandingService: UserProfessionalStandingService,\n    private userAppointmentService: UserAppointmentService,\n    private sanctionsService: SanctionsService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetPSMedicalLicenseList)\n  getMedicalLicenseList(ctx: StateContext<IProfessionalStanding>) {\n    // const state = ctx.getState();\n    return this.medicalLicenseService\n      .retrieveMedicalLicenseReadOnly_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            medicalLiscenseList: response,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetPSMedicalLicenseDetails)\n  getMedicalLicenseDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    const licenseId = payload.id;\n    return this.medicalLicenseService\n      .retrieveMedicalLicense_GetById(licenseId)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            selectedMedicalLicense: response,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreatePSMedicalLicense)\n  createMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { license: IMedicalLicenseModel }\n  ) {\n    const state = ctx.getState();\n    const medicalLicense = payload.license;\n    return this.medicalLicenseService.createMedicalLicense(medicalLicense).pipe(\n      tap((response) => {\n        const readOnlyResult = {\n          licenseId: response.licenseId,\n          userId: response.userId,\n          issuingStateId: response.issuingStateId,\n          issuingState: response.issuingState,\n          licenseNumber: response.licenseNumber,\n          licenseTypeId: response.licenseTypeId,\n          licenseType: response.licenseType,\n          issueDate: response.issueDate,\n          expireDate: response.expireDate,\n          reportingOrganization: response.reportingOrganization,\n        };\n        ctx.patchState({\n          medicalLiscenseList: [readOnlyResult, ...state.medicalLiscenseList],\n          selectedMedicalLicense: undefined,\n          medicalLicenseErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ medicalLicenseErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdatePSMedicalLicense)\n  updateMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { license: IMedicalLicenseModel }\n  ) {\n    const state = ctx.getState();\n    const medicalLicense = payload.license;\n    return this.medicalLicenseService\n      .updateMedicalLicense(medicalLicense.licenseId, medicalLicense)\n      .pipe(\n        tap((response) => {\n          const readOnlyResult = {\n            licenseId: response.licenseId,\n            userId: response.userId,\n            issuingStateId: response.issuingStateId,\n            issuingState: response.issuingState,\n            licenseNumber: response.licenseNumber,\n            licenseTypeId: response.licenseTypeId,\n            licenseType: response.licenseType,\n            issueDate: response.issueDate,\n            expireDate: response.expireDate,\n            reportingOrganization: response.reportingOrganization,\n          };\n          const updatedMedicalLicenseList = state.medicalLiscenseList.map(\n            (item) =>\n              item.licenseId === readOnlyResult.licenseId\n                ? readOnlyResult\n                : item\n          );\n          ctx.patchState({\n            medicalLiscenseList: updatedMedicalLicenseList,\n            selectedMedicalLicense: undefined,\n            medicalLicenseErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ medicalLicenseErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeletePSMedicalLicense)\n  deleteMedicalLicense(\n    ctx: StateContext<IProfessionalStanding>,\n    { id }: DeletePSMedicalLicense\n  ) {\n    const state = ctx.getState();\n    return this.medicalLicenseService.deleteMedicalLicense(id).pipe(\n      tap(() => {\n        const updatedMedicalLicenseList = state.medicalLiscenseList.filter(\n          (item) => item.licenseId !== id\n        );\n        ctx.patchState({\n          medicalLiscenseList: updatedMedicalLicenseList,\n          selectedMedicalLicense: undefined,\n          medicalLicenseErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ medicalLicenseErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetPSAppointmentsAndPrivilegesList)\n  getPSAppointmentsAndPrivilegesList(ctx: StateContext<IProfessionalStanding>) {\n    // const state = ctx.getState();\n    return this.userAppointmentService\n      .retrieveUserAppointmentReadOnly_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            allAppointments: response,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetPSAppointmentAndPrivilegeDetails)\n  getPSAppointmentAndPrivilegeDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { id: number }\n  ) {\n    // const state = ctx.getState();\n    const appointmentId = payload.id;\n    return this.userAppointmentService\n      .retrieveUserAppointment_GetById(appointmentId)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            selectedAppointment: response,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreatePSAppointmentAndPrivilege)\n  createPSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: IUserAppointmentModel }\n  ) {\n    const state = ctx.getState();\n    const appointment = payload.data;\n    return this.userAppointmentService.createUserAppointment(appointment).pipe(\n      tap((response) => {\n        const readOnlyResult = {\n          apptId: response.apptId,\n          userId: response.userId,\n          practiceTypeId: response.practiceTypeId,\n          practiceType: response.practiceType,\n          appointmentTypeId: response.appointmentTypeId,\n          appointmentType: response.appointmentType,\n          organizationTypeId: response.organizationTypeId,\n          authorizingOfficial: response.authorizingOfficial,\n          organizationType: response.organizationType,\n          organizationId: response.organizationId,\n          stateCode: response.stateCode,\n          other: response.other,\n          organizationName: response.organizationName,\n        };\n        ctx.patchState({\n          allAppointments: [readOnlyResult, ...state.allAppointments],\n          selectedAppointment: undefined,\n          appointmentErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ appointmentErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdatePSAppointmentAndPrivilege)\n  updatePSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: IUserAppointmentModel }\n  ) {\n    const state = ctx.getState();\n    const appointment = payload.data;\n    return this.userAppointmentService\n      .updateUserAppointment(appointment.apptId, appointment)\n      .pipe(\n        tap((response) => {\n          const readOnlyResult = {\n            apptId: response.apptId,\n            userId: response.userId,\n            practiceTypeId: response.practiceTypeId,\n            practiceType: response.practiceType,\n            appointmentTypeId: response.appointmentTypeId,\n            appointmentType: response.appointmentType,\n            organizationTypeId: response.organizationTypeId,\n            authorizingOfficial: response.authorizingOfficial,\n            organizationType: response.organizationType,\n            organizationId: response.organizationId,\n            stateCode: response.stateCode,\n            other: response.other,\n            organizationName: response.organizationName,\n          };\n          const updatedAppointmentsList = state.allAppointments.map((item) =>\n            item.apptId === readOnlyResult.apptId ? readOnlyResult : item\n          );\n          ctx.patchState({\n            allAppointments: updatedAppointmentsList,\n            selectedAppointment: undefined,\n            appointmentErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ appointmentErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(DeletePSAppointmentAndPrivilege)\n  deletePSAppointmentAndPrivilege(\n    ctx: StateContext<IProfessionalStanding>,\n    { id }: DeletePSAppointmentAndPrivilege\n  ) {\n    const state = ctx.getState();\n    return this.userAppointmentService.deleteUserAppointment(id).pipe(\n      tap(() => {\n        const updatedAppointmentsList = state.allAppointments.filter(\n          (item) => item.apptId !== id\n        );\n        ctx.patchState({\n          allAppointments: updatedAppointmentsList,\n          selectedAppointment: undefined,\n          appointmentErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ appointmentErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetUserProfessionalStandingDetails)\n  getUserProfessionalStandingDetails(ctx: StateContext<IProfessionalStanding>) {\n    //const state = ctx.getState();\n    return this.userProfessionalStandingService\n      .retrieveUserProfessionalStanding_GetByUserId()\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateUserProfessionalStandingDetails)\n  createUserProfessionalStandingDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { details: IUserProfessionalStandingModel }\n  ) {\n    // const state = ctx.getState();\n    const details = payload.details;\n    return this.userProfessionalStandingService\n      .createUserProfessionalStanding(details)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfessionalStandingDetails)\n  updateUserProfessionalStandingDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { details: IUserProfessionalStandingModel }\n  ) {\n    // const state = ctx.getState();\n    this.globalDialogService.showLoading();\n    const details = payload.details;\n    return this.userProfessionalStandingService\n      .updateUserProfessionalStanding(details)\n      .pipe(\n        tap((response) => {\n          ctx.patchState({\n            userProfessionalStandingDetails: response,\n            professionalStandingErrors: null,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Professional Standing Details Updated Successfully',\n            true\n          );\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ professionalStandingErrors: errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetProfessionalStandingSanctionsDetails)\n  getProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>\n  ) {\n    //const state = ctx.getState();\n    return this.sanctionsService.retrieveSanctions_GetByUserId().pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(CreateProfessionalStandingSanctionsDetails)\n  createProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: ISanctionsModel }\n  ) {\n    const sanctions = payload.data;\n    return this.sanctionsService.createSanctions(sanctions).pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateProfessionalStandingSanctionsDetails)\n  updateProfessionalStandingSanctionsDetails(\n    ctx: StateContext<IProfessionalStanding>,\n    payload: { data: ISanctionsModel }\n  ) {\n    // const state = ctx.getState();\n    const sanctions = payload.data;\n    return this.sanctionsService.updateSanctions(sanctions).pipe(\n      tap((response) => {\n        ctx.patchState({\n          sanctions: response,\n          sanctionsErrors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ sanctionsErrors: errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearProfessionalStandingErrors)\n  clearProfessionalStandingErrors(ctx: StateContext<IProfessionalStanding>) {\n    ctx.patchState({\n      medicalLicenseErrors: null,\n      appointmentErrors: null,\n      professionalStandingErrors: null,\n      sanctionsErrors: null,\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "medicalLicenseService",
            "type": "MedicalLicenseService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userProfessionalStandingService",
            "type": "UserProfessionalStandingService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userAppointmentService",
            "type": "UserAppointmentService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "sanctionsService",
            "type": "SanctionsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 73,
        "jsdoctags": [
          {
            "name": "medicalLicenseService",
            "type": "MedicalLicenseService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userProfessionalStandingService",
            "type": "UserProfessionalStandingService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userAppointmentService",
            "type": "UserAppointmentService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "sanctionsService",
            "type": "SanctionsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ProgramsService",
      "id": "injectable-ProgramsService-119640f99c958598f767cd2a061e394f611d2b84e3910817f0879a892dee186095df4ec9189fb89c56da7d3be50e593d54c6ac98c7f8b9ca18f6734ed907ad17",
      "file": "src/app/api/services/trainees/programs.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveProgramReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IProgramReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IProgramReadOnlyModel } from '../../models/trainees/program-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProgramsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveProgramReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IProgramReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_programs]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IProgramReadOnlyModel>(`api/trainees/programs?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "QualifyingExamService",
      "id": "injectable-QualifyingExamService-fd5f92de0405c27e0fd78f1a3d41a69f045df52b92731d939bc54bfe34819521764c3bcf63eff6e2828c54bb07156997a354d7a2abf799a1f0b370e519ec868e",
      "file": "src/app/api/services/examinations/qualifying-exam.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveQualifyingExamReadOnly_Get",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IQualifyingExamReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IQualifyingExamReadOnlyModel } from '../../models/examinations/qualifying-exam-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QualifyingExamService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveQualifyingExamReadOnly_Get(apiVersion = '1.0'): Observable<IQualifyingExamReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_current_qualifying_exam]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IQualifyingExamReadOnlyModel>(`api/qualifying-exam?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "RostersService",
      "id": "injectable-RostersService-323b8de36c94e90c90e5a27f07d0b79b6ee1f42c2fa18ad9e8aee02a2bbceca7c7c3991fead7029d3bd164a4e313a88243ba05b149384586c91141f1f777df0d",
      "file": "src/app/api/services/scoring/rosters.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveRosterReadOnly_GetByExaminationHeaderId",
          "args": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRosterReadOnlyModel[]>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examHeaderId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IRosterReadOnlyModel } from '../../models/scoring/roster-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RostersService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveRosterReadOnly_GetByExaminationHeaderId(examHeaderId: number,\r\n        apiVersion = '1.0'): Observable<IRosterReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examHeaderId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examination_scores]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRosterReadOnlyModel[]>(`api/rosters/roster-schedule?api-version=${apiVersion}&examHeaderId=${examHeaderId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "RotationService",
      "id": "injectable-RotationService-3c47f54217fa9631e8c45aed61c836e33a1e265456f64affd1d1173d70d0c13ccc261742dcfec5584a97280e674887a08b6311d6dbfd794d30d4d613c432d819",
      "file": "src/app/api/services/graduatemedicaleducation/rotation.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createRotation",
          "args": [
            {
              "name": "model",
              "type": "IRotationModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRotationModel>",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IRotationModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteRotation",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveRotation_GetById",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRotationModel>",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveRotationGapReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRotationGapReadOnlyModel[]>",
          "typeParameters": [],
          "line": 155,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveRotationReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRotationReadOnlyModel[]>",
          "typeParameters": [],
          "line": 180,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateRotation",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IRotationModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IRotationModel>",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IRotationModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IRotationModel } from '../../models/graduatemedicaleducation/rotation.model';\r\nimport { IRotationGapReadOnlyModel } from '../../models/graduatemedicaleducation/rotation-gap-read-only.model';\r\nimport { IRotationReadOnlyModel } from '../../models/graduatemedicaleducation/rotation-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RotationService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteRotation(id: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [delete_gmerotations_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IRotationModel>(`api/graduate-medical-education?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public retrieveRotation_GetById(id: number,\r\n        apiVersion = '1.0'): Observable<IRotationModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_gmerotations_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRotationModel>(`api/graduate-medical-education/by-id?api-version=${apiVersion}&id=${id}`);\r\n        }\r\n \r\n        public createRotation(model: IRotationModel, \r\n            apiVersion = '1.0'): Observable<IRotationModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * startDate:String\r\n            * endDate:String\r\n            * clinicalLevelId:Number\r\n            * clinicalActivityId:Number\r\n            * programName:String\r\n            * nonSurgicalActivity:String\r\n            * alternateInstitutionName:String\r\n            * isInternationalRotation:Boolean\r\n            * isEssential:Boolean\r\n            * isCredit:Boolean\r\n            * other:String\r\n            * fourMonthRotationExplain:String\r\n            * nonPrimaryExplain:String\r\n            * nonClinicalExplain:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_gmerotations]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IRotationModel>(`api/graduate-medical-education?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateRotation(id: number,\r\n        model: IRotationModel,\r\n        apiVersion = '1.0') : Observable<IRotationModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * id:Number\r\n            * startDate:String\r\n            * endDate:String\r\n            * clinicalLevelId:Number\r\n            * clinicalActivityId:Number\r\n            * programName:String\r\n            * nonSurgicalActivity:String\r\n            * alternateInstitutionName:String\r\n            * isInternationalRotation:Boolean\r\n            * isEssential:Boolean\r\n            * isCredit:Boolean\r\n            * other:String\r\n            * fourMonthRotationExplain:String\r\n            * nonPrimaryExplain:String\r\n            * nonClinicalExplain:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_gmerotations]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IRotationModel>(`api/graduate-medical-education?api-version=${apiVersion}&id=${id}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveRotationGapReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IRotationGapReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_gme_conflicts]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRotationGapReadOnlyModel[]>(`api/graduate-medical-education/gaps?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public retrieveRotationReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IRotationReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.TraineeClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_gmerotations_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IRotationReadOnlyModel[]>(`api/graduate-medical-education/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "SanctionsService",
      "id": "injectable-SanctionsService-f2da13b75db27146a879cb211c68dc762f6b8903cbd19df58928c3a3c507685f8ef0db253adae7ba4f1dee6105d26502af62099944d2f24e0003fad73b673f80",
      "file": "src/app/api/services/professionalstanding/sanctions.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createSanctions",
          "args": [
            {
              "name": "model",
              "type": "ISanctionsModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ISanctionsModel>",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "ISanctionsModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveSanctions_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ISanctionsModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateSanctions",
          "args": [
            {
              "name": "model",
              "type": "ISanctionsModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<ISanctionsModel>",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "ISanctionsModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ISanctionsModel } from '../../models/professionalstanding/sanctions.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SanctionsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveSanctions_GetByUserId(apiVersion = '1.0'): Observable<ISanctionsModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_sanctions_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<ISanctionsModel>(`api/professional-standing/sanctions/by-userid?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public createSanctions(model: ISanctionsModel, \r\n            apiVersion = '1.0'): Observable<ISanctionsModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * hadDrugAlchoholTreatment:Boolean\r\n            * hadHospitalPrivilegesDenied:Boolean\r\n            * hadLicenseRestricted:Boolean\r\n            * hadHospitalPrivilegesRestricted:Boolean\r\n            * hadFelonyConviction:Boolean\r\n            * hadCensure:Boolean\r\n            * explanation:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_user_sanctions]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<ISanctionsModel>(`api/professional-standing/sanctions?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateSanctions(model: ISanctionsModel,\r\n        apiVersion = '1.0') : Observable<ISanctionsModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * hadDrugAlchoholTreatment:Boolean\r\n            * hadHospitalPrivilegesDenied:Boolean\r\n            * hadLicenseRestricted:Boolean\r\n            * hadHospitalPrivilegesRestricted:Boolean\r\n            * hadFelonyConviction:Boolean\r\n            * hadCensure:Boolean\r\n            * explanation:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_user_sanctions_byuserid]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<ISanctionsModel>(`api/professional-standing/sanctions?api-version=${apiVersion}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "SessionService",
      "id": "injectable-SessionService-06952c5c58007f95d6d26a798e9f780d59cb5968cf7e3e2ab272d3fd3632f99ef52e2d15a720bf8ebb97d84beca1b5531e005754ea44d1ff145b4b7f70eafca0",
      "file": "src/app/api/services/scoring/ce/session.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveExamineeReadOnly_GetById",
          "args": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IExamineeReadOnlyModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "examScheduleId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IExamineeReadOnlyModel } from '../../../models/scoring/ce/examinee-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SessionService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveExamineeReadOnly_GetById(examScheduleId: number,\r\n        apiVersion = '1.0'): Observable<IExamineeReadOnlyModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.ExaminerClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * examScheduleId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_examinee_session_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IExamineeReadOnlyModel>(`api/scoring/ce/session/examinee?api-version=${apiVersion}&examScheduleId=${examScheduleId}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserAppointmentService",
      "id": "injectable-UserAppointmentService-524a61bd7671a0610de2b381183cb939b0725b6495143410ee772fadc34a9ec9c415bdb160800a627c285a891184599d2488877dda139552951582ccacf81fd5",
      "file": "src/app/api/services/professionalstanding/user-appointment.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createUserAppointment",
          "args": [
            {
              "name": "model",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserAppointmentModel>",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteUserAppointment",
          "args": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserAppointment_GetById",
          "args": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserAppointmentModel>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserAppointmentReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserAppointmentReadOnlyModel[]>",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserAppointment",
          "args": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserAppointmentModel>",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUserAppointmentModel } from '../../models/professionalstanding/user-appointment.model';\r\nimport { IUserAppointmentReadOnlyModel } from '../../models/professionalstanding/user-appointment-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAppointmentService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteUserAppointment(apptId: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apptId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [del_userhospappt]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IUserAppointmentModel>(`api/professional-standing/user-appointment?api-version=${apiVersion}&apptId=${apptId}`);\r\n        }\r\n \r\n        public retrieveUserAppointment_GetById(apptId: number,\r\n        apiVersion = '1.0'): Observable<IUserAppointmentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apptId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userhospappts_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserAppointmentModel>(`api/professional-standing/user-appointment/by-id?api-version=${apiVersion}&apptId=${apptId}`);\r\n        }\r\n \r\n        public createUserAppointment(model: IUserAppointmentModel, \r\n            apiVersion = '1.0'): Observable<IUserAppointmentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * practiceTypeId:Number\r\n            * appointmentTypeId:Number\r\n            * organizationTypeId:Number\r\n            * stateCode:String\r\n            * organizationId:Number\r\n            * authorizingOfficial:String\r\n            * other:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [insert_userhospappt]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IUserAppointmentModel>(`api/professional-standing/user-appointment?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateUserAppointment(apptId: number,\r\n        model: IUserAppointmentModel,\r\n        apiVersion = '1.0') : Observable<IUserAppointmentModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apptId:Number\r\n            * practiceTypeId:Number\r\n            * appointmentTypeId:Number\r\n            * organizationTypeId:Number\r\n            * stateCode:String\r\n            * organizationId:Number\r\n            * authorizingOfficial:String\r\n            * other:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_userhospappt]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IUserAppointmentModel>(`api/professional-standing/user-appointment?api-version=${apiVersion}&apptId=${apptId}`,\r\n            model);\r\n        }\r\n \r\n        public retrieveUserAppointmentReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IUserAppointmentReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_userhospappts_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserAppointmentReadOnlyModel[]>(`api/professional-standing/user-appointment/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserCertificateService",
      "id": "injectable-UserCertificateService-b411fa7f0a6e1539337e38171cdf54ed2d096b3d05ef0d0f479b1756363ef4d437552e20227dac770086a2ffe2e042a16fe289618bbe9cf6954025ba82c44491",
      "file": "src/app/api/services/medicaltraining/user-certificate.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createUserCertificate",
          "args": [
            {
              "name": "model",
              "type": "FormData",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserCertificateModel>",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "FormData",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteUserCertificate",
          "args": [
            {
              "name": "certificateId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "certificateId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserCertificate_GetById",
          "args": [
            {
              "name": "certificateId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserCertificateModel>",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "certificateId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserCertificateReadOnly_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserCertificateReadOnlyModel[]>",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUserCertificateModel } from '../../models/medicaltraining/user-certificate.model';\r\nimport { IUserCertificateReadOnlyModel } from '../../models/medicaltraining/user-certificate-read-only.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserCertificateService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public deleteUserCertificate(certificateId: number,\r\n        apiVersion = '1.0'): Observable<any> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * certificateId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [del_usercertificate]\r\n            */\r\n            \r\n            \r\n            return this.apiService.delete<IUserCertificateModel>(`api/user-certificates?api-version=${apiVersion}&certificateId=${certificateId}`);\r\n        }\r\n \r\n        public retrieveUserCertificate_GetById(certificateId: number,\r\n        apiVersion = '1.0'): Observable<IUserCertificateModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * certificateId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_usercertificates_byid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserCertificateModel>(`api/user-certificates/by-id?api-version=${apiVersion}&certificateId=${certificateId}`);\r\n        }\r\n \r\n        public createUserCertificate(model: FormData, \r\n            apiVersion = '1.0'): Observable<IUserCertificateModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * documentId:Number\r\n            * certificateTypeId:Number\r\n            * issueDate:String\r\n            * certificateNumber:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [insert_usercertificates]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IUserCertificateModel>(`api/user-certificates?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public retrieveUserCertificateReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IUserCertificateReadOnlyModel[]> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_usercertificates_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserCertificateReadOnlyModel[]>(`api/user-certificates/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserCredentialsService",
      "id": "injectable-UserCredentialsService-ce746653e06ff8b6e95b06f5ebce97369a3db136d01651bd3b53b82048f7d53950412334fa8ac43577fc6b8cd7603110c81eab1fceb0a5bc66cf954fc891cbc9",
      "file": "src/app/api/services/users/user-credentials.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "retrieveUserCredential_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserCredentialModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserCredential",
          "args": [
            {
              "name": "model",
              "type": "IUserCredentialModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserCredentialModel>",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IUserCredentialModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUserCredentialModel } from '../../models/users/user-credential.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserCredentialsService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveUserCredential_GetByUserId(apiVersion = '1.0'): Observable<IUserCredentialModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: EmailAddress\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Password\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_account]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserCredentialModel>(`api/users/credentials/by-userid?api-version=${apiVersion}`);\r\n        }\r\n\r\n        public updateUserCredential(model: IUserCredentialModel,\r\n        apiVersion = '1.0') : Observable<IUserCredentialModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n\r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: EmailAddress\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Password\r\n            *   Rule Name: RegEx\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n\r\n            /**\r\n            * Required Parameters\r\n            * emailAddress:String\r\n            * password:String\r\n            * apiVersion\r\n            */\r\n\r\n            /**\r\n            * Calls Sp(s)\r\n            * [upd_user_account]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IUserCredentialModel>(`api/users/credentials?api-version=${apiVersion}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserProfessionalStandingService",
      "id": "injectable-UserProfessionalStandingService-165b35a3efef1393e042834c44d34e8f5ee48a79c60d082a8aebf5d086ecae6e3e39ddf52afa70c0371bc367de0c392249d1ef5db67c5e8ec23228092e85ab09",
      "file": "src/app/api/services/professionalstanding/user-professional-standing.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createUserProfessionalStanding",
          "args": [
            {
              "name": "model",
              "type": "IUserProfessionalStandingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfessionalStandingModel>",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IUserProfessionalStandingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserProfessionalStanding_GetByUserId",
          "args": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfessionalStandingModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserProfessionalStanding",
          "args": [
            {
              "name": "model",
              "type": "IUserProfessionalStandingModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfessionalStandingModel>",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IUserProfessionalStandingModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUserProfessionalStandingModel } from '../../models/professionalstanding/user-professional-standing.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserProfessionalStandingService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveUserProfessionalStanding_GetByUserId(apiVersion = '1.0'): Observable<IUserProfessionalStandingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_professional_standing_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserProfessionalStandingModel>(`api/professional-standing/by-userid?api-version=${apiVersion}`);\r\n        }\r\n \r\n        public createUserProfessionalStanding(model: IUserProfessionalStandingModel, \r\n            apiVersion = '1.0'): Observable<IUserProfessionalStandingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * primaryPracticeId:Number\r\n            * organizationTypeId:Number\r\n            * explanationOfNonPrivileges:String\r\n            * explanationOfNonClinicalActivities:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [ins_user_sanctions]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IUserProfessionalStandingModel>(`api/professional-standing?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateUserProfessionalStanding(model: IUserProfessionalStandingModel,\r\n        apiVersion = '1.0') : Observable<IUserProfessionalStandingModel> {\r\n            /**\r\n            * Claims\r\n            * SurgeonPortalClaims.SurgeonClaim\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * No business rules exist for this model\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * primaryPracticeId:Number\r\n            * organizationTypeId:Number\r\n            * explanationOfNonPrivileges:String\r\n            * explanationOfNonClinicalActivities:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_user_professional_standing_byuserid]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IUserProfessionalStandingModel>(`api/professional-standing?api-version=${apiVersion}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserProfilesService",
      "id": "injectable-UserProfilesService-077a8c6e734b1646aa895125912ac99c6870026109373ca203851cb94d16a893efba2689ec015b5134080271a61d264dcbd6105121f47630033ee77b678eaa4d",
      "file": "src/app/api/services/users/user-profiles.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createUserProfile",
          "args": [
            {
              "name": "model",
              "type": "IUserProfileModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfileModel>",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "model",
              "type": "IUserProfileModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retrieveUserProfile_GetByUserId",
          "args": [
            {
              "name": "userId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfileModel>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "userId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserProfile",
          "args": [
            {
              "name": "userId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "model",
              "type": "IUserProfileModel",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IUserProfileModel>",
          "typeParameters": [],
          "line": 208,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "userId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "model",
              "type": "IUserProfileModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUserProfileModel } from '../../models/users/user-profile.model';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserProfilesService {\r\n\r\n    constructor(private apiService: ApiService) {}\r\n\r\n \r\n        public retrieveUserProfile_GetByUserId(userId: number,\r\n        apiVersion = '1.0'): Observable<IUserProfileModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: FirstName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: LastName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DisplayName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: OfficePhoneNumber\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCountry\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: CountryCitizenship\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GenderId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Race\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Ethnicity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: FirstLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BestLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ReceiveComms\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserConfirmed\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Street1\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: City\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ZipCode\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Country\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * userId:Number\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [get_user_profile_byuserid]\r\n            */\r\n            \r\n            \r\n            return this.apiService.get<IUserProfileModel>(`api/users/profiles/by-userId?api-version=${apiVersion}&userId=${userId}`);\r\n        }\r\n \r\n        public createUserProfile(model: IUserProfileModel, \r\n            apiVersion = '1.0'): Observable<IUserProfileModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: FirstName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: LastName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DisplayName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: OfficePhoneNumber\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCountry\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: CountryCitizenship\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GenderId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Race\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Ethnicity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: FirstLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BestLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ReceiveComms\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserConfirmed\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Street1\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: City\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ZipCode\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Country\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * firstName:String\r\n            * middleName:String\r\n            * lastName:String\r\n            * suffix:String\r\n            * displayName:String\r\n            * officePhoneNumber:String\r\n            * mobilePhoneNumber:String\r\n            * birthCity:String\r\n            * birthState:String\r\n            * birthCountry:String\r\n            * countryCitizenship:String\r\n            * absId:String\r\n            * nPI:String\r\n            * genderId:Number\r\n            * birthDate:String\r\n            * race:String\r\n            * ethnicity:String\r\n            * firstLanguageId:Number\r\n            * bestLanguageId:Number\r\n            * receiveComms:Boolean\r\n            * userConfirmed:Boolean\r\n            * userConfirmedDate:String\r\n            * street1:String\r\n            * street2:String\r\n            * city:String\r\n            * state:String\r\n            * zipCode:String\r\n            * country:String\r\n            * createdAtUtc:String\r\n            * lastUpdatedAtUtc:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [insert_user_profile]\r\n            */\r\n            \r\n            \r\n            return this.apiService.post<IUserProfileModel>(`api/users/profiles?api-version=${apiVersion}`, \r\n                model);\r\n        }\r\n \r\n        public updateUserProfile(userId: number,\r\n        model: IUserProfileModel,\r\n        apiVersion = '1.0') : Observable<IUserProfileModel> {\r\n            /**\r\n            * Claims\r\n            */\r\n            \r\n            /**\r\n            * Business Rules\r\n            * Business rules for property: FirstName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: LastName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: DisplayName\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: OfficePhoneNumber\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthCountry\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: CountryCitizenship\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: GenderId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BirthDate\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Race\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Ethnicity\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: FirstLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: BestLanguageId\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ReceiveComms\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: UserConfirmed\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Street1\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: City\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: ZipCode\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            * Business rules for property: Country\r\n            *   Rule Name: Required\r\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\r\n            */\r\n            \r\n            /**\r\n            * Required Parameters\r\n            * userProfileId:Number\r\n            * firstName:String\r\n            * middleName:String\r\n            * lastName:String\r\n            * suffix:String\r\n            * displayName:String\r\n            * officePhoneNumber:String\r\n            * mobilePhoneNumber:String\r\n            * birthCity:String\r\n            * birthState:String\r\n            * birthCountry:String\r\n            * countryCitizenship:String\r\n            * absId:String\r\n            * nPI:String\r\n            * genderId:Number\r\n            * birthDate:String\r\n            * race:String\r\n            * ethnicity:String\r\n            * firstLanguageId:Number\r\n            * bestLanguageId:Number\r\n            * receiveComms:Boolean\r\n            * userConfirmed:Boolean\r\n            * userConfirmedDate:String\r\n            * street1:String\r\n            * street2:String\r\n            * city:String\r\n            * state:String\r\n            * zipCode:String\r\n            * country:String\r\n            * createdAtUtc:String\r\n            * lastUpdatedAtUtc:String\r\n            * apiVersion\r\n            */\r\n            \r\n            /**\r\n            * Calls Sp(s)\r\n            * [update_user_profile]\r\n            */\r\n            \r\n            \r\n            \r\n            return this.apiService.put<IUserProfileModel>(`api/users/profiles?api-version=${apiVersion}&userId=${userId}`,\r\n            model);\r\n        }\r\n\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UserProfileState",
      "id": "injectable-UserProfileState-938171ece0a5b1e5d2716af499c2a4ea6ad96b23bae745c2ed8eb85f133df4c6818765bd5cd5cec52676ddbb87c7d7764393408826d77c45c36569ae2dd2b044",
      "file": "src/app/state/user-profile/user-profile.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearUserProfileErrors",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 213,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ClearUserProfileErrors"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getUserProfile",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "GetUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "GetUserProfile"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "GetUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateUserProfile",
          "args": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "UpdateUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 158,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "UpdateUserProfile"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "ctx",
              "type": "StateContext<IUserProfile>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "UpdateUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IUserProfileModel } from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { UserProfilesService } from '../../api';\nimport {\n  ClearUserProfileErrors,\n  GetUserProfile,\n  UpdateUserProfile,\n} from './user-profile.actions';\nimport { GetPicklists, GetStateList } from '../picklists';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nexport interface IUserProfile {\n  userProfileId: number;\n  userId: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  suffix: string;\n  displayName: string;\n  officePhoneNumber: string;\n  mobilePhoneNumber: string;\n  birthCity: string;\n  birthState: string;\n  birthCountry: string;\n  countryCitizenship: string;\n  absId: string;\n  certificationStatus: string;\n  npi: string;\n  genderId: string; // Need to cast as number on saves\n  birthDate: string;\n  race: string;\n  ethnicity: string;\n  firstLanguageId: string; // Need to cast as number on saves\n  bestLanguageId: string; // Need to cast as number on saves\n  receiveComms: boolean;\n  userConfirmed: boolean;\n  userConfirmedDate: string;\n  createdByUserId: number;\n  createdAtUtc: string;\n  lastUpdatedAtUtc: string;\n  lastLoginDateUtc: string;\n  lastUpdatedByUserId: number;\n  street1: string;\n  street2: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  emailAddress: string;\n  fullName: string;\n  profilePicture: string;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const USER_PROFILE_STATE_TOKEN = new StateToken<IUserProfile>(\n  'userProfile'\n);\n\n@State<IUserProfile>({\n  name: USER_PROFILE_STATE_TOKEN,\n  defaults: {\n    userProfileId: 0,\n    userId: 0,\n    firstName: '',\n    middleName: '',\n    lastName: '',\n    suffix: '',\n    displayName: '',\n    officePhoneNumber: '',\n    mobilePhoneNumber: '',\n    birthCity: '',\n    birthState: '',\n    birthCountry: '',\n    countryCitizenship: '',\n    absId: '',\n    certificationStatus: '',\n    npi: '',\n    genderId: '',\n    birthDate: '',\n    race: '',\n    ethnicity: '',\n    firstLanguageId: '',\n    bestLanguageId: '',\n    receiveComms: false,\n    userConfirmed: false,\n    userConfirmedDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastLoginDateUtc: '',\n    lastUpdatedByUserId: 0,\n    street1: '',\n    street2: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: '',\n    emailAddress: '',\n    fullName: '',\n    profilePicture: '',\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class UserProfileState {\n  constructor(\n    private store: Store,\n    private userProfilesService: UserProfilesService,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  @Action(GetUserProfile)\n  getUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { loginUser, claims }: GetUserProfile\n  ) {\n    this.globalDialogService.showLoading();\n    const state = ctx.getState();\n    const userId = loginUser?.userId;\n    return this.userProfilesService\n      .retrieveUserProfile_GetByUserId(userId)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const res = result as unknown as IUserProfile;\n          res.firstLanguageId = res.firstLanguageId?.toString();\n          res.bestLanguageId = res.bestLanguageId?.toString();\n          res.genderId = res.genderId?.toString();\n          ctx.setState({\n            ...state,\n            ...loginUser,\n            ...res,\n            userConfirmed: false,\n            claims,\n            profilePicture:\n              'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n            errors: null,\n          });\n          this.store.dispatch(new GetStateList(ctx.getState().birthCountry));\n          this.store.dispatch(new GetPicklists(ctx.getState().country));\n          this.globalDialogService.closeOpenDialog();\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfile)\n  updateUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { payload }: UpdateUserProfile\n  ) {\n    this.globalDialogService.showLoading();\n    const model = {} as unknown as IUserProfileModel;\n\n    ctx.setState({\n      ...ctx.getState(),\n      ...payload,\n    });\n\n    Object.assign(model, ctx.getState());\n    const userProfile: IUserProfileModel =\n      model as unknown as IUserProfileModel;\n    userProfile.userConfirmedDate = new Date().toISOString();\n    userProfile.userConfirmed = true;\n    userProfile.genderId = +userProfile.genderId;\n    userProfile.firstLanguageId = +userProfile.firstLanguageId;\n    userProfile.bestLanguageId = +userProfile.bestLanguageId;\n    userProfile.lastUpdatedByUserId = ctx.getState().userId;\n\n    this.globalDialogService.showLoading();\n\n    return this.userProfilesService\n      .updateUserProfile(ctx.getState().userId, userProfile)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const userProfile = result as unknown as IUserProfile;\n          userProfile.genderId = userProfile.genderId.toString();\n          userProfile.firstLanguageId = userProfile.firstLanguageId.toString();\n          userProfile.bestLanguageId = userProfile.bestLanguageId.toString();\n          ctx.patchState({\n            ...userProfile,\n            errors: null,\n          });\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Saved successfully',\n            true\n          );\n        }),\n        catchError((error) => {\n          // const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors: error.error.errors,\n          });\n          this.globalDialogService.closeOpenDialog();\n          return of(error);\n        })\n      );\n  }\n\n  @Action(ClearUserProfileErrors)\n  clearUserProfileErrors(ctx: StateContext<IUserProfile>) {\n    ctx.patchState({\n      ...ctx.getState(),\n      errors: null,\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userProfilesService",
            "type": "UserProfilesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 112,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userProfilesService",
            "type": "UserProfilesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "UsersApiService",
      "id": "injectable-UsersApiService-4f185fa1f217aa8a2003585e3b260343a942429ae13b8590039fe97c43b10944946a26806304c0279d4a7c4e1e510d00555e7fe47545d7b0c5c5bf3993219829",
      "file": "src/app/api/services/users/users.service.ts",
      "properties": [
        {
          "name": "baseEndpoint",
          "defaultValue": "'users'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [121, 146]
        }
      ],
      "methods": [
        {
          "name": "retrieveAppUserReadOnly_GetByCredentials",
          "args": [
            {
              "name": "emailAddress",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "password",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'"
            }
          ],
          "optional": false,
          "returnType": "Observable<IAppUserReadOnlyModel>",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "emailAddress",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "password",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "apiVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'1.0'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -</p>\n<p>All client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file</p>\n<p>############################################################################</p>\n",
      "rawdescription": "\n\n#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -\n\nAll client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file\n\n############################################################################\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiService } from 'ytg-angular';\r\n\r\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\r\n\r\n/**\r\n#############################################################################\r\nWARNING GENERATED CODE DO NOT MODIFY -\r\n\r\nAll client side API services are generated by the server side API\r\ndeveloper when the API is created. Please do not make changes to this file\r\n\r\n############################################################################\r\n**/\r\n\r\n@Injectable()\r\nexport class UsersApiService {\r\n  private readonly baseEndpoint = 'users';\r\n\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  public retrieveAppUserReadOnly_GetByCredentials(\r\n    emailAddress: string,\r\n    password: string,\r\n    apiVersion = '1.0'\r\n  ): Observable<IAppUserReadOnlyModel> {\r\n    /**\r\n     * Claims\r\n     */\r\n\r\n    /**\r\n     * Business Rules\r\n     * No business rules exist for this model\r\n     */\r\n\r\n    /**\r\n     * Required Parameters\r\n     * emailAddress:String\r\n     * password:String\r\n     * apiVersion:String\r\n     */\r\n\r\n    /**\r\n     * Calls Sp(s)\r\n     * [get_userlogin]\r\n     */\r\n\r\n    return this.apiService.post<IAppUserReadOnlyModel>(\r\n      `${this.baseEndpoint}/authenticate`,\r\n      {\r\n        emailAddress,\r\n        password,\r\n        apiVersion,\r\n      }\r\n    );\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "WorkInProgressGuard",
      "id": "injectable-WorkInProgressGuard-68741a23c5604a3751138c9b9828b61c572ca3936b611331c71e27d562b2a6cba3fb5b8ce369b4d884885d981e7aa9c5ac021785874eef994a4bbc63a6328051",
      "file": "src/app/state/application/workInProgress.guard.ts",
      "properties": [
        {
          "name": "examInProgress$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examInProgress"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "hasUnsavedChanges$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.hasUnsavedChanges"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methods": [
        {
          "name": "canDeactivate",
          "args": [],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\n",
          "description": "",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 1076,
                "end": 1083,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { ApplicationSelectors } from './application.selectors';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { SetExamInProgress, SetUnsavedChanges } from './application.actions';\n\ninterface CanDeactivateFn {\n  canDeactivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkInProgressGuard implements CanDeactivateFn {\n  @Select(ApplicationSelectors.slices.hasUnsavedChanges)\n  hasUnsavedChanges$!: Observable<boolean>;\n\n  @Select(ApplicationSelectors.slices.examInProgress)\n  examInProgress$!: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {}\n\n  /**\n   *\n   * @param route\n   * @returns\n   */\n  canDeactivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    console.log('canDeactivate');\n    const hasUnsavedChanges = this.store.selectSnapshot(\n      (state) => state.application.hasUnsavedChanges\n    );\n    if (hasUnsavedChanges) {\n      return this.globalDialogService\n        ?.showConfirmation('Unsaved Changes', 'Do you want to navigate away')\n        .then((result) => {\n          if (result) {\n            this.store.dispatch(new SetUnsavedChanges(false));\n          }\n          return result;\n        });\n    } else {\n      const examInProgress = this.store.selectSnapshot(\n        (state) => state.application.examInProgress\n      );\n      if (examInProgress) {\n        return this.globalDialogService\n          ?.showConfirmation(\n            'Exam in Progress',\n            'Do you want to navigate away from the exam? <br/> Navigating away will result in an incomplete exam.'\n          )\n          .then((result) => {\n            if (result) {\n              this.store.dispatch(new SetExamInProgress(false));\n            }\n            return result;\n          });\n      } else {\n        return true;\n      }\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "guards": [
    {
      "name": "AuthGuard",
      "id": "injectable-AuthGuard-b373bc8321194d4076eea0454f4690f6507118a5cddf97065a24941bfb75073c223a95413b260bc47ca7e4e3366090ef19b92bb1e22aa88fe4a911daf48b214a",
      "file": "src/app/state/auth/auth.guard.ts",
      "properties": [
        {
          "name": "$claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string[]> | undefined",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "AuthSelectors.claims"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "$isAuthenticated",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.isAuthenticated"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "$isPasswordReset",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.isPasswordReset"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methods": [
        {
          "name": "canActivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkClaims",
          "args": [
            {
              "name": "userClaims",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "requiredClaims",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "userClaims",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "requiredClaims",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "test",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { AuthSelectors } from './auth.selectors';\nimport { UntilDestroy } from '@ngneat/until-destroy';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  @Select(AuthSelectors.slices.isAuthenticated) $isAuthenticated:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.slices.isPasswordReset) $isPasswordReset:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.claims) $claims: Observable<string[]> | undefined;\n  constructor(private store: Store, private router: Router) {}\n\n  // TODO: Explore using an async way to validate routes\n  async test() {\n    return 1;\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const requiredClaims = route.data['requiredClaims'] as string[];\n    const isAuthenticated = this.store.selectSnapshot(\n      AuthSelectors.slices.isAuthenticated\n    );\n    const userClaims = this.store.selectSnapshot(AuthSelectors.claims) ?? [];\n\n    // first check if the user is authenticated\n    if (isAuthenticated) {\n      // if there are claims required for the route check them\n      if (requiredClaims && requiredClaims.length > 0) {\n        if (this.checkClaims(userClaims, requiredClaims)) {\n          // if the user has the required claims, allow the route\n          return true;\n        } else {\n          // if the user does not have the required claims, redirect to unauthorized\n          this.router.navigate(['/unauthorized']);\n          return false;\n        }\n      } else {\n        // if no claims are required, allow the route\n        return true;\n      }\n    } else {\n      // if not authenticated, redirect to login\n      this.router.navigate(['/login'], {\n        queryParams: { returnUrl: state.url },\n      });\n      return false;\n    }\n  }\n\n  private checkClaims(userClaims: string[], requiredClaims: string[]) {\n    return requiredClaims.every((claim) => userClaims.includes(claim));\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    },
    {
      "name": "FeatureToggleGuard",
      "id": "injectable-FeatureToggleGuard-d0c3a5e0b5fa5adecb1df2c81f32365e32b99ddcec4b75bf2f6140f0ceccb7a71b29a3a2da56ec9640f9f26aa7cbbead2cc1aefd616588dba925e870e25d1010",
      "file": "src/app/state/application/featureToggle.guard.ts",
      "properties": [
        {
          "name": "featureFlags$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFeatureFlags>",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.featureFlags"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methods": [
        {
          "name": "canActivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable | Promise | boolean | UrlTree",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\n",
          "description": "",
          "jsdoctags": [
            {
              "name": {
                "pos": 770,
                "end": 775,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "route"
              },
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 764,
                "end": 769,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 782,
                "end": 789,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "checkFeatures",
          "args": [
            {
              "name": "enabledFeatures",
              "type": "IFeatureFlags",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "requiredFeatures",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\n",
          "description": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 1971,
                "end": 1986,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "enabledFeatures"
              },
              "type": "IFeatureFlags",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1965,
                "end": 1970,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 1999,
                "end": 2015,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "requiredFeatures"
              },
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1993,
                "end": 1998,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 2022,
                "end": 2029,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable, map, skipWhile, take } from 'rxjs';\nimport { Select } from '@ngxs/store';\nimport { ApplicationSelectors } from './application.selectors';\nimport { IFeatureFlags } from './application.state';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureToggleGuard implements CanActivate {\n  @Select(ApplicationSelectors.slices.featureFlags)\n  featureFlags$!: Observable<IFeatureFlags>;\n\n  constructor(private router: Router) {}\n\n  /**\n   *\n   * @param route\n   * @returns\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const requiredFeatures = route.data['requiredFeatures'] as string[];\n    return this.featureFlags$.pipe(\n      /**\n       * Skip while the feature flags are not loaded\n       */\n      skipWhile((enabledFeatures) => !enabledFeatures),\n      /**\n       * Take one emission and complete the observable\n       */\n      take(1),\n      /**\n       * Map the enabled features to a boolean\n       * If the required features are not empty, check if all required features are enabled\n       * If there are no required features or if all required features are enabled, return true\n       * else navigate to page not found\n       */\n      map((enabledFeatures) => {\n        if (requiredFeatures && requiredFeatures.length > 0) {\n          if (this.checkFeatures(enabledFeatures, requiredFeatures)) {\n            return true;\n          } else {\n            this.router.navigate(['/page-not-found']);\n            return false;\n          }\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n\n  /**\n   *\n   * @param enabledFeatures\n   * @param requiredFeatures\n   * @returns\n   */\n  private checkFeatures(\n    enabledFeatures: IFeatureFlags,\n    requiredFeatures: string[]\n  ) {\n    return requiredFeatures.every(\n      (feature) => enabledFeatures[feature as keyof IFeatureFlags]\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    }
  ],
  "interceptors": [
    {
      "name": "AuthInterceptor",
      "id": "injectable-AuthInterceptor-0ce534a142b1d3cfa84fd1868b7cfdbb323b12cc0c792538f82500dbb4b27582f7b2e50d38acfb3bb3c27b3655a611f81231b1ea7db551963dc6987b2984bfb5",
      "file": "src/app/shared/common/interceptors/auth.interceptor.ts",
      "properties": [
        {
          "name": "isRefreshing",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121]
        },
        {
          "name": "refreshTokenSubject",
          "defaultValue": "new BehaviorSubject<any>(\n    null\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "addToken",
          "args": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "token",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "HttpRequest<any>",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "token",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAuthorizationToken",
          "args": [],
          "optional": false,
          "returnType": "string | undefined",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleAuthError",
          "args": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<HttpEvent<any>>",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "intercept",
          "args": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AuthService } from '../../../api';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport { Store } from '@ngxs/store';\nimport { Logout, RefreshToken } from '../../../state';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private isRefreshing = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  constructor(private auth: AuthService, private store: Store) {}\n\n  getAuthorizationToken(): string | undefined {\n    //const accessToken = sessionStorage.getItem('access_token');\n    const accessToken = this.store.selectSnapshot(\n      (state) => state.auth.access_token\n    );\n    if (accessToken) {\n      return `Bearer ${accessToken}`;\n    }\n    sessionStorage.clear();\n    return;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    // Get the auth token from the service.\n    const authToken = this.getAuthorizationToken();\n\n    // Clone the request and replace the original headers with\n    // cloned headers, updated with the authorization.\n    if (!authToken) {\n      return next.handle(req).pipe(\n        tap(() => {\n          console.info('AuthInterceptor: No auth token found');\n          this.handleAuthError(req, next);\n        })\n      );\n    }\n    const authReq = this.addToken(req, authToken);\n\n    // send cloned request with header to the next handler.\n    return next.handle(authReq).pipe(\n      catchError((err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401 || err.status === 403) {\n            this.handleAuthError(req, next);\n          }\n        }\n        throw err;\n      })\n    );\n  }\n\n  private addToken(req: HttpRequest<any>, token: string): HttpRequest<any> {\n    return req.clone({\n      headers: req.headers.set('Authorization', token),\n    });\n  }\n\n  private handleAuthError(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      return this.store.dispatch(new RefreshToken()).pipe(\n        switchMap((token: any) => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(token.access_token);\n          return next.handle(this.addToken(req, token.access_token));\n        }),\n        catchError((err) => {\n          this.store.dispatch(new Logout());\n          throw err;\n        })\n      );\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter((token) => token != null),\n        take(1),\n        switchMap((token) => {\n          return next.handle(this.addToken(req, token));\n        })\n      );\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "auth",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "auth",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "interceptor"
    },
    {
      "name": "ErrorInterceptor",
      "id": "injectable-ErrorInterceptor-a7c67cea37f22d58b4709a6f46f22110680bcb7a1b274de8751fe99116127219cf95ee497e8262fd2f6523e764279d16a3f35e3eed33911eeaa8bbceda733cbb",
      "file": "src/app/shared/common/interceptors/error.interceptor.ts",
      "properties": [],
      "methods": [
        {
          "name": "intercept",
          "args": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "req",
              "type": "HttpRequest<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "next",
              "type": "HttpHandler",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  HttpErrorResponse,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\n\nimport { GlobalToastService } from '../../services/global-toast.service';\n\nimport { Store } from '@ngxs/store';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private store: Store,\n    private globalToastService: GlobalToastService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const errorReq = req.clone();\n\n    // send cloned request with header to the next handler.\n    return next.handle(errorReq).pipe(\n      catchError((err) => {\n        if (err instanceof HttpErrorResponse) {\n          // do not handle 401/404 errors here, they will be handled in the auth interceptor or the app respectively\n          // carve out specifically for the Login Failed error as it is shaped differently from other errors\n          if (\n            (!err.error ||\n              (typeof err.error === 'string' &&\n                err.error !== 'Login failed')) &&\n            err.status !== 401 &&\n            err.status !== 403 &&\n            err.status !== 404\n          ) {\n            // TODO: [Joe] - add error specific messages here\n\n            const message = `${err.status} Error: ${err.statusText}`;\n            // if (err.error) {\n            //   message = err.error;\n            // }\n            this.globalToastService.showError(message);\n          }\n          //throw err;\n          // log error to console for debugging\n          console.log(err);\n          console.log(`Error Code: ${err.status}\\nMessage: ${err.message}`);\n        }\n\n        // always allow the error to continue to propagate\n        throw err;\n      })\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalToastService",
            "type": "GlobalToastService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalToastService",
            "type": "GlobalToastService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "interceptor"
    }
  ],
  "classes": [
    {
      "name": "AbsSelect",
      "id": "class-AbsSelect-b7afd8935c3e7465313538a562370fddc8ceabf22983a24c48b051bc0dfcb8c838050912faa141f5b557956d40fed5cdfcbd8cc92dab46cafa2ad4d3b3edcaad",
      "file": "src/web-components/form-elements/abs-select/abs-select.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { User } from '../../user';\n\n@customElement('abs-select')\nexport class AbsSelect extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `;\n\n  @property({ type: Object }) user?: User = {\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  };\n\n  // override createRenderRoot() {\n  //   return this;\n  // }\n\n  override render() {\n    // if (this.user === undefined) {\n    //   return '';\n    // }\n\n    // return html`\n    //   <div class=\"card\">\n    //     <img\n    //       width=\"160px\"\n    //       src=${this.user.avatar\n    //         ? this.user.avatar\n    //         : 'assets/images/avatar.png'}\n    //     />\n    //     <div class=\"card-content\">\n    //       <h4>${this.user.fullName}</h4>\n    //       <p>${this.user.role}</p>\n    //       <sl-button @click=${this.handleEdit}>Edit</sl-button>\n    //     </div>\n    //   </div>\n    // `;\n    return html` <sl-select><slot></slot></sl-select> `;\n  }\n\n  private handleEdit() {\n    this.dispatchEvent(\n      new CustomEvent<User>('edit', {\n        detail: this.user,\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "styles",
          "defaultValue": "css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124, 161]
        },
        {
          "name": "user",
          "defaultValue": "{\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "property",
              "stringifiedArguments": "{type: Object}"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "rawdescription": "\n",
      "methods": [
        {
          "name": "handleEdit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "render",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [161]
        }
      ],
      "indexSignatures": [],
      "extends": "LitElement"
    },
    {
      "name": "AbsSelectNon",
      "id": "class-AbsSelectNon-a1663789b5111edf87f26d13a4242ab878d69a87556898f8d65357d0dd57c8bc79a3361bcce2fccfe2f5b1f058cc5030deaed50992becc4974cb92bcc4f38982",
      "file": "src/web-components/form-elements/abs-select/abs-select-non.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class AbsSelectNon extends HTMLElement {\n  constructor() {\n    super();\n    // this.shadow = this.attachShadow({ mode: 'open' });\n    this.attachShadow({ mode: 'open' });\n    if (this.shadowRoot) {\n      this.shadowRoot.innerHTML = `<div>TEST</div><sl-select><slot></slot></sl-select>`;\n    }\n  }\n}\n\ncustomElements.define('abs-select-non', AbsSelectNon);\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 1
      },
      "properties": [],
      "methods": [],
      "indexSignatures": [],
      "extends": "HTMLElement",
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ApplicationSelectors",
      "id": "class-ApplicationSelectors-af987781a721836096ddb7ce943a17caff6819ce9f3dc0772d7df2625b7cbfcfe7628901f3ffa77a1bf8dc41beb43be90486acb202000aa94b3d9dc7042f5228",
      "file": "src/app/state/application/application.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors } from '@ngxs/store';\nimport { ApplicationState, IApplicationState } from './application.state';\n\nexport class ApplicationSelectors {\n  static slices = createPropertySelectors<IApplicationState>(ApplicationState);\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IApplicationState>(ApplicationState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AuthSelectors",
      "id": "class-AuthSelectors-6cfed4fc5f6a4f53808b5afac5217a9ec690ccf05003e2b8a6417ce069afb023eab36253794496d1b335dae15210ff58246eaaffecaa43abe5d871296d556fe5",
      "file": "src/app/state/auth/auth.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport { IAppUserReadOnlyModel } from '../../api';\nimport { AuthState } from './auth.state';\nimport { IAuthState, IError } from './auth.interfaces';\n\nexport class AuthSelectors {\n  static slices = createPropertySelectors<IAuthState>(AuthState);\n  @Selector([AuthState])\n  static accessToken(state: IAuthState): string | undefined {\n    if (state?.access_token && state?.access_token?.length > 0) {\n      return state.access_token;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static refreshToken(state: IAuthState): string | undefined {\n    if (state?.refresh_token && state?.refresh_token?.length > 0) {\n      return state.refresh_token;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static claims(state: IAuthState): string[] | undefined {\n    if (state?.claims && state?.claims?.length > 0) {\n      return state.claims;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static loginUser(state: IAuthState): IAppUserReadOnlyModel | undefined {\n    return state.user as IAppUserReadOnlyModel;\n  }\n\n  @Selector([AuthState])\n  static getErrors(state: IAuthState): IError | null {\n    return state.errors as IError;\n  }\n\n  @Selector([AuthState])\n  static getUserId(state: IAuthState): number | undefined {\n    return state.user?.userId;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IAuthState>(AuthState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "accessToken",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | undefined",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "claims",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getErrors",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IError | null",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getUserId",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number | undefined",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loginUser",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IAppUserReadOnlyModel | undefined",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "refreshToken",
          "args": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | undefined",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['AuthState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IAuthState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CardUser",
      "id": "class-CardUser-060dbf609c8ff851ea3024716c4e0dfb0099a839d79d3e6bd866a023f7f180e3aae2dabe7ec7f8b67e9d2a121e9684a25b9ae1f5c70a1544a8ef06e556d9f9ca",
      "file": "src/web-components/card-user.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { User } from './user';\n\n@customElement('card-user')\nexport class CardUser extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `;\n\n  @property({ type: Object }) user?: User = {\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  };\n\n  override render() {\n    if (this.user === undefined) {\n      return '';\n    }\n\n    return html`\n      <div class=\"card\">\n        <img\n          width=\"160px\"\n          src=${this.user.avatar\n            ? this.user.avatar\n            : 'assets/images/avatar.png'}\n        />\n        <div class=\"card-content\">\n          <h4>${this.user.fullName}</h4>\n          <p>${this.user.role}</p>\n          <sl-button @click=${this.handleEdit}>Edit</sl-button>\n        </div>\n      </div>\n    `;\n  }\n\n  private handleEdit() {\n    this.dispatchEvent(\n      new CustomEvent<User>('edit', {\n        detail: this.user,\n      })\n    );\n  }\n}\n",
      "properties": [
        {
          "name": "styles",
          "defaultValue": "css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124, 161]
        },
        {
          "name": "user",
          "defaultValue": "{\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User",
          "optional": true,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "property",
              "stringifiedArguments": "{type: Object}"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "rawdescription": "\n",
      "methods": [
        {
          "name": "handleEdit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "render",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [161]
        }
      ],
      "indexSignatures": [],
      "extends": "LitElement"
    },
    {
      "name": "ClearAuthErrors",
      "id": "class-ClearAuthErrors-50878b485c0727e45071192797d5af180531bfc18c4503f30246b4262793ead5ba423401c83f3b5a0abeec95f295b8f0b67bceb059ba8e23f5504e253c4f28f4",
      "file": "src/app/state/auth/auth.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAuthCredentials } from './auth.interfaces';\n\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class RefreshToken {\n  static readonly type = '[Auth] Refresh Token';\n  constructor(public refreshToken?: string) {}\n}\n\nexport class ResetPassword {\n  static readonly type = '[Auth] Reset Password';\n  constructor(public payload: { oldPassword: string; newPassword: string }) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Auth] Clear Erros'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearCMEErrors",
      "id": "class-ClearCMEErrors-47964637d7ff38e2c1bb98894c57b57b7ff442dfaf18caedd151881c558a082d570d6ac5cb1753aaef9fe4337924104d910a60c0d4257351e47d8a053c9082f3",
      "file": "src/app/state/continuingmedicaleducation/cme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCMECredits {\n  static readonly type = '[CME] get list of cme credits by user';\n\n  //constructor() {}\n}\n\nexport class GetCMECreditDetails {\n  static readonly type = '[CME] get details for specific cme credit';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCMEAdjustments {\n  static readonly type = '[CME] get list of cme adjustments by user';\n\n  //constructor() {}\n}\n\nexport class GetCmeSummary {\n  static readonly type = '[CME] get all data for the cme summary page';\n\n  //constructor() {}\n}\n\nexport class ClearCMEErrors {\n  static readonly type = '[CME] clear cme errors';\n\n  //constructor() {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[CME] clear cme errors'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearErrors",
      "id": "class-ClearErrors-00339ed6f5246358ea693325e2c637d7181fd90e184d0ab90aa370065b559dfa205764021c59d8246b961fc77029efdd25b5a0de1974e8f3be84133c37ce5376",
      "file": "src/app/state/my-account/my-account.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserCredential } from './my-account.state';\n\nexport class SaveMyAccountChanges {\n  static readonly type = '[MyAccount] Save My Account Changes';\n  constructor(public payload: IUserCredential) {}\n}\n\nexport class ClearErrors {\n  static readonly type = '[MyAccount] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[MyAccount] Clear Erros'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearExamScoringErrors",
      "id": "class-ClearExamScoringErrors-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Clear Erros'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 122,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearGraduateMedicalEducationDetails",
      "id": "class-ClearGraduateMedicalEducationDetails-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] clear details of gme rotation'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearGraduateMedicalEducationErrors",
      "id": "class-ClearGraduateMedicalEducationErrors-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] Clear Erros'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearMedicalTrainingErrors",
      "id": "class-ClearMedicalTrainingErrors-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Clear medical training errors'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearProfessionalStandingErrors",
      "id": "class-ClearProfessionalStandingErrors-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] Clear Erros'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 115,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClearUserProfileErrors",
      "id": "class-ClearUserProfileErrors-e925b08a722055b4428bfaba7da79d3a5e6a6442b843939d5fa16d8ae5aacb133b852ab2ccaa1177ad6f7a8020f600660251012dec839116a2a11a0a91c7d1cf",
      "file": "src/app/state/user-profile/user-profile.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n\nexport class ClearUserProfileErrors {\n  static readonly type = '[UserProfile] Clear the user profile errors';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[UserProfile] Clear the user profile errors'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CloseApplication",
      "id": "class-CloseApplication-f8fa02b393b402804a0acc1bc0827830ddda87fd9c5fc40c08e17d98b9fd0310ebf289e2771a2c762d496beb77c24bd9447488abdead96608b63e22ddf981cda",
      "file": "src/app/state/application/application.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class LoadApplication {\n  static readonly type = '[Application] Load the application';\n}\n\nexport class SetUnsavedChanges {\n  static readonly type = '[Application] toggle unsaved changes flag';\n\n  constructor(public hasUnsavedChanges: boolean) {}\n}\n\nexport class SetExamInProgress {\n  static readonly type = '[Application] toggle exam in progress flag';\n\n  constructor(public examInProgress: boolean) {}\n}\n\nexport class CloseApplication {\n  static readonly type = '[Application] Close the application';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Application] Close the application'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ContinuingMedicalEducationSelectors",
      "id": "class-ContinuingMedicalEducationSelectors-401484451ff382e57173f6dcefc66460f8f23e034cff25c3d80b6ba7891a1c62be871721df5b7e6b42fed1b417de45c24b7b5e476023729a0f1a23187cbe55cb",
      "file": "src/app/state/continuingmedicaleducation/cme.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport {\n  IContinuingMedicalEducation,\n  ContinuingMedicalEducationState,\n  ICmeSummaryRow,\n  ICmeAdjustment,\n  ICmeCredit,\n} from './cme.state';\n\nexport class ContinuingMedicalEducationSelectors {\n  static slices = createPropertySelectors<IContinuingMedicalEducation>(\n    ContinuingMedicalEducationState\n  );\n\n  @Selector([ContinuingMedicalEducationState])\n  static continuingMedicalEducationCredits(\n    state: IContinuingMedicalEducation\n  ): ICmeCredit[] | undefined {\n    if (state?.cmeCredits?.length > 0) {\n      return state.cmeCredits;\n    }\n    return;\n  }\n\n  @Selector([ContinuingMedicalEducationState])\n  static continuingMedicalEducationAdjustments(\n    state: IContinuingMedicalEducation\n  ): ICmeAdjustment[] | undefined {\n    if (state?.cmeAdjustments?.length > 0) {\n      return state.cmeAdjustments;\n    }\n    return;\n  }\n\n  @Selector([ContinuingMedicalEducationState])\n  static continuingMedicalEducationSummary(\n    state: IContinuingMedicalEducation\n  ): ICmeSummaryRow[] | undefined {\n    if (state?.cmeSummary?.length > 0) {\n      return state.cmeSummary;\n    }\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IContinuingMedicalEducation>(\n    ContinuingMedicalEducationState\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "continuingMedicalEducationAdjustments",
          "args": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ContinuingMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "continuingMedicalEducationCredits",
          "args": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ContinuingMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "continuingMedicalEducationSummary",
          "args": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ContinuingMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IContinuingMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ContinuousCertificationSelectors",
      "id": "class-ContinuousCertificationSelectors-b6d92a6972f9b20c60e2eaa94c9f847a51b4a5350a10fa45ad5dbc1eb8de33701690b758d8e040d9d4bf0287a73d4f4e2a8935759a0b2599cb50a2d044be7cfb",
      "file": "src/app/state/continuous-certification/continuous-certification.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport {\n  ContinuousCertificationState,\n  IContinuousCertication,\n} from './continuous-certification.state';\n\nexport class ContinuousCertificationSelectors {\n  static slices = createPropertySelectors<IContinuousCertication>(\n    ContinuousCertificationState\n  );\n\n  @Selector([ContinuousCertificationState])\n  static GetOutcomeRegistries(\n    state: IContinuousCertication\n  ): IContinuousCertication | undefined {\n    if (state) {\n      return {\n        outcomeRegistries: state.outcomeRegistries,\n      };\n    }\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IContinuousCertication>(\n    ContinuousCertificationState\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "GetOutcomeRegistries",
          "args": [
            {
              "name": "state",
              "type": "IContinuousCertication",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IContinuousCertication | undefined",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ContinuousCertificationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IContinuousCertication",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateAdditionalTraining",
      "id": "class-CreateAdditionalTraining-4e27c1c2183cdc3f55bc16c08017f2b94ea4058bac79bdc38a6c148c8e25595a7f768d45c15ec0bb2969546faf2b122c3bf308844e6c5d50d6931e090bdd3ca7",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IAdditionalTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IAdditionalTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdditionalTrainingModel",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GQAdditionalTraining] Create an additional training record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateAdvancedTraining",
      "id": "class-CreateAdvancedTraining-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 83,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdvancedTrainingModel",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Create advanced training data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 83,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateCaseComment",
      "id": "class-CreateCaseComment-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "comment",
            "type": "ICaseCommentModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 32,
        "jsdoctags": [
          {
            "name": "comment",
            "type": "ICaseCommentModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "comment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseCommentModel",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] create comment for exam case'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateCaseFeedback",
      "id": "class-CreateCaseFeedback-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "ICaseFeedbackModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 133,
        "jsdoctags": [
          {
            "name": "model",
            "type": "ICaseFeedbackModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseFeedbackModel",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Create case feedback'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 133,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateCaseScore",
      "id": "class-CreateCaseScore-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "score",
            "type": "ICaseScoreModel",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true"
          }
        ],
        "line": 88,
        "jsdoctags": [
          {
            "name": "score",
            "type": "ICaseScoreModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "score",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseScoreModel",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [123]
        },
        {
          "name": "showLoading",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] create score for exam case'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateExamScore",
      "id": "class-CreateExamScore-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IExamScoreModel",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "navigate",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true"
          }
        ],
        "line": 69,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IExamScoreModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "navigate",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamScoreModel",
          "optional": false,
          "description": "",
          "line": 71,
          "modifierKind": [123]
        },
        {
          "name": "navigate",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 71,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] create score for exam'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateFellowship",
      "id": "class-CreateFellowship-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IFellowshipModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 61,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IFellowshipModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipModel",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Create fellowships'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateGraduateMedicalEducation",
      "id": "class-CreateGraduateMedicalEducation-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IRotationModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 43,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IRotationModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationModel",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GME] Create a gme rotation record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateMedicalTraining",
      "id": "class-CreateMedicalTraining-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IMedicalTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IMedicalTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalTrainingModel",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Create medical school data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateOtherCertification",
      "id": "class-CreateOtherCertification-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IOtherCertificationsModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 43,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IOtherCertificationsModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IOtherCertificationsModel",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Create user other certifications'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateProfessionalStandingSanctionsDetails",
      "id": "class-CreateProfessionalStandingSanctionsDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "ISanctionsModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 102,
        "jsdoctags": [
          {
            "name": "data",
            "type": "ISanctionsModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ISanctionsModel",
          "optional": false,
          "description": "",
          "line": 104,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] create professional standing sanctions details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreatePSAppointmentAndPrivilege",
      "id": "class-CreatePSAppointmentAndPrivilege-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "IUserAppointmentModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 57,
        "jsdoctags": [
          {
            "name": "data",
            "type": "IUserAppointmentModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserAppointmentModel",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] create new appointment record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreatePSMedicalLicense",
      "id": "class-CreatePSMedicalLicense-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "license",
            "type": "IMedicalLicenseModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "license",
            "type": "IMedicalLicenseModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "license",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicenseModel",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] create new medical license record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CreateUserProfessionalStandingDetails",
      "id": "class-CreateUserProfessionalStandingDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "details",
            "type": "IUserProfessionalStandingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 83,
        "jsdoctags": [
          {
            "name": "details",
            "type": "IUserProfessionalStandingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "details",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfessionalStandingModel",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] create user professional standing details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DashboardSelectors",
      "id": "class-DashboardSelectors-582c6b5a8e42fbbd812ee7871922d42018848ee36d99c365dbda3879963ed5443aa3a342f5cc18d39f8dd66633508f3891f92d296124adacc10e8b88d12c7b46",
      "file": "src/app/state/dashboard/dashboard.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector } from '@ngxs/store';\nimport { DashboardState, IDashboardState } from './dashboard.state';\n\nexport class DashboardSelectors {\n  @Selector([DashboardState])\n  static dashboardProgramInformation(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.programs) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([DashboardState])\n  static dashboardRegistrationStatus(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.registrationStatus) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([DashboardState])\n  static dashboardCertificateInformation(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.certificates) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([DashboardState])\n  static dashboardAlertsAndNotices(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.alertsAndNotices) {\n      return state;\n    }\n    return;\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "dashboardAlertsAndNotices",
          "args": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDashboardState | undefined",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['DashboardState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dashboardCertificateInformation",
          "args": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDashboardState | undefined",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['DashboardState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dashboardProgramInformation",
          "args": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDashboardState | undefined",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['DashboardState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dashboardRegistrationStatus",
          "args": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDashboardState | undefined",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['DashboardState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IDashboardState",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteCaseComment",
      "id": "class-DeleteCaseComment-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] delete comment of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteCaseFeedback",
      "id": "class-DeleteCaseFeedback-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 151,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 153,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Delete case feedback'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 151,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteCaseScore",
      "id": "class-DeleteCaseScore-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 100,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] delete score of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteCertificate",
      "id": "class-DeleteCertificate-1778e4cc04039e5ce6ccede1468c928f06a849b1b7f723e937b61235779714d21e29560e853021999b8be46835ac0ff1a63bc633ee7951791d9ac53de9ad4e94",
      "file": "src/app/state/documents/documents.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n\nexport class DownloadDocument {\n  static readonly type = '[Documents] Download document';\n  constructor(public payload: { documentId: number; documentName: string }) {}\n}\n\nexport class DeleteCertificate {\n  static readonly type = '[Documents] Delete certificate';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class DeleteDocument {\n  static readonly type = '[Documents] Delete document';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class UploadDocument {\n  static readonly type = '[Documents] Upload document';\n  constructor(public payload: { model: FormData }) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Documents] Delete certificate'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteDocument",
      "id": "class-DeleteDocument-1778e4cc04039e5ce6ccede1468c928f06a849b1b7f723e937b61235779714d21e29560e853021999b8be46835ac0ff1a63bc633ee7951791d9ac53de9ad4e94",
      "file": "src/app/state/documents/documents.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n\nexport class DownloadDocument {\n  static readonly type = '[Documents] Download document';\n  constructor(public payload: { documentId: number; documentName: string }) {}\n}\n\nexport class DeleteCertificate {\n  static readonly type = '[Documents] Delete certificate';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class DeleteDocument {\n  static readonly type = '[Documents] Delete document';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class UploadDocument {\n  static readonly type = '[Documents] Upload document';\n  constructor(public payload: { model: FormData }) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Documents] Delete document'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteFellowship",
      "id": "class-DeleteFellowship-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 73,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Delete fellowships'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeleteGraduateMedicalEducation",
      "id": "class-DeleteGraduateMedicalEducation-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GME] Delete a gme rotation record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeletePSAppointmentAndPrivilege",
      "id": "class-DeletePSAppointmentAndPrivilege-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 71,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] delete existing appointment record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 70,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeletePSMedicalLicense",
      "id": "class-DeletePSMedicalLicense-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] delete existing medical license record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DocumentSelectors",
      "id": "class-DocumentSelectors-43ead4ffd63d4c179f5812a724d472803b785a063b99f329df727e2fc4862dcc150123661c10895f1abb62b14f957967e5c7f1af69acaab1b06af042672f2a81",
      "file": "src/app/state/documents/documents.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport { DocumentsState, IDocuments } from './documents.state';\n\nexport class DocumentSelectors {\n  static slices = createPropertySelectors<IDocuments>(DocumentsState);\n\n  @Selector([DocumentsState])\n  static documents(state: IDocuments): IDocuments | undefined {\n    if (state) {\n      return {\n        documents: state.documents,\n      } as IDocuments;\n    }\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IDocuments>(DocumentsState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "documents",
          "args": [
            {
              "name": "state",
              "type": "IDocuments",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IDocuments | undefined",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['DocumentsState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IDocuments",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DownloadDocument",
      "id": "class-DownloadDocument-1778e4cc04039e5ce6ccede1468c928f06a849b1b7f723e937b61235779714d21e29560e853021999b8be46835ac0ff1a63bc633ee7951791d9ac53de9ad4e94",
      "file": "src/app/state/documents/documents.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n\nexport class DownloadDocument {\n  static readonly type = '[Documents] Download document';\n  constructor(public payload: { documentId: number; documentName: string }) {}\n}\n\nexport class DeleteCertificate {\n  static readonly type = '[Documents] Delete certificate';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class DeleteDocument {\n  static readonly type = '[Documents] Delete document';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class UploadDocument {\n  static readonly type = '[Documents] Upload document';\n  constructor(public payload: { model: FormData }) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 6,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Documents] Download document'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ExamHistorySelectors",
      "id": "class-ExamHistorySelectors-c51d3d3d3fe099b798118be9556787ecbe40c3cf5845459717fbd3cf73a5468345dfc8e7595879a7e68af8cb492eb07385bbf0a4e051b936c3b11b2cce52bd4c",
      "file": "src/app/state/exam-history/exam-history.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport { IExamHistory, ExamHistoryState } from './exam-history.state';\n\nexport class ExamHistorySelectors {\n  static slices = createPropertySelectors<IExamHistory>(ExamHistoryState);\n\n  @Selector([ExamHistoryState])\n  static medicalTrainingValues(state: IExamHistory): IExamHistory | undefined {\n    if (state) {\n      return {\n        examHistory: state.examHistory,\n      };\n    }\n\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IExamHistory>(ExamHistoryState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "medicalTrainingValues",
          "args": [
            {
              "name": "state",
              "type": "IExamHistory",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IExamHistory | undefined",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ExamHistoryState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IExamHistory",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ExamProcessSelectors",
      "id": "class-ExamProcessSelectors-e0a7dde99e28dde67cc8f8a2654728aada494f422882b2258002f5a6cbde1be2dc177fd728aa8a89b7780f7a0011dcd5c18e4f165418a8307f83eebee1eeb728",
      "file": "src/app/state/exam-process/exam-process.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport { IExamProcess, ExamProcessState } from './exam-process.state';\nimport { IExamOverviewReadOnlyModel } from 'src/app/api/models/examinations/exam-overview-read-only.model';\n\nexport class ExamProcessSelectors {\n  static slices = createPropertySelectors<IExamProcess>(ExamProcessState);\n\n  @Selector([ExamProcessState])\n  static examProcessValues(state: IExamProcess): IExamProcess | undefined {\n    if (state) {\n      return {\n        examDirectory: state.examDirectory,\n      };\n    }\n\n    return;\n  }\n\n  @Selector([ExamProcessState])\n  static upcomingExams(\n    state: IExamProcess\n  ): IExamOverviewReadOnlyModel[] | undefined {\n    if (state.examDirectory && state.examDirectory.length > 0) {\n      //sort by registration end date\n      const upcomingExams = state.examDirectory.filter((exam) => {\n        return new Date(exam.regEndDate).getTime() > new Date().getTime();\n      });\n      upcomingExams.sort((a, b) => {\n        return (\n          new Date(a.regEndDate).getTime() - new Date(b.regEndDate).getTime()\n        );\n      });\n\n      return upcomingExams.slice(0, 2);\n    }\n\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IExamProcess>(ExamProcessState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "examProcessValues",
          "args": [
            {
              "name": "state",
              "type": "IExamProcess",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IExamProcess | undefined",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ExamProcessState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IExamProcess",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "upcomingExams",
          "args": [
            {
              "name": "state",
              "type": "IExamProcess",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ExamProcessState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IExamProcess",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ExamScoringSelectors",
      "id": "class-ExamScoringSelectors-69d22ad332008dbbe2e7390f5720de7c99fa1889ba4b69552fb1d122f17522372268873b59b2f218773f24355afa8c5e0ccf81fa5498ddda30c353c443336812",
      "file": "src/app/state/exam-scoring/exam-scoring.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport { IExamScoring, ExamScoringState } from './exam-scoring.state';\n\nexport class ExamScoringSelectors {\n  static slices = createPropertySelectors<IExamScoring>(ExamScoringState);\n\n  @Selector([ExamScoringState])\n  static examScoringValues(state: IExamScoring): any | undefined {\n    if (state) {\n      return {\n        caseRoster: state.caseRoster,\n        selectedCaseContents: state.selectedCaseContents,\n        selectedCaseFeedback: state.selectedCaseFeedback,\n        examineeList: state.examineeList,\n        examinee: state.examinee,\n        activeExamination: state.activeExamination,\n        examScoresList: state.examScoresList,\n        roster: state.roster,\n        dashboardRoster: state.dashboardRoster,\n      };\n    }\n\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IExamScoring>(ExamScoringState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "examScoringValues",
          "args": [
            {
              "name": "state",
              "type": "IExamScoring",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any | undefined",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['ExamScoringState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IExamScoring",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAccreditedProgramInstitutionsList",
      "id": "class-GetAccreditedProgramInstitutionsList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the accredited program insitutions list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetActiveExamination",
      "id": "class-GetActiveExamination-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 62,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get active examination'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetActiveExams",
      "id": "class-GetActiveExams-9e5664990f8e88d093ec1247b2024acda88971c6ee49b05b498fd5dfb085515614d2d9c09f33c2bb9892e0336a787dc3cbc39d332b3aca5e5698553d51c0f6fd",
      "file": "src/app/state/exam-history/exam-history.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetExamHistory {\n  static readonly type = '[ExamHistory] Get the users exam history';\n}\n\nexport class GetActiveExams {\n  static readonly type = '[ExamHistory] Get the users active exams';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[ExamHistory] Get the users active exams'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAdditionalTrainingDetails",
      "id": "class-GetAdditionalTrainingDetails-4e27c1c2183cdc3f55bc16c08017f2b94ea4058bac79bdc38a6c148c8e25595a7f768d45c15ec0bb2969546faf2b122c3bf308844e6c5d50d6931e090bdd3ca7",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "trainingId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "trainingId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "trainingId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GQAdditionalTraining] get details of additional training'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAdditionalTrainingList",
      "id": "class-GetAdditionalTrainingList-4e27c1c2183cdc3f55bc16c08017f2b94ea4058bac79bdc38a6c148c8e25595a7f768d45c15ec0bb2969546faf2b122c3bf308844e6c5d50d6931e090bdd3ca7",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GQAdditionalTraining] get list of additional training'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAdvancedTrainingData",
      "id": "class-GetAdvancedTrainingData-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Get advanced training data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAlertsAndNotices",
      "id": "class-GetAlertsAndNotices-725cbe1d32f82c7af44173cec2e78d9a2f0041d883ecea2d8cd15d8db728f57dd2cb84a98019769110e2d045d11bbf380268f9c19bfac7762a5b40240aab711a",
      "file": "src/app/state/dashboard/dashboard.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n}\n\nexport class GetTraineeRegistrationStatus {\n  static readonly type =\n    '[Dashboard] Get the trainee registration status information';\n\n  constructor(public examCode: string) {}\n}\n\nexport class GetAlertsAndNotices {\n  static readonly type = '[Dashboard] Get the alerts and notices information';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Dashboard] Get the alerts and notices information'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAllDocuments",
      "id": "class-GetAllDocuments-1778e4cc04039e5ce6ccede1468c928f06a849b1b7f723e937b61235779714d21e29560e853021999b8be46835ac0ff1a63bc633ee7951791d9ac53de9ad4e94",
      "file": "src/app/state/documents/documents.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n\nexport class DownloadDocument {\n  static readonly type = '[Documents] Download document';\n  constructor(public payload: { documentId: number; documentName: string }) {}\n}\n\nexport class DeleteCertificate {\n  static readonly type = '[Documents] Delete certificate';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class DeleteDocument {\n  static readonly type = '[Documents] Delete document';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class UploadDocument {\n  static readonly type = '[Documents] Upload document';\n  constructor(public payload: { model: FormData }) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Documents] Get all documents'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAllGraduateMedicalEducation",
      "id": "class-GetAllGraduateMedicalEducation-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] get list of gme rotations and gaps'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetAppointmentTypeList",
      "id": "class-GetAppointmentTypeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Appointment Type list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCaseComment",
      "id": "class-GetCaseComment-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get comments of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCaseContents",
      "id": "class-GetCaseContents-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get contents of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCaseDetailsAndFeedback",
      "id": "class-GetCaseDetailsAndFeedback-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 157,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 159,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Get case details and feedback'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 157,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCaseFeedback",
      "id": "class-GetCaseFeedback-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 139,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 141,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Get case feedback'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 139,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCaseRoster",
      "id": "class-GetCaseRoster-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id1",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "id2",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "id1",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id2",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "id2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get list of cases for examination roster'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCertificateTypes",
      "id": "class-GetCertificateTypes-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all Certificate Types'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetClinicalActivityList",
      "id": "class-GetClinicalActivityList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Clinical Activity list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 72,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetClinicalLevelList",
      "id": "class-GetClinicalLevelList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Clinical Level list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 68,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCMEAdjustments",
      "id": "class-GetCMEAdjustments-47964637d7ff38e2c1bb98894c57b57b7ff442dfaf18caedd151881c558a082d570d6ac5cb1753aaef9fe4337924104d910a60c0d4257351e47d8a053c9082f3",
      "file": "src/app/state/continuingmedicaleducation/cme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCMECredits {\n  static readonly type = '[CME] get list of cme credits by user';\n\n  //constructor() {}\n}\n\nexport class GetCMECreditDetails {\n  static readonly type = '[CME] get details for specific cme credit';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCMEAdjustments {\n  static readonly type = '[CME] get list of cme adjustments by user';\n\n  //constructor() {}\n}\n\nexport class GetCmeSummary {\n  static readonly type = '[CME] get all data for the cme summary page';\n\n  //constructor() {}\n}\n\nexport class ClearCMEErrors {\n  static readonly type = '[CME] clear cme errors';\n\n  //constructor() {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[CME] get list of cme adjustments by user'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCMECreditDetails",
      "id": "class-GetCMECreditDetails-47964637d7ff38e2c1bb98894c57b57b7ff442dfaf18caedd151881c558a082d570d6ac5cb1753aaef9fe4337924104d910a60c0d4257351e47d8a053c9082f3",
      "file": "src/app/state/continuingmedicaleducation/cme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCMECredits {\n  static readonly type = '[CME] get list of cme credits by user';\n\n  //constructor() {}\n}\n\nexport class GetCMECreditDetails {\n  static readonly type = '[CME] get details for specific cme credit';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCMEAdjustments {\n  static readonly type = '[CME] get list of cme adjustments by user';\n\n  //constructor() {}\n}\n\nexport class GetCmeSummary {\n  static readonly type = '[CME] get all data for the cme summary page';\n\n  //constructor() {}\n}\n\nexport class ClearCMEErrors {\n  static readonly type = '[CME] clear cme errors';\n\n  //constructor() {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[CME] get details for specific cme credit'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCMECredits",
      "id": "class-GetCMECredits-47964637d7ff38e2c1bb98894c57b57b7ff442dfaf18caedd151881c558a082d570d6ac5cb1753aaef9fe4337924104d910a60c0d4257351e47d8a053c9082f3",
      "file": "src/app/state/continuingmedicaleducation/cme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCMECredits {\n  static readonly type = '[CME] get list of cme credits by user';\n\n  //constructor() {}\n}\n\nexport class GetCMECreditDetails {\n  static readonly type = '[CME] get details for specific cme credit';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCMEAdjustments {\n  static readonly type = '[CME] get list of cme adjustments by user';\n\n  //constructor() {}\n}\n\nexport class GetCmeSummary {\n  static readonly type = '[CME] get all data for the cme summary page';\n\n  //constructor() {}\n}\n\nexport class ClearCMEErrors {\n  static readonly type = '[CME] clear cme errors';\n\n  //constructor() {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[CME] get list of cme credits by user'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCmeSummary",
      "id": "class-GetCmeSummary-47964637d7ff38e2c1bb98894c57b57b7ff442dfaf18caedd151881c558a082d570d6ac5cb1753aaef9fe4337924104d910a60c0d4257351e47d8a053c9082f3",
      "file": "src/app/state/continuingmedicaleducation/cme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCMECredits {\n  static readonly type = '[CME] get list of cme credits by user';\n\n  //constructor() {}\n}\n\nexport class GetCMECreditDetails {\n  static readonly type = '[CME] get details for specific cme credit';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCMEAdjustments {\n  static readonly type = '[CME] get list of cme adjustments by user';\n\n  //constructor() {}\n}\n\nexport class GetCmeSummary {\n  static readonly type = '[CME] get all data for the cme summary page';\n\n  //constructor() {}\n}\n\nexport class ClearCMEErrors {\n  static readonly type = '[CME] clear cme errors';\n\n  //constructor() {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[CME] get all data for the cme summary page'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetCountryList",
      "id": "class-GetCountryList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the country list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetDashboardCertificationInformation",
      "id": "class-GetDashboardCertificationInformation-725cbe1d32f82c7af44173cec2e78d9a2f0041d883ecea2d8cd15d8db728f57dd2cb84a98019769110e2d045d11bbf380268f9c19bfac7762a5b40240aab711a",
      "file": "src/app/state/dashboard/dashboard.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n}\n\nexport class GetTraineeRegistrationStatus {\n  static readonly type =\n    '[Dashboard] Get the trainee registration status information';\n\n  constructor(public examCode: string) {}\n}\n\nexport class GetAlertsAndNotices {\n  static readonly type = '[Dashboard] Get the alerts and notices information';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Dashboard] Get the dashboard certificate information'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetDashboardProgramInformation",
      "id": "class-GetDashboardProgramInformation-725cbe1d32f82c7af44173cec2e78d9a2f0041d883ecea2d8cd15d8db728f57dd2cb84a98019769110e2d045d11bbf380268f9c19bfac7762a5b40240aab711a",
      "file": "src/app/state/dashboard/dashboard.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n}\n\nexport class GetTraineeRegistrationStatus {\n  static readonly type =\n    '[Dashboard] Get the trainee registration status information';\n\n  constructor(public examCode: string) {}\n}\n\nexport class GetAlertsAndNotices {\n  static readonly type = '[Dashboard] Get the alerts and notices information';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Dashboard] Get the dashboard program information'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetDegrees",
      "id": "class-GetDegrees-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all degrees'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetDocumentTypes",
      "id": "class-GetDocumentTypes-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all Document Types'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetEthnicityList",
      "id": "class-GetEthnicityList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the ethnicity list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExamDirectory",
      "id": "class-GetExamDirectory-be236cd49e0033d29ff1f7f7b8d3ee338365b25063d4be46adb233506b0f5fc0f3a076fb40b30ada2b10848705a4cda6c860ae04ea002efbcaf54c256e6bf3ed",
      "file": "src/app/state/exam-process/exam-process.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetExamDirectory {\n  static readonly type =\n    '[ExamProcess] Get list of available exam applications for user';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[ExamProcess] Get list of available exam applications for user'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExamHistory",
      "id": "class-GetExamHistory-9e5664990f8e88d093ec1247b2024acda88971c6ee49b05b498fd5dfb085515614d2d9c09f33c2bb9892e0336a787dc3cbc39d332b3aca5e5698553d51c0f6fd",
      "file": "src/app/state/exam-history/exam-history.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetExamHistory {\n  static readonly type = '[ExamHistory] Get the users exam history';\n}\n\nexport class GetActiveExams {\n  static readonly type = '[ExamHistory] Get the users active exams';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[ExamHistory] Get the users exam history'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExaminee",
      "id": "class-GetExaminee-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examScheduleId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 56,
        "jsdoctags": [
          {
            "name": "examScheduleId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get examinee by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExamineeList",
      "id": "class-GetExamineeList-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "date",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 50,
        "jsdoctags": [
          {
            "name": "date",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get list of examinees by day'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExaminerAgenda",
      "id": "class-GetExaminerAgenda-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examHeaderId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 163,
        "jsdoctags": [
          {
            "name": "examHeaderId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examHeaderId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 165,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Get examiner agenda'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 163,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExaminerConflict",
      "id": "class-GetExaminerConflict-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examHeaderId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 169,
        "jsdoctags": [
          {
            "name": "examHeaderId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examHeaderId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 171,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Get examiner conflict'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 169,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExamScoresList",
      "id": "class-GetExamScoresList-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 75,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get list of exam scores'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetExamTitle",
      "id": "class-GetExamTitle-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get title of exam by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetFellowshipPrograms",
      "id": "class-GetFellowshipPrograms-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "fellowshipType",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "fellowshipType",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "fellowshipType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all Fellowship Programs'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetFellowships",
      "id": "class-GetFellowships-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "isUpdate",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 55,
        "jsdoctags": [
          {
            "name": "isUpdate",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "isUpdate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 57,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Get fellowships'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetFellowshipTypes",
      "id": "class-GetFellowshipTypes-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Fellowship Types list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 106,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGenderList",
      "id": "class-GetGenderList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the genders list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGraduateMedicalEducationDetails",
      "id": "class-GetGraduateMedicalEducationDetails-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GME] get details of gme rotation'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGraduateMedicalEducationGapList",
      "id": "class-GetGraduateMedicalEducationGapList-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] get list of gaps in gme rotations'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGraduateMedicalEducationList",
      "id": "class-GetGraduateMedicalEducationList-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] get list of gme rotations'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGraduateMedicalEducationSummary",
      "id": "class-GetGraduateMedicalEducationSummary-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[GME] get list of gme summary'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetGraduateProfiles",
      "id": "class-GetGraduateProfiles-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all graduate profiles'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetJcahoOrganizationList",
      "id": "class-GetJcahoOrganizationList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Jcaho Organization list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetLanguageList",
      "id": "class-GetLanguageList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the languages list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetLicenseTypeList",
      "id": "class-GetLicenseTypeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the License Type list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetMedicalTraining",
      "id": "class-GetMedicalTraining-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Get medical school data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetOrganizationTypeList",
      "id": "class-GetOrganizationTypeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Organization Type list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetOtherCertifications",
      "id": "class-GetOtherCertifications-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "isUpdate",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "isUpdate",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "isUpdate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 39,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Get user other certifications'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetOutcomeRegistries",
      "id": "class-GetOutcomeRegistries-26f9185c914483681166e2b3847cbb91a343faa27d3d027c0671852368925e2e65055a8d83d09e7f40a5455b9a682692f1c18dca0ec6a6d0af323e6833b42828",
      "file": "src/app/state/continuous-certification/continuous-certification.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\n\nexport class GetOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Get Outcome Registries';\n}\n\nexport class UpdateOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Update Outcome Registries';\n\n  constructor(public payload: IOutcomeRegistryModel) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Continuous Certification] Get Outcome Registries'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPicklists",
      "id": "class-GetPicklists-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "countryCode",
            "type": "string | null | undefined",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 62,
        "jsdoctags": [
          {
            "name": "countryCode",
            "type": "string | null | undefined",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "countryCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": true,
          "description": "",
          "line": 64,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all picklists'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPracticeTypeList",
      "id": "class-GetPracticeTypeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Practice Type list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPrimaryPracticeList",
      "id": "class-GetPrimaryPracticeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Primary Practice list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetProfessionalStandingSanctionsDetails",
      "id": "class-GetProfessionalStandingSanctionsDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get professional standing sanctions details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPSAppointmentAndPrivilegeDetails",
      "id": "class-GetPSAppointmentAndPrivilegeDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 50,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get details of appointment by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPSAppointmentsAndPrivilegesList",
      "id": "class-GetPSAppointmentsAndPrivilegesList-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get list of appointments'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPSMedicalLicenseDetails",
      "id": "class-GetPSMedicalLicenseDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get details of medical license by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetPSMedicalLicenseList",
      "id": "class-GetPSMedicalLicenseList-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get list of medical licenses'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetRaceList",
      "id": "class-GetRaceList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Races list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetResidencyPrograms",
      "id": "class-GetResidencyPrograms-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get all Fellowship Programs'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetRoster",
      "id": "class-GetRoster-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examinerUserId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 106,
        "jsdoctags": [
          {
            "name": "examinerUserId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [123]
        },
        {
          "name": "examinerUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get roster'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 106,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetScoringSessionList",
      "id": "class-GetScoringSessionList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Scoring Session list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetSelectedExamScores",
      "id": "class-GetSelectedExamScores-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 81,
        "jsdoctags": [
          {
            "name": "id",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] get selected exam score'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetStateList",
      "id": "class-GetStateList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "countryCode",
            "type": "string | undefined",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "countryCode",
            "type": "string | undefined",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "countryCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": true,
          "description": "",
          "line": 23,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the states list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetTraineeRegistrationStatus",
      "id": "class-GetTraineeRegistrationStatus-725cbe1d32f82c7af44173cec2e78d9a2f0041d883ecea2d8cd15d8db728f57dd2cb84a98019769110e2d045d11bbf380268f9c19bfac7762a5b40240aab711a",
      "file": "src/app/state/dashboard/dashboard.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n}\n\nexport class GetTraineeRegistrationStatus {\n  static readonly type =\n    '[Dashboard] Get the trainee registration status information';\n\n  constructor(public examCode: string) {}\n}\n\nexport class GetAlertsAndNotices {\n  static readonly type = '[Dashboard] Get the alerts and notices information';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examCode",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "examCode",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Dashboard] Get the trainee registration status information'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetTrainingTypeList",
      "id": "class-GetTrainingTypeList-edd6136d8d8281ebb238083acaae2734420d4f93d3d77db7b9bed2cb190478ebddd9ffbc720b2b4f2f26d39422f7afb323ac5f19774d97063acc055b9405ef2d",
      "file": "src/app/state/picklists/picklists.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n\n  constructor(public fellowshipType: string) {}\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetCertificateTypes {\n  static readonly type = '[Picklists] Get all Certificate Types';\n}\n\nexport class GetDocumentTypes {\n  static readonly type = '[Picklists] Get all Document Types';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n\nexport class GetLicenseTypeList {\n  static readonly type = '[Picklists] Get the License Type list';\n}\n\nexport class GetPracticeTypeList {\n  static readonly type = '[Picklists] Get the Practice Type list';\n}\n\nexport class GetOrganizationTypeList {\n  static readonly type = '[Picklists] Get the Organization Type list';\n}\n\nexport class GetAppointmentTypeList {\n  static readonly type = '[Picklists] Get the Appointment Type list';\n}\n\nexport class GetJcahoOrganizationList {\n  static readonly type = '[Picklists] Get the Jcaho Organization list';\n}\n\nexport class GetPrimaryPracticeList {\n  static readonly type = '[Picklists] Get the Primary Practice list';\n}\n\nexport class GetScoringSessionList {\n  static readonly type = '[Picklists] Get the Scoring Session list';\n\n  //constructor(public id: number) {}\n}\n\nexport class GetFellowshipTypes {\n  static readonly type = '[Picklists] Get the Fellowship Types list';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Picklists] Get the Training Type list'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetUserCertificates",
      "id": "class-GetUserCertificates-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "isUpload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 31,
        "jsdoctags": [
          {
            "name": "isUpload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "isUpload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 33,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Get user certificates'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetUserProfessionalStandingDetails",
      "id": "class-GetUserProfessionalStandingDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] get user professional standing details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GetUserProfile",
      "id": "class-GetUserProfile-e925b08a722055b4428bfaba7da79d3a5e6a6442b843939d5fa16d8ae5aacb133b852ab2ccaa1177ad6f7a8020f600660251012dec839116a2a11a0a91c7d1cf",
      "file": "src/app/state/user-profile/user-profile.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n\nexport class ClearUserProfileErrors {\n  static readonly type = '[UserProfile] Clear the user profile errors';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "loginUser",
            "type": "IAppUserReadOnlyModel",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "claims",
            "type": "string[]",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "loginUser",
            "type": "IAppUserReadOnlyModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "claims",
            "type": "string[]",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "claims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [123]
        },
        {
          "name": "loginUser",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAppUserReadOnlyModel",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[UserProfile] Get the user profile'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GQAdditionalTrainingSelectors",
      "id": "class-GQAdditionalTrainingSelectors-cdf7a80ded32a0406c25ff70eccd03d9af118884a47a3d47324e1728a849f9833c446c235f62e546b8308c07048212ca33742833aafea79829ae644f0b663c8f",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector } from '@ngxs/store';\nimport {\n  IGQAdditionalTraining,\n  GQAdditionalTrainingState,\n} from './examination-gq-additional-training.state';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\n\nexport class GQAdditionalTrainingSelectors {\n  @Selector([GQAdditionalTrainingState])\n  static additionalTrainingList(\n    state: IGQAdditionalTraining\n  ): IAdditionalTrainingReadOnlyModel[] | undefined {\n    if (state?.AdditionalTraining?.length > 0) {\n      return state.AdditionalTraining;\n    }\n    return;\n  }\n\n  @Selector([GQAdditionalTrainingState])\n  static selectedAdditionalTrainingDetails(\n    state: IGQAdditionalTraining\n  ): IAdditionalTrainingModel | undefined {\n    if (state?.selectedAdditionalTraining) {\n      return state.selectedAdditionalTraining;\n    }\n    return;\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "additionalTrainingList",
          "args": [
            {
              "name": "state",
              "type": "IGQAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GQAdditionalTrainingState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGQAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectedAdditionalTrainingDetails",
          "args": [
            {
              "name": "state",
              "type": "IGQAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IAdditionalTrainingModel | undefined",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GQAdditionalTrainingState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGQAdditionalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "GraduateMedicalEducationSelectors",
      "id": "class-GraduateMedicalEducationSelectors-7069e7ded1a90556c124d4323bae2a1642631d882a788be37ad2a30a8fee0277312a4951a2d89da744865126d0f47388682e86a50af5db1baa4f2188137ebcc4",
      "file": "src/app/state/graduatemedicaleducation/gme.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector } from '@ngxs/store';\nimport {\n  IGraduateMedicalEducation,\n  GraduateMedicalEducationState,\n} from './gme.state';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n} from 'src/app/api';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport class GraduateMedicalEducationSelectors {\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationList(\n    state: IGraduateMedicalEducation\n  ): IRotationReadOnlyModel[] | undefined {\n    if (state?.gmeRotations?.length > 0) {\n      return state.gmeRotations;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationAll(\n    state: IGraduateMedicalEducation\n  ): IGraduateMedicalEducation | undefined {\n    if (state?.gmeRotations?.length > 0 || state?.gmeGaps?.length > 0) {\n      return {\n        gmeRotations: state.gmeRotations,\n        gmeGaps: state.gmeGaps,\n      } as unknown as IGraduateMedicalEducation;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationSummary(\n    state: IGraduateMedicalEducation\n  ): IGmeSummaryReadOnlyModel[] | undefined {\n    if (state?.gmeSummary?.length > 0) {\n      return state.gmeSummary;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationDetails(\n    state: IGraduateMedicalEducation\n  ): IRotationModel | undefined {\n    if (state?.selectedRotation) {\n      return state.selectedRotation;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static errors(state: IGraduateMedicalEducation): IFormErrors | null {\n    return <IFormErrors>state.errors;\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "errors",
          "args": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IFormErrors | null",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GraduateMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "graduateMedicalEducationAll",
          "args": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IGraduateMedicalEducation | undefined",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GraduateMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "graduateMedicalEducationDetails",
          "args": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IRotationModel | undefined",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GraduateMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "graduateMedicalEducationList",
          "args": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GraduateMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "graduateMedicalEducationSummary",
          "args": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['GraduateMedicalEducationState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IGraduateMedicalEducation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "LinkUserData",
      "id": "class-LinkUserData-e925b08a722055b4428bfaba7da79d3a5e6a6442b843939d5fa16d8ae5aacb133b852ab2ccaa1177ad6f7a8020f600660251012dec839116a2a11a0a91c7d1cf",
      "file": "src/app/state/user-profile/user-profile.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n\nexport class ClearUserProfileErrors {\n  static readonly type = '[UserProfile] Clear the user profile errors';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[UserProfile] Get the user profile values'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "LoadApplication",
      "id": "class-LoadApplication-f8fa02b393b402804a0acc1bc0827830ddda87fd9c5fc40c08e17d98b9fd0310ebf289e2771a2c762d496beb77c24bd9447488abdead96608b63e22ddf981cda",
      "file": "src/app/state/application/application.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class LoadApplication {\n  static readonly type = '[Application] Load the application';\n}\n\nexport class SetUnsavedChanges {\n  static readonly type = '[Application] toggle unsaved changes flag';\n\n  constructor(public hasUnsavedChanges: boolean) {}\n}\n\nexport class SetExamInProgress {\n  static readonly type = '[Application] toggle exam in progress flag';\n\n  constructor(public examInProgress: boolean) {}\n}\n\nexport class CloseApplication {\n  static readonly type = '[Application] Close the application';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Application] Load the application'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Login",
      "id": "class-Login-50878b485c0727e45071192797d5af180531bfc18c4503f30246b4262793ead5ba423401c83f3b5a0abeec95f295b8f0b67bceb059ba8e23f5504e253c4f28f4",
      "file": "src/app/state/auth/auth.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAuthCredentials } from './auth.interfaces';\n\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class RefreshToken {\n  static readonly type = '[Auth] Refresh Token';\n  constructor(public refreshToken?: string) {}\n}\n\nexport class ResetPassword {\n  static readonly type = '[Auth] Reset Password';\n  constructor(public payload: { oldPassword: string; newPassword: string }) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IAuthCredentials",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 4,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IAuthCredentials",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAuthCredentials",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Auth] Login'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Logout",
      "id": "class-Logout-50878b485c0727e45071192797d5af180531bfc18c4503f30246b4262793ead5ba423401c83f3b5a0abeec95f295b8f0b67bceb059ba8e23f5504e253c4f28f4",
      "file": "src/app/state/auth/auth.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAuthCredentials } from './auth.interfaces';\n\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class RefreshToken {\n  static readonly type = '[Auth] Refresh Token';\n  constructor(public refreshToken?: string) {}\n}\n\nexport class ResetPassword {\n  static readonly type = '[Auth] Reset Password';\n  constructor(public payload: { oldPassword: string; newPassword: string }) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Auth] Logout'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MedicalTrainingSelectors",
      "id": "class-MedicalTrainingSelectors-fa8207a5a858e1a3d440b9488aa45375fa34fad9985cfcf2fd63d4b4a077b0963a614d5670f75fe7bfa6cd312680a7590ae10242e369555e4c32c41ebf4f787f",
      "file": "src/app/state/medical-training/medical-training.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport {\n  IMedicalTraining,\n  MedicalTrainingState,\n} from './medical-training.state';\n\nexport class MedicalTrainingSelectors {\n  static slices =\n    createPropertySelectors<IMedicalTraining>(MedicalTrainingState);\n\n  @Selector([MedicalTrainingState])\n  static medicalTrainingValues(\n    state: IMedicalTraining\n  ): IMedicalTraining | undefined {\n    if (state) {\n      return {\n        medicalTraining: state.medicalTraining,\n        additionalTraining: state.additionalTraining,\n        userCertificates: state.userCertificates,\n        otherCertifications: state.otherCertifications,\n        fellowships: state.fellowships,\n        errors: state.errors,\n      };\n    }\n\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IMedicalTraining>(MedicalTrainingState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "medicalTrainingValues",
          "args": [
            {
              "name": "state",
              "type": "IMedicalTraining",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IMedicalTraining | undefined",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['MedicalTrainingState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IMedicalTraining",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MyAccountSelectors",
      "id": "class-MyAccountSelectors-21798471fce66ff23a32446f9edbf2055572f4b19ef153bb16af28c329156246b7a01e8c5ae0801b9713e49f078c39cd90c0086520ef5537fbd119f0eadc0b72",
      "file": "src/app/state/my-account/my-account.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredential, MyAccountState } from './my-account.state';\n\nexport class MyAccountSelectors {\n  @Selector([MyAccountState])\n  static user(state: IUserCredential): IUserCredential {\n    return state;\n  }\n\n  @Selector([MyAccountState])\n  static errors(state: IUserCredential): IFormErrors | null {\n    return <IFormErrors>state.errors;\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "errors",
          "args": [
            {
              "name": "state",
              "type": "IUserCredential",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IFormErrors | null",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['MyAccountState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserCredential",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "user",
          "args": [
            {
              "name": "state",
              "type": "IUserCredential",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IUserCredential",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['MyAccountState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserCredential",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PicklistsSelectors",
      "id": "class-PicklistsSelectors-a79468a40a69b88ec5b6b46cf2f65a7497fb058f2ba4fef3198427e9ec2b08b7152a19c990f696b9141d9fcba4ed6b76f8dcd591f7f178e60fc2f67675b70022",
      "file": "src/app/state/picklists/picklists.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\n\nimport {\n  IPicklist,\n  IPicklistUserValues,\n  PicklistsState,\n} from './picklists.state';\n\nexport class PicklistsSelectors {\n  static slices = createPropertySelectors<IPicklist>(PicklistsState);\n\n  @Selector([PicklistsState])\n  static userPicklistValues(state: IPicklist): IPicklistUserValues | undefined {\n    if (state) {\n      return {\n        countries: state.countries,\n        ethnicities: state.ethnicities,\n        genders: state.genders,\n        languages: state.languages,\n        races: state.races,\n        states: state.states,\n        statesMap: state.statesMap,\n        accreditedInstitutions: state.accreditedInstitutions,\n        trainingTypes: state.trainingTypes,\n        graduateProfiles: state.graduateProfiles,\n        degrees: state.degrees,\n        fellowshipPrograms: state.fellowshipPrograms,\n        residencyPrograms: state.residencyPrograms,\n      } as IPicklistUserValues;\n    }\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IPicklist>(PicklistsState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "userPicklistValues",
          "args": [
            {
              "name": "state",
              "type": "IPicklist",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IPicklistUserValues | undefined",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['PicklistsState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IPicklist",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ProfessionalStandingSelectors",
      "id": "class-ProfessionalStandingSelectors-440e2f52f356637b1abcb361807c7220f7bcd6543b9b53fe9f9440843075cacb31db06b0340b6bb86691376cf0c403ae7dcb32d65a7e0b45ea7eb74eb987593f",
      "file": "src/app/state/professional-standing/professional-standing.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { createPropertySelectors } from '@ngxs/store';\nimport {\n  IProfessionalStanding,\n  ProfessionalStandingState,\n} from './professional-standing.state';\n\nexport class ProfessionalStandingSelectors {\n  static slices = createPropertySelectors<IProfessionalStanding>(\n    ProfessionalStandingState\n  );\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IProfessionalStanding>(\n    ProfessionalStandingState\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "RefreshToken",
      "id": "class-RefreshToken-50878b485c0727e45071192797d5af180531bfc18c4503f30246b4262793ead5ba423401c83f3b5a0abeec95f295b8f0b67bceb059ba8e23f5504e253c4f28f4",
      "file": "src/app/state/auth/auth.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAuthCredentials } from './auth.interfaces';\n\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class RefreshToken {\n  static readonly type = '[Auth] Refresh Token';\n  constructor(public refreshToken?: string) {}\n}\n\nexport class ResetPassword {\n  static readonly type = '[Auth] Reset Password';\n  constructor(public payload: { oldPassword: string; newPassword: string }) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "refreshToken",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "refreshToken",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "refreshToken",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Auth] Refresh Token'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ResetCaseCommentsData",
      "id": "class-ResetCaseCommentsData-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Reset case comments data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 126,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ResetExamScoringData",
      "id": "class-ResetExamScoringData-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "properties": [
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Reset exam scoring data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 130,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ResetPassword",
      "id": "class-ResetPassword-50878b485c0727e45071192797d5af180531bfc18c4503f30246b4262793ead5ba423401c83f3b5a0abeec95f295b8f0b67bceb059ba8e23f5504e253c4f28f4",
      "file": "src/app/state/auth/auth.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAuthCredentials } from './auth.interfaces';\n\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class RefreshToken {\n  static readonly type = '[Auth] Refresh Token';\n  constructor(public refreshToken?: string) {}\n}\n\nexport class ResetPassword {\n  static readonly type = '[Auth] Reset Password';\n  constructor(public payload: { oldPassword: string; newPassword: string }) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Auth] Reset Password'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SaveMyAccountChanges",
      "id": "class-SaveMyAccountChanges-00339ed6f5246358ea693325e2c637d7181fd90e184d0ab90aa370065b559dfa205764021c59d8246b961fc77029efdd25b5a0de1974e8f3be84133c37ce5376",
      "file": "src/app/state/my-account/my-account.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserCredential } from './my-account.state';\n\nexport class SaveMyAccountChanges {\n  static readonly type = '[MyAccount] Save My Account Changes';\n  constructor(public payload: IUserCredential) {}\n}\n\nexport class ClearErrors {\n  static readonly type = '[MyAccount] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IUserCredential",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 4,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IUserCredential",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserCredential",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[MyAccount] Save My Account Changes'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SetExamInProgress",
      "id": "class-SetExamInProgress-f8fa02b393b402804a0acc1bc0827830ddda87fd9c5fc40c08e17d98b9fd0310ebf289e2771a2c762d496beb77c24bd9447488abdead96608b63e22ddf981cda",
      "file": "src/app/state/application/application.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class LoadApplication {\n  static readonly type = '[Application] Load the application';\n}\n\nexport class SetUnsavedChanges {\n  static readonly type = '[Application] toggle unsaved changes flag';\n\n  constructor(public hasUnsavedChanges: boolean) {}\n}\n\nexport class SetExamInProgress {\n  static readonly type = '[Application] toggle exam in progress flag';\n\n  constructor(public examInProgress: boolean) {}\n}\n\nexport class CloseApplication {\n  static readonly type = '[Application] Close the application';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examInProgress",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "examInProgress",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examInProgress",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Application] toggle exam in progress flag'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SetUnsavedChanges",
      "id": "class-SetUnsavedChanges-f8fa02b393b402804a0acc1bc0827830ddda87fd9c5fc40c08e17d98b9fd0310ebf289e2771a2c762d496beb77c24bd9447488abdead96608b63e22ddf981cda",
      "file": "src/app/state/application/application.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class LoadApplication {\n  static readonly type = '[Application] Load the application';\n}\n\nexport class SetUnsavedChanges {\n  static readonly type = '[Application] toggle unsaved changes flag';\n\n  constructor(public hasUnsavedChanges: boolean) {}\n}\n\nexport class SetExamInProgress {\n  static readonly type = '[Application] toggle exam in progress flag';\n\n  constructor(public examInProgress: boolean) {}\n}\n\nexport class CloseApplication {\n  static readonly type = '[Application] Close the application';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "hasUnsavedChanges",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 6,
        "jsdoctags": [
          {
            "name": "hasUnsavedChanges",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "hasUnsavedChanges",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Application] toggle unsaved changes flag'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SkipExam",
      "id": "class-SkipExam-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "examScheduleId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "examDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true"
          }
        ],
        "line": 112,
        "jsdoctags": [
          {
            "name": "examScheduleId",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "examDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "examDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 116,
          "modifierKind": [123]
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 115,
          "modifierKind": [123]
        },
        {
          "name": "showLoading",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 117,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] skip exam'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateAdditionalTraining",
      "id": "class-UpdateAdditionalTraining-4e27c1c2183cdc3f55bc16c08017f2b94ea4058bac79bdc38a6c148c8e25595a7f768d45c15ec0bb2969546faf2b122c3bf308844e6c5d50d6931e090bdd3ca7",
      "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IAdditionalTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IAdditionalTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdditionalTrainingModel",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GQAdditionalTraining] Update an additional training record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateAdvancedTraining",
      "id": "class-UpdateAdvancedTraining-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 89,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdvancedTrainingModel",
          "optional": false,
          "description": "",
          "line": 91,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Update advanced training data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 89,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateAdvancedTrainingData",
      "id": "class-UpdateAdvancedTrainingData-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 25,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IAdvancedTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdvancedTrainingModel",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Update advanced training Data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateCaseComment",
      "id": "class-UpdateCaseComment-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "comment",
            "type": "ICaseCommentModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "comment",
            "type": "ICaseCommentModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "comment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseCommentModel",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] update comment of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateCaseFeedback",
      "id": "class-UpdateCaseFeedback-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "ICaseFeedbackModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 145,
        "jsdoctags": [
          {
            "name": "model",
            "type": "ICaseFeedbackModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseFeedbackModel",
          "optional": false,
          "description": "",
          "line": 147,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] Update case feedback'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 145,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateCaseScore",
      "id": "class-UpdateCaseScore-9b59eb272b3725fc549fdd80790a08a6e5681ec378177be1c88a03183f972af90584a2d9d4cb6a40a49761f5f9957cb2467f7ee649dfb033fb4705942cd9c52e",
      "file": "src/app/state/exam-scoring/exam-scoring.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { s } from '@fullcalendar/core/internal-common';\nimport { ICaseCommentModel, ICaseScoreModel } from 'src/app/api';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { ICaseFeedbackModel } from 'src/app/api/models/scoring/case-feedback.model';\n\nexport class GetExamTitle {\n  static readonly type = '[Exam-Scoring] get title of exam by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseRoster {\n  static readonly type =\n    '[Exam-Scoring] get list of cases for examination roster';\n\n  constructor(public id1: number, public id2?: number) {}\n}\n\nexport class GetCaseContents {\n  static readonly type = '[Exam-Scoring] get contents of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseComment {\n  static readonly type = '[Exam-Scoring] get comments of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseComment {\n  static readonly type = '[Exam-Scoring] create comment for exam case';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class UpdateCaseComment {\n  static readonly type = '[Exam-Scoring] update comment of exam case by id';\n\n  constructor(public comment: ICaseCommentModel) {}\n}\n\nexport class DeleteCaseComment {\n  static readonly type = '[Exam-Scoring] delete comment of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExamineeList {\n  static readonly type = '[Exam-Scoring] get list of examinees by day';\n\n  constructor(public date: string) {}\n}\n\nexport class GetExaminee {\n  static readonly type = '[Exam-Scoring] get examinee by id';\n\n  constructor(public examScheduleId: number) {}\n}\n\nexport class GetActiveExamination {\n  static readonly type = '[Exam-Scoring] get active examination';\n\n  // need an API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateExamScore {\n  static readonly type = '[Exam-Scoring] create score for exam';\n\n  constructor(public model: IExamScoreModel, public navigate = true) {}\n}\n\nexport class GetExamScoresList {\n  static readonly type = '[Exam-Scoring] get list of exam scores';\n\n  constructor(public id: number) {}\n}\n\nexport class GetSelectedExamScores {\n  static readonly type = '[Exam-Scoring] get selected exam score';\n\n  //currently no API call for this\n  constructor(public id: number) {}\n}\n\nexport class CreateCaseScore {\n  static readonly type = '[Exam-Scoring] create score for exam case';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class UpdateCaseScore {\n  static readonly type = '[Exam-Scoring] update score of exam case by id';\n\n  constructor(public score: ICaseScoreModel, public showLoading = true) {}\n}\n\nexport class DeleteCaseScore {\n  static readonly type = '[Exam-Scoring] delete score of exam case by id';\n\n  constructor(public id: number) {}\n}\n\nexport class GetRoster {\n  static readonly type = '[Exam-Scoring] get roster';\n\n  constructor(public examinerUserId: number, public examDate: string) {}\n}\n\nexport class SkipExam {\n  static readonly type = '[Exam-Scoring] skip exam';\n\n  constructor(\n    public examScheduleId: number,\n    public examDate: string,\n    public showLoading = true\n  ) {}\n}\n\nexport class ClearExamScoringErrors {\n  static readonly type = '[Exam-Scoring] Clear Erros';\n}\n\nexport class ResetCaseCommentsData {\n  static readonly type = '[Exam-Scoring] Reset case comments data';\n}\n\nexport class ResetExamScoringData {\n  static readonly type = '[Exam-Scoring] Reset exam scoring data';\n}\nexport class CreateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Create case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class GetCaseFeedback {\n  static readonly type = '[Exam-Scoring] Get case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateCaseFeedback {\n  static readonly type = '[Exam-Scoring] Update case feedback';\n\n  constructor(public model: ICaseFeedbackModel) {}\n}\n\nexport class DeleteCaseFeedback {\n  static readonly type = '[Exam-Scoring] Delete case feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetCaseDetailsAndFeedback {\n  static readonly type = '[Exam-Scoring] Get case details and feedback';\n\n  constructor(public id: number) {}\n}\n\nexport class GetExaminerAgenda {\n  static readonly type = '[Exam-Scoring] Get examiner agenda';\n\n  constructor(public examHeaderId: number) {}\n}\n\nexport class GetExaminerConflict {\n  static readonly type = '[Exam-Scoring] Get examiner conflict';\n\n  constructor(public examHeaderId: number) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "score",
            "type": "ICaseScoreModel",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true"
          }
        ],
        "line": 94,
        "jsdoctags": [
          {
            "name": "score",
            "type": "ICaseScoreModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "showLoading",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "true",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "score",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICaseScoreModel",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [123]
        },
        {
          "name": "showLoading",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Exam-Scoring] update score of exam case by id'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 94,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateFellowship",
      "id": "class-UpdateFellowship-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IFellowshipModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 67,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IFellowshipModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipModel",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Update fellowships'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 67,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateGraduateMedicalEducation",
      "id": "class-UpdateGraduateMedicalEducation-12ec7bf22f1b45903405417974355c3c855ce12ecbebd7ae805afa667e800b5ad637bb5b7b37f4bbf277077f705e71da643dd6fcc4ce8545d6a2b0153c08cb5c",
      "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationGapList {\n  static readonly type = '[GME] get list of gaps in gme rotations';\n\n  //constructor() {}\n}\n\nexport class GetAllGraduateMedicalEducation {\n  static readonly type = '[GME] get list of gme rotations and gaps';\n\n  //constructor() {}\n}\n\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearGraduateMedicalEducationDetails {\n  static readonly type = '[GME] clear details of gme rotation';\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IRotationModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IRotationModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationModel",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[GME] Update a gme rotation record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateMedicalTraining",
      "id": "class-UpdateMedicalTraining-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IMedicalTrainingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IMedicalTrainingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalTrainingModel",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Update medical school data'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateOtherCertifications",
      "id": "class-UpdateOtherCertifications-5844fb6d409097bde99606dff4a19caba6964d2c1378a7858ffe56a2cd0f8747443aeb3367d5637b56c413c8f3cb10ffff26da51c9458e9a9881467849e0fcbc",
      "file": "src/app/state/medical-training/medical-training.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IFellowshipModel } from 'src/app/api/models/medicaltraining/fellowship.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IOtherCertificationsModel } from 'src/app/api/models/medicaltraining/other-certifications.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n\nexport class GetUserCertificates {\n  static readonly type = '[Medical Training] Get user certificates';\n\n  constructor(public isUpload?: boolean) {}\n}\n\nexport class GetOtherCertifications {\n  static readonly type = '[Medical Training] Get user other certifications';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateOtherCertification {\n  static readonly type = '[Medical Training] Create user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class UpdateOtherCertifications {\n  static readonly type = '[Medical Training] Update user other certifications';\n\n  constructor(public model: IOtherCertificationsModel) {}\n}\n\nexport class GetFellowships {\n  static readonly type = '[Medical Training] Get fellowships';\n\n  constructor(public isUpdate?: boolean) {}\n}\n\nexport class CreateFellowship {\n  static readonly type = '[Medical Training] Create fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class UpdateFellowship {\n  static readonly type = '[Medical Training] Update fellowships';\n\n  constructor(public model: IFellowshipModel) {}\n}\n\nexport class DeleteFellowship {\n  static readonly type = '[Medical Training] Delete fellowships';\n\n  constructor(public id: number) {}\n}\n\nexport class ClearMedicalTrainingErrors {\n  static readonly type = '[Medical Training] Clear medical training errors';\n}\n\nexport class CreateAdvancedTraining {\n  static readonly type = '[Medical Training] Create advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n\nexport class UpdateAdvancedTraining {\n  static readonly type = '[Medical Training] Update advanced training data';\n\n  constructor(public model: IAdvancedTrainingModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "model",
            "type": "IOtherCertificationsModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "model",
            "type": "IOtherCertificationsModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IOtherCertificationsModel",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Medical Training] Update user other certifications'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateOutcomeRegistries",
      "id": "class-UpdateOutcomeRegistries-26f9185c914483681166e2b3847cbb91a343faa27d3d027c0671852368925e2e65055a8d83d09e7f40a5455b9a682692f1c18dca0ec6a6d0af323e6833b42828",
      "file": "src/app/state/continuous-certification/continuous-certification.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\n\nexport class GetOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Get Outcome Registries';\n}\n\nexport class UpdateOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Update Outcome Registries';\n\n  constructor(public payload: IOutcomeRegistryModel) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IOutcomeRegistryModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IOutcomeRegistryModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IOutcomeRegistryModel",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Continuous Certification] Update Outcome Registries'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateProfessionalStandingSanctionsDetails",
      "id": "class-UpdateProfessionalStandingSanctionsDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "ISanctionsModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 109,
        "jsdoctags": [
          {
            "name": "data",
            "type": "ISanctionsModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ISanctionsModel",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] update professional standing sanctions details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdatePSAppointmentAndPrivilege",
      "id": "class-UpdatePSAppointmentAndPrivilege-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "IUserAppointmentModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 64,
        "jsdoctags": [
          {
            "name": "data",
            "type": "IUserAppointmentModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserAppointmentModel",
          "optional": false,
          "description": "",
          "line": 66,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] update existing appointment record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdatePSMedicalLicense",
      "id": "class-UpdatePSMedicalLicense-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "license",
            "type": "IMedicalLicenseModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "license",
            "type": "IMedicalLicenseModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "license",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicenseModel",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] update existing medical license record'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateUserProfessionalStandingDetails",
      "id": "class-UpdateUserProfessionalStandingDetails-3e408bb80217d3ac86f5b26613c986ebd51bb4289d30eaeada62e696f14726991569fc46983329477bfcc28d4f7c2b2c708f94eee12eedea5c39e831d72a3293",
      "file": "src/app/state/professional-standing/professional-standing.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  IMedicalLicenseModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserProfessionalStandingModel,\n} from '../../api';\n\nexport class GetPSMedicalLicenseList {\n  static readonly type = '[Professional Standing] get list of medical licenses';\n\n  //constructor() {}\n}\n\nexport class GetPSMedicalLicenseDetails {\n  static readonly type =\n    '[Professional Standing] get details of medical license by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] create new medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class UpdatePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] update existing medical license record';\n\n  constructor(public license: IMedicalLicenseModel) {}\n}\n\nexport class DeletePSMedicalLicense {\n  static readonly type =\n    '[Professional Standing] delete existing medical license record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetPSAppointmentsAndPrivilegesList {\n  static readonly type = '[Professional Standing] get list of appointments';\n\n  //constructor() {}\n}\n\nexport class GetPSAppointmentAndPrivilegeDetails {\n  static readonly type =\n    '[Professional Standing] get details of appointment by id';\n\n  constructor(public id: number) {}\n}\n\nexport class CreatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] create new appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class UpdatePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] update existing appointment record';\n\n  constructor(public data: IUserAppointmentModel) {}\n}\n\nexport class DeletePSAppointmentAndPrivilege {\n  static readonly type =\n    '[Professional Standing] delete existing appointment record';\n\n  constructor(public id: number) {}\n}\n\nexport class GetUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] get user professional standing details';\n}\n\nexport class CreateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] create user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class UpdateUserProfessionalStandingDetails {\n  static readonly type =\n    '[Professional Standing] update user professional standing details';\n\n  constructor(public details: IUserProfessionalStandingModel) {}\n}\n\nexport class GetProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] get professional standing sanctions details';\n}\n\nexport class CreateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] create professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class UpdateProfessionalStandingSanctionsDetails {\n  static readonly type =\n    '[Professional Standing] update professional standing sanctions details';\n\n  constructor(public data: ISanctionsModel) {}\n}\n\nexport class ClearProfessionalStandingErrors {\n  static readonly type = '[Professional Standing] Clear Erros';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "details",
            "type": "IUserProfessionalStandingModel",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 90,
        "jsdoctags": [
          {
            "name": "details",
            "type": "IUserProfessionalStandingModel",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "details",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfessionalStandingModel",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Professional Standing] update user professional standing details'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 89,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateUserProfile",
      "id": "class-UpdateUserProfile-e925b08a722055b4428bfaba7da79d3a5e6a6442b843939d5fa16d8ae5aacb133b852ab2ccaa1177ad6f7a8020f600660251012dec839116a2a11a0a91c7d1cf",
      "file": "src/app/state/user-profile/user-profile.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n\nexport class ClearUserProfileErrors {\n  static readonly type = '[UserProfile] Clear the user profile errors';\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "IUserProfile",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "IUserProfile",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfile",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[UserProfile] Update the user profile'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UploadDocument",
      "id": "class-UploadDocument-1778e4cc04039e5ce6ccede1468c928f06a849b1b7f723e937b61235779714d21e29560e853021999b8be46835ac0ff1a63bc633ee7951791d9ac53de9ad4e94",
      "file": "src/app/state/documents/documents.actions.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n\nexport class DownloadDocument {\n  static readonly type = '[Documents] Download document';\n  constructor(public payload: { documentId: number; documentName: string }) {}\n}\n\nexport class DeleteCertificate {\n  static readonly type = '[Documents] Delete certificate';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class DeleteDocument {\n  static readonly type = '[Documents] Delete document';\n  constructor(public payload: { documentId: number }) {}\n}\n\nexport class UploadDocument {\n  static readonly type = '[Documents] Upload document';\n  constructor(public payload: { model: FormData }) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "literal type",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "'[Documents] Upload document'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [124, 146]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UserProfileSelectors",
      "id": "class-UserProfileSelectors-7bcfd56443bf5f04f9c974007507781329cfe6da5dfd84d19d6c5f556b9a9ec4854a805bfd0456ac819c19c6532d717192725c671ead701979c4ce8ffcbc7e13",
      "file": "src/app/state/user-profile/user-profile.selectors.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport { IUserProfile, UserProfileState } from './user-profile.state';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport class UserProfileSelectors {\n  static slices = createPropertySelectors<IUserProfile>(UserProfileState);\n\n  @Selector([UserProfileState])\n  static user(state: IUserProfile): IUserProfile | undefined {\n    if (state?.userId) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static isUserProfileLoaded(state: IUserProfile): boolean {\n    return !!state?.userId;\n  }\n\n  @Selector([UserProfileState])\n  static userDisplayName(state: IUserProfile): string | undefined {\n    if (state?.displayName?.length) {\n      return state.displayName;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static userId(state: IUserProfile): number | undefined {\n    if (state?.userId) {\n      return state.userId;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static userClaims(state: IUserProfile): string[] | undefined {\n    if (state?.claims.length) {\n      return state.claims;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static profilePicture(state: IUserProfile): string | undefined {\n    if (state?.profilePicture?.length) {\n      return state.profilePicture;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static errors(state: IUserProfile): IFormErrors | undefined {\n    if (state?.errors) {\n      return state.errors;\n    }\n    return;\n  }\n}\n",
      "properties": [
        {
          "name": "slices",
          "defaultValue": "createPropertySelectors<IUserProfile>(UserProfileState)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 6,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "errors",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IFormErrors | undefined",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isUserProfileLoaded",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "profilePicture",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | undefined",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "user",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "IUserProfile | undefined",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userClaims",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "[] | undefined",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userDisplayName",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | undefined",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userId",
          "args": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number | undefined",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": "['UserProfileState']"
            }
          ],
          "modifierKind": [167, 124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "IUserProfile",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [
    {
      "name": "HighlightDirective",
      "id": "directive-HighlightDirective-fe90db6311a74c13317e7137be8121568678f65ddfba987fabe29aaca1bf8062d7781a41f1912b12980eefb07bb677ae24782f52a3690bb831cc9b91c94d686b",
      "file": "src/app/shared/directives/highlight.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[absHighlight]',\n})\nexport class HighlightDirective {\n  constructor(private element: ElementRef) {\n    this.element.nativeElement.style.backgroundColor = '#5f5aee';\n    this.element.nativeElement.style.color = 'black';\n    this.element.nativeElement.style.padding = '0.5rem';\n  }\n}\n",
      "selector": "[absHighlight]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "element",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "element",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    }
  ],
  "components": [
    {
      "name": "AcgmeExperienceModalComponent",
      "id": "component-AcgmeExperienceModalComponent-a515e26b696a8786dd878be851bc1582a4b7773f587516c661b99de8d87b6b8b89f16f4741b0bb952e6f236c49c7b2954536ddde12d9f9eae94db2a5e4488793",
      "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-acgme-experience-modal",
      "styleUrls": ["./acgme-experience-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./acgme-experience-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "AcgmeGridCols",
          "defaultValue": "ACGME_EXPERIENCE_GRID_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "AcgmeGridData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getAcgmeGridData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "girdAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ACGME_EXPERIENCE_GRID_COLS } from './acgme-experience-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-acgme-experience-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, ButtonModule],\n  templateUrl: './acgme-experience-modal.component.html',\n  styleUrls: ['./acgme-experience-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AcgmeExperienceModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  AcgmeGridCols = ACGME_EXPERIENCE_GRID_COLS;\n  AcgmeGridData!: any;\n\n  ngOnInit() {\n    this.getAcgmeGridData();\n  }\n\n  getAcgmeGridData() {\n    this.AcgmeGridData = [\n      {\n        fileName: 'ACGME-Report_11-4-22_FINAL.pdf',\n        uploadDate: new Date('09/22/19'),\n      },\n    ];\n  }\n\n  girdAction($event: any) {\n    console.log('unhandled grid action', $event);\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'ACGMEExperienceModal' });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./acgme-experience-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"mb-5\">\n  <p><strong>Please update the information below as needed. </strong></p>\n  <p>\n    A full and unrestricted medical license is not required for the Qualifying\n    Examination. A full and unrestricted medical license will be waived to\n    register for the Certifying Examination (CE). A full and unrestricted\n    medical license will be required before you will be considered certified by\n    the ABS\n  </p>\n</div>\n<p-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add ACGME Report</span>\n</p-button>\n<abs-grid\n  [columns]=\"AcgmeGridCols\"\n  [data]=\"AcgmeGridData\"\n  (action)=\"girdAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button type=\"button\" [style]=\"{ width: '337px' }\" variant=\"primary\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "ActionCardComponent",
      "id": "component-ActionCardComponent-72b8d5f9b01c65090122358637a01953dcc7a804dbc0ba0bf9cfb49bcefcd845ffe06fee4ef827dd0df7a8deda1be40f6d8b90f09bbb308df20feff7ed4bf078",
      "file": "src/app/shared/components/action-card/action-card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-action-card",
      "styleUrls": ["./action-card.component.scss"],
      "styles": [],
      "templateUrl": ["./action-card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "actionAction",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1432,
              "end": 1450,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1433,
                "end": 1437,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1438,
                "end": 1446,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1439,
                  "end": 1445,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nAction being passed to the parent component\n",
          "description": "<p>Action being passed to the parent component</p>\n",
          "line": 64,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "actionCard",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "any",
          "decorators": []
        },
        {
          "name": "actionDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1780,
              "end": 1798,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1781,
                "end": 1785,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1786,
                "end": 1794,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1787,
                  "end": 1793,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nAction display to show in the card\n",
          "description": "<p>Action display to show in the card</p>\n",
          "line": 81,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "actionDisplayKey",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1920,
              "end": 1938,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1921,
                "end": 1925,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1926,
                "end": 1934,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1927,
                  "end": 1933,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nAction display to show in the card via translation key\n",
          "description": "<p>Action display to show in the card via translation key</p>\n",
          "line": 87,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "actionStyle",
          "defaultValue": "'link'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1547,
              "end": 1565,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1548,
                "end": 1552,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1553,
                "end": 1561,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1554,
                  "end": 1560,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nStyle of action to perform\n",
          "description": "<p>Style of action to perform</p>\n",
          "line": 70,
          "type": "\"link\" | \"button\"",
          "decorators": []
        },
        {
          "name": "actionType",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1293,
              "end": 1311,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1294,
                "end": 1298,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1299,
                "end": 1307,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1300,
                  "end": 1306,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nType of action to perform\n",
          "description": "<p>Type of action to perform</p>\n",
          "line": 58,
          "type": "string | \"dialog\" | \"component\"",
          "decorators": []
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 918,
              "end": 936,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 919,
                "end": 923,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 924,
                "end": 932,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 925,
                  "end": 931,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nDescription to display in the card\n",
          "description": "<p>Description to display in the card</p>\n",
          "line": 40,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "descriptionKey",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1056,
              "end": 1074,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1057,
                "end": 1061,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1062,
                "end": 1070,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1063,
                  "end": 1069,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nDescription to display in the card via translation key\n",
          "description": "<p>Description to display in the card via translation key</p>\n",
          "line": 46,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1178,
              "end": 1197,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1179,
                "end": 1183,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1184,
                "end": 1193,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1185,
                  "end": 1192,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not the card is disabled\n",
          "description": "<p>Whether or not the card is disabled</p>\n",
          "line": 52,
          "type": "boolean | undefined",
          "decorators": []
        },
        {
          "name": "displayStatusText",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2314,
              "end": 2333,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2315,
                "end": 2319,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2320,
                "end": 2329,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2321,
                  "end": 2328,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not to display the status text\n",
          "description": "<p>Whether or not to display the status text</p>\n",
          "line": 105,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2065,
              "end": 2083,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2066,
                "end": 2070,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2071,
                "end": 2079,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2072,
                  "end": 2078,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nIcon to display in the card. Must be a font awesome icon\n",
          "description": "<p>Icon to display in the card. Must be a font awesome icon</p>\n",
          "line": 93,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "recievedOn",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2417,
              "end": 2433,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2418,
                "end": 2422,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2423,
                "end": 2429,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2424,
                  "end": 2428,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 2424,
                    "end": 2428,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "Date"
                  }
                }
              }
            }
          ],
          "rawdescription": "\n\nDate the card was recieved\n",
          "description": "<p>Date the card was recieved</p>\n",
          "line": 111,
          "type": "Date",
          "decorators": []
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2160,
              "end": 2178,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2161,
                "end": 2165,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2166,
                "end": 2174,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2167,
                  "end": 2173,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nStatus of the card\n",
          "description": "<p>Status of the card</p>\n",
          "line": 99,
          "type": "\"completed\" | \"in-progress\" | \"contingent\" | \"alert\"",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 677,
              "end": 695,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 678,
                "end": 682,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 683,
                "end": 691,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 684,
                  "end": 690,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nTitle to display in the card\n",
          "description": "<p>Title to display in the card</p>\n",
          "line": 28,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "titleKey",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 803,
              "end": 821,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 804,
                "end": 808,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 809,
                "end": 817,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 810,
                  "end": 816,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nTitle to display in the card via translation key\n",
          "description": "<p>Title to display in the card via translation key</p>\n",
          "line": 34,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cardAction",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAction to perform when the card is clicked\n",
          "description": "<p>Action to perform when the card is clicked</p>\n",
          "jsdoctags": [
            {
              "pos": 2526,
              "end": 2555,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2527,
                "end": 2531,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2532,
                "end": 2551,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2533,
                  "end": 2550,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 2533,
                    "end": 2545,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "EventEmitter"
                  },
                  "typeArguments": [
                    {
                      "pos": 2546,
                      "end": 2549,
                      "flags": 8388608,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 131
                    }
                  ]
                }
              }
            }
          ],
          "line": 117,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "localActionCard",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 119
        }
      ],
      "methodsClass": [
        {
          "name": "handleCardAction",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "translateActionCard",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\n",
          "description": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 2974,
                "end": 2981,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'abs-action-card',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './action-card.component.html',\n  styleUrls: ['./action-card.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ActionCardComponent implements OnInit {\n  @Input() actionCard!: any;\n\n  /**\n   * Title to display in the card\n   * @type {string}\n   */\n  @Input() title!: string | undefined;\n\n  /**\n   * Title to display in the card via translation key\n   * @type {string}\n   */\n  @Input() titleKey!: string | undefined;\n\n  /**\n   * Description to display in the card\n   * @type {string}\n   */\n  @Input() description!: string | undefined;\n\n  /**\n   * Description to display in the card via translation key\n   * @type {string}\n   */\n  @Input() descriptionKey!: string | undefined;\n\n  /**\n   * Whether or not the card is disabled\n   * @type {boolean}\n   */\n  @Input() disabled: boolean | undefined = false;\n\n  /**\n   * Type of action to perform\n   * @type {string}\n   */\n  @Input() actionType!: string | 'dialog' | 'component';\n\n  /**\n   * Action being passed to the parent component\n   * @type {string}\n   */\n  @Input() actionAction: string | undefined = '';\n\n  /**\n   * Style of action to perform\n   * @type {string}\n   */\n  @Input() actionStyle: 'link' | 'button' = 'link';\n\n  // @Input() action: {\n  //   type: 'component',\n  //   action: '/ce-scoring/examination-rosters',\n  // }\n\n  /**\n   * Action display to show in the card\n   * @type {string}\n   */\n  @Input() actionDisplay!: string | undefined;\n\n  /**\n   * Action display to show in the card via translation key\n   * @type {string}\n   */\n  @Input() actionDisplayKey!: string | undefined;\n\n  /**\n   * Icon to display in the card. Must be a font awesome icon\n   * @type {string}\n   */\n  @Input() icon!: string | undefined;\n\n  /**\n   * Status of the card\n   * @type {string}\n   */\n  @Input() status!: 'completed' | 'in-progress' | 'contingent' | 'alert';\n\n  /**\n   * Whether or not to display the status text\n   * @type {boolean}\n   */\n  @Input() displayStatusText = true;\n\n  /**\n   * Date the card was recieved\n   * @type {Date}\n   */\n  @Input() recievedOn!: Date;\n\n  /**\n   * Action to perform when the card is clicked\n   * @type {EventEmitter<any>}\n   */\n  @Output() cardAction: EventEmitter<any> = new EventEmitter();\n\n  localActionCard!: any;\n\n  constructor(\n    private _router: Router,\n    private _translateService: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    this.translateActionCard();\n  }\n\n  handleCardAction(action?: string) {\n    this.cardAction.emit(action);\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n\n  /**\n   *\n   * @param alert\n   * @returns\n   */\n  private translateActionCard(): any {\n    if (this.titleKey) {\n      this.title = this._translateService.instant(this.titleKey);\n    }\n    if (this.descriptionKey) {\n      this.description = this._translateService.instant(this.descriptionKey);\n    }\n    if (this.actionDisplayKey) {\n      this.actionDisplay = this._translateService.instant(\n        this.actionDisplayKey\n      );\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".action-card {\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0px 0px 6px #24365526;\n  padding: 1.5rem;\n  height: 100%;\n  min-height: 16rem;\n  transition: 150ms ease-in-out;\n  position: relative;\n  width: 100%;\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  &:hover {\n    box-shadow: none;\n  }\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    margin-bottom: 2rem;\n    span {\n      font-size: 2rem;\n      margin-right: 0.75rem;\n    }\n  }\n  .icon {\n    color: var(--global-warning);\n  }\n  .description {\n    margin-bottom: 3rem;\n  }\n  .action-display {\n    position: absolute;\n    bottom: 1rem;\n    color: var(--global-success);\n    font-weight: bold;\n    width: 100%;\n    left: 0;\n    padding: 0 2rem;\n  }\n  &.completed {\n    border-right: 10px solid var(--global-success);\n    .icon {\n      color: var(--global-success);\n    }\n  }\n  &.in-progress {\n    border-right: 10px solid var(--global-warning);\n    .icon {\n      color: var(--global-warning);\n    }\n  }\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .description {\n      color: var(--global-danger);\n    }\n    .action-display {\n      color: var(--global-danger);\n    }\n    .icon {\n      color: var(--global-danger);\n    }\n  }\n  &.contingent {\n    border-right: 10px solid var(--global-gray);\n    .icon {\n      color: var(--global-gray);\n    }\n  }\n  &.disabled {\n    cursor: not-allowed;\n    background-color: #f4f4f4;\n    .icon {\n      color: var(--global-gray);\n    }\n    .action-display {\n      color: var(--global-gray);\n    }\n    &:hover {\n      box-shadow: 0px 0px 6px #24365526;\n    }\n  }\n  &.status-card {\n    min-height: 12rem;\n    .title {\n      margin-bottom: 1rem;\n    }\n    .status {\n      margin-bottom: 1rem;\n    }\n    .description {\n      margin-bottom: 2.5rem;\n    }\n  }\n}\n\n.status {\n  font-weight: bold;\n  font-size: 1.25rem;\n  position: relative;\n  margin: 1rem 0 2rem 0;\n  text-align: right;\n  span {\n    text-transform: capitalize;\n    white-space: nowrap;\n    &.completed {\n      color: var(--global-success);\n    }\n    &.in-progress {\n      color: var(--global-warning);\n    }\n    &.alert {\n      color: var(--global-danger);\n    }\n    &.contingent {\n      color: var(--global-gray);\n    }\n  }\n  .date {\n    font-size: 14px;\n  }\n}\n",
          "styleUrl": "./action-card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 119,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "router": {
          "name": "router",
          "getSignature": {
            "name": "router",
            "type": "",
            "returnType": "Router",
            "line": 134
          }
        }
      },
      "templateData": "<div\n  class=\"action-card {{ status }} {{ disabled ? 'disabled' : '' }} {{\n    status ? 'status-card' : ''\n  }}\"\n>\n  <a\n    *ngIf=\"!disabled && actionType === 'component'\"\n    [routerLink]=\"actionAction\"\n    class=\"hotspot\"\n  ></a>\n  <button\n    *ngIf=\"!disabled && actionType === 'dialog'\"\n    class=\"hotspot\"\n    (click)=\"handleCardAction(actionAction)\"\n  ></button>\n  <div class=\"card-content flex flex-wrap\" [class]=\"status\">\n    <div class=\"col-12 {{ status && displayStatusText ? 'md:col-8' : '' }}\">\n      <h5 class=\"title\">\n        <span class=\"icon\"><i [class]=\"icon\"></i></span>{{ title }}\n      </h5>\n      <div class=\"description\">{{ description }}</div>\n      <div class=\"action-display\">\n        <div *ngIf=\"actionStyle === 'link'\">\n          {{ actionDisplay }}\n        </div>\n        <div *ngIf=\"actionStyle === 'button'\">\n          <sl-button\n            [variant]=\"!disabled ? 'primary' : 'neutral'\"\n            [disabled]=\"disabled\"\n            style=\"width: 100%\"\n            >{{ actionDisplay }}</sl-button\n          >\n        </div>\n      </div>\n    </div>\n    <div class=\"status col-12 md:col-4\" *ngIf=\"status && displayStatusText\">\n      Status:\n      <span [class]=\"status\"> {{ status.replace('-', ' ') }}</span>\n      <div class=\"date\" *ngIf=\"recievedOn\">\n        Received on {{ recievedOn | date : 'MM/dd/yyyy' }}\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "AddRecordModalComponent",
      "id": "component-AddRecordModalComponent-9b898fecb915bc5693343a357ef813438a731ff50be4e25271fcf342fffc3a03427cfb8e110398a74884cb0357bfa7d02c0ed9023a3bb0cb64e4c53e1ff1c185",
      "file": "src/app/gme-history/add-record-modal/add-record-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-add-record-modal",
      "styleUrls": ["./add-record-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./add-record-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "isEdit$",
          "defaultValue": "new BehaviorSubject<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "any",
          "decorators": []
        },
        {
          "name": "slectedGmeRotationId$",
          "defaultValue": "new BehaviorSubject<\n    { id?: number; nextStart: string; nextEnd?: string } | undefined\n  >(undefined)",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "EventEmitter<any>"
        },
        {
          "name": "relaunchDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "accreditedInstitutions$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 105,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.accreditedInstitutions"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "accreditedInstitutionsSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 116
        },
        {
          "name": "addEditRecordFields",
          "defaultValue": "ADD_EDIT_RECORD_FIELDS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormFields[]",
          "optional": false,
          "description": "",
          "line": 127
        },
        {
          "name": "addEditRecordsForm",
          "defaultValue": "new FormGroup(\n    {\n      endDate: new FormControl('', [Validators.required]),\n      startDate: new FormControl('', [Validators.required]),\n      weeks: new FormControl(''),\n      programName: new FormControl('', [Validators.required]),\n      alternateInstitutionName: new FormControl('', [Validators.required]),\n      clinicalLevelId: new FormControl(null, [Validators.required]),\n      clinicalActivityId: new FormControl(null, [Validators.required]),\n      other: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      isInternationalRotation: new FormControl(false, [Validators.required]),\n    },\n    {\n      validators: [\n        validateStartAndEndDates('startDate', 'endDate'),\n        validateMinDuration('startDate', 'endDate', 2),\n        validateMaxDuration('startDate', 'endDate', 364),\n      ],\n    }\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 132
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearGraduateMedicalEducationErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 109
        },
        {
          "name": "clinicalActivities$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IClinicalActivityReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 101,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.clinicalActivities"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "clinicalActivitiesList",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IClinicalActivityReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 122
        },
        {
          "name": "clinicalActivitiesSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 115
        },
        {
          "name": "clinicalLevels$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IClinicalLevelReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 98,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.clinicalLevels"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "clinicalLevelsSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 114
        },
        {
          "name": "createActionSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 119
        },
        {
          "name": "endDateOverlap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 94,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "gmeRotations$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRotationReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 89,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isEditLocal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 128
        },
        {
          "name": "localRotationsList",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 111
        },
        {
          "name": "nonClinicalActivities",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IClinicalActivityReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 121
        },
        {
          "name": "rotationToEdit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationModel | undefined",
          "optional": false,
          "description": "",
          "line": 130
        },
        {
          "name": "selectedRotation$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRotationModel> | undefined",
          "optional": false,
          "description": "",
          "line": 92,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationDetails"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedRotationSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 113
        },
        {
          "name": "startDateOverlap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 124
        },
        {
          "name": "updateActionSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 118
        }
      ],
      "methodsClass": [
        {
          "name": "changeModalData",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 735,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 739,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "fetchDropdownData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 180,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "fetchFormData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 261,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "filterItems",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "formField",
              "type": "IFormFields",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 685,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "formField",
              "type": "IFormFields",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 159,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 169,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 312,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 692,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "InputSelectComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "AutoCompleteModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { InputSelectComponent } from 'src/app/shared/components/base-input/input-select.component';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CalendarModule } from 'primeng/calendar';\nimport { IFormFields } from 'src/app/shared/models/form-fields/form-fields';\nimport { ADD_EDIT_RECORD_FIELDS } from './add-record-form-fields';\nimport { FormErrorsComponent } from '../../shared/components/form-errors/form-errors.component';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationModel, IRotationReadOnlyModel } from 'src/app/api';\nimport {\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  PicklistsSelectors,\n  GetAccreditedProgramInstitutionsList,\n} from '../../state/picklists';\nimport {\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n} from '../../api';\nimport {\n  validateMaxDuration,\n  validateMinDuration,\n  validateStartAndEndDates,\n} from 'src/app/shared/validators/validators';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ButtonModule } from 'primeng/button';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-add-record-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    CalendarModule,\n    AutoCompleteModule,\n    FormErrorsComponent,\n    ButtonModule,\n  ],\n  templateUrl: './add-record-modal.component.html',\n  styleUrls: ['./add-record-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AddRecordModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Output() relaunchDialog: EventEmitter<any> = new EventEmitter();\n  @Input() isEdit$ = new BehaviorSubject<boolean>(false);\n  @Input() slectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string; nextEnd?: string } | undefined\n  >(undefined);\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors) errors$:\n    | Observable<any>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.clinicalLevels) clinicalLevels$:\n    | Observable<IClinicalLevelReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.clinicalActivities) clinicalActivities$:\n    | Observable<IClinicalActivityReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.accreditedInstitutions)\n  accreditedInstitutions$:\n    | Observable<IAccreditedProgramInstitutionReadOnlyModel[]>\n    | undefined;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  localRotationsList: IRotationReadOnlyModel[] = [];\n\n  selectedRotationSubscription: Subscription | undefined;\n  clinicalLevelsSubscription: Subscription | undefined;\n  clinicalActivitiesSubscription: Subscription | undefined;\n  accreditedInstitutionsSubscription: Subscription | undefined;\n\n  updateActionSubscription: Subscription | undefined;\n  createActionSubscription: Subscription | undefined;\n\n  nonClinicalActivities: IClinicalActivityReadOnlyModel[] = [];\n  clinicalActivitiesList: IClinicalActivityReadOnlyModel[] = [];\n\n  startDateOverlap: IRotationReadOnlyModel | undefined;\n  endDateOverlap: IRotationReadOnlyModel | undefined;\n\n  addEditRecordFields: IFormFields[] = ADD_EDIT_RECORD_FIELDS;\n  isEditLocal = false;\n\n  rotationToEdit: IRotationModel | undefined;\n\n  addEditRecordsForm = new FormGroup(\n    {\n      endDate: new FormControl('', [Validators.required]),\n      startDate: new FormControl('', [Validators.required]),\n      weeks: new FormControl(''),\n      programName: new FormControl('', [Validators.required]),\n      alternateInstitutionName: new FormControl('', [Validators.required]),\n      clinicalLevelId: new FormControl(null, [Validators.required]),\n      clinicalActivityId: new FormControl(null, [Validators.required]),\n      other: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      isInternationalRotation: new FormControl(false, [Validators.required]),\n    },\n    {\n      validators: [\n        validateStartAndEndDates('startDate', 'endDate'),\n        validateMinDuration('startDate', 'endDate', 2),\n        validateMaxDuration('startDate', 'endDate', 364),\n      ],\n    }\n  );\n\n  constructor(private _store: Store) {}\n  ngOnDestroy(): void {\n    this.selectedRotationSubscription?.unsubscribe();\n    this.clinicalLevelsSubscription?.unsubscribe();\n    this.clinicalActivitiesSubscription?.unsubscribe();\n    this.accreditedInstitutionsSubscription?.unsubscribe();\n\n    this.updateActionSubscription?.unsubscribe();\n    this.createActionSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.fetchDropdownData();\n    this.fetchFormData();\n\n    this.onChanges();\n\n    this.gmeRotations$?.pipe(untilDestroyed(this)).subscribe((gmeRotations) => {\n      this.localRotationsList = gmeRotations;\n    });\n  }\n\n  fetchDropdownData() {\n    this._store.dispatch(new GetClinicalLevelList());\n    this._store.dispatch(new GetClinicalActivityList());\n    this._store.dispatch(new GetAccreditedProgramInstitutionsList());\n\n    this.accreditedInstitutionsSubscription =\n      this.accreditedInstitutions$?.pipe(untilDestroyed(this)).subscribe((accreditedInstitutions) => {\n        if (accreditedInstitutions) {\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'programName') {\n              field.options = accreditedInstitutions.map(\n                (institution) => institution.institutionName\n              );\n            }\n          });\n        }\n      });\n\n    this.clinicalLevelsSubscription = this.clinicalLevels$?.pipe(untilDestroyed(this)).subscribe(\n      (clinicalLevels) => {\n        if (clinicalLevels) {\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'clinicalLevelId') {\n              field.options = clinicalLevels.map((level) => {\n                return {\n                  label: level.name,\n                  value: level.id,\n                };\n              });\n            }\n          });\n        }\n      }\n    );\n    this.clinicalActivitiesSubscription = this.clinicalActivities$?.pipe(untilDestroyed(this)).subscribe(\n      (clinicalActivities) => {\n        this.clinicalActivitiesList = clinicalActivities;\n        if (clinicalActivities) {\n          this.nonClinicalActivities = clinicalActivities.filter((activity) => {\n            if (activity.name.includes('Non-Clinical')) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n          const essentialActivities = clinicalActivities.filter((activity) => {\n            return activity.isEssential;\n          });\n          const otherActivities = clinicalActivities.filter((activity) => {\n            return !activity.isEssential;\n          });\n\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'clinicalActivityId') {\n              field.options = [\n                {\n                  label: 'Essential Activities',\n                  items: essentialActivities.map((activity) => {\n                    return {\n                      label: activity.name,\n                      value: activity.id,\n                    };\n                  }),\n                },\n                {\n                  label: 'Other Activities',\n                  items: otherActivities.map((activity) => {\n                    return {\n                      label: activity.name,\n                      value: activity.id,\n                    };\n                  }),\n                },\n              ];\n            }\n          });\n        }\n      }\n    );\n  }\n\n  fetchFormData() {\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      if (rotation) {\n        this.rotationToEdit = rotation;\n        for (const [key, value] of Object.entries(rotation)) {\n          let newValue = value;\n          if (key === 'startDate' || key === 'endDate') {\n            newValue = new Date(value).toLocaleDateString();\n          }\n          this.addEditRecordsForm.get(key)?.setValue(newValue);\n        }\n        //this.onChanges();\n      } else {\n        this.rotationToEdit = undefined;\n        //handle if no data is returned or if there was an error\n        this.addEditRecordsForm.reset();\n        this.addEditRecordsForm.get('isInternationalRotation')?.setValue(false);\n        //this.onChanges();\n      }\n    });\n\n    this.isEdit$.pipe(untilDestroyed(this)).subscribe((isEdit) => {\n      this.isEditLocal = isEdit;\n\n      if (!this.isEditLocal) {\n        this.addEditRecordsForm.reset();\n        this.addEditRecordsForm.get('isInternationalRotation')?.setValue(false);\n        //this.onChanges();\n      }\n    });\n\n    this.slectedGmeRotationId$.pipe(untilDestroyed(this)).subscribe((value) => {\n      if (value?.nextStart && value?.nextStart !== '') {\n        const startDate = new Date(value.nextStart);\n        startDate.setDate(startDate.getDate() + 1);\n\n        this.addEditRecordsForm\n          .get('startDate')\n          ?.setValue(startDate.toLocaleDateString());\n      }\n      if (value?.nextEnd && value?.nextEnd !== '') {\n        const endDate = new Date(value.nextEnd);\n        endDate.setDate(endDate.getDate());\n\n        this.addEditRecordsForm\n          .get('endDate')\n          ?.setValue(endDate.toLocaleDateString());\n      }\n    });\n  }\n\n  onChanges() {\n    let durationInWeeks = 0;\n    const otherField = this.addEditRecordFields.find(\n      (field) => field.name === 'other'\n    );\n\n    const startDateField = this.addEditRecordFields.find(\n      (field) => field.name === 'startDate'\n    );\n\n    const endDateField = this.addEditRecordFields.find(\n      (field) => field.name === 'endDate'\n    );\n\n    const calculateWeeks = () => {\n      const startDate = this.addEditRecordsForm.get('endDate')?.value\n        ? new Date(this.addEditRecordsForm.get('endDate')?.value as string)\n        : undefined;\n\n      const endDate = this.addEditRecordsForm.get('startDate')?.value\n        ? new Date(this.addEditRecordsForm.get('startDate')?.value as string)\n        : undefined;\n\n      if (startDate && endDate) {\n        const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n        const weeks = diffDays / 7;\n        let weeksValue: string | undefined;\n        if (weeks >= 1) {\n          durationInWeeks = weeks;\n          weeksValue = Math.round(weeks).toString();\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'weeks') {\n              field.label = 'Week(s)';\n            }\n          });\n        } else {\n          durationInWeeks = 0;\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'weeks') {\n              field.label = 'Day(s)';\n            }\n          });\n          weeksValue = diffDays.toString();\n        }\n\n        this.addEditRecordsForm.get('weeks')?.setValue(weeksValue.toString());\n      }\n    };\n\n    const setDurationErrors = () => {\n      if (startDateField) {\n        if (this.addEditRecordsForm.errors) {\n          if (this.addEditRecordsForm.errors['minDurationValid'] === false) {\n            startDateField.errorText = 'Rotations must be at least 2 days long';\n            startDateField.overlapId = undefined;\n          } else if (\n            this.addEditRecordsForm.errors['maxDurationValid'] === false\n          ) {\n            startDateField.errorText =\n              'Rotations must be less than 364 days long';\n            startDateField.overlapId = undefined;\n          } else {\n            //startDateField.errorText = undefined;\n          }\n        } else {\n          //startDateField.errorText = undefined;\n        }\n      }\n    };\n\n    const checkForOverlap = () => {\n      const startDate = this.addEditRecordsForm.get('startDate')?.value\n        ? new Date(this.addEditRecordsForm.get('startDate')?.value as string)\n        : undefined;\n\n      const endDate = this.addEditRecordsForm.get('endDate')?.value\n        ? new Date(this.addEditRecordsForm.get('endDate')?.value as string)\n        : undefined;\n\n      if (startDate) {\n        this.startDateOverlap = this.localRotationsList.find((rotation) => {\n          // check rotation.id against this.rotationToEdit.id\n          if (\n            new Date(rotation.startDate) <= startDate &&\n            new Date(rotation.endDate) >= startDate &&\n            rotation.id !== this.rotationToEdit?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        if (startDateField) {\n          if (this.startDateOverlap) {\n            startDateField.errorText =\n              'This start date overlaps with an existing rotation';\n            startDateField.overlapId = this.startDateOverlap.id;\n          } else {\n            //startDateField.errorText = undefined;\n            startDateField.overlapId = undefined;\n          }\n        }\n      } else {\n        if (startDateField) {\n          //startDateField.errorText = undefined;\n        }\n      }\n\n      if (endDate) {\n        this.endDateOverlap = this.localRotationsList.find((rotation) => {\n          if (\n            new Date(rotation.startDate) <= endDate &&\n            new Date(rotation.endDate) >= endDate &&\n            rotation.id !== this.rotationToEdit?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        if (endDateField) {\n          if (this.endDateOverlap) {\n            endDateField.errorText =\n              'This end date overlaps with an existing rotation';\n            endDateField.overlapId = this.endDateOverlap.id;\n          } else {\n            endDateField.errorText = undefined;\n            endDateField.overlapId = undefined;\n          }\n        }\n      } else {\n        if (endDateField) {\n          endDateField.errorText = undefined;\n        }\n      }\n    };\n\n    const setClinicalActivityErrors = (\n      clinicalLevelId?: number | null,\n      clinicalActivityId?: number | null\n    ) => {\n      const otherFellowshipsText =\n        'Please specify which other clinical Fellowships.';\n      const durationText =\n        'Please explain the reason for this rotation being more than 4 months long.';\n      const nonPrimaryText =\n        'Please explain the reason for a rotation in a non-primary activity.';\n      const generalExplainText = 'Please explain the nature of this rotation.';\n\n      let index = -1;\n\n      const activity = this.clinicalActivitiesList.find(\n        (activity) => activity.id === clinicalActivityId\n      );\n      const helpTextArray: string[] = [];\n\n      // if clinical level = 9, then show other field\n      if (clinicalLevelId && clinicalLevelId === 9) {\n        if (!helpTextArray.includes(otherFellowshipsText)) {\n          helpTextArray.push(\n            'Please specify which other clinical Fellowships.'\n          );\n        }\n      } else {\n        index = helpTextArray.indexOf(otherFellowshipsText);\n        if (index > -1) {\n          helpTextArray.splice(index, 1);\n        }\n      }\n\n      //if clinicalLevelId = 4 or 6 && clinicalActivityId = 5 or 17, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 4 || clinicalLevelId === 6) &&\n        clinicalActivityId &&\n        (clinicalActivityId === 5 || clinicalActivityId === 17)\n      ) {\n        if (!helpTextArray.includes(generalExplainText)) {\n          helpTextArray.push(generalExplainText);\n        }\n      } else {\n        index = helpTextArray.indexOf(generalExplainText);\n        if (index > -1) {\n          helpTextArray.splice(index, 1);\n        }\n      }\n\n      //if clinicalLevelId = 5 or 7 && duration > 16 weeks, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        durationInWeeks >= 16\n      ) {\n        if (!helpTextArray.includes(durationText)) {\n          helpTextArray.push(durationText);\n        }\n      } else {\n        index = helpTextArray.indexOf(durationText);\n        if (index > -1) {\n          helpTextArray.splice(index, 1);\n        }\n      }\n\n      //if clinicalLevelId = 5 or 7 and clinical activity is essential === false\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        activity &&\n        !activity.isEssential\n      ) {\n        if (!helpTextArray.includes(nonPrimaryText)) {\n          helpTextArray.push(nonPrimaryText);\n        }\n      } else {\n        index = helpTextArray.indexOf(nonPrimaryText);\n        if (index > -1) {\n          helpTextArray.splice(index, 1);\n        }\n      }\n\n      // if we found any of the above enable and require the explain field and display the help text\n      if (helpTextArray.length > 0) {\n        if (otherField) {\n          otherField.helpTextArray = helpTextArray;\n        }\n        this.addEditRecordsForm.get('other')?.enable();\n        this.addEditRecordsForm\n          .get('other')\n          ?.setValidators([Validators.required]);\n      } else {\n        if (otherField) {\n          otherField.helpTextArray = undefined;\n        }\n\n        this.addEditRecordsForm.get('other')?.setValue('');\n        this.addEditRecordsForm.get('other')?.disable();\n        this.addEditRecordsForm.get('other')?.setValidators([]);\n      }\n    };\n\n    this.addEditRecordsForm\n      .get('endDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.addEditRecordFields.filter((field) => {\n          if (field.name === 'startDate') {\n            if (val) {\n              field.validators.maxDate = new Date(val);\n            } else {\n              field.validators.maxDate = null;\n            }\n          }\n        });\n\n        if (startDateField) {\n          startDateField.errorText = undefined;\n        }\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.addEditRecordsForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.addEditRecordsForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.addEditRecordsForm\n      .get('startDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.addEditRecordFields.filter((field) => {\n          if (field.name === 'endDate') {\n            if (val) {\n              field.validators.minDate = new Date(val);\n            } else {\n              field.validators.minDate = null;\n            }\n          }\n        });\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.addEditRecordsForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.addEditRecordsForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.addEditRecordsForm\n      .get('clinicalLevelId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalActivityId =\n          this.addEditRecordsForm.get('clinicalActivityId')?.value;\n\n        setClinicalActivityErrors(val, clinicalActivityId);\n      });\n\n    this.addEditRecordsForm\n      .get('clinicalActivityId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalLevelId =\n          this.addEditRecordsForm.get('clinicalLevelId')?.value;\n\n        setClinicalActivityErrors(clinicalLevelId, val);\n\n        if (val) {\n          const activity = this.nonClinicalActivities.find(\n            (activity) => activity.id === val\n          );\n          if (activity) {\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.enable();\n            this.addEditRecordsForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([Validators.required]);\n          } else {\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.setValue('');\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.disable();\n            this.addEditRecordsForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([]);\n          }\n        }\n      });\n\n    this.addEditRecordsForm\n      .get('programName')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.addEditRecordsForm.get('alternateInstitutionName')?.setValue('');\n          this.addEditRecordsForm.get('alternateInstitutionName')?.disable();\n          this.addEditRecordsForm\n            .get('alternateInstitutionName')\n            ?.setValidators([]);\n        } else {\n          this.addEditRecordsForm.get('alternateInstitutionName')?.enable();\n          this.addEditRecordsForm\n            .get('alternateInstitutionName')\n            ?.setValidators([Validators.required]);\n        }\n      });\n    this.addEditRecordsForm\n      .get('alternateInstitutionName')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.addEditRecordsForm.get('programName')?.setValidators([]);\n        } else {\n          this.addEditRecordsForm\n            .get('programName')\n            ?.setValidators([Validators.required]);\n        }\n      });\n  }\n\n  filterItems($event: any, formField: IFormFields) {\n    const value = $event.query;\n    formField.filteredOptions = formField.options?.filter((i) => {\n      return i?.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  onSubmit() {\n    const formValues = this.addEditRecordsForm.getRawValue();\n    let startDate = '';\n    let endDate = '';\n    if (formValues.startDate) {\n      startDate = new Date(formValues.startDate).toISOString();\n    }\n    if (formValues.endDate) {\n      endDate = new Date(formValues.endDate).toISOString();\n    }\n\n    const newRotation = {\n      id: this.rotationToEdit?.id || 0,\n      startDate: startDate,\n      endDate: endDate,\n      clinicalLevelId: formValues.clinicalLevelId ?? 0,\n      clinicalActivityId: formValues.clinicalActivityId || 0,\n      programName: formValues.programName ?? '',\n      nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n      alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n      isInternationalRotation: formValues.isInternationalRotation ?? false,\n      other: formValues.other ?? '',\n    } as unknown as IRotationModel;\n\n    if (this.isEditLocal) {\n      this.updateActionSubscription = this._store\n        .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n        .subscribe((res) => {\n          if (!res.graduateMedicalEducation?.errors) {\n            this.close();\n          }\n        });\n    } else {\n      this.createActionSubscription = this._store\n        .dispatch(new CreateGraduateMedicalEducation(newRotation))\n        .subscribe((res) => {\n          if (!res.graduateMedicalEducation?.errors) {\n            this.close();\n          }\n        });\n    }\n  }\n\n  changeModalData(id: number) {\n    this.relaunchDialog.emit(id);\n  }\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".readonly-text {\n  background-color: #ededed;\n  border-radius: 4px;\n}\n",
          "styleUrl": "./add-record-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 156,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n  dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n  amet tortor at, condimentum tempor erat.\n</p>\n<ng-container>\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"addEditRecordsForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of addEditRecordFields\"\n      class=\"col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\"\n        >{{ formField.label }}{{ formField.required ? '*' : '' }}</label\n      >\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        [formControlName]=\"formField.name\"\n        [readonly]=\"formField.readonly\"\n        ngDefaultControl\n        pInputText\n      />\n      <p\n        class=\"my-0 px-3 py-2 readonly-text\"\n        *ngIf=\"formField.type === 'text-readonly'\"\n      >\n        {{ addEditRecordsForm.get(formField.name)?.value ?? '-' }}\n      </p>\n      <p-calendar\n        *ngIf=\"formField.type === 'date'\"\n        [formControlName]=\"formField.name\"\n        [showIcon]=\"true\"\n        [inputId]=\"formField.name\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [required]=\"formField.required\"\n        [minDate]=\"formField.validators.minDate\"\n        [maxDate]=\"formField.validators.maxDate\"\n        ngDefaultControl\n        appendTo=\"body\"\n      ></p-calendar>\n      <p-autoComplete\n        *ngIf=\"formField.type === 'autocomplete'\"\n        [inputId]=\"formField.name\"\n        [formControlName]=\"formField.name\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [suggestions]=\"formField.filteredOptions ?? []\"\n        (completeMethod)=\"filterItems($event, formField)\"\n        [forceSelection]=\"true\"\n        appendTo=\"body\"\n      ></p-autoComplete>\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [inputId]=\"formField.name\"\n        [editable]=\"false\"\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n        appendTo=\"body\"\n        optionLabel=\"label\"\n        optionValue=\"value\"\n      ></p-dropdown>\n      <p-dropdown\n        *ngIf=\"formField.type === 'grouped-select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [group]=\"true\"\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n        appendTo=\"body\"\n      >\n        <ng-template let-group pTemplate=\"group\">\n          <strong>{{ group.label }}</strong>\n        </ng-template>\n      </p-dropdown>\n      <div\n        class=\"flex flex-wrap gap-3\"\n        *ngIf=\"formField.type === 'radio-group'\"\n      >\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of formField.options\"\n        >\n          <p-radioButton\n            [name]=\"formField.name\"\n            [value]=\"option.value\"\n            [formControlName]=\"formField.name\"\n            [inputId]=\"formField.name + formField.value\"\n          ></p-radioButton>\n          <label [for]=\"formField.name + formField.value\" class=\"ml-2\">{{\n            option.label\n          }}</label>\n        </div>\n      </div>\n      <div *ngIf=\"formField.type === 'textarea'\">\n        <textarea\n          pInputTextarea\n          [id]=\"formField.name\"\n          [name]=\"formField.name\"\n          [formControlName]=\"formField.name\"\n          ngDefaultControl\n        ></textarea>\n      </div>\n      <small class=\"form-helper-text text-muted\" *ngIf=\"formField.helpText\">{{\n        formField.helpText\n      }}</small>\n      <small\n        class=\"form-helper-text text-muted\"\n        *ngFor=\"let helpText of formField.helpTextArray\"\n        >{{ helpText }}</small\n      >\n      <small\n        class=\"form-helper-text text-danger my-0 flex align-items-center\"\n        style=\"min-height: 37px\"\n        *ngIf=\"formField.errorText\"\n      >\n        <span>*{{ formField.errorText }}</span>\n        <p-button\n          *ngIf=\"formField.overlapId\"\n          icon=\"pi pi-pencil\"\n          styleClass=\"p-button-rounded p-button-text p-button-secondary p-button-sm\"\n          title=\"click here to edit the overlapping record\"\n          (onClick)=\"changeModalData(formField.overlapId)\"\n        ></p-button>\n      </small>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\">\n        Cancel\n      </p-button>\n      <p-button\n        [style]=\"{ width: '337px' }\"\n        type=\"submit\"\n        [disabled]=\"\n          addEditRecordsForm.invalid || startDateOverlap\n            ? true\n            : false || endDateOverlap\n            ? true\n            : false\n        \"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "AlertComponent",
      "id": "component-AlertComponent-6b37c716b7f1957724ce3a1dbb9c9b55076c8c695e0393eeaf57c7a9ab8e839141966d21f23aa5de484ee16880ec75b9460cdc6fea1f9379408a466e74e70705",
      "file": "src/app/shared/components/alert/alert.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-alert",
      "styleUrls": ["./alert.component.scss"],
      "styles": [],
      "templateUrl": ["./alert.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "alertType",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        },
        {
          "name": "fontSize",
          "defaultValue": "1.25",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "number",
          "decorators": []
        },
        {
          "name": "hideIcon",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-alert',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AlertComponent {\n  @Input() alertType!: string;\n  @Input() hideIcon = false;\n  @Input() fontSize = 1.25;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".alert {\n  padding: 10px 20px;\n  font-weight: bold;\n  font-size: 20px;\n  border-radius: 6px;\n  &.danger {\n    color: white;\n    background-color: var(--global-danger);\n  }\n  &.warning {\n    color: white;\n    background-color: var(--global-warning);\n  }\n  &.success {\n    color: white;\n    background-color: var(--global-success);\n  }\n  &.info {\n    color: white;\n    background-color: var(--global-primary);\n  }\n  .icon {\n    margin-right: 10px;\n    font-size: 24px;\n  }\n}\n",
          "styleUrl": "./alert.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div\n  class=\"alert flex align-items-center\"\n  [style]=\"{ 'font-size': fontSize + 'rem' }\"\n  [class]=\"alertType\"\n>\n  <div\n    class=\"icon\"\n    [style]=\"{ 'font-size': fontSize + 0.25 + 'rem' }\"\n    *ngIf=\"!hideIcon\"\n  >\n    <i\n      class=\"fa-solid fa-circle-exclamation\"\n      *ngIf=\"alertType === 'danger'\"\n    ></i>\n    <i\n      class=\"fa-solid fa-triangle-exclamation\"\n      *ngIf=\"alertType === 'warning'\"\n    ></i>\n    <i class=\"fa-solid fa-circle-info\" *ngIf=\"alertType === 'info'\"></i>\n    <i class=\"fa-solid fa-circle-check\" *ngIf=\"alertType === 'success'\"></i>\n  </div>\n  <ng-content></ng-content>\n</div>\n"
    },
    {
      "name": "AppComponent",
      "id": "component-AppComponent-a51c900a23316b54a2352ed2beeae0fc19b51b722508bdb630c3c0b02efaf2f69f295bde6931b068d678cea8581d8cb67fa40fd34757b3466834fd4ada5af6d2",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "currentYear",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "isAuthenticated",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "isAuthenticated$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.isAuthenticated"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isExaminer",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "isPasswordReset",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "isSideNavOpen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "isSurgeon",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "keysPressed",
          "defaultValue": "new Set()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "loginUser$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAppUserReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 58,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "AuthSelectors.loginUser"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "messages",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Message[]",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "preventScreenshot",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile> | undefined",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "version",
          "defaultValue": "packageInfo.buildId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        }
      ],
      "methodsClass": [
        {
          "name": "checkMacOsScreenshotV1",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleSideNavToggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 155,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "RouterOutlet"
        },
        {
          "name": "LoginComponent",
          "type": "component"
        },
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "NgxsModule",
          "type": "module"
        },
        {
          "name": "SideNavigationComponent",
          "type": "component"
        },
        {
          "name": "DashboardHeaderComponent",
          "type": "component"
        },
        {
          "name": "MessagesModule",
          "type": "module"
        },
        {
          "name": "AlertComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ActivatedRoute,\n  Router,\n  RouterOutlet,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { Observable, Subscription, take } from 'rxjs';\nimport { NgxsModule, Select, Store } from '@ngxs/store';\nimport packageInfo from '../../package.json';\nimport { MessagesModule } from 'primeng/messages';\n\nimport {\n  AuthSelectors,\n  GetUserProfile,\n  IUserProfile,\n  UserProfileSelectors,\n} from './state';\nimport { SideNavigationComponent } from './side-navigation/side-navigation.component';\nimport { DashboardHeaderComponent } from './shared/components/dashboard-header/dashboard-header.component';\nimport { UserClaims } from './side-navigation/user-status.enum';\nimport { Message } from 'primeng/api';\nimport { AlertComponent } from './shared/components/alert/alert.component';\nimport { LoadApplication } from './state/application/application.actions';\nimport { IAppUserReadOnlyModel } from './api';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    LoginComponent,\n    CommonModule,\n    TranslateModule,\n    NgxsModule,\n    SideNavigationComponent,\n    DashboardHeaderComponent,\n    MessagesModule,\n    AlertComponent,\n  ],\n})\nexport class AppComponent implements OnInit {\n  // TODO: MOve this logic into the auth guard\n  @Select(AuthSelectors.slices.isAuthenticated) isAuthenticated$:\n    | Observable<boolean>\n    | undefined;\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n  @Select(AuthSelectors.loginUser)\n  loginUser$: Observable<IAppUserReadOnlyModel> | undefined;\n\n  version = packageInfo.buildId;\n\n  isAuthenticated = false;\n  isPasswordReset = false;\n  isSurgeon = false;\n  isExaminer = false;\n  isSideNavOpen = false;\n\n  currentYear = new Date().getFullYear();\n\n  keysPressed = new Set();\n\n  preventScreenshot = false;\n  messages!: Message[];\n\n  constructor(\n    private _store: Store,\n    private translate: TranslateService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.isAuthenticated$?.pipe(untilDestroyed(this)).subscribe((isAuthed) => {\n      this.isAuthenticated = isAuthed;\n      this.isPasswordReset = this._store.selectSnapshot(\n        AuthSelectors.slices.isPasswordReset\n      );\n      const routerStateSnapshot: RouterStateSnapshot =\n        this.router.routerState.snapshot;\n      const loginUser = this._store.selectSnapshot(AuthSelectors.loginUser);\n      const claims = this._store.selectSnapshot(AuthSelectors.claims);\n      if (isAuthed && loginUser && claims) {\n        this._store.dispatch(new LoadApplication());\n        this.isSurgeon =\n          claims.includes(UserClaims.surgeon) &&\n          !claims.includes(UserClaims.trainee);\n        this.isExaminer = claims.includes(UserClaims.examiner);\n        this._store.dispatch(new GetUserProfile(loginUser, claims));\n      }\n\n      if (!isAuthed) {\n        const returnUrl = routerStateSnapshot.url\n          ? routerStateSnapshot.url.includes('oral-examinations/exam/')\n            ? '/dashboard'\n            : routerStateSnapshot.url\n          : '/dashboard';\n        this.router.navigate(['/login'], {\n          queryParams: { returnUrl: returnUrl },\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    document.addEventListener('keydown', (event) => {\n      this.keysPressed.add(event.keyCode);\n      this.checkMacOsScreenshotV1();\n    });\n\n    document.addEventListener('keyup', (event) => {\n      this.keysPressed.delete(event.keyCode);\n      if (event.keyCode === 44) {\n        this.preventScreenshot = true;\n      }\n      this.preventScreenshot = false;\n    });\n  }\n\n  checkMacOsScreenshotV1() {\n    const windowsKeyOrCommand = 91;\n    const windowsR = 91;\n    const commanR = 93;\n    const shiftKey = 16;\n    const prntScreen = 44;\n    const sKey = 83;\n\n    if (\n      (this.keysPressed.has(windowsKeyOrCommand) &&\n        this.keysPressed.has(shiftKey)) ||\n      (this.keysPressed.has(commanR) && this.keysPressed.has(shiftKey)) ||\n      (this.keysPressed.has(windowsR) &&\n        this.keysPressed.has(shiftKey) &&\n        this.keysPressed.has(sKey)) ||\n      this.keysPressed.has(prntScreen) ||\n      (this.keysPressed.has(windowsKeyOrCommand) &&\n        this.keysPressed.has(shiftKey)) ||\n      (this.keysPressed.has(windowsKeyOrCommand) &&\n        this.keysPressed.has(shiftKey) &&\n        this.keysPressed.has(sKey))\n    ) {\n      this.preventScreenshot = true;\n    } else {\n      this.preventScreenshot = false;\n    }\n  }\n\n  handleSideNavToggle() {\n    this.isSideNavOpen = !this.isSideNavOpen;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".screenshot-hider {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n  display: none;\n  align-items: center;\n  z-index: 100;\n  &.toggled {\n    display: flex;\n  }\n}\n\n:host {\n  aside {\n    position: fixed;\n    left: -100%;\n    overflow: hidden;\n    box-shadow: 0px 3px 6px #00000022;\n    width: 100%;\n    height: 100%;\n    background-color: white;\n    transition: 350ms ease-in-out;\n    z-index: 1;\n    &.toggled {\n      left: 0;\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  :host {\n    aside {\n      left: 0;\n      display: block;\n      width: 100%;\n      max-width: 26rem;\n    }\n    .app-content {\n      main {\n        margin-left: 26rem;\n      }\n    }\n  }\n}\n",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 73,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div id=\"toast-container\" class=\"toast-bottom-right\"></div>\n<div\n  [ngClass]=\"{\n    'app-content': isAuthenticated && !isPasswordReset,\n    'login-content': !isAuthenticated || isPasswordReset\n  }\"\n>\n  <aside\n    *ngIf=\"isAuthenticated && !isPasswordReset\"\n    [ngClass]=\"isSideNavOpen ? 'toggled' : ''\"\n  >\n    <abs-side-navigation\n      [isSurgeon]=\"isSurgeon\"\n      [isExaminer]=\"isExaminer\"\n      (handleSideNavToggle)=\"handleSideNavToggle()\"\n    ></abs-side-navigation>\n  </aside>\n  <main>\n    <div\n      class=\"screenshot-hider {{ preventScreenshot ? 'toggled' : '' }}\"\n      *ngIf=\"isAuthenticated && !isPasswordReset\"\n    >\n      Screenshots prohibited. Press any key to continue...\n    </div>\n    <div\n      [ngClass]=\"{\n        'app-container-fluid': isAuthenticated && !isPasswordReset,\n        flex: isAuthenticated && !isPasswordReset,\n        'flex-column': isAuthenticated && !isPasswordReset\n      }\"\n    >\n      <abs-dashboard-header\n        (handleSideNavToggle)=\"handleSideNavToggle()\"\n        *ngIf=\"isAuthenticated && !isPasswordReset\"\n      ></abs-dashboard-header>\n      <router-outlet></router-outlet>\n      <div\n        class=\"text-center mt-auto\"\n        *ngIf=\"isAuthenticated && !isPasswordReset\"\n      >\n        <p class=\"footer-text mb-1\">\n          @{{ currentYear }} All Rights Reserved. The American Board of Surgery\n        </p>\n        <p class=\"footer-text mb-1\">{{ version }}</p>\n      </div>\n    </div>\n  </main>\n</div>\n"
    },
    {
      "name": "AppointmentsFormComponent",
      "id": "component-AppointmentsFormComponent-26118820f38c0df690d574267facb986c760fc8bb83ce29802311660b11fca99b0614e1588824a92343348d02909d096f07f92a9b7bdbc42f6817bf36adb597c",
      "file": "src/app/professional-standing/appointments-form/appointments-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-appointments-form",
      "styleUrls": ["./appointments-form.component.scss"],
      "styles": [],
      "templateUrl": ["./appointments-form.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "any",
          "decorators": []
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "Observable<any> | undefined",
          "decorators": []
        },
        {
          "name": "formData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "any",
          "decorators": []
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "picklists",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "hospitalAppointmentForm",
          "defaultValue": "new FormGroup({\n    practiceTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    appointmentTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    stateCode: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationId: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    other: new FormControl({ value: '', disabled: false }),\n\n    authorizingOfficial: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "localEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "optionLists",
          "defaultValue": "{\n    practiceTypeOptions: [],\n\n    appointmentTypeOptions: [],\n\n    organizationTypeOptions: [],\n\n    stateCodeOptions: [],\n\n    organizationOptions: [],\n\n    filteredOrganizationOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OptionList",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "originalFormValues",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 81
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 208,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "filterItems",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "filteredOptions",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "filteredOptions",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFormChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 200,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFormValues",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 171,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "AutoCompleteModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\n\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\n\ninterface OptionList {\n  practiceTypeOptions: any[];\n  appointmentTypeOptions: any[];\n  organizationTypeOptions: any[];\n  stateCodeOptions: any[];\n  organizationOptions: any[];\n  filteredOrganizationOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-appointments-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DropdownModule,\n\n    AutoCompleteModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './appointments-form.component.html',\n  styleUrls: ['./appointments-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AppointmentsFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists: OptionList = {\n    practiceTypeOptions: [],\n\n    appointmentTypeOptions: [],\n\n    organizationTypeOptions: [],\n\n    stateCodeOptions: [],\n\n    organizationOptions: [],\n\n    filteredOrganizationOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  hospitalAppointmentForm = new FormGroup({\n    practiceTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    appointmentTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    stateCode: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    organizationId: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    other: new FormControl({ value: '', disabled: false }),\n\n    authorizingOfficial: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  onFormChanges() {\n    this.hospitalAppointmentForm\n      .get('organizationId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.hospitalAppointmentForm\n            .get('other')\n            ?.setValue('', { emitEvent: false });\n          this.hospitalAppointmentForm.get('other')?.disable();\n          this.hospitalAppointmentForm.get('other')?.clearValidators();\n        } else {\n          this.hospitalAppointmentForm.get('other')?.enable();\n          this.hospitalAppointmentForm\n            .get('other')\n            ?.setValidators([Validators.required]);\n        }\n      });\n    this.hospitalAppointmentForm\n      .get('other')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.hospitalAppointmentForm.get('organizationId')?.clearValidators();\n          this.hospitalAppointmentForm\n            .get('organizationId')\n            ?.updateValueAndValidity();\n        } else {\n          this.hospitalAppointmentForm\n            .get('organizationId')\n            ?.setValidators([Validators.required]);\n        }\n      });\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n\n        if (key === 'organizationId') {\n          newValue = this.optionLists.organizationOptions.find(\n            (i) => i.itemValue === value\n          );\n        }\n        this.hospitalAppointmentForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.hospitalAppointmentForm.reset();\n    }\n  }\n\n  filterItems($event: any, options: string, filteredOptions: string) {\n    const value = $event.query;\n    this.optionLists[filteredOptions as keyof OptionList] = this.optionLists[\n      options as keyof OptionList\n    ]?.filter((i) => {\n      return i.itemDescription.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  onSubmit() {\n    this.saveForm.emit({\n      show: false,\n      data: this.hospitalAppointmentForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./appointments-form.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"hospitalAppointmentForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div class=\"col-12\">\n      <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"practiceTypeId\">Practice Type*</label>\n\n      <p-dropdown\n        placeholder=\"Select practice type...\"\n        [options]=\"optionLists.practiceTypeOptions\"\n        name=\"practiceTypeId\"\n        inputId=\"practiceTypeId\"\n        [editable]=\"false\"\n        formControlName=\"practiceTypeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"appointmentTypeId\">Appointment Type*</label>\n\n      <p-dropdown\n        placeholder=\"Select appointment type...\"\n        [options]=\"optionLists.appointmentTypeOptions\"\n        name=\"appointmentTypeId\"\n        inputId=\"appointmentTypeId\"\n        [editable]=\"false\"\n        formControlName=\"appointmentTypeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"organizationTypeId\">Organization Type*</label>\n\n      <p-dropdown\n        placeholder=\"Select organization type...\"\n        [options]=\"optionLists.organizationTypeOptions\"\n        name=\"organizationTypeId\"\n        inputId=\"organizationTypeId\"\n        [editable]=\"false\"\n        formControlName=\"organizationTypeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"stateCode\">State*</label>\n\n      <p-dropdown\n        placeholder=\"Select a state...\"\n        [options]=\"optionLists.stateCodeOptions\"\n        name=\"stateCode\"\n        inputId=\"stateCode\"\n        [editable]=\"false\"\n        formControlName=\"stateCode\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"organizationId\"\n        >Institution<span *ngIf=\"!hospitalAppointmentForm.get('other')?.value\"\n          >*</span\n        ></label\n      >\n\n      <p-autoComplete\n        inputId=\"organizationId\"\n        formControlName=\"organizationId\"\n        placeholder=\"Select an institution...\"\n        [suggestions]=\"optionLists.filteredOrganizationOptions\"\n        (completeMethod)=\"\n          filterItems(\n            $event,\n            'organizationOptions',\n            'filteredOrganizationOptions'\n          )\n        \"\n        [forceSelection]=\"true\"\n        appendTo=\"body\"\n        field=\"itemDescription\"\n        [minLength]=\"3\"\n      ></p-autoComplete>\n      <small class=\"form-helper-text text-muted\"\n        >please enter at least 3 characters</small\n      >\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"other\"\n        >Other<span\n          *ngIf=\"!hospitalAppointmentForm.get('organizationId')?.value\"\n          >*</span\n        ></label\n      >\n\n      <input\n        placeholder=\"Enter an institution name...\"\n        name=\"other\"\n        id=\"other\"\n        [required]=\"true\"\n        formControlName=\"other\"\n        pInputText\n      />\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"authorizingOfficial\">Official*</label>\n\n      <input\n        placeholder=\"Enter the authorizing official...\"\n        name=\"authorizingOfficial\"\n        id=\"authorizingOfficial\"\n        [required]=\"true\"\n        formControlName=\"authorizingOfficial\"\n        pInputText\n      />\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        type=\"submit\"\n        [style]=\"{ width: '337px' }\"\n        [disabled]=\"hospitalAppointmentForm.invalid\"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "AttestationModalComponent",
      "id": "component-AttestationModalComponent-18fd060f2fff96db2c18ac283593ede776e2e229eb52c856540599f89fd2f96f24c16fb9470b782307a2eebb3640b83ca6f6c0c9404ff12ddc3bda8a00862212",
      "file": "src/app/continuous-certification/attestation-modal/attestation-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-attestation-modal",
      "styleUrls": ["./attestation-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./attestation-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "attestationFormFields",
          "defaultValue": "[\n    {\n      label:\n        'I hereby authorize any hospital or medical staff where I now have,have had, or have applied for medical staff privileges, and anymedical organization of which I am a member or to which I have applied for membership, and any person who may have information (including medical records, patient records, and reports of committees) which is deemed by ABS to be material to its evaluation of this application, to provide such information to representatives of the ABS. I agree that communications of any nature made to the ABS regarding this application may be made in confidence and shall not be made available to me under any circumstances. I hereby release from liability any hospital. medical staff, medical organization or person, and ABS and its representatives, for acts performed in connection with this application.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation1',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n    {\n      label:\n        'I understand that the certificate I will be issued upon successful completion of the biennial Continuous Certification Assessment will be contingent upon my on-going active participation in the Continuous Certification Program as a whole. I recognize that 10-year certificates are no longer offered by the ABS, and that the biennial Continuous Certification Assessment is replacing the traditional 10-vear recertification examination.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation2',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "userData",
          "defaultValue": "{\n    name: 'John Doe',\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-attestation-modal',\n  standalone: true,\n  imports: [CommonModule, FormsModule, CheckboxModule, ButtonModule],\n  templateUrl: './attestation-modal.component.html',\n  styleUrls: ['./attestation-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AttestationModalComponent {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  userData = {\n    name: 'John Doe',\n  };\n\n  attestationFormFields = [\n    {\n      label:\n        'I hereby authorize any hospital or medical staff where I now have,have had, or have applied for medical staff privileges, and anymedical organization of which I am a member or to which I have applied for membership, and any person who may have information (including medical records, patient records, and reports of committees) which is deemed by ABS to be material to its evaluation of this application, to provide such information to representatives of the ABS. I agree that communications of any nature made to the ABS regarding this application may be made in confidence and shall not be made available to me under any circumstances. I hereby release from liability any hospital. medical staff, medical organization or person, and ABS and its representatives, for acts performed in connection with this application.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation1',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n    {\n      label:\n        'I understand that the certificate I will be issued upon successful completion of the biennial Continuous Certification Assessment will be contingent upon my on-going active participation in the Continuous Certification Program as a whole. I recognize that 10-year certificates are no longer offered by the ABS, and that the biennial Continuous Certification Assessment is replacing the traditional 10-vear recertification examination.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation2',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n  ];\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./attestation-modal.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<form action=\"\">\n  <div class=\"form-description\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat. All fields are required.\n  </div>\n  <h6>{{ userData.name }}</h6>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of attestationFormFields\"\n      class=\"flex align-items-center gap-2 {{ formField.size }}\"\n    >\n      <p-checkbox\n        [value]=\"formField.value\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n      ></p-checkbox>\n      <label [for]=\"formField.name\">{{ formField.label }}</label>\n    </div>\n    <div class=\"col-12 flex justify-content-end btn-container mt-3\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button [style]=\"{ width: '337px' }\">Save</p-button>\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "CeScoringAppComponent",
      "id": "component-CeScoringAppComponent-2ef9ea4ada693d5757695709fbc34254c8eedbb710d91d8f16443c267aa3a610440378f92604cf0af2cc7982acad98b6f2aea92db6c543f938f2ca65f2cd5907",
      "file": "src/app/ce-scoring/ce-scoring.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-ce-scoring",
      "styleUrls": ["./ce-scoring.component.scss"],
      "styles": [],
      "templateUrl": ["./ce-scoring.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "alertsAndNotices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[] | undefined",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "ceScoreTesting",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "currentYear",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "dashboardRoster",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRosterReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "dashboardRoster$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRosterReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.dashboardRoster"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examHeaderId",
          "defaultValue": "491",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "examinationDate",
          "defaultValue": "new Date('01/01/2024').toISOString().split('T')[0]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "examinationWeek",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 74
        },
        {
          "name": "examinerAgenda$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAgendaReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 62,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examinerAgenda"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examinerConflict$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IConflictReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 65,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examinerConflict"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examTitle$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamTitleReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examTitle"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "featureFlags$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFeatureFlags> | undefined",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.featureFlags"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userActionCards",
          "defaultValue": "ACTION_CARDS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "userId$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string> | undefined",
          "optional": false,
          "description": "",
          "line": 55,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userId"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "fetchCEDashboardDate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleCardAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetCaseCommentsData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 176,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetExamScoringData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 180,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ActionCardComponent",
          "type": "component"
        },
        {
          "name": "HighlightCardComponent",
          "type": "component"
        },
        {
          "name": "UserInformationSliderComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit, isDevMode } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { ACTION_CARDS } from './user-action-cards';\nimport { HighlightCardComponent } from '../shared/components/highlight-card/highlight-card.component';\nimport { UserInformationSliderComponent } from '../shared/components/user-information-slider/user-information-slider.component';\nimport { Select, Store } from '@ngxs/store';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\n\nimport {\n  DownloadDocument,\n  ExamScoringSelectors,\n  GetExamTitle,\n  GetExaminerAgenda,\n  GetExaminerConflict,\n  GetRoster,\n  ResetCaseCommentsData,\n  ResetExamScoringData,\n  UserProfileSelectors,\n} from '../state';\nimport { IRosterReadOnlyModel } from '../api/models/scoring/roster-read-only.model';\nimport { Observable } from 'rxjs';\nimport { ButtonModule } from 'primeng/button';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\nimport { ApplicationSelectors } from '../state/application/application.selectors';\nimport { IFeatureFlags } from '../state/application/application.state';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { IAgendaReadOnlyModel } from '../api/models/examiners/agenda-read-only.model';\nimport { IConflictReadOnlyModel } from '../api/models/examiners/conflict-read-only.model';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-ce-scoring',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    ActionCardComponent,\n    HighlightCardComponent,\n    UserInformationSliderComponent,\n    ButtonModule,\n  ],\n  templateUrl: './ce-scoring.component.html',\n  styleUrls: ['./ce-scoring.component.scss'],\n})\nexport class CeScoringAppComponent implements OnInit {\n  @Select(ApplicationSelectors.slices.featureFlags) featureFlags$:\n    | Observable<IFeatureFlags>\n    | undefined;\n  @Select(ExamScoringSelectors.slices.dashboardRoster) dashboardRoster$:\n    | Observable<IRosterReadOnlyModel[]>\n    | undefined;\n\n  @Select(UserProfileSelectors.userId) userId$: Observable<string> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  @Select(ExamScoringSelectors.slices.examinerAgenda)\n  examinerAgenda$: Observable<IAgendaReadOnlyModel> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examinerConflict)\n  examinerConflict$: Observable<IConflictReadOnlyModel> | undefined;\n\n  examHeaderId = 491; // TODO - remove hard coded value\n  examinationDate = new Date('01/01/2024').toISOString().split('T')[0]; // TODO - remove hard coded value\n\n  currentYear = new Date().getFullYear();\n  userActionCards = ACTION_CARDS;\n  alertsAndNotices: any[] | undefined;\n  dashboardRoster!: IRosterReadOnlyModel[];\n  examinationWeek!: string;\n\n  ceScoreTesting = false;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService,\n    private _translateService: TranslateService\n  ) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n    this._store.dispatch(new GetExaminerAgenda(this.examHeaderId));\n    this._store.dispatch(new GetExaminerConflict(this.examHeaderId));\n    this.featureFlags$?.pipe().subscribe((featureFlags) => {\n      if (featureFlags) {\n        this.ceScoreTesting = <boolean>featureFlags.ceScoreTesting;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.userId$?.pipe(untilDestroyed(this)).subscribe((userId) => {\n      this._store.dispatch(new GetRoster(+userId, this.examinationDate));\n    });\n\n    this.fetchCEDashboardDate();\n  }\n\n  fetchCEDashboardDate() {\n    this.globalDialogService.showLoading();\n    const alertsAndNotices = [\n      {\n        title: this._translateService.instant(\n          'EXAMSCORING.DASHBOARD.AGENDA_TITLE'\n        ),\n        content: this._translateService.instant(\n          'EXAMSCORING.DASHBOARD.AGENDA_SUBTITLE'\n        ),\n        alert: false,\n        actionText: 'Not Available',\n        action: {},\n        image:\n          'https://images.pexels.com/photos/13548722/pexels-photo-13548722.jpeg',\n      },\n      {\n        title: this._translateService.instant(\n          'EXAMSCORING.DASHBOARD.CONFLICTS_TITLE'\n        ),\n        content: this._translateService.instant(\n          'EXAMSCORING.DASHBOARD.CONFLICTS_SUBTITLE'\n        ),\n        alert: false,\n        actionText: 'Not Available',\n        image:\n          'https://images.pexels.com/photos/6098057/pexels-photo-6098057.jpeg',\n        downloadLink:\n          '../../assets/files/examiner_056246_daythree_ce_agenda_dr_barnhart.pdf',\n      },\n    ];\n\n    this.examinerAgenda$?.pipe(untilDestroyed(this)).subscribe((examinerAgenda: IAgendaReadOnlyModel) => {\n      if (examinerAgenda?.id) {\n        alertsAndNotices[0].action = {\n          type: 'download',\n          documentId: examinerAgenda.id,\n          documentName: examinerAgenda.documentName,\n        };\n        alertsAndNotices[0].actionText = this._translateService.instant(\n          'EXAMSCORING.DASHBOARD.AGENDA_BTN'\n        );\n      }\n      this.globalDialogService.closeOpenDialog();\n    });\n\n    this.examinerConflict$?.pipe(untilDestroyed(this)).subscribe(\n      (examinerConflict: IConflictReadOnlyModel) => {\n        if (examinerConflict?.id) {\n          alertsAndNotices[1].action = {\n            type: 'download',\n            documentId: examinerConflict.id,\n            documentName: examinerConflict.documentName,\n          };\n          alertsAndNotices[1].actionText = this._translateService.instant(\n            'EXAMSCORING.DASHBOARD.CONFLICTS_BTN'\n          );\n        }\n        this.globalDialogService.closeOpenDialog();\n      }\n    );\n\n    this.alertsAndNotices = alertsAndNotices;\n\n    this.dashboardRoster$?.pipe(untilDestroyed(this)).subscribe((dashboardRoster) => {\n      this.dashboardRoster = dashboardRoster;\n    });\n\n    this.examinationWeek = new Date().toLocaleDateString();\n  }\n\n  handleCardAction($event: any) {\n    this._store.dispatch(new DownloadDocument($event));\n  }\n\n  resetCaseCommentsData() {\n    this._store.dispatch(new ResetCaseCommentsData());\n  }\n\n  resetExamScoringData() {\n    this._store.dispatch(new ResetExamScoringData());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "abs-user-information-slider {\n  width: 100%;\n}\n",
          "styleUrl": "./ce-scoring.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"app\">\n  <div class=\"flex justify-content-between align-items-end\">\n    <div>\n      <h1>\n        {{\n          (examTitle$ | async)?.examName || 'EXAMSCORING.DEFAULT_EXAM'\n            | translate\n        }}\n      </h1>\n      <div class=\"mb-5\">{{ 'EXAMSCORING.DASHBOARD.SUBTITLE' | translate }}</div>\n      <div class=\"mb-5 flex gap-1\" *ngIf=\"ceScoreTesting\">\n        <p-button\n          label=\"Reset Case Comments Data\"\n          (onClick)=\"resetCaseCommentsData()\"\n        ></p-button>\n        <p-button\n          label=\"Reset Exam Data\"\n          (onClick)=\"resetExamScoringData()\"\n        ></p-button>\n      </div>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <abs-user-information-slider\n      class=\"col-12\"\n      [sliderData]=\"dashboardRoster\"\n      [examinationWeek]=\"examinationWeek\"\n    >\n    </abs-user-information-slider>\n\n    <abs-highlight-card\n      class=\"col-12 md:col-6\"\n      *ngFor=\"let alert of alertsAndNotices\"\n      (action)=\"handleCardAction($event)\"\n      [title]=\"alert.title\"\n      [content]=\"alert.content\"\n      [alert]=\"alert.alert\"\n      [image]=\"alert.image\"\n      [actionType]=\"alert?.action?.type\"\n      [actionAction]=\"alert?.action?.action\"\n      [actionText]=\"alert?.actionText\"\n      [documentId]=\"alert?.action?.documentId\"\n      [documentName]=\"alert?.action?.documentName\"\n    ></abs-highlight-card>\n\n    <abs-action-card\n      class=\"grid-item col-12 md:col-6 lg:col-4\"\n      *ngFor=\"let actionCard of userActionCards\"\n      [actionCard]=\"actionCard\"\n      [titleKey]=\"actionCard.titleKey\"\n      [descriptionKey]=\"actionCard.descriptionKey\"\n      [icon]=\"actionCard.icon\"\n      [actionType]=\"actionCard?.action?.type ?? ''\"\n      [actionAction]=\"actionCard?.action?.action ?? ''\"\n      [actionDisplayKey]=\"actionCard?.actionDisplayKey\"\n    ></abs-action-card>\n  </div>\n</div>\n"
    },
    {
      "name": "CmeRepositoryComponent",
      "id": "component-CmeRepositoryComponent-715db5d781cbcaff16b8e6476a4270a24354f9a4d2d744ff0fa5ded77b80ef4a00edecb6b13e88b1f053db56511f1fa00f41f720329112339791109d8bc74894",
      "file": "src/app/cme-repository/cme-repository.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-cme-repository",
      "styleUrls": ["./cme-repository.component.scss"],
      "styles": [],
      "templateUrl": ["./cme-repository.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "cmeAdjustments$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICmeAdjustment[]> | undefined",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "ContinuingMedicalEducationSelectors.continuingMedicalEducationAdjustments"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "cmeCredits$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICmeCredit[]> | undefined",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "ContinuingMedicalEducationSelectors.continuingMedicalEducationCredits"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "cmeSummary$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICmeSummaryRow[]> | undefined",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.cmeSummary"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "cycleEndDate",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "cycleStartDate",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "droppingCredits",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDroppingCmeCredits",
          "optional": true,
          "description": "",
          "line": 55
        },
        {
          "name": "itemizedCmeCols",
          "defaultValue": "ITEMIZED_CME_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "requirementsAndAdjustmentsCols",
          "defaultValue": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "summaryCmeCols",
          "defaultValue": "SUMMARY_CME_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        }
      ],
      "methodsClass": [
        {
          "name": "initCmeData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "CollapsePanelComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ChartModule",
          "type": "module"
        },
        {
          "name": "ProgressBarComponent",
          "type": "component"
        },
        {
          "name": "TooltipModule",
          "type": "module"
        },
        {
          "name": "AlertComponent",
          "type": "component"
        },
        {
          "name": "TooltipComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ITEMIZED_CME_COLS } from './itemized-cme-cols';\nimport { REQIUREMENTS_AND_ADJUSTMENTS_COLS } from './requirments-and-adjustments-cols';\nimport { ChartModule } from 'primeng/chart';\nimport { ProgressBarComponent } from '../shared/components/progress-bar/progress-bar.component';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { SUMMARY_CME_COLS } from './summary-cme-cols';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  ContinuingMedicalEducationSelectors,\n  GetCmeSummary,\n  ICmeAdjustment,\n  ICmeCredit,\n  ICmeSummaryRow,\n  IDroppingCmeCredits,\n} from '../state';\nimport { Observable } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TooltipComponent } from '../shared/components/tooltip/tooltip.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-cme-repository',\n  templateUrl: './cme-repository.component.html',\n  styleUrls: ['./cme-repository.component.scss'],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    GridComponent,\n    ChartModule,\n    ProgressBarComponent,\n    TooltipModule,\n    AlertComponent,\n    TooltipComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n})\nexport class CmeRepositoryComponent implements OnInit {\n  @Select(ContinuingMedicalEducationSelectors.continuingMedicalEducationCredits)\n  cmeCredits$: Observable<ICmeCredit[]> | undefined;\n\n  @Select(\n    ContinuingMedicalEducationSelectors.continuingMedicalEducationAdjustments\n  )\n  cmeAdjustments$: Observable<ICmeAdjustment[]> | undefined;\n\n  @Select(ContinuingMedicalEducationSelectors.slices.cmeSummary)\n  cmeSummary$: Observable<ICmeSummaryRow[]> | undefined;\n\n  droppingCredits?: IDroppingCmeCredits;\n\n  cycleStartDate = new Date();\n  cycleEndDate = new Date();\n\n  summaryCmeCols = SUMMARY_CME_COLS;\n  requirementsAndAdjustmentsCols = REQIUREMENTS_AND_ADJUSTMENTS_COLS;\n  itemizedCmeCols = ITEMIZED_CME_COLS;\n\n  constructor(private _store: Store) {\n    this.initCmeData();\n  }\n\n  ngOnInit(): void {\n    const today = new Date();\n    this.cycleStartDate = new Date(today.getFullYear() - 5, 0, 1);\n    this.cycleEndDate = new Date(today.getFullYear(), 11, 31);\n  }\n\n  initCmeData() {\n    this._store\n      .dispatch(new GetCmeSummary())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.droppingCredits = this._store.selectSnapshot(\n          ContinuingMedicalEducationSelectors.slices.cmeDroppingCredits\n        );\n      });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".grid-container {\n  margin-top: 2rem;\n}\n\nhr {\n  border: none;\n  height: 1px;\n  background-color: var(--global-gray-light);\n}\n",
          "styleUrl": "./cme-repository.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 62,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<header>\n  <h1 class=\"mb-3\">CME Repository</h1>\n  <sl-card class=\"mb-3\">\n    <p class=\"my-0\">\n      CME requirements for the <i>Continuous Certification (CC) Program</i> are\n      <b>150 category 1 CME credits</b> earned over the last five calendar\n      years, <b>50 of which must be self-assesment credits</b>.\n    </p>\n    <!-- <p class=\"my-0\">\n      CME requirements for the <i>Continuous Certification (CC) Program</i> are\n      <b>150 category 1 CME credits</b> earned over the last five calendar\n      years, <b>50 of which must be self-assesment credits</b>. Note that ABS\n      will waive 25 category 1 credits and 50 self-assessment credits for each\n      successfully completed Continuous Certification Assessment (CCA). If you\n      are current with your CCA's, you will meet the self-assessment requirement\n      for the entire five-year period, and, depending upon your CCA cycle, you\n      will reduce the category 1 requirement by 50 to 75 credits. If you are not\n      yet enrolled in the CC program, averaging 30 CME credits per year will\n      help you stay on track with this requirement.\n    </p> -->\n  </sl-card>\n</header>\n\n<section>\n  <div class=\"grid\">\n    <sl-card class=\"col-12\">\n      <div class=\"grid flex flex-wrap\">\n        <div class=\"col-12\">\n          <h5 class=\"mt-0 mb-2\" panel-header>\n            Current Five-Year Cycle:\n            <span class=\"font-normal\"\n              >{{ cycleStartDate | date : 'longDate' }} -\n              {{ cycleEndDate | date : 'longDate' }}</span\n            >\n\n            <abs-tooltip\n              style=\"float: right\"\n              position=\"top\"\n              tooltipText=\"Stay on track with CME requirements by averaging 30 credits per year\"\n            ></abs-tooltip>\n          </h5>\n          <hr />\n        </div>\n        <div class=\"col-12\">\n          <abs-grid [columns]=\"summaryCmeCols\" [data]=\"cmeSummary$\"> </abs-grid>\n        </div>\n        <div class=\"col-12\">\n          <p class=\"font-lg font-bold\">\n            Credits and ABS Waivers Dropping Off* by\n            {{ cycleEndDate | date : 'longDate' }}\n          </p>\n          <p\n            class=\"ml-5 mb-1 flex justify-content-between\"\n            style=\"width: 200px; display: inline-block\"\n          >\n            Category 1:<span class=\"font-bold\">{{\n              droppingCredits ? droppingCredits.credits : '0'\n            }}</span>\n          </p>\n          <p\n            class=\"ml-5 mb-1 flex justify-content-between\"\n            style=\"width: 200px; display: inline-block\"\n          >\n            Self-Assessment:<span class=\"font-bold\">{{\n              droppingCredits ? droppingCredits.saCredits : '0'\n            }}</span>\n          </p>\n          <p class=\"text-muted\">\n            * Credits and ABS Waivers dropping off are those that were earned\n            more than five years ago from today. You may see an increase in the\n            number of credits needed the next time you login if you have CME\n            that is expiring between now and the end of the year. Refer to the\n            itemized CME section for specific CME activities that may drop off\n            soon.\n          </p>\n        </div>\n      </div>\n    </sl-card>\n\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n        <h5 class=\"mt-0 mb-2\" panel-header>Itemized CME</h5>\n        <abs-grid\n          [columns]=\"itemizedCmeCols\"\n          [data]=\"cmeCredits$\"\n          [pagination]=\"true\"\n          [itemsPerPage]=\"10\"\n        >\n        </abs-grid>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"3\" [startExpanded]=\"true\">\n        <h5 class=\"mt-0 mb-2\" panel-header>\n          Itemized ABS Waivers that Reduce Your CME Requirements\n        </h5>\n        <p class=\"text-xl mt-0\">\n          Listed below are activities you completed (e.g., a CCA module) during\n          the current five-year period that have reduced your overall CME\n          requirements.\n        </p>\n        <abs-grid\n          [columns]=\"requirementsAndAdjustmentsCols\"\n          [data]=\"cmeAdjustments$\"\n          [pagination]=\"true\"\n          [itemsPerPage]=\"10\"\n        >\n        </abs-grid>\n      </abs-collapse-panel>\n    </sl-card>\n  </div>\n</section>\n"
    },
    {
      "name": "CollapsePanelComponent",
      "id": "component-CollapsePanelComponent-b98732aca53b180edbe319590d8cfeacfcbd511bc8e569eba2521b5551489df59e5faa87e7fc9920349ad5e0883499188087c797cdcbfcfb4fc21573b15212eb",
      "file": "src/app/shared/components/collapse-panel/collapse-panel.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-collapse-panel",
      "styleUrls": ["./collapse-panel.component.scss"],
      "styles": [],
      "templateUrl": ["./collapse-panel.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "panelId",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 473,
              "end": 491,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 474,
                "end": 478,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 479,
                "end": 487,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 480,
                  "end": 486,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 148
                }
              }
            }
          ],
          "rawdescription": "\n\nthe panel id, used to find the correct panel to expand/collapse when multiple are used on a page\n",
          "description": "<p>the panel id, used to find the correct panel to expand/collapse when multiple are used on a page</p>\n",
          "line": 16,
          "type": "number",
          "decorators": []
        },
        {
          "name": "startExpanded",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 604,
              "end": 623,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 605,
                "end": 609,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 610,
                "end": 619,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 611,
                  "end": 618,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nthe starting state of the panel, whether it is expanded or collapsed\n",
          "description": "<p>the starting state of the panel, whether it is expanded or collapsed</p>\n",
          "line": 22,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "togglePanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-collapse-panel',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './collapse-panel.component.html',\n  styleUrls: ['./collapse-panel.component.scss'],\n})\nexport class CollapsePanelComponent implements OnInit {\n  /**\n   * the panel id, used to find the correct panel to expand/collapse when multiple are used on a page\n   * @type {number}\n   */\n  @Input() panelId = 1;\n\n  /**\n   * the starting state of the panel, whether it is expanded or collapsed\n   * @type {boolean}\n   */\n  @Input() startExpanded = false;\n\n  ngOnInit() {\n    if (this.startExpanded) {\n      // setTimeout is needed to wait for the DOM to be ready\n      setTimeout(() => this.togglePanel(), 0);\n    }\n  }\n\n  togglePanel() {\n    const panel = document.querySelector<HTMLElement>('#panel-' + this.panelId);\n    const panelBody = document.querySelector<HTMLElement>(\n      '#panel-body-' + this.panelId\n    );\n\n    panel?.classList.toggle('active');\n    if (panelBody!.style.maxHeight && panelBody!.style.maxHeight !== '0px') {\n      // reset the panel maxHeight since the css animation will not work with a maxHeight = unset\n      panelBody!.style.maxHeight = panelBody!.scrollHeight + 'px';\n      setTimeout(() => {\n        // set the height to 0 to trigger the collapse animation\n        panelBody!.style.maxHeight = '0px';\n      }, 0);\n    } else {\n      // set the maxHeight to the scrollHeight to allow for the animation to expand the panel\n      panelBody!.style.maxHeight = panelBody!.scrollHeight + 'px';\n      setTimeout(() => {\n        // set the maxHeight to unset after the animation to account for future content changes\n        panelBody!.style.maxHeight = 'unset';\n      }, 501);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".panel {\n  overflow: hidden;\n  .panel-header {\n    border-bottom: 1px solid var(--global-gray-light);\n    padding: 0.25rem 0.5rem;\n    align-items: center;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    .panel-icons {\n      position: relative;\n      height: 1.5rem;\n      width: 1.5rem;\n      font-size: 1.5rem;\n      transition: color 0.2s ease-out;\n      .panel-icon-1,\n      .panel-icon-2 {\n        position: absolute;\n        transition: transform 0.2s ease-out;\n      }\n      .panel-icon-1 {\n        margin-left: -1.5px;\n      }\n    }\n    &:hover {\n      .panel-icons {\n        color: var(--global-warning);\n      }\n    }\n  }\n\n  .panel-body {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.5s ease-out;\n    .content {\n      padding: 0.75rem 0.5rem;\n    }\n  }\n\n  &.active {\n    .panel-header {\n      .panel-icon-1 {\n        transform: rotate(0deg);\n        margin: 0 !important;\n      }\n      .panel-icon-2 {\n        transform: rotate(180deg);\n      }\n    }\n    .panel-body {\n      overflow: visible;\n    }\n  }\n}\n",
          "styleUrl": "./collapse-panel.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div [id]=\"'panel-' + panelId\" class=\"panel\">\n  <div class=\"panel-header\" (click)=\"togglePanel()\">\n    <ng-content select=\"[panel-header]\"></ng-content>\n    <div class=\"panel-icons\">\n      <i class=\"fa-solid fa-minus fa-rotate-90 panel-icon-1\"></i>\n      <i class=\"fa-solid fa-minus panel-icon-2\"></i>\n    </div>\n  </div>\n  <div [id]=\"'panel-body-' + panelId\" class=\"panel-body\">\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "CommitteesComponent",
      "id": "component-CommitteesComponent-5b479145b8d3096d6fb51e7cce78f8dbd8fa51013ce2eb1237daf0eab35d78c87377774725abc2163e4e42a424e1f7898fbd3cfb692a6f30600452ea48e7f7a0",
      "file": "src/app/committees/committees.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-committees",
      "styleUrls": ["./committees.component.scss"],
      "styles": [],
      "templateUrl": ["./committees.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'abs-committees',\n  templateUrl: './committees.component.html',\n  styleUrls: ['./committees.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n})\nexport class CommitteesComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./committees.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<h1>Committees</h1>\n<sl-card>\n  <div slot=\"header\">Committee Information</div>\n\n  <div>\n    <p style=\"margin-bottom: 40vh\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n  </div>\n</sl-card>\n"
    },
    {
      "name": "ConflictResolutionModalComponent",
      "id": "component-ConflictResolutionModalComponent-56027ba2a4b394f341b671225ec1d424b5b8d2779bad14646e0ee67fe33e41643605eb459ca724bb5e95fc7e5388a5a1ca5750713301ef49cebd1d1d27dcd1c0",
      "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-conflict-resolution-modal",
      "styleUrls": ["./conflict-resolution-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./conflict-resolution-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "conflictingRecords",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "IRotationReadOnlyModel[]",
          "decorators": []
        },
        {
          "name": "gapData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "IRotationGapReadOnlyModel | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "addRecord",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter<any>"
        },
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "EventEmitter<any>"
        },
        {
          "name": "editRecord",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "conflictResolutionCols",
          "defaultValue": "CONFLICT_RESOLUTION_GRID_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "localConflictsData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 33
        }
      ],
      "methodsClass": [
        {
          "name": "addNewRecord",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "girdAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { CONFLICT_RESOLUTION_GRID_COLS } from './conflict-resolution-cols';\nimport { ITEMIZED_GME_COLS } from '../itemized-gme-cols';\nimport { ButtonModule } from 'primeng/button';\nimport { IRotationGapReadOnlyModel, IRotationReadOnlyModel } from 'src/app/api';\n\n@Component({\n  selector: 'abs-conflict-resolution-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, ButtonModule],\n  templateUrl: './conflict-resolution-modal.component.html',\n  styleUrls: ['./conflict-resolution-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ConflictResolutionModalComponent implements OnChanges {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Output() editRecord: EventEmitter<any> = new EventEmitter();\n  @Output() addRecord: EventEmitter<any> = new EventEmitter();\n  @Input() conflictingRecords: IRotationReadOnlyModel[] = [];\n  @Input() gapData: IRotationGapReadOnlyModel | undefined;\n  conflictResolutionCols = CONFLICT_RESOLUTION_GRID_COLS;\n  localConflictsData: IRotationReadOnlyModel[] = [];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['conflictingRecords']) {\n      this.localConflictsData = changes['conflictingRecords'].currentValue;\n    }\n  }\n\n  girdAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.editRecord.emit($event.data.id);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  addNewRecord() {\n    const params = {\n      startDate: this.gapData?.startDate,\n      endDate: this.gapData?.endDate,\n    };\n    this.addRecord.emit(params);\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'ACGMEExperienceModal' });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./conflict-resolution-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnChanges"],
      "templateData": "<div class=\"mb-5\">\n  <p>\n    There is a gap in your current gme rotations history. Please either add a\n    new rotation or edit the existing rotations to account for this time.\n  </p>\n  <p-button\n    variant=\"default\"\n    class=\"btn-add mt-2 mb-2\"\n    (onClick)=\"addNewRecord()\"\n    *ngIf=\"gapData && gapData.startDate !== gapData.endDate\"\n  >\n    <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n    ADD A RECORD\n  </p-button>\n  <abs-grid\n    [columns]=\"conflictResolutionCols\"\n    [data]=\"localConflictsData\"\n    (action)=\"girdAction($event)\"\n  >\n  </abs-grid>\n  <div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n      >Cancel</p-button\n    >\n    <p-button\n      type=\"button\"\n      [style]=\"{ width: '337px' }\"\n      variant=\"primary\"\n      (click)=\"close()\"\n      >Save\n    </p-button>\n  </div>\n</div>\n"
    },
    {
      "name": "ContinuousCertificationComponent",
      "id": "component-ContinuousCertificationComponent-1a434a3616d790cc24ee88da2aec4e314000bb2ba7107c5f644a9e307514e0e7943000b55d503a44386a03fc9c76222971162ab708ea59ca7f4c7874cd6695bc",
      "file": "src/app/continuous-certification/continuous-certification.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-continuous-certification",
      "styleUrls": ["./continuous-certification.component.scss"],
      "styles": [],
      "templateUrl": ["./continuous-certification.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "actionMap",
          "defaultValue": "{\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActionMap",
          "optional": false,
          "description": "",
          "line": 83,
          "modifierKind": [121]
        },
        {
          "name": "attestationModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "continousCertificationData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "featureFlags",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFeatureFlags",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "featureFlags$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFeatureFlags> | undefined",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.featureFlags"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "legendItems",
          "defaultValue": "[\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "outcomeRegistriesModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "payFeeCols",
          "defaultValue": "PAY_FEE_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "payFeeData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "payFeeModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "paymentGridData",
          "defaultValue": "[\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "referenceFormsModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "userData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 49
        }
      ],
      "methodsClass": [
        {
          "name": "getContinuousCertificationData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 128,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getPayFeeData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getUserData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleCardAction",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 260,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ActionCardComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "PayFeeComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "OutcomeRegistriesModalComponent",
          "type": "component"
        },
        {
          "name": "AttestationModalComponent",
          "type": "component"
        },
        {
          "name": "ReferenceFormModalComponent",
          "type": "component"
        },
        {
          "name": "LegendComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { PAY_FEE_COLS } from '../shared/components/pay-fee/pay-fee-cols';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { OutcomeRegistriesModalComponent } from './outcome-registries-modal/outcome-registries-modal.component';\nimport { AttestationModalComponent } from './attestation-modal/attestation-modal.component';\nimport { ReferenceFormModalComponent } from './reference-form-modal/reference-form-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { Observable, take } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { GetStateList } from '../state/picklists';\nimport { ApplicationSelectors } from '../state/application/application.selectors';\nimport { IFeatureFlags } from '../state/application/application.state';\nimport { LegendComponent } from '../shared/components/legend/legend.component';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-continuous-certification',\n  templateUrl: './continuous-certification.component.html',\n  styleUrls: ['./continuous-certification.component.scss'],\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    GridComponent,\n    FormsModule,\n    PayFeeComponent,\n    ModalComponent,\n    OutcomeRegistriesModalComponent,\n    AttestationModalComponent,\n    ReferenceFormModalComponent,\n    LegendComponent,\n  ],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ContinuousCertificationComponent implements OnInit {\n  @Select(ApplicationSelectors.slices.featureFlags) featureFlags$:\n    | Observable<IFeatureFlags>\n    | undefined;\n\n  userData!: any;\n  continousCertificationData!: any;\n  outcomeRegistriesModal = false;\n  attestationModal = false;\n  referenceFormsModal = false;\n  payFeeModal = false;\n  payFeeCols = PAY_FEE_COLS;\n  payFeeData!: any;\n\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  legendItems = [\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ];\n\n  featureFlags: IFeatureFlags = {};\n\n  private actionMap: ActionMap = {\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  };\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n    this.featureFlags$?.pipe(take(1)).subscribe((featureFlags) => {\n      if (featureFlags) {\n        this.featureFlags = featureFlags;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getContinuousCertificationData();\n    this.getPayFeeData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe, M.D',\n    };\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  getContinuousCertificationData() {\n    this.continousCertificationData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/personal-profile',\n        },\n        actionDisplay: this.featureFlags.personalProfilePage\n          ? 'View / Update my information'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n        disabled: !this.featureFlags.personalProfilePage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Outcomes Registries / Quality Assessment Programs',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'outcomeRegistriesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Completed,\n        displayStatusText: false,\n      },\n      {\n        title: 'Medical Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/medical-training',\n        },\n        actionDisplay: this.featureFlags.medicalTrainingPage\n          ? 'View / Update my training'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-language',\n        status: Status.Completed,\n        disabled: !this.featureFlags.medicalTrainingPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Professional Standing',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/professional-standing',\n        },\n        actionDisplay: this.featureFlags.professionalStandingPage\n          ? 'View / Update my activities'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-certificate',\n        status: Status.InProgress,\n        disabled: !this.featureFlags.professionalStandingPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'CME Repository',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/cme-repository',\n        },\n        actionDisplay: this.featureFlags.cmeRepositoryPage\n          ? 'View CMEs'\n          : 'Coming Soon',\n        icon: 'fa-solid fa-id-card-clip',\n        status: Status.InProgress,\n        disabled: !this.featureFlags.cmeRepositoryPage,\n        displayStatusText: false,\n      },\n      {\n        title: 'Pay Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'payFeeModal',\n        },\n        actionDisplay: 'View / Pay Fee',\n        icon: 'fa-solid fa-language',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Reference Forms',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'referenceFormsModal',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'attestationModal',\n        },\n        disabled: false,\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.InProgress,\n        displayStatusText: false,\n      },\n      {\n        title: 'Apply for an Exam',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        actionStyle: 'button',\n        disabled: true,\n        actionDisplay: 'Apply Now',\n        icon: 'fa-solid fa-language',\n        displayStatusText: false,\n      },\n    ];\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "h1 {\n  margin-bottom: 0;\n}\n\nh4 {\n  margin: 0;\n}\n\n.grid {\n  margin: 1.5rem 0;\n}\n\nsl-dialog::part(panel) {\n  min-width: 75%;\n}\n\n.legend {\n  margin-top: 1.5rem;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.completed {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.in-progress {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.contingent {\n      color: var(--global-gray);\n      .i {\n        background-color: vvar(--global-gray);\n      }\n    }\n  }\n}\n\nsl-radio-group,\nsl-textarea {\n  margin-bottom: 2rem;\n}\n\nsl-radio-group::part(form-control-label) {\n  font-weight: medium;\n}\n\nspan {\n  display: block;\n  font-size: 0.875rem;\n  font-style: italic;\n  margin: 0 0 0.875rem 0;\n  position: relative;\n  // min-height: 21px;\n}\n\nsl-radio {\n  margin-right: 1.25rem;\n}\n\n.align-right {\n  text-align: right;\n}\n\n.btn-container {\n  margin-top: 2rem;\n}\n\n.margin-bottom-2 {\n  display: block;\n  margin-bottom: 2rem;\n}\n\n.danger {\n  color: var(--global-danger);\n}\n",
          "styleUrl": "./continuous-certification.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 96,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex justify-content-between align-items-end flex-wrap col-12\">\n  <div>\n    <h1>Continuous Certification</h1>\n    <h4 class=\"thin\">For {{ userData.name }}.</h4>\n  </div>\n  <abs-legend [legendItems]=\"legendItems\"></abs-legend>\n</div>\n\n<div class=\"grid\">\n  <abs-action-card\n    class=\"col-12 md:col-6 lg:col-4\"\n    *ngFor=\"let actionCard of continousCertificationData\"\n    [actionCard]=\"actionCard\"\n    [title]=\"actionCard.title\"\n    [description]=\"actionCard.description\"\n    [icon]=\"actionCard.icon\"\n    [actionType]=\"actionCard?.action?.type\"\n    [actionAction]=\"actionCard?.action?.action\"\n    [actionStyle]=\"actionCard?.actionStyle\"\n    (cardAction)=\"handleCardAction(actionCard.action.action)\"\n    [actionDisplayKey]=\"actionCard?.actionDisplay\"\n    [status]=\"actionCard?.status\"\n    [disabled]=\"actionCard.disabled\"\n    [displayStatusText]=\"actionCard?.displayStatusText\"\n  ></abs-action-card>\n</div>\n\n<!-- Outcome Registries / Quality Assessment Programs -->\n<abs-modal\n  [open]=\"outcomeRegistriesModal\"\n  (closeDialog)=\"handleCardAction('outcomeRegistriesModal')\"\n  title=\"Outcomes Registries / Quality Assessment Programs\"\n  modalName=\"outcomeRegistriesModal\"\n>\n  <abs-outcome-registries-modal\n    (closeDialog)=\"handleCardAction('outcomeRegistriesModal')\"\n  >\n  </abs-outcome-registries-modal>\n</abs-modal>\n\n<!-- Attestation -->\n<abs-modal\n  [open]=\"attestationModal\"\n  (closeDialog)=\"handleCardAction('attestationModal')\"\n  title=\"Attestation\"\n  modalName=\"attestationModal\"\n>\n  <abs-attestation-modal\n    (closeDialog)=\"handleCardAction('attestationModal')\"\n  ></abs-attestation-modal>\n</abs-modal>\n\n<!-- Reference Forms -->\n<abs-modal\n  [open]=\"referenceFormsModal\"\n  (closeDialog)=\"handleCardAction('referenceFormModal')\"\n  title=\"Reference Form\"\n  modalName=\"referenceFormModal\"\n>\n  <abs-reference-form-modal\n    (closeDialog)=\"handleCardAction('referenceFormsModal')\"\n  ></abs-reference-form-modal>\n</abs-modal>\n\n<!-- Pay Fee -->\n<abs-modal\n  [open]=\"payFeeModal\"\n  (closeDialog)=\"handleCardAction('payFeeModal')\"\n  title=\"Pay Fee\"\n  modalName=\"payFeeModal\"\n>\n  <abs-pay-fee\n    [payFeeData]=\"payFeeData\"\n    [paymentGridData]=\"paymentGridData\"\n    (cancelAction)=\"handleCardAction('payFeeModal')\"\n  >\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </abs-pay-fee>\n</abs-modal>\n"
    },
    {
      "name": "CurrentAppointmentFormComponent",
      "id": "component-CurrentAppointmentFormComponent-a8d28ef62b8df4ef3d68c52cad516204fab871c1cd1ee2dd10295e78da333f037ba91bf6a1d1d03501f062710159de6c9dfde20fb9838d99f1649362b4afec67",
      "file": "src/app/professional-standing/current-appointment-form/current-appointment-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-current-appointment-form",
      "styleUrls": ["./current-appointment-form.component.scss"],
      "styles": [],
      "templateUrl": ["./current-appointment-form.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "any",
          "decorators": []
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "Observable<any> | undefined",
          "decorators": []
        },
        {
          "name": "formData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "any",
          "decorators": []
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "picklists",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "currentAppointmentForm",
          "defaultValue": "new FormGroup({\n    clinicallyActive: new FormControl({ value: false, disabled: true }),\n    primaryPracticeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    explanationOfNonPrivileges: new FormControl({ value: '', disabled: false }),\n\n    explanationOfNonClinicalActivities: new FormControl({\n      value: '',\n      disabled: false,\n    }),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "localEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "optionLists",
          "defaultValue": "{\n    primaryPracticeOptions: [],\n\n    organizationTypeOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OptionList",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "originalFormValues",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 69
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClinicalActiveChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onFormChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 159,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFormValues",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\n\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n// add error handling to this schematic\n\ninterface OptionList {\n  primaryPracticeOptions: any[];\n\n  organizationTypeOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-current-appointment-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    DropdownModule,\n    InputTextareaModule,\n    FormErrorsComponent,\n    CheckboxModule,\n  ],\n  templateUrl: './current-appointment-form.component.html',\n  styleUrls: ['./current-appointment-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class CurrentAppointmentFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists: OptionList = {\n    primaryPracticeOptions: [],\n\n    organizationTypeOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  currentAppointmentForm = new FormGroup({\n    clinicallyActive: new FormControl({ value: false, disabled: true }),\n    primaryPracticeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    organizationTypeId: new FormControl({ value: null, disabled: true }, [\n      Validators.required,\n    ]),\n\n    explanationOfNonPrivileges: new FormControl({ value: '', disabled: false }),\n\n    explanationOfNonClinicalActivities: new FormControl({\n      value: '',\n      disabled: false,\n    }),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  onClinicalActiveChange(event: any) {\n    const checked = event.checked;\n\n    if (checked) {\n      this.currentAppointmentForm.get('primaryPracticeId')?.enable();\n      this.currentAppointmentForm.get('organizationTypeId')?.enable();\n      this.currentAppointmentForm.get('explanationOfNonPrivileges')?.disable();\n      this.currentAppointmentForm\n        .get('explanationOfNonClinicalActivities')\n        ?.disable();\n    } else {\n      this.currentAppointmentForm.get('primaryPracticeId')?.disable();\n      this.currentAppointmentForm.get('organizationTypeId')?.disable();\n      this.currentAppointmentForm.get('explanationOfNonPrivileges')?.enable();\n      this.currentAppointmentForm\n        .get('explanationOfNonClinicalActivities')\n        ?.enable();\n    }\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n\n        if (key === 'clinicallyActive') {\n          this.onClinicalActiveChange({ checked: [value] });\n          newValue = value === 1 ? true : false;\n        }\n\n        this.currentAppointmentForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.currentAppointmentForm.reset();\n    }\n  }\n\n  onFormChanges() {\n    // include subscriptions to .valueChanges here for the reactive form\n    // be sure to include .pipe(untilDestroyed(this)) to the subscriptions\n  }\n\n  onSubmit() {\n    this.saveForm.emit({\n      show: false,\n      data: this.currentAppointmentForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".disabled {\n  color: var(--global-gray);\n}\n",
          "styleUrl": "./current-appointment-form.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"currentAppointmentForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div class=\"col-12 flex gap-2 justify-content-start align-items-center\">\n      <p-checkbox\n        formControlName=\"clinicallyActive\"\n        [value]=\"true\"\n        [binary]=\"true\"\n        inputId=\"clinicallyActive\"\n        (onChange)=\"onClinicalActiveChange($event)\"\n      ></p-checkbox>\n      <label for=\"clinicallyActive\" class=\"disabled\">Clinically Active</label>\n    </div>\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"primaryPracticeId\"\n        >Primary Current Practice or Training*</label\n      >\n      <p-dropdown\n        placeholder=\"Select a practice or training...\"\n        [options]=\"optionLists.primaryPracticeOptions\"\n        name=\"primaryPracticeId\"\n        inputId=\"primaryPracticeId\"\n        [editable]=\"false\"\n        formControlName=\"primaryPracticeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"organizationTypeId\"\n        >Type of Organization of Primary Practice or Training*</label\n      >\n\n      <p-dropdown\n        placeholder=\"Select an organization type...\"\n        [options]=\"optionLists.organizationTypeOptions\"\n        name=\"organizationTypeId\"\n        inputId=\"organizationTypeId\"\n        [editable]=\"false\"\n        formControlName=\"organizationTypeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"explanationOfNonPrivileges\"\n        >Lack of Hospital Privileges</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"explanationOfNonPrivileges\"\n        name=\"explanationOfNonPrivileges\"\n        placeholder=\"Explain any lack of hospital privileges...\"\n        rows=\"5\"\n        formControlName=\"explanationOfNonPrivileges\"\n      ></textarea>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"explanationOfNonClinicalActivities\"\n        >Non-Clinical Activities</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"explanationOfNonClinicalActivities\"\n        name=\"explanationOfNonClinicalActivities\"\n        placeholder=\"Explain any non-clinical activities...\"\n        rows=\"5\"\n        formControlName=\"explanationOfNonClinicalActivities\"\n      ></textarea>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        type=\"submit\"\n        [style]=\"{ width: '337px' }\"\n        [disabled]=\"\n          currentAppointmentForm.invalid || !currentAppointmentForm.dirty\n        \"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "DashboardComponent",
      "id": "component-DashboardComponent-e0e8d01bab5108882b779fb8dcc5be67a3032e1e37f2413cc55ca3cfbc9aa70ec8da707f39a8675d2ed2631c57e82ec0ffc95c3f7c1b98d6029620b910085494",
      "file": "src/app/dashboard/dashboard.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-dashboard",
      "styleUrls": ["./dashboard.component.scss"],
      "styles": [],
      "templateUrl": ["./dashboard.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "alertsAndNotices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any | undefined",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "alertsAndNotices$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDashboardState> | undefined",
          "optional": false,
          "description": "",
          "line": 73,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "DashboardSelectors.dashboardAlertsAndNotices"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "certificateInformation$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDashboardState> | undefined",
          "optional": false,
          "description": "",
          "line": 70,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "DashboardSelectors.dashboardCertificateInformation"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "certifiedCards",
          "defaultValue": "CERTIFIED_ACTION_CARDS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IActionCardReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "featureFlags",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFeatureFlags",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "featureFlags$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFeatureFlags> | undefined",
          "optional": false,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.featureFlags"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isSurgeon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | undefined",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "programInformation$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDashboardState> | undefined",
          "optional": false,
          "description": "",
          "line": 61,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "DashboardSelectors.dashboardProgramInformation"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "registrationStatus$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDashboardState> | undefined",
          "optional": false,
          "description": "",
          "line": 65,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "DashboardSelectors.dashboardRegistrationStatus"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "traineeCards",
          "defaultValue": "TRAINEE_ACTION_CARDS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IActionCardReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "upcomingExams",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[] | undefined",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile> | undefined",
          "optional": false,
          "description": "",
          "line": 49,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userActionCards",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IActionCardReadOnlyModel[] | undefined",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "userClaims$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string[]> | undefined",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userClaims"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfile | undefined",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "userInformation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IProgramReadOnlyModel | ICertificationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 78
        }
      ],
      "methodsClass": [
        {
          "name": "fetchAlertsAndNoticesByUserId",
          "args": [
            {
              "name": "isSurgeon",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isSurgeon",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initDashboardData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setActionCardsByUserClaims",
          "args": [
            {
              "name": "isSurgeon",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 310,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isSurgeon",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ActionCardComponent",
          "type": "component"
        },
        {
          "name": "UserInformationCardComponent",
          "type": "component"
        },
        {
          "name": "HighlightCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable, take } from 'rxjs';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\n\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { HighlightCardComponent } from '../shared/components/highlight-card/highlight-card.component';\nimport { UserInformationCardComponent } from '../shared/components/user-information-card/user-information-card.component';\nimport {\n  IUserProfile,\n  UserProfileSelectors,\n  DashboardSelectors,\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n  IDashboardState,\n  GetTraineeRegistrationStatus,\n  GetAlertsAndNotices,\n  GetExamDirectory,\n  ExamProcessSelectors,\n} from '../state';\nimport { UserClaims } from '../side-navigation/user-status.enum';\nimport { IActionCardReadOnlyModel } from '../shared/components/action-card/action-card-read-only.model';\nimport {\n  CERTIFIED_ACTION_CARDS,\n  TRAINEE_ACTION_CARDS,\n} from './user-action-cards';\nimport { IProgramReadOnlyModel } from '../api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from '../api/models/surgeons/certification-read-only.model';\nimport { ApplicationSelectors } from '../state/application/application.selectors';\nimport { IFeatureFlags } from '../state/application/application.state';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    ActionCardComponent,\n    UserInformationCardComponent,\n    HighlightCardComponent,\n  ],\n})\nexport class DashboardComponent {\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  @Select(UserProfileSelectors.userClaims) userClaims$:\n    | Observable<string[]>\n    | undefined;\n\n  @Select(ApplicationSelectors.slices.featureFlags) featureFlags$:\n    | Observable<IFeatureFlags>\n    | undefined;\n\n  @Select(DashboardSelectors.dashboardProgramInformation) programInformation$:\n    | Observable<IDashboardState>\n    | undefined;\n\n  @Select(DashboardSelectors.dashboardRegistrationStatus) registrationStatus$:\n    | Observable<IDashboardState>\n    | undefined;\n\n  @Select(DashboardSelectors.dashboardCertificateInformation)\n  certificateInformation$: Observable<IDashboardState> | undefined;\n\n  @Select(DashboardSelectors.dashboardAlertsAndNotices)\n  alertsAndNotices$: Observable<IDashboardState> | undefined;\n\n  userData: IUserProfile | undefined;\n  userActionCards: IActionCardReadOnlyModel[] | undefined;\n  isSurgeon: boolean | undefined;\n  userInformation!: IProgramReadOnlyModel | ICertificationReadOnlyModel[];\n\n  alertsAndNotices: any | undefined;\n\n  upcomingExams: any[] | undefined;\n\n  featureFlags: IFeatureFlags = {};\n\n  certifiedCards: IActionCardReadOnlyModel[] = CERTIFIED_ACTION_CARDS;\n  traineeCards: IActionCardReadOnlyModel[] = TRAINEE_ACTION_CARDS;\n\n  constructor(\n    private _store: Store,\n    private _translateService: TranslateService\n  ) {\n    this.featureFlags$?.pipe(take(1)).subscribe((featureFlags) => {\n      if (featureFlags) {\n        this.featureFlags = featureFlags;\n\n        // TODO - since we are assuming content and order for these lists we should just define them in the page rather than fetching a pre-defined list\n        this.traineeCards[0].disabled = !this.featureFlags.gmeHistoryPage;\n        this.traineeCards[0].actionDisplay = this.featureFlags.gmeHistoryPage\n          ? 'View Your GME'\n          : 'Coming Soon';\n\n        this.traineeCards[1].disabled = !this.featureFlags.applyRegisterPage;\n        this.traineeCards[1].actionDisplay = this.featureFlags.applyRegisterPage\n          ? 'Apply Now'\n          : 'Coming Soon';\n\n        this.certifiedCards[0].disabled =\n          !this.featureFlags.continuousCertificationPage;\n        this.certifiedCards[0].actionDisplay = this.featureFlags\n          .continuousCertificationPage\n          ? 'See Requirements'\n          : 'Coming Soon';\n\n        this.certifiedCards[1].disabled = !this.featureFlags.applyRegisterPage;\n        this.certifiedCards[1].actionDisplay = this.featureFlags\n          .applyRegisterPage\n          ? 'Apply Now'\n          : 'Coming Soon';\n\n        this.certifiedCards[2].disabled = !this.featureFlags.cmeRepositoryPage;\n        this.certifiedCards[2].actionDisplay = this.featureFlags\n          .cmeRepositoryPage\n          ? 'View CME Repository'\n          : 'Coming Soon';\n      }\n    });\n    this.initDashboardData();\n  }\n\n  initDashboardData() {\n    this.userClaims$?.pipe(untilDestroyed(this)).subscribe((userClaims) => {\n      const isSurgeon = userClaims?.includes(UserClaims.surgeon);\n      this.isSurgeon = isSurgeon;\n\n      if (isSurgeon) {\n        this._store.dispatch(new GetDashboardCertificationInformation());\n        this.certificateInformation$\n          ?.pipe(untilDestroyed(this))\n          .subscribe((userInformation) => {\n            if (userInformation?.certificates?.length > 0) {\n              this.userInformation = userInformation.certificates;\n            }\n          });\n      } else {\n        this._store.dispatch(new GetDashboardProgramInformation());\n        this._store.dispatch(new GetTraineeRegistrationStatus('2022GO6'));\n        this._store.dispatch(new GetAlertsAndNotices());\n        this.registrationStatus$\n          ?.pipe(untilDestroyed(this))\n          .subscribe((userInformation) => {\n            const registrationInformation = userInformation?.registrationStatus;\n            const todaysDate = new Date();\n            const regOpenDate = new Date(\n              registrationInformation?.regOpenDate ?? ''\n            );\n            const regCloseDate = new Date(\n              registrationInformation?.regEndDate ?? ''\n            );\n            const isRegisterDates = () => {\n              if (todaysDate >= regOpenDate && todaysDate <= regCloseDate) {\n                return true;\n              }\n              return false;\n            };\n\n            const applyForQECard = this.traineeCards[1];\n            if (\n              (registrationInformation?.isRegOpen ||\n                registrationInformation?.isRegLate) &&\n              isRegisterDates()\n            ) {\n              applyForQECard.disabled = !this.featureFlags.applyRegisterPage;\n              applyForQECard.actionDisplay = this.featureFlags.applyRegisterPage\n                ? this._translateService.instant(\n                    'DASHBOARD.ACTION_CARDS.REGISTER_BTN'\n                  )\n                : 'Coming Soon';\n            } else {\n              applyForQECard.disabled = true;\n              applyForQECard.description = this._translateService.instant(\n                'DASHBOARD.ACTION_CARDS.APPLY_SUBTITLE',\n                {\n                  date: new Date(\n                    registrationInformation?.regOpenDate ?? ''\n                  ).toLocaleDateString(),\n                }\n              );\n            }\n          });\n        this.programInformation$\n          ?.pipe(untilDestroyed(this))\n          .subscribe((userInformation) => {\n            if (userInformation?.programs?.programName.length > 0) {\n              this.userInformation = userInformation.programs;\n            }\n          });\n      }\n\n      this.setActionCardsByUserClaims(isSurgeon);\n      this.fetchAlertsAndNoticesByUserId(isSurgeon);\n    });\n  }\n\n  fetchAlertsAndNoticesByUserId(isSurgeon: boolean) {\n    const alertsAndNoticesTrainee = [\n      {\n        content: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.UPCOMINGEXAMS_SUBTITLE'\n        ),\n        alert: true,\n        image:\n          'https://images.pexels.com/photos/6098057/pexels-photo-6098057.jpeg',\n      },\n      {\n        title: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_TITLE'\n        ),\n        content: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_SUBTITLE'\n        ),\n        action: {\n          type: this.featureFlags.documentsPage ? 'component' : null,\n          action: this.featureFlags.documentsPage ? '/documents' : null,\n        },\n        actionText: this.featureFlags.documentsPage\n          ? this._translateService.instant(\n              'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_BTN'\n            )\n          : 'Coming Soon',\n        alert: false,\n        image:\n          'https://images.pexels.com/photos/4021775/pexels-photo-4021775.jpeg',\n      },\n    ];\n\n    this.alertsAndNotices$\n      ?.pipe(untilDestroyed(this))\n      .subscribe((alertsAndNotices) => {\n        let date;\n\n        if (alertsAndNotices?.alertsAndNotices?.examStartDate) {\n          date = new Date(\n            alertsAndNotices?.alertsAndNotices?.examStartDate ?? ''\n          ).toLocaleDateString();\n          alertsAndNoticesTrainee[0].title = this._translateService.instant(\n            'DASHBOARD.HIGHLIGHT_CARDS.UPCOMINGEXAMS_TITLE',\n            { date: date }\n          );\n        }\n      });\n\n    const alertsAndNoticesCertfiied = [\n      {\n        title: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.EXAMREGISTRATION_TITLE'\n        ),\n        content: this.upcomingExams?.join('<br>'),\n        alert: true,\n        image:\n          'https://images.pexels.com/photos/6098057/pexels-photo-6098057.jpeg',\n      },\n      {\n        title: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_TITLE'\n        ),\n        content: this._translateService.instant(\n          'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_SUBTITLE'\n        ),\n        action: {\n          type: this.featureFlags.documentsPage ? 'component' : null,\n          action: this.featureFlags.documentsPage ? '/documents' : null,\n        },\n        actionText: this.featureFlags.documentsPage\n          ? this._translateService.instant(\n              'DASHBOARD.HIGHLIGHT_CARDS.DOCUMENTS_BTN'\n            )\n          : 'Coming Soon',\n        alert: false,\n        image:\n          'https://images.pexels.com/photos/13548722/pexels-photo-13548722.jpeg',\n      },\n    ];\n\n    if (isSurgeon) {\n      this._store\n        .dispatch(new GetExamDirectory())\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.upcomingExams = this._store\n            .selectSnapshot(ExamProcessSelectors.upcomingExams)\n            ?.map((exam) => {\n              const regOpenDate = new Date(exam.regOpenDate);\n              const regCloseDate = new Date(exam.regEndDate);\n\n              return `<b>${exam.examName}:</b> \n                <br>${regOpenDate.toLocaleDateString()} - ${regCloseDate.toLocaleDateString()}`;\n            });\n\n          alertsAndNoticesCertfiied[0].content =\n            this.upcomingExams?.join('<br><br>');\n        });\n    }\n\n    this.alertsAndNotices = isSurgeon\n      ? alertsAndNoticesCertfiied\n      : alertsAndNoticesTrainee;\n  }\n\n  setActionCardsByUserClaims(isSurgeon: boolean) {\n    this.userActionCards = isSurgeon\n      ? CERTIFIED_ACTION_CARDS\n      : TRAINEE_ACTION_CARDS;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "h1 {\n  margin-bottom: 0;\n}\n\nh4 {\n  margin: 0;\n}\n\n.grid {\n  margin-top: 1.5rem;\n}\n\nbutton {\n  width: 100%;\n}\n",
          "styleUrl": "./dashboard.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 87,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div class=\"app\" *ngIf=\"user$ | async as user\">\n  <div class=\"flex justify-content-between align-items-end\">\n    <div>\n      <h1>{{ 'DASHBOARD.TITLE' | translate }}</h1>\n      <h4 class=\"thin\">\n        {{ 'DASHBOARD.SUBTITLE' | translate : { user: user.displayName } }}\n      </h4>\n    </div>\n    <div\n      class=\"last-login\"\n      [innerHTML]=\"\n        'DASHBOARD.LASTLOGIN'\n          | translate : { lastLogin: user.lastLoginDateUtc | date }\n      \"\n    ></div>\n  </div>\n\n  <div class=\"grid\">\n    <abs-user-information-card\n      class=\"col-12\"\n      [userInformation]=\"userInformation\"\n      [currentStatus]=\"user.certificationStatus\"\n      [isSurgeon]=\"isSurgeon\"\n    ></abs-user-information-card>\n\n    <abs-highlight-card\n      class=\"col-12 md:col-6\"\n      *ngFor=\"let alert of alertsAndNotices\"\n      [title]=\"alert.title\"\n      [content]=\"alert.content\"\n      [alert]=\"alert.alert\"\n      [image]=\"alert.image\"\n      [actionType]=\"alert?.action?.type\"\n      [actionAction]=\"alert?.action?.action\"\n      [actionText]=\"alert.actionText\"\n    ></abs-highlight-card>\n\n    <abs-action-card\n      class=\"grid-item col-12  {{\n        isSurgeon ? 'md:col-6 lg:col-4' : 'md:col-6'\n      }} \"\n      *ngFor=\"let actionCard of userActionCards\"\n      [actionCard]=\"actionCard\"\n      [titleKey]=\"actionCard.titleKey\"\n      [descriptionKey]=\"actionCard.descriptionKey\"\n      [icon]=\"actionCard.icon\"\n      [actionType]=\"actionCard?.action?.type ?? ''\"\n      [actionAction]=\"actionCard?.action?.action ?? ''\"\n      [actionDisplayKey]=\"actionCard?.actionDisplayKey\"\n      [disabled]=\"actionCard.disabled\"\n    ></abs-action-card>\n  </div>\n</div>\n"
    },
    {
      "name": "DashboardHeaderComponent",
      "id": "component-DashboardHeaderComponent-c6b9e39b2263de8ed2d35cb9062c88aeee7f51ebfba2629363852c2371258aa2d420fd75babefcf66678ac5f5dc55f92a1e74d605cbba80e11b717a05849f9e3",
      "file": "src/app/shared/components/dashboard-header/dashboard-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-dashboard-header",
      "styleUrls": ["./dashboard-header.component.scss"],
      "styles": [],
      "templateUrl": ["./dashboard-header.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "handleSideNavToggle",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "headerLinks",
          "defaultValue": "[\n    {\n      display: 'News',\n      action: 'https://www.absurgery.org/default.jsp?news_home_mb',\n    },\n    {\n      display: 'EPAs',\n      action: 'https://www.absurgery.org/default.jsp?epahome',\n    },\n    {\n      display: 'About',\n      action: 'https://www.absurgery.org/default.jsp?abouthome',\n    },\n    {\n      display: 'Contact',\n      action: 'https://www.absurgery.org/default.jsp?aboutcontact',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "searchText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "handleSearch",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onKey",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleSideNav",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        },
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'abs-dashboard-header',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive, FormsModule],\n  templateUrl: './dashboard-header.component.html',\n  styleUrls: ['./dashboard-header.component.scss'],\n})\nexport class DashboardHeaderComponent {\n  @Output() handleSideNavToggle: EventEmitter<any> = new EventEmitter();\n\n  searchText: string | undefined;\n  headerLinks = [\n    {\n      display: 'News',\n      action: 'https://www.absurgery.org/default.jsp?news_home_mb',\n    },\n    {\n      display: 'EPAs',\n      action: 'https://www.absurgery.org/default.jsp?epahome',\n    },\n    {\n      display: 'About',\n      action: 'https://www.absurgery.org/default.jsp?abouthome',\n    },\n    {\n      display: 'Contact',\n      action: 'https://www.absurgery.org/default.jsp?aboutcontact',\n    },\n  ];\n\n  constructor(private _router: Router) {}\n\n  handleSearch() {\n    // search handler\n  }\n\n  onKey(event: any) {\n    this.searchText = event.target.value;\n  }\n\n  toggleSideNav() {\n    this.handleSideNavToggle.emit();\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".dashboard-header {\n  padding-top: 3rem;\n  position: relative;\n  .nav-toggle {\n    display: block;\n  }\n  nav {\n    ul {\n      list-style: none;\n      display: flex;\n      flex-wrap: wrap;\n      margin: 0;\n      padding: 0;\n      align-items: center;\n      justify-content: flex-end;\n      li {\n        position: relative;\n        margin: 0 2rem 2rem 0;\n        &:last-child {\n          margin-right: 0;\n        }\n        a {\n          text-decoration: none;\n          color: var(--primary);\n          font-size: 1rem;\n          transition: 250ms ease-in-out;\n          &:hover,\n          &:focus,\n          &.active {\n            color: var(--global-warning);\n          }\n        }\n      }\n    }\n    input[type='text'] {\n      padding: 0 3rem 0 1.5rem;\n      width: 204px;\n      height: 45px;\n      background: #fff;\n      border-radius: 32px;\n      font-size: 1rem;\n      outline: none;\n      border: none;\n      &:focus {\n        border-color: var(--global-warning);\n      }\n    }\n    button {\n      background: none;\n      border: none;\n      position: absolute;\n      right: 10px;\n      top: 10px;\n    }\n    i {\n      color: var(--global-warning);\n      font-size: 1.5rem;\n      cursor: pointer;\n    }\n  }\n}\n\n.nav-toggle {\n  display: flex;\n  align-items: center;\n  margin: 0 1rem 2rem 0;\n}\n\n.hamburger {\n  border: none;\n  cursor: pointer;\n  span {\n    position: relative;\n    display: block;\n    height: 5px;\n    width: 3rem;\n    background-color: var(--global-primary);\n    transition: 250ms ease-in-out;\n    margin-bottom: 5px;\n  }\n  &:hover {\n    span {\n      background-color: var(--global-warning);\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  .dashboard-header {\n    justify-content: flex-end;\n    .nav-toggle {\n      display: none;\n    }\n  }\n}\n",
          "styleUrl": "./dashboard-header.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "router": {
          "name": "router",
          "getSignature": {
            "name": "router",
            "type": "",
            "returnType": "Router",
            "line": 50
          }
        }
      },
      "templateData": "<div class=\"dashboard-header flex justify-content-between\">\n  <div class=\"nav-control\">\n    <div class=\"nav-toggle\">\n      <button class=\"hamburger\" (click)=\"toggleSideNav()\">\n        <span></span>\n        <span></span>\n        <span></span>\n      </button>\n    </div>\n  </div>\n  <nav>\n    <ul>\n      <li *ngFor=\"let link of headerLinks\">\n        <a [href]=\"link.action\" target=\"_blank\" rel=\"noreferrer\">{{\n          link.display\n        }}</a>\n      </li>\n      <li>\n        <input\n          type=\"text\"\n          id=\"site-search\"\n          placeholder=\"Search\"\n          (keyup)=\"onKey($event)\"\n        />\n        <button (click)=\"handleSearch()\">\n          <i class=\"fa-solid fa-magnifying-glass\"></i>\n        </button>\n      </li>\n    </ul>\n  </nav>\n</div>\n"
    },
    {
      "name": "DocumentsComponent",
      "id": "component-DocumentsComponent-db4c76c278b7a144e663b1fb7ab11265ea55b5934326c1a40f5fdb017547fe70eb48e9f22c007c1c2faaeadf47d34e016cd6a04c12ff9d166c5775f17f2132d8",
      "file": "src/app/documents/documents.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-documents",
      "styleUrls": ["./documents.component.scss"],
      "styles": [],
      "templateUrl": ["./documents.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "canUpload",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "documents$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDocumentReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.documents"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "documentsCols",
          "defaultValue": "DOCUMENTS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "documentsData$",
          "defaultValue": "new BehaviorSubject<IDocumentReadOnlyModel[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<IDocumentReadOnlyModel[]>",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "documentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "fileUploadedName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "gridOptions",
          "defaultValue": "{\n    showFilter: true,\n    filterOn: 'documentName',\n    filterType: AbsFilterType.Text,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGridOptions",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "uploadedFile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "File | undefined",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "methodsClass": [
        {
          "name": "getDocuments",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleFileOnChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "DocumentsUploadComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { DOCUMENTS_COLS } from './documents-col';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { DocumentsUploadComponent } from '../shared/components/documents-upload/documents-upload.component';\nimport { Select, Store } from '@ngxs/store';\nimport { DocumentSelectors, GetAllDocuments } from '../state/documents';\nimport { IDocumentReadOnlyModel } from '../api/models/documents/document-read-only.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Component({\n  selector: 'abs-documents',\n  templateUrl: './documents.component.html',\n  styleUrls: ['./documents.component.scss'],\n  standalone: true,\n  imports: [CommonModule, GridComponent, DocumentsUploadComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DocumentsComponent implements OnInit {\n  @Select(DocumentSelectors.slices.documents) documents$:\n    | Observable<IDocumentReadOnlyModel[]>\n    | undefined;\n\n  documentsData$: BehaviorSubject<IDocumentReadOnlyModel[]> =\n    new BehaviorSubject<IDocumentReadOnlyModel[]>([]);\n\n  documentsCols = DOCUMENTS_COLS;\n  gridOptions: IGridOptions = {\n    showFilter: true,\n    filterOn: 'documentName',\n    filterType: AbsFilterType.Text,\n  };\n  fileUploadedName: string | undefined;\n  uploadedFile: File | undefined;\n  documentType!: string;\n  canUpload = false;\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetAllDocuments());\n  }\n\n  ngOnInit() {\n    this.getDocuments();\n  }\n\n  getDocuments() {\n    this.documents$?.pipe(untilDestroyed(this)).subscribe((documentsData) => {\n      if (documentsData && documentsData.length > 0) {\n        this.documentsData$.next(documentsData);\n      }\n    });\n  }\n\n  handleGridAction($event: any) {\n    console.log('unhandled action', $event);\n  }\n\n  handleFileOnChange($event: any) {\n    this.fileUploadedName = $event.target.files[0].name;\n    this.uploadedFile = $event.target.files;\n  }\n\n  resetData() {\n    this.fileUploadedName = undefined;\n    this.uploadedFile = undefined;\n    this.documentType = '';\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-card {\n  min-width: 100%;\n  position: relative;\n}\n\ninput[type='file'] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n\n.input-file {\n  label {\n    position: relative;\n    top: 8px;\n    padding: 6px 40px;\n    border: 1px solid #595959;\n    border-radius: 6px;\n    opacity: 1;\n    color: #595959;\n    font-weight: 500;\n    transition: 250ms ease-in-out;\n    cursor: pointer;\n    i {\n      color: var(--global-warning);\n      margin-left: 20px;\n    }\n    &:hover &:focus-visible {\n      border: 1px solid var(--global-warning);\n    }\n  }\n}\n\n.upload-controls {\n  position: absolute;\n}\n",
          "styleUrl": "./documents.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<h1>Documents</h1>\n<sl-card>\n  <div slot=\"header\">All Documents</div>\n\n  <div style=\"margin: 2rem 0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </div>\n  <abs-documents-upload\n    [allowUpload]=\"false\"\n    [documentsData$]=\"documentsData$\"\n    [gridCols]=\"documentsCols\"\n    [showFilter]=\"gridOptions.showFilter\"\n    [filterOn]=\"gridOptions.filterOn\"\n    [filterType]=\"gridOptions.filterType\"\n    (documentsAction)=\"handleGridAction($event)\"\n  ></abs-documents-upload>\n</sl-card>\n"
    },
    {
      "name": "DocumentsUploadComponent",
      "id": "component-DocumentsUploadComponent-a8bb01845f51fe322affd12d0c48181a407c03cd096466d7ab76b08a93c3dd9bfcb1bdfb1cb81efd8c235f20f5121779da6b55eee76eabff4e4e79ce188700ce",
      "file": "src/app/shared/components/documents-upload/documents-upload.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-documents-upload",
      "styleUrls": ["./documents-upload.component.scss"],
      "styles": [],
      "templateUrl": ["./documents-upload.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "allowUpload",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "documentsData$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Subject<any>",
          "decorators": []
        },
        {
          "name": "dropdownLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dropdownOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "any",
          "decorators": []
        },
        {
          "name": "dropdownPlaceholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dropdownValue",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "string",
          "decorators": []
        },
        {
          "name": "filterOn",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string",
          "decorators": []
        },
        {
          "name": "gridCols",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "any",
          "decorators": []
        },
        {
          "name": "showFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "documentsAction",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "fileUploadedName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "gridOptions",
          "defaultValue": "{\n    showFilter: true,\n    filterOn: '',\n    filterType: AbsFilterType.Text,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGridOptions",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "uploadedFile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "File | undefined",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "uploadForm",
          "defaultValue": "new FormGroup({\n    certificateTypeId: new FormControl(''),\n    file: new FormControl(''),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        }
      ],
      "methodsClass": [
        {
          "name": "handleFileOnChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDocumentUpload",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 108,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFilterOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { AbsFilterType } from 'src/app/shared/components/grid/abs-grid.enum';\nimport { IGridOptions } from 'src/app/shared/components/grid/grid-options.model';\nimport { Subject } from 'rxjs';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { Store } from '@ngxs/store';\nimport {\n  DeleteCertificate,\n  DeleteDocument,\n  DownloadDocument,\n  UploadDocument,\n} from 'src/app/state';\nimport { GetDocumentTypes } from 'src/app/state/picklists';\nimport { IUserCertificateModel } from 'src/app/api/models/medicaltraining/user-certificate.model';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-documents-upload',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    DropdownModule,\n    ReactiveFormsModule,\n    ButtonModule,\n  ],\n  templateUrl: './documents-upload.component.html',\n  styleUrls: ['./documents-upload.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DocumentsUploadComponent implements OnInit {\n  // TODO: [Joe] - add form-errors shared component\n\n  @Input() allowUpload = true;\n  @Input() gridCols!: any;\n  @Input() documentsData$: Subject<any> = new Subject();\n  @Input() dropdownOptions!: any;\n  @Input() dropdownPlaceholder!: string;\n  @Input() filterOn!: string;\n  @Input() showFilter!: boolean;\n  @Input() dropdownLabel!: string;\n  @Input() dropdownValue!: string;\n  @Input() userId!: number;\n  @Output() documentsAction: EventEmitter<any> = new EventEmitter();\n\n  gridOptions: IGridOptions = {\n    showFilter: true,\n    filterOn: '',\n    filterType: AbsFilterType.Text,\n  };\n  fileUploadedName: string | undefined;\n  uploadedFile: File | undefined;\n\n  uploadForm = new FormGroup({\n    certificateTypeId: new FormControl(''),\n    file: new FormControl(''),\n  });\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetDocumentTypes());\n  }\n\n  ngOnInit() {\n    this.setFilterOptions();\n  }\n\n  setFilterOptions() {\n    this.gridOptions.filterOn = this.filterOn;\n    this.gridOptions.showFilter = this.showFilter;\n  }\n\n  handleGridAction($event: any) {\n    const data = $event.data;\n    if ($event.fieldKey === 'download') {\n      this._store.dispatch(\n        new DownloadDocument({\n          documentId: data.documentId || data.id,\n          documentName: data.documentName,\n        })\n      );\n    }\n\n    if ($event.fieldKey === 'delete') {\n      if (data.certificateId) {\n        this._store.dispatch(\n          new DeleteCertificate(data.certificateId || data.id)\n        );\n      } else {\n        this._store.dispatch(new DeleteDocument(data.id));\n      }\n\n      this.documentsAction.emit({\n        fieldKey: 'delete',\n      });\n    }\n  }\n\n  onDocumentUpload() {\n    const model: IUserCertificateModel = {\n      documentId: 1,\n      certificateTypeId: this.uploadForm.get('certificateTypeId')?.value,\n      createdByUserId: this.userId,\n      file: this.uploadedFile,\n      issueDate: new Date().toISOString(),\n    } as unknown as IUserCertificateModel;\n\n    const formData = new FormData();\n\n    Object.keys(model).forEach((key) => {\n      formData.set(key, model[key]);\n    });\n\n    if (this.uploadedFile) {\n      this._store.dispatch(new UploadDocument({ model: formData }));\n    }\n\n    this.documentsAction.emit({\n      fieldKey: 'upload',\n    });\n\n    this.resetData();\n  }\n\n  handleFileOnChange($event: any) {\n    this.fileUploadedName = $event.target.files[0].name;\n    this.uploadedFile = $event.target.files[0];\n  }\n\n  resetData() {\n    this.fileUploadedName = undefined;\n    this.uploadForm.get('certificateTypeId')?.setValue('');\n    this.uploadedFile = undefined;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-card {\n  min-width: 100%;\n  position: relative;\n}\n\ninput[type='file'] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n\n.input-file {\n  label {\n    position: relative;\n    padding: 8px 80px 8px 40px;\n    border: 1px solid #595959;\n    border-radius: 6px;\n    opacity: 1;\n    color: #595959;\n    font-weight: 500;\n    transition: 250ms ease-in-out;\n    white-space: nowrap;\n    display: block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 300px;\n    cursor: pointer;\n    i {\n      color: var(--global-warning);\n      margin-left: 20px;\n      position: absolute;\n      top: 9px;\n      right: 25px;\n    }\n    &:hover &:focus-visible {\n      border: 1px solid var(--global-warning);\n    }\n  }\n}\n\n.upload-controls {\n  .absolute {\n    position: absolute;\n  }\n}\n",
          "styleUrl": "./documents-upload.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 67,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"mt-5\">\n  <div\n    class=\"flex upload-controls gap-3 {{\n      gridOptions.showFilter ? 'absolute' : ''\n    }}\"\n    *ngIf=\"allowUpload\"\n  >\n    <form class=\"flex gap-3\" [formGroup]=\"uploadForm\">\n      <p-dropdown\n        [options]=\"dropdownOptions\"\n        [placeholder]=\"dropdownPlaceholder\"\n        [optionLabel]=\"dropdownLabel\"\n        [optionValue]=\"dropdownValue\"\n        [showClear]=\"true\"\n        formControlName=\"certificateTypeId\"\n      ></p-dropdown>\n      <div class=\"input-file\">\n        <label>\n          <input\n            type=\"file\"\n            accept=\".pdf\"\n            (change)=\"handleFileOnChange($event)\"\n          />\n          <span\n            >{{ fileUploadedName ?? 'Upload a File' }}\n            <i class=\"fa-solid fa-upload\"></i\n          ></span>\n        </label>\n      </div>\n      <p-button\n        (click)=\"onDocumentUpload()\"\n        [disabled]=\"\n          !uploadForm.valid ||\n          !fileUploadedName ||\n          !uploadForm.value.certificateTypeId\n        \"\n        class=\"btn-add\"\n      >\n        <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n        <span>UPLOAD DOCUMENT</span>\n      </p-button>\n    </form>\n  </div>\n  <abs-grid\n    [columns]=\"gridCols\"\n    [data]=\"documentsData$\"\n    (action)=\"handleGridAction($event)\"\n    [gridOptions]=\"gridOptions\"\n    [showFilter]=\"gridOptions.showFilter\"\n    [filterOn]=\"gridOptions.filterOn\"\n    [filterType]=\"'text'\"\n    [pagination]=\"true\"\n    [itemsPerPage]=\"5\"\n    stlye=\"margin: 0 0 2rem 0\"\n  >\n  </abs-grid>\n</div>\n"
    },
    {
      "name": "ExaminationHistoryComponent",
      "id": "component-ExaminationHistoryComponent-4ad1d789c42d7eeb0a015b6936982ed127bbe45fec0dba7af4e6ea213e4e8753c8be13ac1ab1a2006817dbc0e997cccccff9f19914fbd7da148d9bcd510838b5",
      "file": "src/app/examination-history/examination-history.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-examination-history",
      "styleUrls": ["./examination-history.component.scss"],
      "styles": [],
      "templateUrl": ["./examination-history.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "activeExams",
          "defaultValue": "[\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "examHistory",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IExamHistoryReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "examHistory$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamHistoryReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examHistory"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examHistoryCols",
          "defaultValue": "EXAM_HISTORY_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile> | undefined",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "CollapsePanelComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { EXAM_HISTORY_COLS } from './exam-history-cols';\nimport { Select, Store } from '@ngxs/store';\nimport { DownloadDocument, IUserProfile, UserProfileSelectors } from '../state';\nimport { GetExamHistory } from '../state/exam-history/exam-history.actions';\nimport { IExamHistoryReadOnlyModel } from '../api/models/examinations/exam-history-read-only.model';\nimport { ExamHistorySelectors } from '../state/exam-history';\n\n@Component({\n  selector: 'abs-examination-history',\n  templateUrl: './examination-history.component.html',\n  styleUrls: ['./examination-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [CommonModule, CollapsePanelComponent, GridComponent],\n})\nexport class ExaminationHistoryComponent {\n  @Select(ExamHistorySelectors.slices.examHistory) examHistory$:\n    | Observable<IExamHistoryReadOnlyModel[]>\n    | undefined;\n\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  examHistoryCols = EXAM_HISTORY_COLS;\n\n  activeExams = [\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n  ];\n\n  examHistory!: IExamHistoryReadOnlyModel[];\n\n  constructor(private _router: Router, private _store: Store) {\n    this._store.dispatch(new GetExamHistory());\n  }\n\n  handleGridAction($event: any) {\n    const documentId = $event.data.documentId;\n\n    if (documentId) {\n      this._store.dispatch(\n        new DownloadDocument({\n          documentId: documentId,\n          documentName: $event.data.examinationName,\n        })\n      );\n    }\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".active-exam__container {\n  .active-exam__details {\n    padding-top: 1rem;\n  }\n  .active-exam__details + .active-exam__details {\n    border-top: 1px solid var(--global-gray-light);\n  }\n}\n\nsl-button.exam-link::part(base) {\n  height: 2rem;\n}\nsl-button.exam-link::part(label) {\n  padding: 0;\n  color: var(--global-success);\n  font-weight: 700;\n  font-size: 1rem;\n}\nsl-button.exam-link::part(label):hover {\n  color: var(--global-success-darken-20);\n}\n",
          "styleUrl": "./examination-history.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 70,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "router": {
          "name": "router",
          "getSignature": {
            "name": "router",
            "type": "",
            "returnType": "Router",
            "line": 89
          }
        }
      },
      "templateData": "<header>\n  <h1 class=\"mb-1\">Examination History</h1>\n</header>\n<ng-container>\n  <section *ngIf=\"user$ | async as user\">\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <p class=\"text-2xl mt-0\">For {{ user.displayName }}</p>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <!-- Keeping this commented out for now, but we may want to bring it back later. -->\n\n      <!-- <sl-card class=\"col-12\">\n        <abs-collapse-panel [panelId]=\"1\" [startExpanded]=\"true\">\n          <h5 class=\"mt-0 mb-2\" panel-header>Active Examinations</h5>\n          <div class=\"grid\">\n            <div class=\"col-12 active-exam__container\">\n              <p *ngIf=\"activeExams.length > 0\">\n                Click on a link below to register for an active examination\n              </p> -->\n      <!-- TODO: [Joe] update the 'no examinations' text to include any relevant information or action items -->\n      <!-- <p *ngIf=\"activeExams.length === 0\">\n                There are no active examinations at this time. Please check back\n                later.\n              </p>\n              <div\n                class=\"grid active-exam__details\"\n                *ngFor=\"let exam of activeExams\"\n              >\n                <div class=\"col-7\">\n                  <sl-button\n                    class=\"exam-link m-0\"\n                    variant=\"text\"\n                    (click)=\"\n                      router.navigateByUrl('exam-registration/' + exam.id)\n                    \"\n                  >\n                    {{ exam.examTitle }}\n                  </sl-button>\n                  <p class=\"m-0\">\n                    ({{ exam.startDate | date : 'shortDate' }} through\n                    {{ exam.endDate | date : 'shortDate' }})\n                  </p>\n                  <p>\n                    Status: <span class=\"font-bold\">{{ exam.status }}</span>\n                  </p>\n                </div>\n                <div class=\"col-5\">\n                  <div class=\"grid\">\n                    <div class=\"col-8\">\n                      <p class=\"font-bold m-0\">Update</p>\n                    </div>\n                    <div class=\"col-4\">\n                      <p class=\"font-bold m-0\">Date</p>\n                    </div>\n                  </div>\n                  <div class=\"grid\" *ngIf=\"exam.updates.length === 0\">\n                    <div class=\"col-8\">\n                      <p class=\"m-0\">No updates at this time.</p>\n                    </div>\n                  </div>\n                  <div class=\"grid\" *ngFor=\"let update of exam.updates\">\n                    <div class=\"col-8\">\n                      <p class=\"m-0\">{{ update.updateText }}</p>\n                    </div>\n                    <div class=\"col-4\">\n                      <p class=\"m-0\">\n                        {{ update.updateDate | date : 'shortDate' }}\n                      </p>\n                    </div>\n                  </div>\n                  <div class=\"grid\">\n                    <div class=\"col-12\">\n                      <p class=\"text-sm\">\n                        Note: Once your application has been approved, you will\n                        be mailed a letter with instructions on how to register\n                        for the exam.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card> -->\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n          <h5 class=\"mt-0 mb-2\" panel-header>Examination History</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p class=\"mb-0\">\n                Below is a history of all of the examinations that you've\n                participated in\n              </p>\n              <abs-grid\n                [columns]=\"examHistoryCols\"\n                [data]=\"examHistory$\"\n                [pagination]=\"true\"\n                [itemsPerPage]=\"20\"\n                (action)=\"handleGridAction($event)\"\n                class=\"margin-bottom-2\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading examination history...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ExaminationRostersComponent",
      "id": "component-ExaminationRostersComponent-7e36204ed5c081ed422d60a2105166959290062ca36ca177fe4860c86ee15f8999d02a7a669329397e7fc8e0a74fc4841bd152d202b80fa1edc7e4502db7670a",
      "file": "src/app/examination-rosters/examination-rosters.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-examination-rosters",
      "styleUrls": ["./examination-rosters.component.scss"],
      "styles": [],
      "templateUrl": ["./examination-rosters.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "caseFeedback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "caseFeedbackEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "caseFeedbackId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "caseFeedbackNewComment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "cases",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "editActive",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 96
        },
        {
          "name": "examHeaderId",
          "defaultValue": "491",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "examTitle$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamTitleReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examTitle"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isCaseFeedbackEditActive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "rosters",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "scoringSessionsList",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IScoringSessionReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 92
        },
        {
          "name": "selectedCaseDetails",
          "defaultValue": "undefined",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 94
        },
        {
          "name": "selectedCaseFeedback$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICaseFeedbackModel> | undefined",
          "optional": false,
          "description": "",
          "line": 76,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.selectedCaseFeedback"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedCaseId",
          "defaultValue": "undefined",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "selectedRoster",
          "defaultValue": "undefined",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number> | undefined",
          "optional": false,
          "description": "",
          "line": 69,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userId"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 78
        }
      ],
      "methodsClass": [
        {
          "name": "confirmCaseSelection",
          "args": [
            {
              "name": "caseData",
              "type": "ICaseRosterReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 182,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "caseData",
              "type": "ICaseRosterReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "confirmRosterSelection",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteCaseFeedback",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 363,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteSectionComment",
          "args": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 301,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCaseList",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initPicklistValues",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onRightClick",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'contextmenu', ['$event']"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveCaseFeedback",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 320,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveSectionComment",
          "args": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 258,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToCaseFeedback",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 382,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "scrollToElementById",
          "args": [
            {
              "name": "elementId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 402,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "elementId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectCase",
          "args": [
            {
              "name": "caseData",
              "type": "ICaseRosterReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 200,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "caseData",
              "type": "ICaseRosterReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectRoster",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 171,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleCaseFeedbackEdit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleCommentSectionEdit",
          "args": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 233,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "section",
              "type": "ICaseDetailModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "contextmenu",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { ButtonModule } from 'primeng/button';\nimport { GetScoringSessionList, PicklistsSelectors } from '../state/picklists';\nimport {\n  ICaseCommentModel,\n  ICaseDetailReadOnlyModel,\n  ICaseRosterReadOnlyModel,\n  IScoringSessionReadOnlyModel,\n} from '../api';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  CreateCaseComment,\n  CreateCaseFeedback,\n  DeleteCaseComment,\n  DeleteCaseFeedback,\n  ExamScoringSelectors,\n  GetCaseDetailsAndFeedback,\n  GetCaseRoster,\n  GetExamTitle,\n  UpdateCaseComment,\n  UpdateCaseFeedback,\n  UserProfileSelectors,\n} from '../state';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\nimport { Observable } from 'rxjs';\nimport { ICaseFeedbackModel } from '../api/models/scoring/case-feedback.model';\n\ninterface ICaseDetailModel extends ICaseDetailReadOnlyModel {\n  editComment: boolean;\n  newComment?: string;\n  newFeedback?: string;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-examination-rosters',\n  standalone: true,\n  imports: [\n    FormsModule,\n    CommonModule,\n    TranslateModule,\n    DropdownModule,\n    InputTextareaModule,\n    ButtonModule,\n  ],\n  templateUrl: './examination-rosters.component.html',\n  styleUrls: ['./examination-rosters.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ExaminationRostersComponent implements OnInit {\n  @HostListener('contextmenu', ['$event'])\n  onRightClick(event: any) {\n    event.preventDefault();\n  }\n\n  @Select(UserProfileSelectors.userId) user$: Observable<number> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  @Select(ExamScoringSelectors.slices.selectedCaseFeedback)\n  selectedCaseFeedback$: Observable<ICaseFeedbackModel> | undefined;\n\n  userId!: number;\n\n  examHeaderId = 491; // TODO - remove hard coded value\n  selectedRoster: any = undefined;\n  selectedCaseId: number | undefined = undefined;\n  rosters: any = [];\n  cases: any = [];\n\n  caseFeedbackId!: number;\n  caseFeedback!: string;\n  caseFeedbackNewComment!: string;\n  caseFeedbackEdit = false;\n  isCaseFeedbackEditActive = false;\n\n  scoringSessionsList: IScoringSessionReadOnlyModel[] = [];\n\n  selectedCaseDetails: any = undefined;\n\n  editActive!: boolean;\n\n  constructor(\n    private _store: Store,\n    private _globalDialogService: GlobalDialogService\n  ) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n  }\n\n  ngOnInit(): void {\n    this.initPicklistValues();\n    this.user$?.pipe(untilDestroyed(this)).subscribe((userId) => {\n      this.userId = userId;\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetScoringSessionList())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.scoringSessionsList = this._store.selectSnapshot(\n          PicklistsSelectors.slices.scoringSessions\n        ) as IScoringSessionReadOnlyModel[];\n\n        if (this.scoringSessionsList?.length > 0) {\n          this.selectedRoster = this.scoringSessionsList[0];\n        }\n\n        this.getCaseList();\n      });\n  }\n\n  getCaseList() {\n    this._store\n      .dispatch(\n        new GetCaseRoster(\n          this.selectedRoster.session1Id,\n          this.selectedRoster.session2Id\n        )\n      )\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.cases = this._store.selectSnapshot(\n          ExamScoringSelectors.slices.caseRoster\n        ) as ICaseRosterReadOnlyModel[];\n\n        if (this.cases?.length > 0) {\n          this.selectCase(this.cases[0]);\n        } else {\n          this.selectedCaseId = undefined;\n          this.selectedCaseDetails = undefined;\n        }\n      });\n  }\n\n  confirmRosterSelection(event: any) {\n    if (this.editActive) {\n      this._globalDialogService\n        .showConfirmation(\n          'Unsaved Changes',\n          'Are you sure you want to navigate away from this case? Any unsaved changes will be lost.'\n        )\n        .then((result) => {\n          if (result) {\n            this.editActive = false;\n            this.selectRoster(event);\n          }\n        });\n    } else {\n      this.selectRoster(event);\n    }\n  }\n\n  selectRoster(event: any) {\n    if (event.value) {\n      this.selectedRoster = event.value;\n      this.getCaseList();\n    } else {\n      this.selectedRoster = undefined;\n      this.selectedCaseId = undefined;\n      this.selectedCaseDetails = undefined;\n    }\n  }\n\n  confirmCaseSelection(caseData: ICaseRosterReadOnlyModel) {\n    if (this.editActive) {\n      this._globalDialogService\n        .showConfirmation(\n          'Unsaved Changes',\n          'Are you sure you want to navigate away from this case? Any unsaved changes will be lost.'\n        )\n        .then((result) => {\n          if (result) {\n            this.editActive = false;\n            this.selectCase(caseData);\n          }\n        });\n    } else {\n      this.selectCase(caseData);\n    }\n  }\n\n  selectCase(caseData: ICaseRosterReadOnlyModel) {\n    if (this.selectedCaseId !== caseData.id) {\n      this.selectedCaseId = caseData.id;\n      this._store\n        .dispatch(new GetCaseDetailsAndFeedback(caseData.id))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseSections = this._store\n            .selectSnapshot(ExamScoringSelectors.slices.selectedCaseContents)\n            ?.map((val) => {\n              return {\n                ...val,\n                editComment: false,\n                newComment: '',\n              };\n            }) as ICaseDetailModel[];\n\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n\n          this.selectedCaseDetails = {\n            ...caseData,\n            sections: caseSections,\n            feedback: caseFeedback?.feedback,\n            newFeedback: caseFeedback?.feedback ? caseFeedback.feedback : '',\n            caseFeedbackId: caseFeedback?.id,\n            editFeedback: false,\n          };\n        });\n    }\n  }\n\n  toggleCommentSectionEdit(section: ICaseDetailModel) {\n    section.editComment = !section.editComment;\n    if (section.editComment) {\n      section.newComment = section.comments;\n      this.editActive = true;\n    } else {\n      section.newComment = '';\n      this.editActive = false;\n    }\n  }\n\n  toggleCaseFeedbackEdit() {\n    this.selectedCaseDetails.editFeedback =\n      !this.selectedCaseDetails.editFeedback;\n    if (this.selectedCaseDetails.editFeedback) {\n      this.selectedCaseDetails.newFeedback = this.selectedCaseDetails.feedback\n        ? this.selectedCaseDetails.feedback\n        : '';\n      this.editActive = true;\n    } else {\n      this.selectedCaseDetails.newFeedback = '';\n      this.editActive = false;\n    }\n  }\n\n  saveSectionComment(section: ICaseDetailModel) {\n    const newComment = {\n      caseContentId: section.caseContentId,\n      comments: section.newComment,\n    } as unknown as ICaseCommentModel;\n    if (section.caseCommentId) {\n      newComment.id = section.caseCommentId;\n      // call update case comment store action\n      this._store\n        .dispatch(new UpdateCaseComment(newComment))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseComment = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseComment\n          );\n          if (caseComment) {\n            section.caseCommentId = caseComment.id;\n            section.comments = caseComment.comments;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    } else {\n      // call add case comment store action\n      this._store\n        .dispatch(new CreateCaseComment(newComment))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseComment = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseComment\n          );\n          if (caseComment) {\n            section.caseCommentId = caseComment.id;\n            section.comments = caseComment.comments;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    }\n    section.editComment = false;\n    this.editActive = false;\n  }\n\n  deleteSectionComment(section: ICaseDetailModel) {\n    this._globalDialogService\n      .showConfirmation(\n        'Confirm Delete',\n        'Are you sure you want to delete this section comment?'\n      )\n      .then((result) => {\n        if (result) {\n          this._store\n            .dispatch(new DeleteCaseComment(section.caseCommentId))\n            .pipe(untilDestroyed(this))\n            .subscribe(() => {\n              this.selectedCaseId = 0;\n              this.selectCase(this.selectedCaseDetails);\n            });\n        }\n      });\n  }\n\n  saveCaseFeedback() {\n    const model = {\n      userId: this.userId,\n      feedback: this.selectedCaseDetails.newFeedback,\n      caseHeaderId: this.selectedCaseDetails.id,\n    } as unknown as ICaseFeedbackModel;\n    if (this.selectedCaseDetails.caseFeedbackId) {\n      model.id = this.selectedCaseDetails.caseFeedbackId;\n      this._store\n        .dispatch(new UpdateCaseFeedback(model))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n\n          if (caseFeedback) {\n            this.selectedCaseDetails.caseFeedbackId = caseFeedback.id;\n            this.selectedCaseDetails.feedback = caseFeedback.feedback;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreateCaseFeedback(model))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          const caseFeedback = this._store.selectSnapshot(\n            ExamScoringSelectors.slices.selectedCaseFeedback\n          );\n          if (caseFeedback) {\n            this.selectedCaseDetails.caseFeedbackId = caseFeedback.id;\n            this.selectedCaseDetails.feedback = caseFeedback.feedback;\n          } else {\n            this.selectCase(this.selectedCaseDetails);\n          }\n        });\n    }\n    this.selectedCaseDetails.editFeedback = false;\n    this.editActive = false;\n  }\n\n  deleteCaseFeedback(id: number) {\n    this._globalDialogService\n      .showConfirmation(\n        'Confirm Delete',\n        'Are you sure you want to delete this case feedback?'\n      )\n      .then((result) => {\n        if (result) {\n          this._store\n            .dispatch(new DeleteCaseFeedback(id))\n            .pipe(untilDestroyed(this))\n            .subscribe(() => {\n              this.selectedCaseId = 0;\n              this.selectCase(this.selectedCaseDetails);\n            });\n        }\n      });\n  }\n\n  scrollToCaseFeedback() {\n    if (!this.editActive) {\n      this.selectedCaseDetails.editFeedback =\n        !this.selectedCaseDetails.editFeedback;\n\n      this.selectedCaseDetails.newFeedback = this.selectedCaseDetails.feedback\n        ? this.selectedCaseDetails.feedback\n        : '';\n      this.editActive = true;\n    }\n\n    this.scrollToElementById('case-feedback');\n    setTimeout(() => {\n      const inputElement = document.getElementById('case-feedback-comment');\n      if (inputElement) {\n        inputElement.focus();\n      }\n    }, 500);\n  }\n\n  scrollToElementById(elementId: string) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      setTimeout(() => {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }, 0);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".case-header {\n  border-bottom: 1px solid var(--global-gray-light);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.case-details-container + .case-details-container {\n  border-top: 1px solid var(--global-gray);\n  padding-top: 1rem;\n  margin-top: 0.5rem;\n}\n\n.case-feedback-container {\n  background-color: var(--global-table-background);\n  padding: 1.5rem 1rem;\n  margin-top: 1.5rem;\n\n  label {\n    font-size: 1.5rem;\n  }\n}\n\np-dropdown {\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.selected-case {\n  color: var(--global-success);\n  font-weight: 700;\n}\n\n.section-feedback {\n  border-top: 1px solid var(--global-gray-light);\n}\n\n// .section-details {\n//     p {\n//         margin-top: .25rem;\n//     }\n// }\n",
          "styleUrl": "./examination-rosters.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 96,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<header>\n  <h1>\n    {{\n      (examTitle$ | async)?.examName || 'EXAMSCORING.DEFAULT_EXAM' | translate\n    }}\n  </h1>\n</header>\n<ng-container>\n  <section>\n    <sl-card class=\"col-12\">\n      <div slot=\"header\">\n        <span class=\"text-3xl\">{{\n          'EXAMSCORING.EXAMROSTERS.TITLE' | translate\n        }}</span>\n      </div>\n      <div class=\"grid\">\n        <div class=\"col-12 lg:col-4 md:col-5\">\n          <h5 class=\"pb-3 mb-0\">Table of Contents</h5>\n          <div class=\"flex flex-column\">\n            <p-dropdown\n              [options]=\"scoringSessionsList\"\n              [(ngModel)]=\"selectedRoster\"\n              optionLabel=\"examSchedule\"\n              placeholder=\"Select a roster to view...\"\n              (onChange)=\"confirmRosterSelection($event)\"\n            ></p-dropdown>\n            <ng-container *ngIf=\"cases?.length > 0\">\n              <p-button\n                *ngFor=\"let case of cases\"\n                class=\"mb-1\"\n                styleClass=\"p-button-secondary p-button-text py-1\"\n                (onClick)=\"confirmCaseSelection(case)\"\n              >\n                <span\n                  class=\"text-left\"\n                  [ngClass]=\"{\n                    'selected-case': selectedCaseId === case.id\n                  }\"\n                >\n                  {{ case.caseNumber }}:\n                  <span *ngIf=\"case.description\">{{ case.description }}</span>\n                  <span *ngIf=\"!case.description\">\n                    {{ case.title }}\n                  </span>\n                </span>\n              </p-button>\n            </ng-container>\n            <ng-container *ngIf=\"!(cases?.length > 0)\">\n              <p class=\"pl-3 mt-0 font-italic text-muted\">No cases available</p>\n            </ng-container>\n          </div>\n        </div>\n        <div class=\"col-12 lg:col-8 md:col-7 no-highlight\">\n          <h5 class=\"pb-3 case-header\">\n            <span *ngIf=\"selectedCaseDetails\">\n              Case {{ selectedCaseDetails.caseNumber }}:\n              <span *ngIf=\"selectedCaseDetails.title\">{{\n                selectedCaseDetails.title\n              }}</span>\n            </span>\n            <span *ngIf=\"!selectedCaseDetails\">Case Details</span>\n            <p-button\n              *ngIf=\"selectedCaseDetails\"\n              styleClass=\"p-button-info p-button-text pl-0\"\n              (onClick)=\"scrollToCaseFeedback()\"\n              >Provide Case Feedback</p-button\n            >\n          </h5>\n          <p\n            *ngIf=\"!selectedCaseDetails\"\n            class=\"font-italic text-muted mt-0 pl-3\"\n          >\n            No Case Selected\n          </p>\n          <div *ngIf=\"selectedCaseDetails\" class=\"grid\">\n            <div\n              class=\"col-12 case-details-container\"\n              *ngFor=\"let section of selectedCaseDetails.sections\"\n            >\n              <p class=\"font-bold m-0\">{{ section.heading }}</p>\n              <div class=\"section-details\" [innerHTML]=\"section.content\"></div>\n\n              <div *ngIf=\"section.comments || section.editComment\">\n                <label [for]=\"section.heading + '-comment'\">Comment:</label>\n                <p class=\"my-1\" *ngIf=\"!section.editComment\">\n                  {{ section.comments }}\n                </p>\n                <textarea\n                  [name]=\"section.heading + '-comment'\"\n                  rows=\"5\"\n                  pInputTextarea\n                  [(ngModel)]=\"section.newComment\"\n                  *ngIf=\"section.editComment\"\n                ></textarea>\n              </div>\n              <div class=\"flex justify-content-start\">\n                <p-button\n                  *ngIf=\"!section.editComment\"\n                  styleClass=\"p-button-success p-button-text pl-0\"\n                  (onClick)=\"toggleCommentSectionEdit(section)\"\n                  [disabled]=\"editActive\"\n                >\n                  {{ section.comments ? 'Edit' : 'Add Comment' }}\n                </p-button>\n                <p-button\n                  *ngIf=\"!section.editComment && section.comments\"\n                  styleClass=\"p-button-danger p-button-text ml-2\"\n                  (onClick)=\"deleteSectionComment(section)\"\n                  [disabled]=\"editActive\"\n                >\n                  Delete\n                </p-button>\n              </div>\n              <p-button\n                *ngIf=\"section.editComment\"\n                type=\"button\"\n                (onClick)=\"saveSectionComment(section)\"\n                >Save Comment</p-button\n              >\n              <p-button\n                *ngIf=\"section.editComment\"\n                styleClass=\"p-button-secondary p-button-text\"\n                type=\"button\"\n                (onClick)=\"toggleCommentSectionEdit(section)\"\n                >Cancel</p-button\n              >\n            </div>\n\n            <div *ngIf=\"!(selectedCaseDetails.sections?.length > 0)\">\n              <p class=\"font-italic text-muted mt-0 pl-3\">\n                This case currently has no content\n              </p>\n            </div>\n\n            <div class=\"col-12 case-feedback-container\" id=\"case-feedback\">\n              <label for=\"case-feedback-comment\">{{\n                'EXAMSCORING.EXAMROSTERS.CASE_FEEDBACK_TITLE' | translate\n              }}</label>\n              <small class=\"text-muted block\">{{\n                'EXAMSCORING.EXAMROSTERS.CASE_FEEDBACK_SUBTITLE' | translate\n              }}</small>\n              <div\n                *ngIf=\"\n                  selectedCaseDetails.feedback ||\n                  selectedCaseDetails.editFeedback\n                \"\n              >\n                <p class=\"my-1\" *ngIf=\"!selectedCaseDetails.editFeedback\">\n                  {{ selectedCaseDetails.feedback }}\n                </p>\n                <textarea\n                  name=\"case-feedback-comment\"\n                  id=\"case-feedback-comment\"\n                  rows=\"5\"\n                  pInputTextarea\n                  [(ngModel)]=\"selectedCaseDetails.newFeedback\"\n                  *ngIf=\"selectedCaseDetails.editFeedback\"\n                ></textarea>\n              </div>\n              <div class=\"flex justify-content-start\">\n                <p-button\n                  *ngIf=\"!selectedCaseDetails.editFeedback\"\n                  styleClass=\"p-button-success p-button-outlined mt-2\"\n                  (onClick)=\"toggleCaseFeedbackEdit()\"\n                  [disabled]=\"editActive\"\n                >\n                  {{\n                    selectedCaseDetails.feedback ? 'Edit' : 'Add Case Feedback'\n                  }}\n                </p-button>\n                <p-button\n                  *ngIf=\"\n                    !selectedCaseDetails.editFeedback &&\n                    selectedCaseDetails.feedback\n                  \"\n                  styleClass=\"p-button-danger p-button-text ml-2\"\n                  (onClick)=\"\n                    deleteCaseFeedback(selectedCaseDetails.caseFeedbackId)\n                  \"\n                  [disabled]=\"editActive\"\n                >\n                  Delete\n                </p-button>\n              </div>\n              <p-button\n                *ngIf=\"selectedCaseDetails.editFeedback\"\n                type=\"button\"\n                (onClick)=\"saveCaseFeedback()\"\n              >\n                Save Case Feedback\n              </p-button>\n              <p-button\n                *ngIf=\"selectedCaseDetails.editFeedback\"\n                styleClass=\"p-button-secondary p-button-text\"\n                type=\"button\"\n                (onClick)=\"toggleCaseFeedbackEdit()\"\n                >Cancel</p-button\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </sl-card>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading exam rosters...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ExaminationScoreCardComponent",
      "id": "component-ExaminationScoreCardComponent-4d46a1abc03c0489a081133984084b2f17a527ede7de8e05ec6df1529e574ba9777115895f2fea65a68f60e8a3d38e3512dabb5edd3eed0f912035817a713ff4",
      "file": "src/app/shared/components/examination-score-card/examination-score-card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-examination-score-card",
      "styleUrls": ["./examination-score-card.component.scss"],
      "styles": [],
      "templateUrl": ["./examination-score-card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "case",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "any",
          "decorators": []
        },
        {
          "name": "locked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "handleChange",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "disabledCriticalFail",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "localData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "localLocked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "scoreOptions",
          "defaultValue": "[\n    { label: 'Pass', value: '1' },\n    { label: 'Equivocal', value: '2' },\n    { label: 'Fail', value: '3' },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "scoringForm",
          "defaultValue": "new FormGroup({\n    score: new FormControl(''),\n    remarks: new FormControl(''),\n    criticalFail: new FormControl({ value: false, disabled: true }),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56
        }
      ],
      "methodsClass": [
        {
          "name": "handleFormChange",
          "args": [
            {
              "name": "caseData",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "caseData",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleScoreSelect",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setLocalData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { isObservable } from 'rxjs';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'abs-examination-score-card',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RadioButtonModule,\n    CheckboxModule,\n    InputTextareaModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n  ],\n  templateUrl: './examination-score-card.component.html',\n  styleUrls: ['./examination-score-card.component.scss'],\n})\nexport class ExaminationScoreCardComponent implements OnInit, OnChanges {\n  // TODO: [Joe] - add form-errors shared component\n\n  @Input() case: any;\n  @Input() locked = false;\n  @Output() handleChange: EventEmitter<any> = new EventEmitter();\n\n  localLocked = false;\n  localData!: any;\n\n  disabledCriticalFail = true;\n\n  scoreOptions = [\n    { label: 'Pass', value: '1' },\n    { label: 'Equivocal', value: '2' },\n    { label: 'Fail', value: '3' },\n  ];\n\n  scoringForm = new FormGroup({\n    score: new FormControl(''),\n    remarks: new FormControl(''),\n    criticalFail: new FormControl({ value: false, disabled: true }),\n  });\n\n  constructor(private _translateService: TranslateService) {}\n\n  ngOnInit() {\n    this.scoringForm.valueChanges.subscribe((value: any) => {\n      const caseData = { ...this.localData };\n      if (caseData) {\n        caseData.score = value?.score ?? 0;\n        caseData.remarks = value?.remarks;\n        caseData.criticalFail = value?.criticalFail;\n\n        this.handleFormChange(caseData);\n      }\n    });\n\n    if (isObservable(this.case)) {\n      this.case.subscribe((data) => {\n        this.localData = data;\n        console.log('data obs', data);\n        this.setLocalData();\n      });\n    } else {\n      const localData = { ...this.case };\n\n      localData['caseId'] = this.case?.sections\n        ? this.case?.sections[0].caseNumber\n        : this.case?.examCaseId;\n      localData['remarksTitle'] = this.case?.sections\n        ? this._translateService.instant(\n            'EXAMSCORING.EXAMINATION.SCORE_CARD.REMARKS_TITLE',\n            {\n              caseTitle: this.case?.sections[0].caseTitle,\n              caseId: this.case?.sections[0].caseNumber,\n            }\n          )\n        : this._translateService.instant(\n            'EXAMSCORING.EXAMINATION.SCORE_CARD.REMARKS_TITLE_NO_CASE',\n            {\n              caseId: this.case?.examCaseId,\n            }\n          );\n\n      this.localData = localData;\n      console.log('data reg', this.localData);\n      this.setLocalData();\n    }\n  }\n\n  handleScoreSelect(value: any) {\n    if (value === '3' || value === 3) {\n      this.scoringForm.get('criticalFail')?.enable();\n      this.disabledCriticalFail = false;\n    } else {\n      this.scoringForm.get('criticalFail')?.disable();\n      this.scoringForm.get('criticalFail')?.setValue(false);\n      this.disabledCriticalFail = true;\n    }\n  }\n\n  setLocalData() {\n    this.scoringForm.get('score')?.setValue(this.localData?.score);\n    this.scoringForm.get('remarks')?.setValue(this.localData?.remarks);\n    this.scoringForm\n      .get('criticalFail')\n      ?.setValue(this.localData?.criticalFail);\n\n    this.handleScoreSelect(this.scoringForm.get('score')?.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['case']) {\n      const scores = this.case?.scores;\n      if (scores) {\n        for (const [key, value] of Object.entries(scores)) {\n          this.scoringForm.get(key)?.setValue(value);\n        }\n      }\n    }\n    if (changes['locked']) {\n      this.localLocked = this.locked;\n      if (this.locked) {\n        this.scoringForm.disable();\n      } else {\n        this.scoringForm.enable();\n      }\n    }\n  }\n\n  handleFormChange(caseData: any) {\n    this.handleChange.emit({\n      case: caseData,\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".title {\n  font-weight: bold;\n}\n\n.radios label {\n  font-weight: normal;\n}\n\nlabel {\n  display: inline-block;\n  z-index: 100;\n}\n\nlabel.disabled {\n  color: #6b6b6b;\n}\n",
          "styleUrl": "./examination-score-card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 60,
        "jsdoctags": [
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<div class=\"score-card mt-4\">\n  <form [formGroup]=\"scoringForm\">\n    <div class=\"flex\">\n      <div class=\"col-12 md:col-3\">\n        <div class=\"title mb-2\">\n          {{\n            'EXAMSCORING.EXAMINATION.SCORE_CARD.SCORE'\n              | translate : { caseId: localData?.caseId }\n          }}\n        </div>\n\n        <div class=\"flex flex-column gap-1 radios\">\n          <div\n            class=\"flex align-items-center\"\n            *ngFor=\"let score of scoreOptions\"\n          >\n            <p-radioButton\n              [value]=\"score.value\"\n              [inputId]=\"score.value + '-' + localData?.examCaseId\"\n              formControlName=\"score\"\n              (onClick)=\"handleScoreSelect(score.value)\"\n            ></p-radioButton>\n            <label\n              [for]=\"score.value + '-' + localData?.examCaseId\"\n              class=\"ml-2\"\n              >{{ score.label }}</label\n            >\n          </div>\n\n          <div class=\"flex align-items-center gap-2\">\n            <p-checkbox\n              formControlName=\"criticalFail\"\n              value=\"true\"\n              [inputId]=\"'critical-fail-' + localData?.examCaseId\"\n              [binary]=\"true\"\n            ></p-checkbox>\n            <label\n              [for]=\"'critical-fail-' + localData?.examCaseId\"\n              [class]=\"disabledCriticalFail ? 'disabled' : ''\"\n              >Mark only if critical fail</label\n            >\n          </div>\n        </div>\n      </div>\n      <div class=\"col-12 md:col-9\">\n        <label for=\"textarea\" class=\"mb-2\">\n          {{ localData?.remarksTitle }}\n        </label>\n        <textarea\n          pKeyFilter=\"int\"\n          rows=\"5\"\n          cols=\"30\"\n          pInputTextarea\n          formControlName=\"remarks\"\n        ></textarea>\n      </div>\n    </div>\n  </form>\n</div>\n"
    },
    {
      "name": "ExaminationScoreModalComponent",
      "id": "component-ExaminationScoreModalComponent-baed9c1506e8b0cf739f6cae42b2c8d57c6a2a84563af80bf02839362b7cb9bafb583e64253977226d0ba24fa8418e99335ad1c73cf98b4fed371d7f5a518b31",
      "file": "src/app/examination-scores/examination-score-modal/examination-score-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-examination-score-modal",
      "styleUrls": ["./examination-score-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./examination-score-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "candidateData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "any",
          "decorators": []
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "any",
          "decorators": []
        },
        {
          "name": "selectedStatusOption",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "candidateCaseScores",
          "defaultValue": "{} as any",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "disableSubmitExamScore",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "examLength",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "examStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "localCandidateData",
          "defaultValue": "{} as any",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "scoredExams",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "Status",
          "defaultValue": "Status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 137,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveScores",
          "args": [
            {
              "name": "closeDialog",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132],
          "jsdoctags": [
            {
              "name": "closeDialog",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "submitScores",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "ExaminationScoreCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { ExaminationScoreCardComponent } from 'src/app/shared/components/examination-score-card/examination-score-card.component';\nimport { BehaviorSubject, isObservable } from 'rxjs';\nimport { Store } from '@ngxs/store';\nimport {\n  CreateCaseScore,\n  CreateExamScore,\n  UpdateCaseScore,\n} from 'src/app/state';\nimport { ICaseScoreModel } from 'src/app/api';\nimport { Status } from './status.enum';\nimport { IExamScoreModel } from 'src/app/api/models/ce/exam-score.model';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-examination-score-modal',\n  standalone: true,\n  imports: [CommonModule, ButtonModule, ExaminationScoreCardComponent],\n  templateUrl: './examination-score-modal.component.html',\n  styleUrls: ['./examination-score-modal.component.scss'],\n})\nexport class ExaminationScoreModalComponent implements OnInit {\n  @Input() candidateData: any;\n  @Input() selectedStatusOption: any;\n  @Input() examScheduleId!: any;\n  @Output() closeDialog = new EventEmitter();\n\n  candidateCaseScores = {} as any;\n  localCandidateData = {} as any;\n\n  Status = Status;\n  examStatus!: string;\n\n  examLength!: number;\n\n  disableSubmitExamScore = true;\n\n  scoredExams = 0;\n\n  constructor(private _store: Store) {}\n\n  ngOnInit(): void {\n    this.localCandidateData = {};\n    if (isObservable(this.candidateData)) {\n      this.candidateData.pipe(untilDestroyed(this)).subscribe((data: any) => {\n        this.localCandidateData = data;\n        this.examLength = data?.cases?.length;\n      });\n    } else {\n      this.localCandidateData = this.candidateData;\n    }\n\n    this.selectedStatusOption.subscribe((status: string) => {\n      this.examStatus = status;\n    });\n  }\n\n  handleChange(event: any) {\n    this.candidateCaseScores[event.case.examCaseId] = { ...event.case };\n\n    const scores: number[] = [];\n\n    Object.entries(this.candidateCaseScores).forEach(([key, value]) => {\n      const data = value as ICaseScoreModel;\n      if (data?.score && data.score > 0) {\n        scores.push(data?.score);\n      }\n    });\n\n    if (scores.length === this.examLength) {\n      this.disableSubmitExamScore = false;\n    } else {\n      this.disableSubmitExamScore = true;\n    }\n  }\n\n  async submitScores() {\n    await this.saveScores();\n    const model = {\n      examScheduleId: this.examScheduleId,\n    } as IExamScoreModel;\n\n    this._store\n      .dispatch(new CreateExamScore(model, false))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.resetData();\n        this.closeDialog.emit(true);\n      });\n  }\n\n  async saveScores(closeDialog = false) {\n    const promises: Promise<any>[] = [];\n\n    Object.entries(this.candidateCaseScores).forEach(([key, value]) => {\n      const data = value as ICaseScoreModel;\n      const model = {\n        examCaseId: data?.examCaseId,\n        examScoringId: data?.examScoringId,\n        examinerUserId: data?.examinerUserId,\n        examineeUserId: data?.examineeUserId,\n        score: data?.score ?? 0,\n        criticalFail: data?.criticalFail,\n        remarks: data?.remarks,\n      } as ICaseScoreModel;\n\n      if (model?.examScoringId) {\n        promises.push(\n          this._store.dispatch(new UpdateCaseScore(model)).toPromise()\n        );\n\n        this.resetData();\n        this.closeDialog.emit();\n      } else if ((model?.score && model.score > 0) || model?.remarks) {\n        promises.push(\n          this._store.dispatch(new CreateCaseScore(model)).toPromise()\n        );\n      }\n    });\n\n    await Promise.all(promises);\n\n    if (closeDialog) {\n      this.resetData();\n      this.closeDialog.emit();\n    }\n  }\n\n  cancel() {\n    this.resetData();\n    this.closeDialog.emit();\n  }\n\n  resetData() {\n    this.disableSubmitExamScore = true;\n    this.candidateCaseScores = {};\n    this.localCandidateData = {};\n    this.candidateCaseScores = {};\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".view-header {\n  font-size: 1.25rem;\n}\n",
          "styleUrl": "./examination-score-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 41,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex gap-5 view-header col-12\">\n  <div>\n    <strong>Candidate Name:</strong> {{ localCandidateData?.candidateName }}\n  </div>\n  <div>\n    <strong>Day/Time:</strong>\n    {{ localCandidateData?.startTime | date : 'short' }} -\n    {{ localCandidateData?.endTime | date : 'shortTime' }}\n  </div>\n  <div *ngIf=\"localCandidateData?.score\">\n    <strong>Score:</strong> {{ localCandidateData.score }}\n  </div>\n</div>\n\n<div class=\"flex flex-column\">\n  <abs-examination-score-card\n    *ngFor=\"let case of localCandidateData?.cases; let i = index\"\n    [case]=\"case\"\n    [locked]=\"case.isLocked\"\n    (handleChange)=\"handleChange($event)\"\n  ></abs-examination-score-card>\n</div>\n\n<div *ngIf=\"examStatus === Status.incomplete; else completeExam\">\n  <div\n    class=\"flex justify-content-between mt-4\"\n    slot=\"footer\"\n    *ngIf=\"!localCandidateData.allLocked\"\n  >\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"cancel()\"\n      >Cancel</p-button\n    >\n\n    <div>\n      <p-button\n        styleClass=\"p-button-link p-button-primary\"\n        (click)=\"saveScores(true)\"\n        >Save & Submit Later</p-button\n      >\n      <p-button\n        (onClick)=\"submitScores()\"\n        [style]=\"{ width: '337px' }\"\n        variant=\"primary\"\n        [disabled]=\"disableSubmitExamScore\"\n        >Submit Exam\n      </p-button>\n    </div>\n  </div>\n</div>\n\n<ng-template #completeExam>\n  <div\n    class=\"flex justify-content-end mt-4\"\n    slot=\"footer\"\n    *ngIf=\"!localCandidateData.allLocked\"\n  >\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"cancel()\"\n      >Cancel</p-button\n    >\n    <p-button\n      (onClick)=\"saveScores()\"\n      [style]=\"{ width: '337px' }\"\n      variant=\"primary\"\n      >Save\n    </p-button>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ExaminationScoresComponent",
      "id": "component-ExaminationScoresComponent-6d57d84cfd940af252532b5476e8443df578621d3368e1d0664b7d582bf9d0213e935217aa167c67b3a85a7d92c15cbf5bbdc97664164fd4c924018e36930d75",
      "file": "src/app/examination-scores/examination-scores.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-examination-scores",
      "styleUrls": ["./examination-scores.component.scss"],
      "styles": [],
      "templateUrl": ["./examination-scores.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "candidateData$",
          "defaultValue": "new BehaviorSubject({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "currentYear",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "dayOptions",
          "defaultValue": "[] as any[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "examHeaderId",
          "defaultValue": "491",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "examinationScoresCols",
          "defaultValue": "EXAMINATION_SCORES_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "examinationScoresData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "examScores$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRosterReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examScoresList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examTitle$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamTitleReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examTitle"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "filteredExaminationScoresData$",
          "defaultValue": "new BehaviorSubject(\n    []\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 78
        },
        {
          "name": "filterForm",
          "defaultValue": "new FormGroup({\n    day: new FormControl(''),\n    status: new FormControl(''),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "gridOptions",
          "defaultValue": "{\n    showFilter: true,\n    filterOn: 'displayName',\n    placeholder: 'Search Candidates',\n    filterType: AbsFilterType.Text,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGridOptions",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "lockedCases",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "selectedDayOption",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "selectedExamScheduleId$",
          "defaultValue": "new BehaviorSubject(0)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<number>",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "selectedExamScores$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICaseScoreReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.selectedExamScores"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedStatusOption$",
          "defaultValue": "new BehaviorSubject('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<string>",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "showViewModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "statusOptions",
          "defaultValue": "[] as any[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        }
      ],
      "methodsClass": [
        {
          "name": "closeDialog",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "examSelected",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getExaminationScoresDate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 177,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleView",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 197,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFilterOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "ExaminationScoreModalComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { EXAMINATION_SCORES_COLS } from './examination-scores-cols';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport {\n  FormGroup,\n  FormControl,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ExaminationScoreModalComponent } from './examination-score-modal/examination-score-modal.component';\nimport {\n  ExamScoringSelectors,\n  GetExamScoresList,\n  GetExamTitle,\n  GetSelectedExamScores,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { ICaseScoreReadOnlyModel, IRosterReadOnlyModel } from '../api';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-examination-scores',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    GridComponent,\n    DropdownModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ModalComponent,\n    ExaminationScoreModalComponent,\n  ],\n  templateUrl: './examination-scores.component.html',\n  styleUrls: ['./examination-scores.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ExaminationScoresComponent implements OnInit {\n  examHeaderId = 491; // TODO - remove hard coded value\n\n  @Select(ExamScoringSelectors.slices.examScoresList)\n  examScores$: Observable<IRosterReadOnlyModel[]> | undefined;\n\n  @Select(ExamScoringSelectors.slices.selectedExamScores)\n  selectedExamScores$: Observable<ICaseScoreReadOnlyModel[]> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  currentYear = new Date().getFullYear();\n\n  examinationScoresCols = EXAMINATION_SCORES_COLS;\n\n  dayOptions = [] as any[];\n  statusOptions = [] as any[];\n  selectedDayOption!: string;\n  selectedStatusOption$: BehaviorSubject<string> = new BehaviorSubject('');\n  selectedExamScheduleId$: BehaviorSubject<number> = new BehaviorSubject(0);\n\n  gridOptions: IGridOptions = {\n    showFilter: true,\n    filterOn: 'displayName',\n    placeholder: 'Search Candidates',\n    filterType: AbsFilterType.Text,\n  };\n\n  examinationScoresData!: any[];\n  filteredExaminationScoresData$: BehaviorSubject<any> = new BehaviorSubject(\n    []\n  );\n\n  filterForm = new FormGroup({\n    day: new FormControl(''),\n    status: new FormControl(''),\n  });\n\n  showViewModal = false;\n  candidateData$: BehaviorSubject<any> = new BehaviorSubject({});\n\n  lockedCases = false;\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n  }\n\n  ngOnInit(): void {\n    this.getExaminationScoresDate();\n    this.examSelected();\n  }\n\n  examSelected() {\n    this.selectedExamScores$\n      ?.pipe(untilDestroyed(this))\n      .subscribe((selectedExamScores) => {\n        if (selectedExamScores?.length > 0) {\n          let startTime = new Date(selectedExamScores[0].examDate);\n          startTime = new Date(\n            startTime.toLocaleDateString() +\n              ', ' +\n              selectedExamScores[0].startTime\n          );\n          let endTime = new Date(selectedExamScores[0].examDate);\n          endTime = new Date(\n            endTime.toLocaleDateString() + ', ' + selectedExamScores[0].endTime\n          );\n\n          this.lockedCases = selectedExamScores.every(\n            (score) => score.isLocked === true\n          );\n\n          const newCandidateData = {\n            candidateName:\n              selectedExamScores[0].examineeFirstName +\n              ' ' +\n              selectedExamScores[0].examineeLastName,\n            startTime: startTime,\n            endTime: endTime,\n            allLocked: this.lockedCases,\n            cases: selectedExamScores,\n          };\n          this.candidateData$.next(newCandidateData);\n        }\n      });\n  }\n\n  getExaminationScoresDate() {\n    this._store.dispatch(new GetExamScoresList(this.examHeaderId));\n\n    this.examScores$\n      ?.pipe(\n        untilDestroyed(this),\n        map((scoreList) => {\n          if (scoreList?.length > 0) {\n            return scoreList.map((score) => {\n              return {\n                ...score,\n                day: 'Day ' + score.dayNumber,\n                session: 'Session ' + score.sessionNumber,\n                status: score.isSubmitted ? 'Complete' : 'Incomplete',\n                //cases: score.cases,\n              };\n            });\n          }\n          return [];\n        })\n      )\n      .subscribe((scoreList) => {\n        this.examinationScoresData = scoreList;\n        this.filteredExaminationScoresData$.next(this.examinationScoresData);\n        this.setFilterOptions();\n        this.handleFilter();\n      });\n  }\n\n  setFilterOptions() {\n    this.examinationScoresData.forEach((data) => {\n      if (!this.dayOptions.includes(data.day)) {\n        this.dayOptions.push(data.day);\n      }\n\n      if (!this.statusOptions.includes(data.status)) {\n        this.statusOptions.push(data.status);\n      }\n    });\n  }\n\n  handleFilter() {\n    this.filterForm.valueChanges.subscribe((value) => {\n      let filteredData = this.examinationScoresData;\n\n      filteredData.filter(() => {\n        if (value.day) {\n          filteredData = filteredData.filter((data) => value.day === data.day);\n        }\n\n        if (value.status) {\n          filteredData = filteredData.filter(\n            (data) => value.status === data.status\n          );\n        }\n      });\n\n      this.filteredExaminationScoresData$.next(filteredData);\n    });\n  }\n\n  handleView(event: any) {\n    const examScheduleId = event.data.examScheduleId;\n    this.selectedStatusOption$.next(event.data.status);\n    this.selectedExamScheduleId$.next(examScheduleId);\n    this._store.dispatch(new GetSelectedExamScores(examScheduleId));\n    this.showViewModal = true;\n  }\n\n  closeDialog($event?: any) {\n    if ($event) {\n      this._store.dispatch(new GetExamScoresList(this.examHeaderId));\n    }\n    this.showViewModal = false;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./examination-scores.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 90,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<h1>\n  {{ (examTitle$ | async)?.examName || 'EXAMSCORING.DEFAULT_EXAM' | translate }}\n</h1>\n<sl-card class=\"w-full\">\n  <div slot=\"header\">{{ 'EXAMSCORING.EXAMSCORES.TITLE' | translate }}</div>\n  <div class=\"mt-2 mb-5\" [style.fontWeight]=\"'bold'\">\n    <i class=\"fa-solid fa-triangle-exclamation text-warning\"></i>\n    {{ 'EXAMSCORING.EXAMSCORES.SUBTITLE' | translate }}\n  </div>\n\n  <form [formGroup]=\"filterForm\" class=\"dropdown-container flex gap-2 absolute\">\n    <p-dropdown\n      placeholder=\"Filter by Day\"\n      [showClear]=\"true\"\n      [style]=\"{ minWidth: '250px' }\"\n      [options]=\"dayOptions\"\n      formControlName=\"day\"\n    >\n    </p-dropdown>\n\n    <p-dropdown\n      placeholder=\"Filter by Status\"\n      [showClear]=\"true\"\n      [style]=\"{ minWidth: '250px' }\"\n      [options]=\"statusOptions\"\n      formControlName=\"status\"\n    >\n    </p-dropdown>\n  </form>\n\n  <abs-grid\n    [columns]=\"examinationScoresCols\"\n    [gridOptions]=\"gridOptions\"\n    [showFilter]=\"gridOptions.showFilter\"\n    [filterOn]=\"gridOptions.filterOn\"\n    [data]=\"filteredExaminationScoresData$\"\n    (action)=\"handleView($event)\"\n    [pagination]=\"true\"\n    [itemsPerPage]=\"25\"\n  ></abs-grid>\n</sl-card>\n\n<abs-modal\n  [open]=\"showViewModal\"\n  [preventOverlayClose]=\"!lockedCases\"\n  [hideClose]=\"!lockedCases\"\n  (closeDialog)=\"closeDialog($event)\"\n  title=\"Daily Exam Scores\"\n>\n  <abs-examination-score-modal\n    [candidateData]=\"candidateData$\"\n    [examScheduleId]=\"selectedExamScheduleId$ | async\"\n    [selectedStatusOption]=\"selectedStatusOption$\"\n    (closeDialog)=\"closeDialog($event)\"\n  ></abs-examination-score-modal>\n</abs-modal>\n"
    },
    {
      "name": "ExamProcessComponent",
      "id": "component-ExamProcessComponent-5b1b5e7e3ccb4b339e675b2301b6695f4873e5ac61e6e760e3102a2d2ff21c138dfdc093108577f06f32759f65398c01cc04b32a261113a49a2205c24856f102",
      "file": "src/app/exam-process/exam-process.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-exam-process",
      "styleUrls": ["./exam-process.component.scss"],
      "styles": [],
      "templateUrl": ["./exam-process.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "availableApplications",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "directoryColumns",
          "defaultValue": "DIRECTORY_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "directoryData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "examDirectory$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamOverviewReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examDirectory"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "getApplications",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "GridComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { DIRECTORY_COLS } from './directory-cols';\nimport { ExamProcessSelectors, GetExamDirectory } from '../state/exam-process';\nimport { IExamOverviewReadOnlyModel } from '../api/models/examinations/exam-overview-read-only.model';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\n\n@Component({\n  selector: 'abs-exam-process',\n  templateUrl: './exam-process.component.html',\n  styleUrls: ['./exam-process.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [CommonModule, RouterLink, GridComponent],\n})\nexport class ExamProcessComponent implements OnInit {\n  @Select(ExamProcessSelectors.slices.examDirectory) examDirectory$:\n    | Observable<IExamOverviewReadOnlyModel[]>\n    | undefined;\n\n  availableApplications: any[] = [];\n\n  directoryColumns = DIRECTORY_COLS;\n  directoryData!: any[];\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetExamDirectory());\n  }\n\n  ngOnInit(): void {\n    this.getApplications();\n  }\n\n  getApplications() {\n    this.availableApplications = [\n      {\n        name: 'Pediatric Surgery Qualifying Exam',\n        progress: 'not started',\n        continuousCertNeeded: true,\n        status: 'not-started',\n        deadline: new Date('5/10/2022'),\n      },\n      {\n        name: 'General Surgery Qualifying Exam',\n        progress: '0/10 completed',\n        continuousCertNeeded: false,\n        status: 'in-progress',\n        deadline: new Date('5/10/2022'),\n      },\n    ];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "hr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\na {\n  font-weight: 700;\n  color: var(--global-success);\n  cursor: pointer;\n}\na:hover {\n  color: var(--global-success-darken-20);\n}\nul {\n  li::marker {\n    color: var(--global-warning);\n  }\n}\n\nsl-card::part(base) {\n  height: 100%;\n}\n\n.application-container {\n  background-color: var(--global-table-background);\n  padding: 1rem 1.5rem;\n  &.available-applications {\n    background-color: var(--global-card-highlight);\n  }\n}\n\n.application-progress {\n  font-size: 0.875rem;\n}\n.application-progress,\n.application-status {\n  text-transform: capitalize;\n  &.not-started {\n    color: var(--global-danger);\n  }\n  &.in-progress {\n    color: var(--global-warning);\n  }\n  &.completed {\n    color: var(--global-success);\n  }\n}\n\n.btn-link {\n  margin-top: 1rem;\n  text-decoration: none;\n}\n",
          "styleUrl": "./exam-process.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<header>\n  <h1>Apply & Register</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <h5 class=\"mt-0 mb-2\" panel-header>Applications for 2021-2022</h5>\n        <hr />\n        <p>\n          Applications for ABS examinations are restricted to eligible\n          candidates only. Below is a list of exams for which the ABS currently\n          recognizes you as eligible to apply. Click the link to apply where\n          appropriate.\n        </p>\n        <div class=\"mt-2 grid\">\n          <div\n            [ngClass]=\"{\n              'col-12': true,\n              'application-container': true,\n              'available-applications': availableApplications.length > 0\n            }\"\n          >\n            <p class=\"text-lg font-bold m-0\">\n              {{\n                availableApplications.length > 0\n                  ? 'Active Examinations & Applications'\n                  : 'No applications are currently available, check back later.'\n              }}\n            </p>\n            <div class=\"mt-2 grid\" *ngIf=\"availableApplications.length > 0\">\n              <sl-card\n                class=\"col-12 md:col-6 application-card\"\n                *ngFor=\"let application of availableApplications\"\n              >\n                <p\n                  class=\"font-bold mt-0 flex justify-content-between align-items-center\"\n                >\n                  {{ application.name }}\n                  <span\n                    [class]=\"'application-progress ' + application.status\"\n                    >{{ application.progress }}</span\n                  >\n                </p>\n                <div class=\"mt-2 mb-3\">\n                  <p class=\"font-bold m-0\">\n                    Application Status:\n                    <span [class]=\"'application-status ' + application.status\">\n                      {{\n                        application.continuousCertNeeded\n                          ? 'Continuous Certification needed'\n                          : application.status.replace('-', ' ')\n                      }}\n                    </span>\n                  </p>\n                  <p class=\"font-bold m-0\">\n                    2022 Deadline:\n                    <span class=\"font-normal\">{{\n                      application.deadline | date : 'longDate'\n                    }}</span>\n                  </p>\n                </div>\n                <a\n                  class=\"btn-link\"\n                  [routerLink]=\"'/continuous-certification'\"\n                  *ngIf=\"application.continuousCertNeeded\"\n                >\n                  Go to your Continuous Certification\n                  <i class=\"fa-solid fa-arrow-right ml-2\"></i>\n                </a>\n              </sl-card>\n            </div>\n          </div>\n        </div>\n        <hr class=\"mt-5\" />\n        <div class=\"col-12\">\n          <h5>Upcoming Exams</h5>\n          <abs-grid\n            [columns]=\"directoryColumns\"\n            [data]=\"examDirectory$\"\n          ></abs-grid>\n        </div>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading exam applications...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ExamRegistrationComponent",
      "id": "component-ExamRegistrationComponent-0772451d6f4d2629623c0b60a27aa61f0b0255a73300f6705788442b687a19627d5c519444b85891156f3d9f5f3eeb391b35b06dff85bf74842871fb9dc670a4",
      "file": "src/app/exam-registration/exam-registration.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-exam-registration",
      "styleUrls": ["./exam-registration.component.scss"],
      "styles": [],
      "templateUrl": ["./exam-registration.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "payFeeData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "paymentGridData",
          "defaultValue": "[\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "siteSelectionFormData",
          "defaultValue": "[\n    {\n      label: '',\n      value: '',\n      required: false,\n      name: 'siteSelection',\n      type: 'radio',\n      size: 'col-12',\n      options: [\n        {\n          label: 'November 9 - 11, 2022',\n          value: '11/09/2022-11/11/2022',\n        },\n        {\n          label: 'November 16 - 18, 2022',\n          value: '11/16/2022-11/18/2022',\n        },\n        {\n          label: 'November 29 - 30, 2022',\n          value: '11/29/2022-11/30/2022',\n        },\n        {\n          label: 'December 2 - 4, 2022',\n          value: '12/02/2022-12/04/2022',\n        },\n        {\n          label: 'December 15, 2022',\n          value: '12/15/2022',\n        },\n      ],\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 28
        }
      ],
      "methodsClass": [
        {
          "name": "getPayFeeData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleDigitalSignatureChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleDownloadForm",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleSiteSelectionSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSiteSelectionChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CollapsePanelComponent",
          "type": "component"
        },
        {
          "name": "PayFeeComponent",
          "type": "component"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\n\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-exam-registration',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    CollapsePanelComponent,\n    PayFeeComponent,\n    RadioButtonModule,\n    CheckboxModule,\n    ButtonModule,\n  ],\n  templateUrl: './exam-registration.component.html',\n  styleUrls: ['./exam-registration.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ExamRegistrationComponent implements OnInit {\n  siteSelectionFormData = [\n    {\n      label: '',\n      value: '',\n      required: false,\n      name: 'siteSelection',\n      type: 'radio',\n      size: 'col-12',\n      options: [\n        {\n          label: 'November 9 - 11, 2022',\n          value: '11/09/2022-11/11/2022',\n        },\n        {\n          label: 'November 16 - 18, 2022',\n          value: '11/16/2022-11/18/2022',\n        },\n        {\n          label: 'November 29 - 30, 2022',\n          value: '11/29/2022-11/30/2022',\n        },\n        {\n          label: 'December 2 - 4, 2022',\n          value: '12/02/2022-12/04/2022',\n        },\n        {\n          label: 'December 15, 2022',\n          value: '12/15/2022',\n        },\n      ],\n    },\n  ];\n  payFeeData: any;\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.getPayFeeData();\n  }\n\n  onSiteSelectionChange(event: any) {\n    this.siteSelectionFormData\n      .filter((item) => item.name === event.target.name)\n      .map((item) => {\n        item.value = event.target.value;\n      });\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  handleSiteSelectionSubmit() {\n    console.log('unhandled submit', this.siteSelectionFormData);\n  }\n  handleDigitalSignatureChange($event: any) {\n    console.log('unhandled signature change', $event);\n  }\n\n  handleDownloadForm() {\n    console.log('unhandled Download Form');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-radio-group {\n  margin-top: 15px;\n}\n\nsl-radio::part(label) {\n  font-weight: 700;\n}\n\nsl-radio {\n  font-weight: 700;\n  margin-bottom: 15px;\n}\n\n.align-right {\n  text-align: right;\n}\n\na {\n  color: var(--global-success);\n  text-decoration: none;\n  border-bottom: 1px solid transparent;\n  transition: 250ms ease-in-out;\n  &:hover {\n    border-color: var(--global-success);\n  }\n}\n\n.panel-header {\n  width: 100%;\n}\n.status {\n  margin-right: 1rem;\n  line-height: 2rem;\n  &.completed {\n    color: var(--global-success);\n  }\n  &.alert {\n    color: var(--global-danger);\n  }\n}\n",
          "styleUrl": "./exam-registration.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n  <div>\n    <h1>General Surgery Exam Registration</h1>\n    <p>\n      This year, the exam will be completely virtual via Zoom. The registration\n      deadline is September 1st. Dates are filed on a first-come, first-served\n      basis.\n    </p>\n    <p>\n      <strong>\n        Failure to select a CE date for the academic year is considered a lost\n        exam opportunity.</strong\n      >\n      A final assignment means you have a guaranteed spot, but it is irrevocable\n      and unchangeable one given. Once you have received a final assignment,\n      exam fees will not be refunded if you subsequently change your mind or\n      fail to show up.\n    </p>\n    <p>\n      Please allow 5-10 business days for your registration to be processed.\n      Once processed, your exam date will be posted on your Exam Records and\n      Results page under Active Examinations.\n    </p>\n  </div>\n</div>\n\n<section>\n  <div class=\"grid\">\n    <!-- Site Selection -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"1\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Site Selection</h5>\n          <div class=\"status completed\">\n            Nov 16 - Nov 18, 2022, General Surgery Certifying Exam (Virtual)\n            Assigned\n          </div>\n        </div>\n        <div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n          <form action=\"\">\n            <div class=\"form-description\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat. All\n              fields are required.\n            </div>\n            <div class=\"grid\">\n              <div\n                *ngFor=\"let formField of siteSelectionFormData\"\n                class=\"col-12 md:{{ formField.size }}\"\n              >\n                <label\n                  class=\"block\"\n                  [for]=\"formField.name\"\n                  *ngIf=\"formField.label && formField.label.length > 0\"\n                  >{{ formField.label }}</label\n                >\n                <div class=\"flex flex-column gap-3\">\n                  <p-radioButton\n                    *ngFor=\"let option of formField.options\"\n                    [name]=\"formField.name\"\n                    [value]=\"option.value\"\n                    [label]=\"option.label\"\n                    [(ngModel)]=\"formField.value\"\n                  ></p-radioButton>\n                </div>\n              </div>\n              <div class=\"col-12 align-right mt-3\">\n                <p-button styleClass=\"p-button-link p-button-primary\"\n                  >Cancel</p-button\n                >\n                <p-button\n                  [style]=\"{ width: '337px' }\"\n                  (click)=\"handleSiteSelectionSubmit()\"\n                  >Save</p-button\n                >\n              </div>\n            </div>\n          </form>\n        </div>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Registration Form -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Site Selection</h5>\n          <div class=\"status completed\">Received 07/28/2022</div>\n        </div>\n\n        <div class=\"form-description mb-5\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat. All fields\n          are required.\n        </div>\n        <p-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Form</span>\n        </p-button>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Registration Fee -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"3\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Exam Registration Fee</h5>\n          <div class=\"status alert\">Amount Owed: $1500.00</div>\n        </div>\n\n        <abs-pay-fee\n          [payFeeData]=\"payFeeData\"\n          [paymentGridData]=\"paymentGridData\"\n        >\n          <strong\n            >To avoid additional fees, all items must be received by deadline.\n            See also <a href=\"#\">Dates & Fees</a>.</strong\n          >\n        </abs-pay-fee>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Digital Signature-->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"4\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Digital Signature</h5>\n          <div class=\"status completed\">Completed</div>\n        </div>\n\n        <ul>\n          <li>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\n            sodales condimentum orci, id malesuada ante faucibus eu. Sed ut\n            perspiciatis unde omnis iste natus error sit voluptatem accusantium\n            doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo\n            inventore veritatis et quasi architecto beatae vitae dicta sunt\n            explicabo.\n          </li>\n          <li>\n            Maecenas eros arcu, mattis ut urna id, convallis eleifend purus.\n            Phasellus sodales condimentum orci, id malesuada ante faucibus eu.\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas\n            eros arcu, mattis ut urna id, convallis eleifend purus.\n          </li>\n          <li>\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut\n            fugit, sed quia consequuntur magni dolores eos qui ratione\n            voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem\n            ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non\n            numquam eius modi tempora incidunt ut labore et dolore magnam\n            aliquam quaerat voluptatem.\n          </li>\n          <li>\n            Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?\n          </li>\n          <li>\n            Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse\n            quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat\n            quo voluptas nulla pariatur?\n          </li>\n        </ul>\n        <div class=\"col-12 flex align-items-center gap-2 mb-3\">\n          <p-checkbox\n            inputId=\"acknowlegement\"\n            name=\"acknowlegement\"\n            (change)=\"handleDigitalSignatureChange($event)\"\n            [binary]=\"true\"\n          ></p-checkbox>\n          <label for=\"userConfirmed\"\n            >I agree to the following statements above to the fullest of my\n            knowledge</label\n          >\n        </div>\n\n        <p-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Form</span>\n        </p-button>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Admission Card / Authorization Letter Status -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"6\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">\n            Exam Admission Card / Authorization Letter Status\n          </h5>\n          <div class=\"status completed\">Posted 10/20/2022</div>\n        </div>\n\n        <div class=\"form-description mb-5\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat. All fields\n          are required.\n        </div>\n        <p-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Exam Admission Card</span>\n        </p-button>\n      </abs-collapse-panel>\n    </sl-card>\n  </div>\n</section>\n"
    },
    {
      "name": "ExamTimerComponent",
      "id": "component-ExamTimerComponent-7f93caa0a2a9018f3f42e561b3f6e42d8187c43686a40c4c31bf1bb9636b0484f111c98b487659077f11c53487de442468264af6725516cc406183cb8118604c",
      "file": "src/app/shared/components/exam-timer-component/exam-timer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-exam-timer",
      "styleUrls": ["./exam-timer.component.scss"],
      "styles": [],
      "templateUrl": ["./exam-timer.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "currentIncrement",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nwhat is the current increment\n",
          "description": "<p>what is the current increment</p>\n",
          "line": 44,
          "type": "number",
          "decorators": []
        },
        {
          "name": "incrementDuration",
          "defaultValue": "7",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nhow many minutes are in an increment\n",
          "description": "<p>how many minutes are in an increment</p>\n",
          "line": 39,
          "type": "number",
          "decorators": []
        },
        {
          "name": "incrementLabel",
          "defaultValue": "'Increment'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nlabel for the increment timer\n",
          "description": "<p>label for the increment timer</p>\n",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "name": "timerLabel",
          "defaultValue": "'Total'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nlabel for the total timer\n",
          "description": "<p>label for the total timer</p>\n",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "totalIncrements",
          "defaultValue": "4",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nhow many increments go into the total time\n",
          "description": "<p>how many increments go into the total time</p>\n",
          "line": 34,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "incrementEnd",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nevent emitter for when the increment timer ends\n",
          "description": "<p>event emitter for when the increment timer ends</p>\n",
          "line": 49,
          "type": "EventEmitter<any>"
        },
        {
          "name": "timerEnd",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nevent emitter for when the total timer ends\n",
          "description": "<p>event emitter for when the total timer ends</p>\n",
          "line": 54,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "incrementNegative",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "incrementTimer",
          "defaultValue": "{\n    minutes: 0,\n    seconds: 0,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "incrementTimerValue",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "localCurrentIncrement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "localIncrementDuration",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "localTotalIncrements",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "totalTimer",
          "defaultValue": "{\n    minutes: 0,\n    seconds: 0,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "totalTimerInterval",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [121]
        },
        {
          "name": "totalTimerValue",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 62
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "startTimers",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "stopTimers",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 183,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-exam-timer',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './exam-timer.component.html',\n  styleUrls: ['./exam-timer.component.scss'],\n})\nexport class ExamTimerComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * label for the total timer\n   */\n  @Input() timerLabel = 'Total';\n\n  /**\n   * label for the increment timer\n   */\n  @Input() incrementLabel = 'Increment';\n\n  /**\n   * how many increments go into the total time\n   */\n  @Input() totalIncrements = 4;\n\n  /**\n   * how many minutes are in an increment\n   */\n  @Input() incrementDuration = 7;\n\n  /**\n   * what is the current increment\n   */\n  @Input() currentIncrement = 1;\n\n  /**\n   * event emitter for when the increment timer ends\n   */\n  @Output() incrementEnd: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * event emitter for when the total timer ends\n   */\n  @Output() timerEnd: EventEmitter<any> = new EventEmitter();\n\n  localIncrementDuration!: number;\n  localTotalIncrements!: number;\n  localCurrentIncrement!: number;\n\n  incrementNegative = false;\n\n  totalTimerValue = 0;\n  totalTimer = {\n    minutes: 0,\n    seconds: 0,\n  };\n  incrementTimerValue = 0;\n  incrementTimer = {\n    minutes: 0,\n    seconds: 0,\n  };\n\n  private totalTimerInterval: any;\n\n  ngOnInit(): void {\n    this.localCurrentIncrement = this.currentIncrement;\n    this.localIncrementDuration = this.incrementDuration;\n    this.localTotalIncrements = this.totalIncrements;\n    this.startTimers();\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['currentIncrement']) {\n      if (\n        this.localTotalIncrements >= changes['currentIncrement'].currentValue\n      ) {\n        this.localCurrentIncrement = changes['currentIncrement'].currentValue;\n      } else {\n        this.localCurrentIncrement = this.localTotalIncrements;\n      }\n\n      this.incrementTimerValue = this.localIncrementDuration * 60;\n      if (\n        this.incrementTimerValue >= this.totalTimerValue ||\n        this.localCurrentIncrement === this.localTotalIncrements\n      ) {\n        this.incrementTimerValue = this.totalTimerValue;\n      }\n      this.incrementNegative = false;\n    }\n    if (changes['incrementDuration']) {\n      this.localIncrementDuration = changes['incrementDuration'].currentValue;\n      this.startTimers();\n    }\n    if (changes['totalIncrements']) {\n      this.localTotalIncrements = changes['totalIncrements'].currentValue;\n      this.startTimers();\n    }\n  }\n  ngOnDestroy(): void {\n    this.stopTimers();\n  }\n\n  startTimers() {\n    if (this.totalTimerInterval) {\n      clearInterval(this.totalTimerInterval);\n    }\n    this.totalTimerValue =\n      this.localIncrementDuration *\n      60 *\n      (this.localTotalIncrements - this.localCurrentIncrement + 1);\n    this.totalTimer.minutes = Math.floor(this.totalTimerValue / 60);\n    this.totalTimer.seconds = this.totalTimerValue % 60;\n\n    this.incrementTimerValue = this.localIncrementDuration * 60;\n    if (this.incrementTimerValue >= this.totalTimerValue) {\n      this.incrementTimerValue = this.totalTimerValue;\n    }\n    this.incrementTimer.minutes = Math.floor(this.incrementTimerValue / 60);\n    this.incrementTimer.seconds = this.incrementTimerValue % 60;\n\n    this.totalTimerInterval = setInterval(() => {\n      //total timer\n      if (this.totalTimerValue > 0) {\n        this.totalTimerValue--;\n        this.totalTimer.minutes = Math.floor(this.totalTimerValue / 60);\n        this.totalTimer.seconds = this.totalTimerValue % 60;\n\n        //increment timer\n        if (this.incrementTimerValue > 0) {\n          this.incrementTimerValue--;\n          this.incrementTimer.minutes = Math.floor(\n            this.incrementTimerValue / 60\n          );\n          this.incrementTimer.seconds = this.incrementTimerValue % 60;\n        } else {\n          if (!this.incrementNegative) {\n            // only fire the increment end event once per increment\n            this.incrementEnd.emit();\n          }\n          if (this.localCurrentIncrement >= this.localTotalIncrements) {\n            this.stopTimers();\n          } else {\n            // allow the increment time to go negative if they take longer on an increment\n            this.incrementNegative = true;\n            this.incrementTimerValue--;\n            this.incrementTimer.minutes = Math.floor(\n              Math.abs(this.incrementTimerValue) / 60\n            );\n            this.incrementTimer.seconds =\n              Math.abs(this.incrementTimerValue) % 60;\n\n            // uncomment to have to increment timer start again automatically\n            // this.localCurrentIncrement++;\n            // this.incrementTimerValue = this.localIncrementDuration * 60 - 1;\n            // if (this.incrementTimerValue >= this.totalTimerValue) {\n            //   this.incrementTimerValue = this.totalTimerValue;\n            // }\n            // this.incrementTimer.minutes = Math.floor(\n            //   this.incrementTimerValue / 60\n            // );\n            // this.incrementTimer.seconds = this.incrementTimerValue % 60;\n          }\n        }\n      } else {\n        this.stopTimers();\n        this.incrementNegative = false;\n        this.incrementTimer.minutes = 0;\n        this.incrementTimer.seconds = 0;\n      }\n    }, 1000);\n  }\n\n  stopTimers() {\n    clearInterval(this.totalTimerInterval);\n    this.timerEnd.emit();\n    this.incrementEnd.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".timer-container {\n  min-width: 7rem;\n  //padding: 0.6rem;\n  font-size: 1.25rem;\n  background-color: var(--global-danger);\n  color: #fff;\n  position: fixed;\n  top: 150px;\n  right: 0;\n  border-radius: 0.5rem 0 0 0.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n}\n.total-timer-container {\n  padding: 0.85rem 1.25rem 0.5rem;\n  border-bottom: 1px solid #fff;\n  text-align: center;\n  background-color: var(--global-primary);\n  width: 100%;\n  border-top-left-radius: 0.5rem;\n}\n.increment-timer-container {\n  padding: 0.5rem 1.25rem 0.85rem;\n  text-align: center;\n  border-bottom-left-radius: 0.5rem;\n  .timer-value {\n    font-size: 1.875rem;\n  }\n}\n.timer-label {\n  font-size: 0.925rem;\n  text-transform: uppercase;\n  margin-bottom: 0.25rem;\n}\n",
          "styleUrl": "./exam-timer.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnDestroy", "OnChanges"],
      "templateData": "<div class=\"timer-container\">\n  <div class=\"total-timer-container\">\n    <div class=\"timer-label\">{{ timerLabel }}</div>\n    <div class=\"timer-value\">\n      {{ totalTimer.minutes }}:{{ totalTimer.seconds | number : '2.0' }}\n    </div>\n  </div>\n  <div class=\"increment-timer-container\">\n    <div class=\"timer-label\">\n      {{ incrementLabel }} {{ localCurrentIncrement }}\n    </div>\n    <div class=\"timer-value\">\n      <span *ngIf=\"incrementNegative\">-</span>{{ incrementTimer.minutes }}:{{\n        incrementTimer.seconds | number : '2.0'\n      }}\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "ExpandableComponent",
      "id": "component-ExpandableComponent-e7348fa8fba5ed0bce87cbd0b8ebcebfa46d2662df9fa8b9f0ea27a67d6024c373f2ad386aa7536964d205d148ccf62f82fcfc579286d6f0a7edf3303244cd4d",
      "file": "src/app/shared/components/expandable/expandable.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-expandable",
      "styleUrls": ["./expandable.component.scss"],
      "styles": [],
      "templateUrl": ["./expandable.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "caseId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "number",
          "decorators": []
        },
        {
          "name": "caseTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        },
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "completed",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "customTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "decimalToRoman",
          "args": [
            {
              "name": "decimal",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "decimal",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "AccordionModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccordionModule } from 'primeng/accordion';\n\n@Component({\n  selector: 'abs-expandable',\n  standalone: true,\n  imports: [CommonModule, AccordionModule],\n  templateUrl: './expandable.component.html',\n  styleUrls: ['./expandable.component.scss'],\n})\nexport class ExpandableComponent {\n  @Input() caseTitle!: string;\n  @Input() caseId!: number;\n  @Input() index!: number;\n  @Input() checked!: boolean;\n  @Input() customTitle!: string;\n  @Input() completed!: string;\n\n  decimalToRoman(decimal: number) {\n    const values = [\n      { symbol: 'M', value: 1000 },\n      { symbol: 'CM', value: 900 },\n      { symbol: 'D', value: 500 },\n      { symbol: 'CD', value: 400 },\n      { symbol: 'C', value: 100 },\n      { symbol: 'XC', value: 90 },\n      { symbol: 'L', value: 50 },\n      { symbol: 'XL', value: 40 },\n      { symbol: 'X', value: 10 },\n      { symbol: 'IX', value: 9 },\n      { symbol: 'V', value: 5 },\n      { symbol: 'IV', value: 4 },\n      { symbol: 'I', value: 1 },\n    ];\n    let result = '';\n    for (const { symbol, value } of values) {\n      while (decimal >= value) {\n        result += symbol;\n        decimal -= value;\n      }\n    }\n    return result;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "/*\n CSS for the main interaction\n*/\n.accordion > input[type='checkbox'] {\n  position: absolute;\n  left: -100vw;\n}\n\n.accordion .content {\n  overflow-y: hidden;\n  height: 0;\n  transition: height 0.3s ease;\n}\n\n.accordion > input[type='checkbox']:checked ~ .content {\n  height: auto;\n  overflow: visible;\n}\n\n.accordion > input[type='checkbox']:checked ~ .handle {\n  label {\n    background: var(--global-success);\n    color: white;\n  }\n}\n\n.accordion label {\n  display: block;\n}\n\n/*\n Styling\n*/\nbody {\n  font: 16px/1.5em 'Overpass', 'Open Sans', Helvetica, sans-serif;\n  color: #333;\n  font-weight: 300;\n}\n\n.accordion {\n  margin-bottom: 1em;\n}\n\n.accordion > input[type='checkbox']:checked ~ .content {\n  padding: 15px;\n  border-top: 0;\n}\n\n.accordion .handle {\n  margin: 0;\n  font-size: 1.125em;\n  line-height: 1.2em;\n}\n\n.accordion label {\n  color: var(--secondary-color);\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 15px;\n  background: #f4f4f4;\n  border-radius: 6px;\n}\n\n.accordion label:hover,\n.accordion label:focus {\n  background: var(--global-success);\n  color: white;\n}\n\n/*\n Demo purposes only\n*/\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\nbody {\n  padding: 40px;\n}\n\na {\n  color: #06c;\n}\n\np {\n  margin: 0 0 1em;\n}\n\nh1 {\n  margin: 0 0 1.5em;\n  font-weight: 600;\n  font-size: 1.5em;\n}\n\n.accordion {\n  max-width: 100%;\n}\n\n.accordion p:last-child {\n  margin-bottom: 0;\n}\n",
          "styleUrl": "./expandable.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<section class=\"accordion {{ completed ? 'completed' : '' }}\">\n  <input\n    type=\"checkbox\"\n    name=\"collapse\"\n    [id]=\"caseId\"\n    [checked]=\"checked\"\n    disabled\n  />\n  <h2 [id]=\"'expandableHeader' + index\" class=\"handle\">\n    <label [for]=\"caseId\">\n      <div *ngIf=\"!customTitle; else title\">\n        {{ decimalToRoman(index + 1) }}. {{ caseTitle }}\n      </div>\n      <ng-template #title>\n        {{ customTitle }}\n      </ng-template>\n    </label>\n  </h2>\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n</section>\n"
    },
    {
      "name": "FellowshipAddEditModalComponent",
      "id": "component-FellowshipAddEditModalComponent-b7070d1779d09819574959e8a35d36830f7a64c428c7d9f966d696c97693112312a828553bc652830b36a7e362422d6173ff6064b1cb6c4d941ff741fb114ce8",
      "file": "src/app/medical-training/fellowship-add-edit-modal/fellowship-add-edit-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-fellowship-add-edit-modal",
      "styleUrls": ["./fellowship-add-edit-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./fellowship-add-edit-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "Observable<IFormErrors> | undefined",
          "decorators": []
        },
        {
          "name": "fellowship$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Subject<IFellowshipReadOnlyModel>",
          "decorators": []
        },
        {
          "name": "isEdit$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Subject<boolean>",
          "decorators": []
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "clearErrors",
          "defaultValue": "new ClearMedicalTrainingErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "fellowshipForm",
          "defaultValue": "new FormGroup({\n    fellowshipType: new FormControl(''),\n    programName: new FormControl({ value: '', disabled: true }),\n    programOther: new FormControl(''),\n    completionYear: new FormControl(''),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "fellowshipId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "fellowshipPrograms",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "fellowshipPrograms$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFellowshipProgramReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 60,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.fellowshipPrograms"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "fellowshipTypes",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFellowshipTypeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "fellowshipTypes$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFellowshipTypeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 64,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.fellowshipTypes"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "filteredFellowshipPrograms",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "hasUnsavedChanges",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 85
        },
        {
          "name": "maxYear",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "year",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 82
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 195,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "clearAutoComplete",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 183,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "filterItems",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 188,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFellowshipPrograms",
          "args": [
            {
              "name": "fellowshipType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fellowshipType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onInstitutionSelect",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 178,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 211,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setPicklistData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "subscribeToRowData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "InputSelectComponent",
          "type": "component"
        },
        {
          "name": "AutoCompleteModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { InputSelectComponent } from 'src/app/shared/components/base-input/input-select.component';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CalendarModule } from 'primeng/calendar';\nimport { Observable, Subject } from 'rxjs';\nimport { IFellowshipReadOnlyModel } from 'src/app/api/models/medicaltraining/fellowship-read-only.model';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  GetFellowshipPrograms,\n  GetFellowshipTypes,\n  PicklistsSelectors,\n} from 'src/app/state/picklists';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { IFellowshipTypeReadOnlyModel } from 'src/app/api/models/picklists/fellowship-type-read-only.model';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { ClearMedicalTrainingErrors, SetUnsavedChanges } from 'src/app/state';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-fellowship-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    AutoCompleteModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n    RadioButtonModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './fellowship-add-edit-modal.component.html',\n  styleUrls: ['./fellowship-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FellowshipAddEditModalComponent implements OnInit, OnDestroy {\n  @Select(PicklistsSelectors.slices.fellowshipPrograms) fellowshipPrograms$:\n    | Observable<IFellowshipProgramReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.fellowshipTypes) fellowshipTypes$:\n    | Observable<IFellowshipTypeReadOnlyModel[]>\n    | undefined;\n\n  fellowshipTypes: IFellowshipTypeReadOnlyModel[] = [];\n\n  @Input() userId!: number;\n  @Input() errors$: Observable<IFormErrors> | undefined;\n  @Input() isEdit$: Subject<boolean> = new Subject();\n  @Input() fellowship$: Subject<IFellowshipReadOnlyModel> = new Subject();\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  clearErrors = new ClearMedicalTrainingErrors();\n\n  fellowshipPrograms: string[] = [];\n  filteredFellowshipPrograms: string[] = [];\n\n  year = new Date().getFullYear();\n  maxYear: Date = new Date();\n  fellowshipId!: number;\n  isEdit = false;\n\n  hasUnsavedChanges = false;\n\n  fellowshipForm = new FormGroup({\n    fellowshipType: new FormControl(''),\n    programName: new FormControl({ value: '', disabled: true }),\n    programOther: new FormControl(''),\n    completionYear: new FormControl(''),\n  });\n\n  constructor(\n    private globalDialogService: GlobalDialogService,\n    private _store: Store\n  ) {\n    this._store.dispatch(new GetFellowshipTypes());\n  }\n  ngOnDestroy(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n  }\n\n  ngOnInit(): void {\n    this.maxYear.setFullYear(this.year);\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEdit = isEdit;\n    });\n\n    this.setPicklistData();\n    this.subscribeToRowData();\n\n    this.fellowshipForm.valueChanges.subscribe(() => {\n      const isDirty = this.fellowshipForm.dirty;\n      if (isDirty && !this.hasUnsavedChanges) {\n        this.hasUnsavedChanges = true;\n        this._store.dispatch(new SetUnsavedChanges(true));\n      }\n    });\n\n    this.fellowshipPrograms$?.pipe(untilDestroyed(this)).subscribe(\n      (fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n        this.fellowshipPrograms = [];\n        fellowshipPrograms.forEach((fellowshipProgram) => {\n          this.fellowshipPrograms.push(fellowshipProgram.programName);\n        });\n        this.fellowshipForm.get('programName')?.enable();\n      }\n    );\n  }\n\n  getFellowshipPrograms(fellowshipType: string) {\n    this._store.dispatch(new GetFellowshipPrograms(fellowshipType));\n  }\n\n  subscribeToRowData() {\n    this.fellowship$.subscribe((formData) => {\n      if (Object.keys(formData).length > 0) {\n        let fellowshipType = '';\n        if (formData.programName) {\n          fellowshipType = formData.programName.charAt(\n            formData.programName.length - 2\n          );\n\n          this._store\n            .dispatch(new GetFellowshipPrograms(fellowshipType))\n            .pipe(untilDestroyed(this))\n            .subscribe(() => {\n              const programName = this.fellowshipPrograms.find(\n                (i) => i === formData.programName.toString()\n              );\n              this.fellowshipId = formData.id;\n\n              this.fellowshipForm.patchValue({\n                fellowshipType,\n                programName: programName,\n                programOther: formData.programOther,\n                completionYear: formData.completionYear.toString(),\n              });\n            });\n        }\n      } else {\n        this.fellowshipForm.reset();\n      }\n    });\n  }\n\n  setPicklistData() {\n    this.fellowshipTypes$?.pipe(untilDestroyed(this)).subscribe(\n      (fellowshipTypes: IFellowshipTypeReadOnlyModel[]) => {\n        this.fellowshipTypes = fellowshipTypes;\n      }\n    );\n  }\n\n  onInstitutionSelect() {\n    this.fellowshipForm.get('programOther')?.patchValue('');\n    this.fellowshipForm.get('programOther')?.disable();\n  }\n\n  clearAutoComplete() {\n    this.fellowshipForm.get('programName')?.patchValue('');\n    this.fellowshipForm.get('programOther')?.enable();\n  }\n\n  filterItems($event: any) {\n    const value = $event.query;\n    this.filteredFellowshipPrograms = this.fellowshipPrograms.filter((i) => {\n      return i?.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  cancel() {\n    if (this.hasUnsavedChanges) {\n      this.globalDialogService\n        .showConfirmation('Unsaved Changes', 'Do you want to navigate away')\n        .then((result) => {\n          if (result) {\n            this.cancelDialog.emit({ show: false });\n            this._store.dispatch(new SetUnsavedChanges(false));\n          }\n        });\n    } else {\n      this.cancelDialog.emit({ show: false });\n      this._store.dispatch(new SetUnsavedChanges(false));\n    }\n  }\n\n  save() {\n    this.saveDialog.emit({\n      edit: this.isEdit,\n      show: false,\n      fellowshipForm: this.fellowshipForm.value,\n      fellowshipId: this.fellowshipId,\n    });\n    this.hasUnsavedChanges = false;\n    this._store.dispatch(new SetUnsavedChanges(false));\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./fellowship-add-edit-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 94,
        "jsdoctags": [
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form\n  name=\"personProfileForm\"\n  [formGroup]=\"fellowshipForm\"\n  (ngSubmit)=\"save()\"\n  *ngIf=\"fellowshipForm\"\n>\n  <div class=\"grid\">\n    <div class=\"flex flex-column gap-1 col-12\">\n      <label htmlFor=\"trainingType\">Program Type *</label>\n      <div\n        class=\"flex align-items-center\"\n        *ngFor=\"let fellowshipType of fellowshipTypes\"\n      >\n        <p-radioButton\n          (onClick)=\"getFellowshipPrograms(fellowshipType.fellowshipType)\"\n          [value]=\"fellowshipType?.fellowshipType\"\n          formControlName=\"fellowshipType\"\n          [inputId]=\"fellowshipType?.fellowshipType ?? ''\"\n        ></p-radioButton>\n        <label [for]=\"fellowshipType?.fellowshipType\" class=\"ml-2\">{{\n          fellowshipType?.fellowshipTypeName\n        }}</label>\n      </div>\n    </div>\n\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"trainingType\">Program Name</label>\n      <p-autoComplete\n        [dropdown]=\"true\"\n        [suggestions]=\"filteredFellowshipPrograms\"\n        (completeMethod)=\"filterItems($event)\"\n        (onSelect)=\"onInstitutionSelect()\"\n        (onClear)=\"clearAutoComplete()\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [disabled]=\"fellowshipForm.get('programOther')?.value ? true : false\"\n        [showClear]=\"true\"\n        appendTo=\"body\"\n        id=\"programName\"\n        [placeholder]=\"\n          fellowshipForm.get('fellowshipType')?.value\n            ? 'Start typing to search for your Program...'\n            : 'Please select a Program Type first...'\n        \"\n        formControlName=\"programName\"\n      >\n      </p-autoComplete>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Other</label>\n      <input\n        [required]=\"!fellowshipForm.get('programName')?.value\"\n        pInputText\n        id=\"other\"\n        placeholder=\"If you do not see your Program in the list, type it in here...\"\n        formControlName=\"programOther\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Year of Completion *</label>\n      <p-calendar\n        [required]=\"true\"\n        [maxDate]=\"maxYear\"\n        view=\"year\"\n        dateFormat=\"yy\"\n        inputId=\"yearpicker\"\n        formControlName=\"completionYear\"\n        placeholder=\"YYYY\"\n        appendTo=\"body\"\n      ></p-calendar>\n      <small\n        *ngIf=\"\n          fellowshipForm.get('completionYear')?.errors &&\n          fellowshipForm.get('completionYear')?.dirty\n        \"\n        id=\"trainingType-help\"\n        class=\"form-error-text\"\n      >\n        This is required\n      </small>\n    </div>\n  </div>\n  <div class=\"flex justify-content-end mt-4\" slot=\"footer\">\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"cancel()\"\n      >Cancel</p-button\n    >\n    <p-button\n      type=\"submit\"\n      [style]=\"{ width: '337px' }\"\n      variant=\"primary\"\n      [disabled]=\"fellowshipForm.invalid || fellowshipForm.pristine\"\n      >Save\n    </p-button>\n  </div>\n</form>\n"
    },
    {
      "name": "FileNotFoundComponent",
      "id": "component-FileNotFoundComponent-e4956732fab940e4fe73949907101d8cefcd181ae0f1c95717effb1e2f5cda7e1b5ce9fe6d5c6b4cdb858839737050d0ebd5dca7f11b193a033191632816ee40",
      "file": "src/app/file-not-found/file-not-found.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-file-not-found",
      "styleUrls": ["./file-not-found.component.scss"],
      "styles": [],
      "templateUrl": ["./file-not-found.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onDashboard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-file-not-found',\n  templateUrl: './file-not-found.component.html',\n  styleUrls: ['./file-not-found.component.scss'],\n  imports: [CommonModule, ButtonModule],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FileNotFoundComponent {\n  constructor(private _router: Router) {}\n\n  onDashboard() {\n    this._router.navigate(['/dashboard']);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-card {\n  width: 100%;\n}\n\n.four04 {\n  font-size: 15rem;\n  font-weight: bold;\n  line-height: 190px;\n}\n\n.text {\n  border-bottom: 1px solid #ccc;\n}\n",
          "styleUrl": "./file-not-found.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<sl-card>\n  <div\n    class=\"flex flex-column justify-content-center align-items-center h-30rem\"\n  >\n    <div class=\"four04 mb-5\">404</div>\n    <div class=\"mb-5 pb-4 text\">\n      We're sorry, the page you are looking for was not found\n    </div>\n    <p-button\n      [style]=\"{\n        width: '350px',\n        fontWeight: 'bold',\n        textTransform: 'uppercase'\n      }\"\n      (onClick)=\"onDashboard()\"\n    >\n      Return To Dashboard\n    </p-button>\n  </div>\n</sl-card>\n"
    },
    {
      "name": "FileUploadButtonComponent",
      "id": "component-FileUploadButtonComponent-ed317dec673aeffd67ca546aa1876fc2240621daada9330a3d5a342de17f79a8d7aad2ca6dbc359b28c737d3083ae769b63b81ee945fa8a21123f151ab62aec0",
      "file": "src/app/shared/components/file-upload-button/file-upload-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-file-upload-button",
      "styleUrls": ["./file-upload-button.component.scss"],
      "styles": [],
      "templateUrl": ["./file-upload-button.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "buttonText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "fileUploaded",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "covertMimeToIcon",
          "args": [
            {
              "name": "mimeType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "\"pdf\" | \"image\" | \"audio\" | \"video\" | \"word\" | \"lines\"",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "mimeType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "triggerFileUpload",
          "args": [
            {
              "name": "inputId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "inputId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "uploadFile",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-file-upload-button',\n  standalone: true,\n  imports: [CommonModule, ButtonModule],\n  templateUrl: './file-upload-button.component.html',\n  styleUrls: ['./file-upload-button.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FileUploadButtonComponent {\n  @Input() inputId!: string;\n  @Input() inputName!: string;\n  @Input() buttonText!: string;\n\n  @Output() fileUploaded: EventEmitter<any> = new EventEmitter();\n\n  triggerFileUpload(inputId: string) {\n    const fileInput: any | null = document.querySelector('#' + inputId);\n    fileInput?.click();\n  }\n  uploadFile(event: any) {\n    const file: File = event.target.files[0];\n    const uploadFile = {\n      file: file,\n      fileName: file.name,\n      fileType: this.covertMimeToIcon(file.type),\n      uploadDate: new Date(),\n    };\n\n    this.fileUploaded.emit({ file: uploadFile, fileInput: this.inputId });\n  }\n\n  // TODO: [Joe] add more supported file types (or refine to a list of specifically allowed file types)\n  // TODO: [Joe] consider moving out of the upload button component so that it can be used where file icons are being displayed\n  covertMimeToIcon(mimeType: string) {\n    switch (mimeType) {\n      case 'application/pdf':\n        return 'pdf';\n      case 'image/jpeg':\n      case 'image/png':\n      case 'image/gif':\n        return 'image';\n      case 'audio/mpeg':\n      case 'audio/mp3':\n      case 'audio/wav':\n        return 'audio';\n      case 'video/mp4':\n      case 'video/webm':\n      case 'video/ogg':\n        return 'video';\n      case 'application/msword':\n        return 'word';\n      default:\n        return 'lines';\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".file-upload__input {\n  display: none;\n}\n",
          "styleUrl": "./file-upload-button.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ng-container>\n  <p-button class=\"btn-add mt-2 mb-2\" (click)=\"triggerFileUpload(inputId)\">\n    <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n    {{ buttonText }}\n  </p-button>\n  <input\n    type=\"file\"\n    [name]=\"inputName\"\n    [id]=\"inputId\"\n    class=\"file-upload__input\"\n    (change)=\"uploadFile($event)\"\n  />\n</ng-container>\n"
    },
    {
      "name": "FormErrorsComponent",
      "id": "component-FormErrorsComponent-002aeb35858e4e85b393d58378f307387e346adeb2aaaf761d73529a07d0a9b81ae034e4cbea6374daa219554fb848e51c9d85b5beaac4aee8de4d2c25420243",
      "file": "src/app/shared/components/form-errors/form-errors.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-form-errors",
      "styleUrls": ["./form-errors.component.scss"],
      "styles": [],
      "templateUrl": ["./form-errors.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 807,
              "end": 822,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 808,
                "end": 812,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 813,
                "end": 818,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 814,
                  "end": 817,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 131
                }
              }
            }
          ],
          "rawdescription": "\n\nThis should be a function that dispatches an action to clear the errors.\nThe action should come from the state.actions and be able to be used with a dispatch action from NGSX\n",
          "description": "<p>This should be a function that dispatches an action to clear the errors.\nThe action should come from the state.actions and be able to be used with a dispatch action from NGSX</p>\n",
          "line": 31,
          "type": "any | undefined",
          "decorators": []
        },
        {
          "name": "closable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 923,
              "end": 942,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 924,
                "end": 928,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 929,
                "end": 938,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 930,
                  "end": 937,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not the errors can be closed\n",
          "description": "<p>Whether or not the errors can be closed</p>\n",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "errors",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 551,
              "end": 574,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 552,
                "end": 556,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 557,
                "end": 570,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 558,
                  "end": 569,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 558,
                    "end": 569,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "IFormErrors"
                  }
                }
              }
            }
          ],
          "rawdescription": "\n\nAn array of errors to display\n",
          "description": "<p>An array of errors to display</p>\n",
          "line": 24,
          "type": "IFormErrors",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "clearFormErrors",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "focusElement",
          "args": [
            {
              "name": "element",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IFormErrors } from '../../common';\nimport { Store } from '@ngxs/store';\n\n@Component({\n  selector: 'abs-form-errors',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './form-errors.component.html',\n  styleUrls: ['./form-errors.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FormErrorsComponent implements OnDestroy {\n  /**\n   * An array of errors to display\n   * @type {IFormErrors}\n   */\n  @Input() errors!: IFormErrors;\n\n  /**\n   * This should be a function that dispatches an action to clear the errors.\n   * The action should come from the state.actions and be able to be used with a dispatch action from NGSX\n   * @type {any}\n   */\n  @Input() clearErrors: any | undefined;\n\n  /**\n   * Whether or not the errors can be closed\n   * @type {boolean}\n   */\n  @Input() closable = false;\n\n  constructor(private store: Store) {}\n\n  focusElement(element: string) {\n    const camelCaseElement = element.charAt(0).toLowerCase() + element.slice(1);\n    const el: any = document.querySelector('[id=\"' + camelCaseElement + '\"]');\n    if (el) {\n      el.focus();\n    }\n  }\n\n  clearFormErrors() {\n    if (this.clearErrors) {\n      this.store.dispatch(this.clearErrors);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearFormErrors();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".error-message {\n  color: var(--global-danger-darken-60);\n  cursor: pointer;\n  transition: color 0.2s ease;\n  margin: 0;\n  &:hover {\n    color: var(--global-danger-darken-20);\n  }\n\n  + .error-message {\n    margin-top: 0.15rem;\n  }\n}\n",
          "styleUrl": "./form-errors.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "templateData": "<div>\n  <sl-alert\n    variant=\"danger\"\n    open\n    [closable]=\"closable\"\n    (sl-hide)=\"clearFormErrors()\"\n  >\n    <sl-icon slot=\"icon\" name=\"exclamation-octagon\"></sl-icon>\n    <p\n      class=\"font-bold error-message\"\n      *ngFor=\"let error of errors | keyvalue\"\n      (click)=\"focusElement(error.key)\"\n      title=\"focus related field\"\n    >\n      {{ error.value.join(', ') }}\n    </p>\n  </sl-alert>\n</div>\n"
    },
    {
      "name": "GmeFormComponent",
      "id": "component-GmeFormComponent-b1182b571f4716939dde8bf4659859b5daab4e017aabbb0794d906071fe3a1903419a124b37a1aa6451f4c7e4d5eada554f572e7ec4604cb362181dafb36e788",
      "file": "src/app/gme-history/gme-form/gme-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-gme-form",
      "styleUrls": ["./gme-form.component.scss"],
      "styles": [],
      "templateUrl": ["./gme-form.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "any",
          "decorators": []
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "Observable<any> | undefined",
          "decorators": []
        },
        {
          "name": "formData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "any",
          "decorators": []
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "picklists",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "EventEmitter<any>"
        },
        {
          "name": "relaunchDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "clinicalActivities",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 161
        },
        {
          "name": "displayExplainDuration",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 155
        },
        {
          "name": "displayExplainFellowship",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 153
        },
        {
          "name": "displayExplainNonPrimary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 154
        },
        {
          "name": "displayExplainNonSurgical",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 156
        },
        {
          "name": "displaySurgicalDescription",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 152
        },
        {
          "name": "endDateOptions",
          "defaultValue": "{\n    minDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 147
        },
        {
          "name": "endDateOverlap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 159
        },
        {
          "name": "gemRotationForm",
          "defaultValue": "new FormGroup(\n    {\n      programName: new FormControl({ value: '', disabled: false }),\n      clinicalLevelId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      startDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      endDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      weeks: new FormControl({ value: '', disabled: false }),\n      usingAffiliateOrganization: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n      alternateInstitutionName: new FormControl({ value: '', disabled: false }),\n      isClinicalActivity: new FormControl({ value: true, disabled: false }, [\n        Validators.required,\n      ]),\n      clinicalActivityId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      other: new FormControl({ value: '', disabled: false }),\n      nonPrimaryExplain: new FormControl({ value: '', disabled: false }), //nonPrimary\n      fourMonthRotationExplain: new FormControl({ value: '', disabled: false }), //duration\n      nonClinicalExplain: new FormControl({ value: '', disabled: false }), //non-surgical\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }),\n      isInternationalRotation: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n    },\n    {\n      validators: [\n        validateStartAndEndDates('startDate', 'endDate'),\n        validateMinDuration('startDate', 'endDate', 2),\n        validateMaxDuration('startDate', 'endDate', 364),\n      ],\n    }\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "gmeRotations$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRotationReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 80,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "groupedClinicalActivities",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 164
        },
        {
          "name": "localEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "localRotationsList",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "nonClinicalActivities",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 162
        },
        {
          "name": "optionLists",
          "defaultValue": "{\n    clinicalLevelOptions: [],\n\n    isClinicalActivityOptions: [\n      { label: 'Clinical', value: true },\n      { label: 'Non-Clinical', value: false },\n    ],\n    clinicalActivityOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OptionList",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "originalFormValues",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 94
        },
        {
          "name": "startDateOptions",
          "defaultValue": "{\n    maxDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 142
        },
        {
          "name": "startDateOverlap",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 158
        },
        {
          "name": "weeksLabel",
          "defaultValue": "'Weeks'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 141
        }
      ],
      "methodsClass": [
        {
          "name": "changeModalData",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 576,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 580,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 178,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFormChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 251,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 558,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFormValues",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 238,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Observable, pairwise } from 'rxjs';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CheckboxModule } from 'primeng/checkbox';\n\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CalendarModule } from 'primeng/calendar';\nimport {\n  validateMaxDuration,\n  validateMinDuration,\n  validateStartAndEndDates,\n} from 'src/app/shared/validators/validators';\nimport { IRotationReadOnlyModel } from 'src/app/api';\nimport { Select } from '@ngxs/store';\nimport { GraduateMedicalEducationSelectors } from 'src/app/state';\nimport { FormErrorsComponent } from '../../shared/components/form-errors/form-errors.component';\n\ninterface OptionList {\n  clinicalLevelOptions: any[];\n\n  isClinicalActivityOptions: any[];\n\n  clinicalActivityOptions: any[];\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    CheckboxModule,\n    RadioButtonModule,\n    CalendarModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './gme-form.component.html',\n  styleUrls: ['./gme-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GmeFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Output() relaunchDialog: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  localRotationsList: IRotationReadOnlyModel[] = [];\n\n  optionLists: OptionList = {\n    clinicalLevelOptions: [],\n\n    isClinicalActivityOptions: [\n      { label: 'Clinical', value: true },\n      { label: 'Non-Clinical', value: false },\n    ],\n    clinicalActivityOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  gemRotationForm = new FormGroup(\n    {\n      programName: new FormControl({ value: '', disabled: false }),\n      clinicalLevelId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      startDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      endDate: new FormControl({ value: '', disabled: false }, [\n        Validators.required,\n      ]),\n      weeks: new FormControl({ value: '', disabled: false }),\n      usingAffiliateOrganization: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n      alternateInstitutionName: new FormControl({ value: '', disabled: false }),\n      isClinicalActivity: new FormControl({ value: true, disabled: false }, [\n        Validators.required,\n      ]),\n      clinicalActivityId: new FormControl({ value: null, disabled: false }, [\n        Validators.required,\n      ]),\n      other: new FormControl({ value: '', disabled: false }),\n      nonPrimaryExplain: new FormControl({ value: '', disabled: false }), //nonPrimary\n      fourMonthRotationExplain: new FormControl({ value: '', disabled: false }), //duration\n      nonClinicalExplain: new FormControl({ value: '', disabled: false }), //non-surgical\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }),\n      isInternationalRotation: new FormControl({\n        value: false,\n        disabled: false,\n      }),\n    },\n    {\n      validators: [\n        validateStartAndEndDates('startDate', 'endDate'),\n        validateMinDuration('startDate', 'endDate', 2),\n        validateMaxDuration('startDate', 'endDate', 364),\n      ],\n    }\n  );\n\n  /* Toggle variables */\n  weeksLabel = 'Weeks';\n  startDateOptions: any = {\n    maxDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  };\n  endDateOptions: any = {\n    minDate: null,\n    errorText: undefined,\n    overlapId: undefined,\n  };\n  displaySurgicalDescription = false;\n  displayExplainFellowship = false;\n  displayExplainNonPrimary = false;\n  displayExplainDuration = false;\n  displayExplainNonSurgical = false;\n\n  startDateOverlap: IRotationReadOnlyModel | undefined;\n  endDateOverlap: IRotationReadOnlyModel | undefined;\n\n  clinicalActivities: any[] = [];\n  nonClinicalActivities: any[] = [];\n\n  groupedClinicalActivities: any[] = [];\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n\n    this.gmeRotations$?.pipe(untilDestroyed(this)).subscribe((gmeRotations) => {\n      this.localRotationsList = gmeRotations;\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n      this.clinicalActivities = this.optionLists.clinicalActivityOptions.filter(\n        (activity) => {\n          if (activity.name.includes('Non-Clinical')) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      );\n      this.nonClinicalActivities =\n        this.optionLists.clinicalActivityOptions.filter((activity) => {\n          if (activity.name.includes('Non-Clinical')) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      const essentialActivities = this.clinicalActivities.filter((activity) => {\n        return activity.isEssential;\n      });\n      const otherActivities = this.clinicalActivities.filter((activity) => {\n        return !activity.isEssential;\n      });\n\n      this.groupedClinicalActivities = [\n        {\n          label: 'Essential Activities',\n          items: essentialActivities.map((activity) => {\n            return {\n              label: activity.name,\n              value: activity.id,\n            };\n          }),\n        },\n        {\n          label: 'Non-Essential Activities',\n          items: otherActivities.map((activity) => {\n            return {\n              label: activity.name,\n              value: activity.id,\n            };\n          }),\n        },\n      ];\n    }\n  }\n\n  setFormValues(data: any) {\n    this.gemRotationForm.reset();\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n        this.gemRotationForm.get(key)?.setValue(newValue);\n      }\n    }\n  }\n\n  onFormChanges() {\n    let durationInWeeks = 0;\n\n    const calculateWeeks = () => {\n      const startDate = this.gemRotationForm.get('endDate')?.value\n        ? new Date(this.gemRotationForm.get('endDate')?.value as string)\n        : undefined;\n\n      const endDate = this.gemRotationForm.get('startDate')?.value\n        ? new Date(this.gemRotationForm.get('startDate')?.value as string)\n        : undefined;\n\n      if (startDate && endDate) {\n        const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n        const weeks = diffDays / 7;\n        let weeksValue: string | undefined;\n        if (weeks >= 1) {\n          durationInWeeks = weeks;\n          weeksValue = Math.round(weeks).toString();\n          this.weeksLabel = 'Weeks';\n        } else {\n          durationInWeeks = 0;\n          this.weeksLabel = 'Day(s)';\n          weeksValue = diffDays.toString();\n        }\n\n        this.gemRotationForm.get('weeks')?.setValue(weeksValue.toString());\n      }\n    };\n\n    const setDurationErrors = () => {\n      if (this.gemRotationForm.errors) {\n        if (this.gemRotationForm.errors['minDurationValid'] === false) {\n          this.startDateOptions.errorText =\n            'Rotations must be at least 2 days long';\n          this.startDateOptions.overlapId = undefined;\n        } else if (this.gemRotationForm.errors['maxDurationValid'] === false) {\n          this.startDateOptions.errorText =\n            'Rotations must be less than 364 days long';\n          this.startDateOptions.overlapId = undefined;\n        } else {\n          //this.startDateOptions.errorText = undefined;\n        }\n      } else {\n        //this.startDateOptions.errorText = undefined;\n      }\n    };\n\n    const checkForOverlap = () => {\n      const startDate = this.gemRotationForm.get('startDate')?.value\n        ? new Date(this.gemRotationForm.get('startDate')?.value as string)\n        : undefined;\n\n      const endDate = this.gemRotationForm.get('endDate')?.value\n        ? new Date(this.gemRotationForm.get('endDate')?.value as string)\n        : undefined;\n\n      if (startDate) {\n        this.startDateOverlap = this.localRotationsList.find((rotation) => {\n          // check rotation.id against this.originalFormValues.id\n          if (\n            new Date(rotation.startDate) <= startDate &&\n            new Date(rotation.endDate) >= startDate &&\n            // rotation.id !== this.rotationToEdit?.id\n            rotation.id !== this.originalFormValues?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        if (this.startDateOverlap) {\n          this.startDateOptions.errorText =\n            'This start date overlaps with an existing rotation';\n          this.startDateOptions.overlapId = this.startDateOverlap.id;\n        } else {\n          this.startDateOptions.errorText = undefined;\n          this.startDateOptions.overlapId = undefined;\n        }\n      } else {\n        //this.startDateOptions.errorText = undefined;\n      }\n\n      if (endDate) {\n        this.endDateOverlap = this.localRotationsList.find((rotation) => {\n          if (\n            new Date(rotation.startDate) <= endDate &&\n            new Date(rotation.endDate) >= endDate &&\n            // rotation.id !== this.rotationToEdit?.id\n            rotation.id !== this.originalFormValues?.id\n          ) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        if (this.endDateOverlap) {\n          this.endDateOptions.errorText =\n            'This end date overlaps with an existing rotation';\n          this.endDateOptions.overlapId = this.endDateOverlap.id;\n        } else {\n          this.endDateOptions.errorText = undefined;\n          this.endDateOptions.overlapId = undefined;\n        }\n      } else {\n        this.endDateOptions.errorText = undefined;\n      }\n    };\n\n    const setClinicalActivityErrors = (\n      clinicalLevelId?: number | null,\n      clinicalActivityId?: number | null\n    ) => {\n      const activity = this.optionLists.clinicalActivityOptions.find(\n        (activity) => activity.id === clinicalActivityId\n      );\n\n      // if clinical level = 9, then show other field\n      if (clinicalLevelId && clinicalLevelId === 9) {\n        this.displayExplainFellowship = true;\n        this.gemRotationForm.get('other')?.enable();\n        this.gemRotationForm.get('other')?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainFellowship = false;\n        this.gemRotationForm.get('other')?.setValue('');\n        this.gemRotationForm.get('other')?.disable();\n        this.gemRotationForm.get('other')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 4 or 6 && clinicalActivityId = 5 or 17, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 4 || clinicalLevelId === 6) &&\n        clinicalActivityId &&\n        (clinicalActivityId === 5 || clinicalActivityId === 17)\n      ) {\n        this.displayExplainNonSurgical = true;\n        this.gemRotationForm.get('nonClinicalExplain')?.enable();\n        this.gemRotationForm\n          .get('nonClinicalExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainNonSurgical = false;\n        this.gemRotationForm.get('nonClinicalExplain')?.setValue('');\n        this.gemRotationForm.get('nonClinicalExplain')?.disable();\n        this.gemRotationForm.get('nonClinicalExplain')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 5 or 7 && duration > 16 weeks, then show other field\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        durationInWeeks >= 17\n      ) {\n        this.displayExplainDuration = true;\n        this.gemRotationForm.get('fourMonthRotationExplain')?.enable();\n        this.gemRotationForm\n          .get('fourMonthRotationExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainDuration = false;\n        this.gemRotationForm.get('fourMonthRotationExplain')?.setValue('');\n        this.gemRotationForm.get('fourMonthRotationExplain')?.disable();\n        this.gemRotationForm.get('fourMonthRotationExplain')?.setValidators([]);\n      }\n\n      //if clinicalLevelId = 5 or 7 and clinical activity is essential === false\n      if (\n        clinicalLevelId &&\n        (clinicalLevelId === 5 || clinicalLevelId === 7) &&\n        activity &&\n        !activity.isEssential\n      ) {\n        this.displayExplainNonPrimary = true;\n        this.gemRotationForm.get('nonPrimaryExplain')?.enable();\n        this.gemRotationForm\n          .get('nonPrimaryExplain')\n          ?.setValidators([Validators.required]);\n      } else {\n        this.displayExplainNonPrimary = false;\n        this.gemRotationForm.get('nonPrimaryExplain')?.setValue('');\n        this.gemRotationForm.get('nonPrimaryExplain')?.disable();\n        this.gemRotationForm.get('nonPrimaryExplain')?.setValidators([]);\n      }\n    };\n\n    this.gemRotationForm\n      .get('endDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.startDateOptions.maxDate = new Date(val);\n        } else {\n          this.startDateOptions.maxDate = null;\n        }\n\n        this.startDateOptions.errorText = undefined;\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.gemRotationForm\n      .get('startDate')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.endDateOptions.minDate = new Date(val);\n        } else {\n          this.endDateOptions.minDate = null;\n        }\n\n        calculateWeeks();\n        checkForOverlap();\n        setDurationErrors();\n\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        if (clinicalActivityId || clinicalLevelId) {\n          setClinicalActivityErrors(clinicalLevelId, clinicalActivityId);\n        }\n      });\n\n    this.gemRotationForm\n      .get('clinicalLevelId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalActivityId =\n          this.gemRotationForm.get('clinicalActivityId')?.value;\n\n        setClinicalActivityErrors(val, clinicalActivityId);\n      });\n\n    this.gemRotationForm\n      .get('clinicalActivityId')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        const clinicalLevelId =\n          this.gemRotationForm.get('clinicalLevelId')?.value;\n\n        setClinicalActivityErrors(clinicalLevelId, val);\n\n        if (val) {\n          const activity = this.optionLists.clinicalActivityOptions.find(\n            (activity) =>\n              activity.id === val && activity.name.includes('Non-Surgical')\n          );\n          if (activity) {\n            this.displaySurgicalDescription = true;\n            this.gemRotationForm.get('nonSurgicalActivity')?.enable();\n            this.gemRotationForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([Validators.required]);\n          } else {\n            this.displaySurgicalDescription = false;\n            this.gemRotationForm.get('nonSurgicalActivity')?.setValue('');\n            this.gemRotationForm.get('nonSurgicalActivity')?.disable();\n            this.gemRotationForm.get('nonSurgicalActivity')?.setValidators([]);\n          }\n        }\n      });\n\n    this.gemRotationForm\n      .get('usingAffiliateOrganization')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        if (val) {\n          this.gemRotationForm.get('alternateInstitutionName')?.enable();\n          this.gemRotationForm\n            .get('alternateInstitutionName')\n            ?.setValidators([Validators.required]);\n        } else {\n          this.gemRotationForm.get('alternateInstitutionName')?.setValue('');\n          this.gemRotationForm.get('alternateInstitutionName')?.disable();\n          this.gemRotationForm\n            .get('alternateInstitutionName')\n            ?.setValidators([]);\n        }\n      });\n\n    this.gemRotationForm\n      .get('isClinicalActivity')\n      ?.valueChanges.pipe(untilDestroyed(this), pairwise())\n      .subscribe(([prev, next]) => {\n        if (prev !== null && next !== null && prev !== next) {\n          this.gemRotationForm.get('clinicalActivityId')?.setValue(null);\n        }\n      });\n  }\n\n  onSubmit() {\n    const formData: any = this.gemRotationForm.getRawValue();\n    const activity = this.optionLists.clinicalActivityOptions.find(\n      (activity) => {\n        return activity.id === formData.clinicalActivityId;\n      }\n    );\n\n    if (activity) {\n      formData.isEssential = activity.isEssential;\n    }\n    this.saveForm.emit({\n      show: false,\n      data: formData,\n      isEdit: this.localEdit,\n    });\n  }\n\n  changeModalData(id: number) {\n    this.relaunchDialog.emit(id);\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".readonly-text {\n  background-color: #ededed;\n  border-radius: 4px;\n}\n",
          "styleUrl": "./gme-form.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"gemRotationForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <!-- <div class=\"col-12\">\n      <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n    </div> -->\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"programName\">Program Name</label>\n\n      <p class=\"my-0 px-3 py-2 readonly-text\">\n        {{ gemRotationForm.get('programName')?.value ?? 'No Program Listed' }}\n      </p>\n\n      <!-- <input placeholder=\"\" name=\"programName\" id=\"programName\" [required]=\"false\" formControlName=\"programName\"\n        pInputText /> -->\n\n      <small class=\"form-helper-text text-muted\"\n        >If you need to change your Program please refer to the Medical Training\n        Page</small\n      >\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"clinicalLevelId\">Clinical Level*</label>\n\n      <p-dropdown\n        placeholder=\"Select clinical level...\"\n        [options]=\"optionLists.clinicalLevelOptions\"\n        name=\"clinicalLevelId\"\n        inputId=\"clinicalLevelId\"\n        [editable]=\"false\"\n        formControlName=\"clinicalLevelId\"\n        appendTo=\"body\"\n        optionLabel=\"label\"\n        optionValue=\"value\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-4 flex flex-column justify-content-start\">\n      <label htmlFor=\"startDate\">Start Date*</label>\n\n      <p-calendar\n        formControlName=\"startDate\"\n        [showIcon]=\"true\"\n        inputId=\"startDate\"\n        placeholder=\"MM/DD/YYYY\"\n        [required]=\"true\"\n        [maxDate]=\"startDateOptions.maxDate\"\n        appendTo=\"body\"\n      ></p-calendar>\n\n      <small\n        class=\"form-helper-text text-danger my-0 flex align-items-center\"\n        style=\"min-height: 37px\"\n        *ngIf=\"startDateOptions.errorText\"\n      >\n        <span>*{{ startDateOptions.errorText }}</span>\n        <p-button\n          *ngIf=\"startDateOptions.overlapId\"\n          icon=\"pi pi-pencil\"\n          styleClass=\"p-button-rounded p-button-text p-button-secondary p-button-sm\"\n          title=\"click here to edit the overlapping record\"\n          (onClick)=\"changeModalData(startDateOptions.overlapId)\"\n        ></p-button>\n      </small>\n    </div>\n\n    <div class=\"col-12 md:col-4 flex flex-column justify-content-start\">\n      <label htmlFor=\"endDate\">End Date*</label>\n\n      <p-calendar\n        formControlName=\"endDate\"\n        [showIcon]=\"true\"\n        inputId=\"endDate\"\n        placeholder=\"MM/DD/YYYY\"\n        [required]=\"true\"\n        [minDate]=\"endDateOptions.minDate\"\n        appendTo=\"body\"\n      ></p-calendar>\n\n      <small\n        class=\"form-helper-text text-danger my-0 flex align-items-center\"\n        style=\"min-height: 37px\"\n        *ngIf=\"endDateOptions.errorText\"\n      >\n        <span>*{{ endDateOptions.errorText }}</span>\n        <p-button\n          *ngIf=\"endDateOptions.overlapId\"\n          icon=\"pi pi-pencil\"\n          styleClass=\"p-button-rounded p-button-text p-button-secondary p-button-sm\"\n          title=\"click here to edit the overlapping record\"\n          (onClick)=\"changeModalData(endDateOptions.overlapId)\"\n        ></p-button>\n      </small>\n    </div>\n\n    <div class=\"col-12 md:col-4 flex flex-column justify-content-start\">\n      <label htmlFor=\"weeks\">{{ weeksLabel }}</label>\n\n      <p class=\"my-0 px-3 py-2 readonly-text\">\n        {{ gemRotationForm.get('weeks')?.value ?? '-' }}\n      </p>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <div class=\"flex flex-wrap gap-3\">\n        <p-checkbox\n          name=\"usingAffiliateOrganization\"\n          [binary]=\"true\"\n          formControlName=\"usingAffiliateOrganization\"\n          inputId=\"usingAffiliateOrganization\"\n          label=\"I Attended this rotation at an Affiliate Organization\"\n        ></p-checkbox>\n      </div>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"gemRotationForm.get('usingAffiliateOrganization')?.value\"\n    >\n      <label htmlFor=\"alternateInstitutionName\">Affiliate Organization*</label>\n\n      <input\n        placeholder=\"Enter Affiliate Organization\"\n        name=\"alternateInstitutionName\"\n        id=\"alternateInstitutionName\"\n        [required]=\"false\"\n        formControlName=\"alternateInstitutionName\"\n        pInputText\n      />\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"isClinicalActivity\"\n        >Which type of activity did you perform?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.isClinicalActivityOptions\"\n        >\n          <p-radioButton\n            name=\"isClinicalActivity\"\n            [value]=\"option.value\"\n            formControlName=\"isClinicalActivity\"\n            [inputId]=\"'isClinicalActivity' + option.value\"\n          ></p-radioButton>\n          <label [for]=\"'isClinicalActivity' + option.value\" class=\"ml-2\">\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"clinicalActivityId\"\n        >{{\n          gemRotationForm.get('isClinicalActivity')?.value ? '' : 'Non-'\n        }}Clinical Activity*</label\n      >\n\n      <p-dropdown\n        placeholder=\"Select clinical activity...\"\n        [options]=\"groupedClinicalActivities\"\n        name=\"clinicalActivityId\"\n        id=\"clinicalActivityId\"\n        [group]=\"true\"\n        formControlName=\"clinicalActivityId\"\n        appendTo=\"body\"\n        *ngIf=\"gemRotationForm.get('isClinicalActivity')?.value\"\n      >\n        <ng-template let-group pTemplate=\"group\">\n          <strong>{{ group.label }}</strong>\n        </ng-template>\n      </p-dropdown>\n\n      <p-dropdown\n        placeholder=\"Select non-clinical activity...\"\n        [options]=\"nonClinicalActivities\"\n        name=\"clinicalActivityId\"\n        inputId=\"clinicalActivityId\"\n        [editable]=\"false\"\n        formControlName=\"clinicalActivityId\"\n        appendTo=\"body\"\n        optionLabel=\"name\"\n        optionValue=\"id\"\n        *ngIf=\"!gemRotationForm.get('isClinicalActivity')?.value\"\n      ></p-dropdown>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"displayExplainFellowship\"\n    >\n      <label htmlFor=\"other\">Please Describe your Clinical Fellowship*</label>\n\n      <textarea\n        pInputTextarea\n        id=\"other\"\n        name=\"other\"\n        placeholder=\"Type your answer...\"\n        rows=\"3\"\n        formControlName=\"other\"\n        maxlength=\"8000\"\n      ></textarea>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"displayExplainNonPrimary\"\n    >\n      <label htmlFor=\"nonPrimaryExplain\"\n        >Please Explain why you performed a non-primary activity*</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"nonPrimaryExplain\"\n        name=\"nonPrimaryExplain\"\n        placeholder=\"Type your answer...\"\n        rows=\"3\"\n        formControlName=\"nonPrimaryExplain\"\n        maxlength=\"8000\"\n      ></textarea>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"displayExplainDuration\"\n    >\n      <label htmlFor=\"fourMonthRotationExplain\"\n        >Please explain why this rotation was longer than 4 months*</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"fourMonthRotationExplain\"\n        name=\"fourMonthRotationExplain\"\n        placeholder=\"Type your answer...\"\n        rows=\"3\"\n        formControlName=\"fourMonthRotationExplain\"\n        maxlength=\"8000\"\n      ></textarea>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"displayExplainNonSurgical\"\n    >\n      <label htmlFor=\"nonClinicalExplain\"\n        >Please explain your Clinical (Non-Surgical) or Non-Clinical Research\n        rotation*</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"nonClinicalExplain\"\n        name=\"nonClinicalExplain\"\n        placeholder=\"Type your answer...\"\n        rows=\"3\"\n        formControlName=\"nonClinicalExplain\"\n        maxlength=\"8000\"\n      ></textarea>\n    </div>\n\n    <div\n      class=\"col-12 md:col-12 flex flex-column justify-content-start\"\n      *ngIf=\"displaySurgicalDescription\"\n    >\n      <label htmlFor=\"nonSurgicalActivity\"\n        >Describe your Non-Surgical Rotation*</label\n      >\n\n      <textarea\n        pInputTextarea\n        id=\"nonSurgicalActivity\"\n        name=\"nonSurgicalActivity\"\n        placeholder=\"Type your answer...\"\n        rows=\"3\"\n        formControlName=\"nonSurgicalActivity\"\n        maxlength=\"8000\"\n      ></textarea>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex justify-content-start\">\n      <div class=\"flex flex-wrap gap-3\">\n        <p-checkbox\n          name=\"isInternationalRotation\"\n          [binary]=\"true\"\n          formControlName=\"isInternationalRotation\"\n          inputId=\"'isInternationalRotation'\"\n          label=\"This was an international rotation\"\n          labelStyleClass=\"mb-0\"\n        ></p-checkbox>\n      </div>\n\n      <small\n        class=\"form-helper-text text-warning-dark ml-6\"\n        *ngIf=\"gemRotationForm.get('isInternationalRotation')?.value\"\n      >\n        <i class=\"fa-solid fa-triangle-exclamation\"></i>\n        Please upload the ABS approval letter under the training section\n      </small>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        type=\"submit\"\n        [style]=\"{ width: '337px' }\"\n        [disabled]=\"gemRotationForm.invalid\"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "GmeHistoryComponent",
      "id": "component-GmeHistoryComponent-dc6596208b78c7f3680ac5a4c82248c87d06908b95f21c1c331acd761a511913a4413d91c8464a3902d32ffaca567942199e176f05e8d8ff9b6c70fdd7807c3d",
      "file": "src/app/gme-history/gme-history.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-gme-history",
      "styleUrls": ["./gme-history.component.scss"],
      "styles": [],
      "templateUrl": ["./gme-history.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "calendarComponent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FullCalendarComponent",
          "optional": false,
          "description": "",
          "line": 99,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'calendar'"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "calendarFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICalendarFilterValue | undefined",
          "optional": false,
          "description": "",
          "line": 129
        },
        {
          "name": "calendarFilterOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICalendarFilterOptions[]",
          "optional": false,
          "description": "",
          "line": 128
        },
        {
          "name": "calendarOptions",
          "defaultValue": "{\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CalendarOptions",
          "optional": false,
          "description": "",
          "line": 137
        },
        {
          "name": "calendarReady",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 127
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearGraduateMedicalEducationErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 101
        },
        {
          "name": "clinicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 131
        },
        {
          "name": "conflictingRecords",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 123
        },
        {
          "name": "conflicts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 133
        },
        {
          "name": "createGmeRotationSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 119
        },
        {
          "name": "gapConflictDates",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "gapData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationGapReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 124
        },
        {
          "name": "gmeAll$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IGraduateMedicalEducation> | undefined",
          "optional": false,
          "description": "",
          "line": 107,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationAll"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "gmeAllSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 121
        },
        {
          "name": "gmeErrors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 116,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "gmePicklistOptions",
          "defaultValue": "{\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGmePicklistOptions | undefined",
          "optional": false,
          "description": "",
          "line": 238
        },
        {
          "name": "gmeRotations$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRotationReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 104,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "gmeRotationsSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 118
        },
        {
          "name": "gmeSummary$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IGmeSummaryReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 110,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationSummary"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "gmeSummaryCols",
          "defaultValue": "GME_SUMMARY_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 227
        },
        {
          "name": "gmeSummaryData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 228
        },
        {
          "name": "isEditGmeRotation$",
          "defaultValue": "new BehaviorSubject(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 233
        },
        {
          "name": "itemizedGmeCols",
          "defaultValue": "ITEMIZED_GME_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 224
        },
        {
          "name": "itemizedGmeData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 225
        },
        {
          "name": "itemizedGridOptions",
          "defaultValue": "{\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGridOptions",
          "optional": false,
          "description": "",
          "line": 217
        },
        {
          "name": "maxEndDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date | undefined",
          "optional": false,
          "description": "",
          "line": 236
        },
        {
          "name": "minStartDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date | undefined",
          "optional": false,
          "description": "",
          "line": 235
        },
        {
          "name": "nonClinicalActivity",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 132
        },
        {
          "name": "selectedGmeRotation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IRotationReadOnlyModel | undefined",
          "optional": false,
          "description": "",
          "line": 230
        },
        {
          "name": "selectedRotation$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRotationModel> | undefined",
          "optional": false,
          "description": "",
          "line": 113,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationDetails"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "showAddEditGmeRotation",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 232
        },
        {
          "name": "showConflictResolutionModal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 135
        },
        {
          "name": "updateGmeRotationSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 120
        },
        {
          "name": "userProgram",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 243
        }
      ],
      "methodsClass": [
        {
          "name": "applyCalendarFilters",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 735,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "deleteGmeRotation",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 721,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getClinicalActivity",
          "args": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "{ events: any; }",
          "typeParameters": [],
          "line": 563,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getConflicts",
          "args": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "{ events: any; }",
          "typeParameters": [],
          "line": 585,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getEventSources",
          "args": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 596,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getNonClinicalActivity",
          "args": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "{ events: any; }",
          "typeParameters": [],
          "line": 574,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "filters",
              "type": "ICalendarFilterValue",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleAddEditGmeRotation",
          "args": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 616,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleAddGmeGapRotation",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 632,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleCalendarFilterChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 725,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 650,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initPicklistOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 325,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initRotationsData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 357,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initUserData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 273,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 558,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 547,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "relaunchAddEditGmeRotation",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 604,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveGmeRotation",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 670,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleConflictResolutionModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 781,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "viewConflictsToResolve",
          "args": [
            {
              "name": "conflicts",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "gapData",
              "type": "IRotationGapReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 766,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "conflicts",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "gapData",
              "type": "IRotationGapReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FullCalendarModule",
          "type": "module"
        },
        {
          "name": "CollapsePanelComponent",
          "type": "component"
        },
        {
          "name": "InputSelectComponent",
          "type": "component"
        },
        {
          "name": "AlertComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "ConflictResolutionModalComponent",
          "type": "component"
        },
        {
          "name": "AddRecordModalComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "GmeFormComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  DeleteGraduateMedicalEducation,\n  GetGraduateMedicalEducationDetails,\n  ClearGraduateMedicalEducationDetails,\n  IGraduateMedicalEducation,\n  GetAllGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  GetDashboardProgramInformation,\n  DashboardSelectors,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n  IRotationGapReadOnlyModel,\n  IRotationModel,\n} from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\nimport { GmeFormComponent } from './gme-form/gme-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { GetPicklists, PicklistsSelectors } from '../state/picklists';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\ninterface IGmePicklistOptions {\n  clinicalLevelOptions: any[] | undefined;\n  clinicalActivityOptions: any[] | undefined;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n    ButtonModule,\n    GmeFormComponent,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationAll)\n  gmeAll$: Observable<IGraduateMedicalEducation> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors)\n  gmeErrors$: Observable<any> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  createGmeRotationSubscription: Subscription | undefined;\n  updateGmeRotationSubscription: Subscription | undefined;\n  gmeAllSubscription: Subscription | undefined;\n\n  conflictingRecords: IRotationReadOnlyModel[] = [];\n  gapData: IRotationGapReadOnlyModel | undefined;\n  gapConflictDates: any;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }`;\n\n        innerContent += `<br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflict = info.event.extendedProps['rawData'];\n        const allRecords = [\n          ...this.clinicalActivity,\n          ...this.nonClinicalActivity,\n        ];\n        const conflictingRecords = {\n          nextRotation: undefined,\n          previousRotation: undefined,\n        };\n        if (conflict.nextRotationId) {\n          conflictingRecords.nextRotation = allRecords.find(\n            (x) => x.id === conflict.nextRotationId\n          );\n        }\n        if (conflict.previousRotationId) {\n          conflictingRecords.previousRotation = allRecords.find(\n            (x) => x.id === conflict.previousRotationId\n          );\n        }\n        this.viewConflictsToResolve(conflictingRecords, conflict);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  gmeSummaryData!: any[];\n\n  selectedGmeRotation: IRotationReadOnlyModel | undefined;\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  gmePicklistOptions: IGmePicklistOptions | undefined = {\n    clinicalLevelOptions: [],\n    clinicalActivityOptions: [],\n  };\n\n  userProgram: {\n    programName?: string;\n    clinicalLevel?: string;\n    clinicalLevelId?: number;\n  } = {};\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initPicklistOptions();\n\n    this.selectedRotation$?.pipe(untilDestroyed(this)).subscribe((rotation) => {\n      this.selectedGmeRotation = undefined;\n      const selectedRotation = {\n        ...rotation,\n        usingAffiliateOrganization: rotation?.alternateInstitutionName\n          ? true\n          : false,\n        isClinicalActivity:\n          !rotation?.clinicalActivity.includes('Non-Clinical'),\n      };\n      if (!rotation) {\n        selectedRotation.startDate = this.maxEndDate?.toISOString() ?? '';\n      }\n      this.selectedGmeRotation = selectedRotation;\n    });\n  }\n\n  initUserData() {\n    this._store\n      .dispatch(new GetDashboardProgramInformation())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        const userInfo = this._store.selectSnapshot(\n          DashboardSelectors.dashboardProgramInformation\n        );\n        if (userInfo && userInfo.programs) {\n          if (userInfo.programs.programName !== '') {\n            this.userProgram.programName = userInfo.programs.programName;\n          }\n          if (userInfo.programs.clinicalLevel !== '') {\n            switch (userInfo.programs.clinicalLevel) {\n              case 'PGY1':\n                this.userProgram.clinicalLevel = 'Clinical Level 1';\n                break;\n              case 'PGY2':\n                this.userProgram.clinicalLevel = 'Clinical Level 2';\n                break;\n              case 'PGY3':\n                this.userProgram.clinicalLevel = 'Clinical Level 3';\n                break;\n              case 'PGY4':\n                this.userProgram.clinicalLevel = 'Clinical Level 4';\n                break;\n              case 'PGY5':\n                this.userProgram.clinicalLevel = 'Clinical Level 5';\n                break;\n              case 'Research':\n                this.userProgram.clinicalLevel = 'Research';\n                break;\n              case 'Other':\n                this.userProgram.clinicalLevel = 'Other Clinical Fellowship';\n                break;\n              default:\n                this.userProgram.clinicalLevel =\n                  userInfo.programs.clinicalLevel;\n                break;\n            }\n          }\n        }\n        if (this.userProgram.clinicalLevel) {\n          const clinicalLevel =\n            this.gmePicklistOptions?.clinicalLevelOptions?.find((level) => {\n              return level.label === this.userProgram.clinicalLevel;\n            });\n          this.userProgram.clinicalLevelId = clinicalLevel?.value;\n        }\n      });\n  }\n\n  initPicklistOptions() {\n    this.gmePicklistOptions = undefined;\n    const gmePicklistOptions: IGmePicklistOptions = {\n      clinicalLevelOptions: [],\n      clinicalActivityOptions: [],\n    };\n    this._store\n      .dispatch(new GetPicklists())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        gmePicklistOptions.clinicalLevelOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalLevels\n        );\n        if (gmePicklistOptions.clinicalLevelOptions) {\n          gmePicklistOptions.clinicalLevelOptions =\n            gmePicklistOptions.clinicalLevelOptions.map((level) => {\n              return {\n                label: level.name,\n                value: level.id,\n              };\n            });\n        }\n        gmePicklistOptions.clinicalActivityOptions = this._store.selectSnapshot(\n          PicklistsSelectors.slices.clinicalActivities\n        );\n\n        this.gmePicklistOptions = gmePicklistOptions;\n\n        this.initUserData();\n      });\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetAllGraduateMedicalEducation());\n\n    this.gmeAllSubscription = this.gmeAll$?.pipe(untilDestroyed(this)).subscribe((gmeAll) => {\n      this.clinicalActivity = [];\n      this.nonClinicalActivity = [];\n      this.conflicts = [];\n\n      if (gmeAll && (gmeAll.gmeRotations || gmeAll.gmeGaps)) {\n        this.calendarFilterOptions = [\n          {\n            label: 'Activity Types',\n            items: [\n              {\n                label: 'Clinical',\n                value: { value: 'clinical', field: 'type' },\n              },\n              {\n                label: 'Non-Clinical',\n                value: { value: 'non-clinical', field: 'type' },\n              },\n              {\n                label: 'Conflicts',\n                value: { value: 'conflict', field: 'type' },\n              },\n            ],\n          },\n          {\n            label: 'Clinical Levels',\n            items: [],\n          },\n        ];\n\n        // set filter options for grid\n        const clinicalFilterOptions: { value: string; label: string }[] = [];\n        const yearFilterOptions: ICalendarFilter[] = [];\n        this.maxEndDate = undefined;\n        this.minStartDate = undefined;\n        gmeAll.gmeGaps.forEach((item, index) => {\n          // build calendar items\n          if (item.startDate === item.endDate) {\n            // single day event\n          }\n\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const conflictItem: any = {\n            id: 'conflict-' + index,\n            start: item.startDate,\n            class: 'conflict',\n            classNames: ['clickable-event'],\n            color: 'rgba(139, 4, 10, 0.25)',\n            highlightColor: 'rgba(139, 4, 10, 1)',\n            type: 'conflict',\n            eventTitle: 'Rotation Conflict',\n            allDay: true,\n            rawData: item,\n          };\n\n          if (item.startDate !== item.endDate) {\n            conflictItem.end = endDate;\n          }\n          this.conflicts.push(conflictItem);\n        });\n        gmeAll.gmeRotations.forEach((item) => {\n          //get min start date\n          if (this.minStartDate) {\n            if (new Date(item.startDate) < new Date(this.minStartDate)) {\n              this.minStartDate = new Date(item.startDate);\n            }\n          } else {\n            this.minStartDate = new Date(item.startDate);\n          }\n\n          //get max end date\n          if (this.maxEndDate) {\n            if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n              this.maxEndDate = new Date(item.endDate);\n            }\n          } else {\n            this.maxEndDate = new Date(item.endDate);\n          }\n          this.maxEndDate = new Date(\n            this.maxEndDate.setDate(this.maxEndDate.getDate() + 1)\n          );\n\n          // build filter options for grid\n          if (\n            !clinicalFilterOptions.some(\n              (x) => x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n            )\n          ) {\n            clinicalFilterOptions.push({\n              value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              label: item.clinicalLevel,\n            });\n            this.calendarFilterOptions[1].items.push({\n              label: item.clinicalLevel,\n              value: {\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                field: 'clinicalLevel',\n              },\n            });\n          }\n\n          const itemMonth = new Date(item.startDate).getMonth();\n          const itemYear = new Date(item.startDate).getFullYear().toString();\n          let yearFilter = '';\n          // hardcoded to 5 for June\n          if (itemMonth >= 5) {\n            yearFilter = itemYear.concat(\n              ' - ',\n              (parseInt(itemYear) + 1).toString()\n            );\n          } else {\n            yearFilter = (parseInt(itemYear) - 1)\n              .toString()\n              .concat(' - ', itemYear);\n          }\n          if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n            yearFilterOptions.push({\n              label: yearFilter,\n              value: {\n                value: yearFilter?.replaceAll(' ', '_').trim(),\n                field: 'year',\n              },\n            });\n          }\n\n          // build calendar items\n          const endDate = new Date(item.endDate);\n          endDate.setDate(endDate.getDate() + 1);\n          const calendarItem = {\n            id: item.id,\n            start: item.startDate,\n            end: endDate,\n            class: '',\n            color: '',\n            highlightColor: '',\n            eventTitle: item.clinicalActivity,\n            programName: item.programName,\n            type: '',\n            year: yearFilter.replaceAll(' ', '_').trim(),\n            clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n            allDay: true,\n            rawData: item,\n          };\n\n          //if (item.isCredit) {\n          if (!item.clinicalActivity.includes('Non-Clinical')) {\n            // clinical activity\n            calendarItem.class = 'clinical';\n            calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n            calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n            calendarItem.type = 'clinical';\n            this.clinicalActivity.push(calendarItem);\n          } else {\n            // non clinical activity\n            calendarItem.class = 'non-clinical';\n            calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n            calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n            calendarItem.type = 'non-clinical';\n            this.nonClinicalActivity.push(calendarItem);\n          }\n        });\n\n        clinicalFilterOptions.sort((a, b) => {\n          return a.label > b.label ? 1 : -1;\n        });\n        this.calendarFilterOptions.push({\n          label: 'Years',\n          items: yearFilterOptions,\n        });\n        this.calendarFilterOptions.forEach((filterOption) => {\n          if (filterOption.label !== 'Activity Types') {\n            filterOption.items.sort(\n              (a: ICalendarFilter, b: ICalendarFilter) => {\n                return a.label > b.label ? 1 : -1;\n              }\n            );\n          }\n        });\n\n        this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n      }\n\n      this.applyCalendarFilters();\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeAllSubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      this.getConflicts(filters),\n    ];\n  }\n\n  relaunchAddEditGmeRotation($event: any) {\n    this.showConflictResolutionModal = false;\n    if (this.showAddEditGmeRotation) {\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n    if ($event) {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails($event));\n      this.handleAddEditGmeRotation(true);\n    }\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: this.maxEndDate?.toISOString() ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n  }\n\n  handleAddGmeGapRotation($event: any) {\n    if ($event) {\n      this.showConflictResolutionModal = false;\n      this.isEditGmeRotation$.next(false);\n      this.gapConflictDates = $event;\n      this._store.dispatch(new ClearGraduateMedicalEducationDetails());\n      this.selectedGmeRotation = {\n        programName: this.userProgram.programName ?? undefined,\n        clinicalLevelId: this.userProgram.clinicalLevelId ?? undefined,\n        startDate: $event.startDate ?? '',\n        endDate: $event.endDate ?? '',\n        isClinicalActivity: true,\n        usingAffiliateOrganization: false,\n      } as unknown as IRotationReadOnlyModel;\n      this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this._store.dispatch(new GetGraduateMedicalEducationDetails(data.id));\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  saveGmeRotation($event: any) {\n    if ($event.data) {\n      const formValues = $event.data;\n      let startDate = '';\n      let endDate = '';\n      if (formValues.startDate) {\n        startDate = new Date(formValues.startDate).toISOString();\n      }\n      if (formValues.endDate) {\n        endDate = new Date(formValues.endDate).toISOString();\n      }\n\n      const newRotation = {\n        id: this.selectedGmeRotation?.id ?? 0,\n        startDate: startDate,\n        endDate: endDate,\n        clinicalLevelId: formValues.clinicalLevelId ?? 0,\n        clinicalActivityId: formValues.clinicalActivityId ?? 0,\n        programName: formValues.programName ?? '',\n        nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n        alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n        isInternationalRotation: formValues.isInternationalRotation ?? false,\n        other: formValues.other ?? '',\n        fourMonthRotationExplain: formValues.fourMonthRotationExplain ?? '',\n        nonPrimaryExplain: formValues.nonPrimaryExplain ?? '',\n        nonClinicalExplain: formValues.nonClinicalExplain ?? '',\n        isEssential: formValues.isEssential ?? false,\n      } as unknown as IRotationModel;\n\n      if ($event.isEdit) {\n        this.updateGmeRotationSubscription = this._store\n          .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      } else {\n        this.createGmeRotationSubscription = this._store\n          .dispatch(new CreateGraduateMedicalEducation(newRotation))\n          .subscribe((res) => {\n            if (!res.graduateMedicalEducation?.errors) {\n              this.handleAddEditGmeRotation();\n              this.updateGmeRotationSubscription?.unsubscribe();\n            }\n          });\n      }\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflicts: any, gapData: IRotationGapReadOnlyModel) {\n    this.conflictingRecords = [];\n    this.gapData = undefined;\n    const conflictRecords = [];\n    if (conflicts.previousRotation) {\n      conflictRecords.push(conflicts.previousRotation.rawData);\n    }\n    if (conflicts.nextRotation) {\n      conflictRecords.push(conflicts.nextRotation.rawData);\n    }\n\n    this.conflictingRecords = conflictRecords;\n    this.gapData = gapData;\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-button[variant='text'].btn-link::part(label) {\n  text-transform: unset !important;\n  text-decoration: underline;\n  padding: 0 0.5rem;\n}\n\n.grid {\n  position: relative;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.legend {\n  position: relative;\n  right: 0;\n  margin-left: auto;\n  text-align: right;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.clinical {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.non-clinical {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.conflict {\n      color: var(--global-danger);\n      .i {\n        background-color: var(--global-danger);\n      }\n    }\n  }\n}\n\n.table-sm {\n  font-size: 0.9rem;\n}\n\n.calendar-filter-container {\n  width: 200px;\n}\n",
          "styleUrl": "./gme-history.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 247,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<header>\n  <h1>Graduate Medical Education (GME)</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <div slot=\"header\">\n          My GME rotations\n          <span class=\"block font-normal text-base\"\n            >Date Range Covered:\n            {{ minStartDate | date : 'yyyy-MM-dd' }} through\n            {{ maxEndDate | date : 'yyyy-MM-dd' }}</span\n          >\n        </div>\n        <div class=\"grid\">\n          <div class=\"col-12 flex align-items-center gap-3\">\n            <div class=\"calendar-filter-container\">\n              <p-dropdown\n                placeholder=\"View All Rotations\"\n                [options]=\"calendarFilterOptions\"\n                id=\"calendarFilter\"\n                [group]=\"true\"\n                (onChange)=\"handleCalendarFilterChange($event)\"\n                [showClear]=\"true\"\n                appendTo=\"body\"\n              >\n                <ng-template let-group pTemplate=\"group\">\n                  <strong>{{ group.label }}</strong>\n                </ng-template>\n              </p-dropdown>\n            </div>\n\n            <p-button\n              variant=\"default\"\n              class=\"btn-add mt-2 mb-2\"\n              (click)=\"handleAddEditGmeRotation()\"\n            >\n              <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n              ADD A RECORD\n            </p-button>\n\n            <div class=\"legend inline-flex justify-content-end flex-wrap\">\n              <div class=\"l flex align-items-center clinical\">\n                <div class=\"i\"></div>\n                Clinical Activity\n              </div>\n              <div class=\"l flex align-items-center non-clinical\">\n                <div class=\"i\"></div>\n                Non-Clinical Activity\n              </div>\n              <div class=\"l flex align-items-center conflict\">\n                <div class=\"i\"></div>\n                Conflict\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-12\" *ngIf=\"calendarReady\">\n            <full-calendar\n              #calendar\n              class=\"gme-rotations-calendar\"\n              [options]=\"calendarOptions\"\n            ></full-calendar>\n          </div>\n\n          <!-- conflict alert banner -->\n          <!-- <div class=\"col-12\">\n            <abs-alert alertType=\"danger\" [fontSize]=\"1\">\n              <span class=\"font-normal\"\n                >You have a conflict - two of your rotates conflict with each\n                other. Lorem ipsum dolor iset!</span\n              >\n              <sl-button\n                class=\"btn-link\"\n                variant=\"text\"\n                (click)=\"viewConflictsToResolve(conflicts)\"\n                >View Details</sl-button\n              >\n            </abs-alert>\n          </div> -->\n        </div>\n      </sl-card>\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel\n          [panelId]=\"2\"\n          [startExpanded]=\"true\"\n          class=\"table-sm\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>GME Summary</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p>\n                The table below is a summary, by residency level, of your\n                clinical experience based on the dates you entered in the table\n                above. Columns 2 through 4 summarize the number of weeks of\n                clinical experience during each year of residency. Column 5 is a\n                total of weeks per residency year, of rotations devoted to the\n                content areas of surgery. Column 6 summarizes chief resident\n                year rotations also devoted to the content areas of surgery.\n              </p>\n              <abs-grid\n                class=\"margin-bottom-2\"\n                [columns]=\"gmeSummaryCols\"\n                [data]=\"gmeSummary$\"\n                [showGridLines]=\"false\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel\n          [panelId]=\"1\"\n          [startExpanded]=\"true\"\n          class=\"table-sm\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>Itemized GME</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p>\n                Document all GME rotations completely, without any gaps\n                throughout your training years. Your program director must\n                attest to the accuracy of your rotations, and you will be able\n                to request an attestation from your PD upon completion of this\n                section.\n              </p>\n              <p-button\n                variant=\"default\"\n                class=\"btn-add mt-4 mb-3\"\n                (click)=\"handleAddEditGmeRotation()\"\n              >\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD A RECORD\n              </p-button>\n              <abs-grid\n                [columns]=\"itemizedGmeCols\"\n                [data]=\"gmeRotations$\"\n                [gridOptions]=\"itemizedGridOptions\"\n                (action)=\"handleGridAction($event)\"\n                [pagination]=\"true\"\n                [itemsPerPage]=\"5\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n    </div>\n\n    <abs-modal\n      [open]=\"showAddEditGmeRotation\"\n      title=\"{{\n        (isEditGmeRotation$ | async) ? 'Edit' : 'Add'\n      }} Graduate Medical Education Record\"\n      modalName=\"addGmeRotation\"\n      (closeDialog)=\"handleAddEditGmeRotation()\"\n      [hideClose]=\"true\"\n      [preventOverlayClose]=\"true\"\n    >\n      <abs-gme-form\n        *ngIf=\"showAddEditGmeRotation\"\n        [formData]=\"selectedGmeRotation\"\n        [isEdit]=\"(isEditGmeRotation$ | async) || false\"\n        [picklists]=\"gmePicklistOptions\"\n        [errors$]=\"gmeErrors$\"\n        [clearErrors]=\"clearErrors\"\n        (cancelForm)=\"handleAddEditGmeRotation()\"\n        (saveForm)=\"saveGmeRotation($event)\"\n        (relaunchDialog)=\"relaunchAddEditGmeRotation($event)\"\n      ></abs-gme-form>\n    </abs-modal>\n\n    <abs-modal\n      [open]=\"showConflictResolutionModal\"\n      (closeDialog)=\"toggleConflictResolutionModal()\"\n      title=\"Resolve Conflicts\"\n      modalName=\"conflictResolutionModal\"\n      [hideClose]=\"true\"\n      [preventOverlayClose]=\"true\"\n      [width]=\"80\"\n    >\n      <abs-conflict-resolution-modal\n        [conflictingRecords]=\"conflictingRecords\"\n        [gapData]=\"gapData\"\n        (closeDialog)=\"toggleConflictResolutionModal()\"\n        (editRecord)=\"relaunchAddEditGmeRotation($event)\"\n        (addRecord)=\"handleAddGmeGapRotation($event)\"\n      >\n      </abs-conflict-resolution-modal>\n    </abs-modal>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading gme rotations...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "GraduateMedicalEducationModalComponent",
      "id": "component-GraduateMedicalEducationModalComponent-cd7b969492a6553fb193a5e4b34e54c8549aad22e36632450eaf5b7579c327660a10bda9a9c9d6250a500923a655349ada200a6d8d1a7cad941fc44ce8405f15",
      "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-graduate-medical-education-modal",
      "styleUrls": ["./graduate-medical-education-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./graduate-medical-education-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "graduateMedicalEducationCols",
          "defaultValue": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "graduateMedicalEducationData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getGraduateMedicalEducationData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { GRADUATE_MEDICAL_EDUCATION_GRID_COLS } from './graduate-medical-education-cols';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-graduate-medical-education-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, ButtonModule],\n  templateUrl: './graduate-medical-education-modal.component.html',\n  styleUrls: ['./graduate-medical-education-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GraduateMedicalEducationModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  graduateMedicalEducationCols = GRADUATE_MEDICAL_EDUCATION_GRID_COLS;\n  graduateMedicalEducationData!: any;\n\n  ngOnInit(): void {\n    this.getGraduateMedicalEducationData();\n  }\n\n  getGraduateMedicalEducationData() {\n    this.graduateMedicalEducationData = [\n      {\n        from: new Date('09/29/15'),\n        to: new Date('10/29/16'),\n        weeks: 4,\n        programName: 'AZ - University of Arizona [0017]',\n        affiliatedInstitute: '',\n        clinicalLevel: 'Clinical Level 1',\n        internationalRotation: 'No',\n      },\n    ];\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'graduateMedicalEducationModal' });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./graduate-medical-education-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"mb-5\">\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n</div>\n<p-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add a Record</span>\n</p-button>\n<abs-grid\n  [columns]=\"graduateMedicalEducationCols\"\n  [data]=\"graduateMedicalEducationData\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button type=\"button\" [style]=\"{ width: '337px' }\" variant=\"primary\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "GridComponent",
      "id": "component-GridComponent-3b0f122bdfd4ebd32d8ecd2fe90b1d920ca3a64e2fdb6247aef6405ce35154c50865b1ca512f66dec5dc56f0cc6863158fab03fa045479e490172d4a2a41e261",
      "file": "src/app/shared/components/grid/grid.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-grid",
      "styleUrls": ["./grid.component.scss"],
      "styles": [],
      "templateUrl": ["./grid.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1035,
              "end": 1059,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1036,
                "end": 1040,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1041,
                "end": 1055,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1042,
                  "end": 1054,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 1042,
                    "end": 1054,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "IGridColumns"
                  }
                }
              }
            }
          ],
          "rawdescription": "\n\nColumns to display in the grid\n",
          "description": "<p>Columns to display in the grid</p>\n",
          "line": 43,
          "type": "IGridColumns[] | any",
          "decorators": []
        },
        {
          "name": "currentPage",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2023,
              "end": 2041,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2024,
                "end": 2028,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2029,
                "end": 2037,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2030,
                  "end": 2036,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 148
                }
              }
            }
          ],
          "rawdescription": "\n\nControls current page of the grid\n",
          "description": "<p>Controls current page of the grid</p>\n",
          "line": 97,
          "type": "number",
          "decorators": []
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nData to display in the grid\n",
          "description": "<p>Data to display in the grid</p>\n",
          "line": 37,
          "type": "any",
          "decorators": []
        },
        {
          "name": "expandTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2500,
              "end": 2515,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2501,
                "end": 2505,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2506,
                "end": 2511,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2507,
                  "end": 2510,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 131
                }
              }
            }
          ],
          "rawdescription": "\n\nTemplate to display when row is expanded\n",
          "description": "<p>Template to display when row is expanded</p>\n",
          "line": 121,
          "type": "any",
          "decorators": []
        },
        {
          "name": "filterOn",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1544,
              "end": 1562,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1545,
                "end": 1549,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1550,
                "end": 1558,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1551,
                  "end": 1557,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nField to filter on\n",
          "description": "<p>Field to filter on</p>\n",
          "line": 73,
          "type": "string",
          "decorators": []
        },
        {
          "name": "filterOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1651,
              "end": 1669,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1652,
                "end": 1656,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1657,
                "end": 1665,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1658,
                  "end": 1664,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nArray of options to filter on for dropdown\n",
          "description": "<p>Array of options to filter on for dropdown</p>\n",
          "line": 79,
          "type": "any[]",
          "decorators": []
        },
        {
          "name": "filterPlaceholder",
          "defaultValue": "'Search'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1446,
              "end": 1464,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1447,
                "end": 1451,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1452,
                "end": 1460,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1453,
                  "end": 1459,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nPlaceholder for filter\n",
          "description": "<p>Placeholder for filter</p>\n",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "name": "filterType",
          "defaultValue": "'text'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nType of filter to display\n\n",
          "description": "<p>Type of filter to display</p>\n",
          "line": 61,
          "type": "\"text\" | \"dropdown\"",
          "decorators": []
        },
        {
          "name": "itemsPerPage",
          "defaultValue": "5",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2133,
              "end": 2151,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2134,
                "end": 2138,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2139,
                "end": 2147,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2140,
                  "end": 2146,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 148
                }
              }
            }
          ],
          "rawdescription": "\n\nControls how many items to display per page\n",
          "description": "<p>Controls how many items to display per page</p>\n",
          "line": 103,
          "type": "number",
          "decorators": []
        },
        {
          "name": "noFilteredResultsMessage",
          "defaultValue": "'There are no results to display.'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1770,
              "end": 1788,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1771,
                "end": 1775,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1776,
                "end": 1784,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1777,
                  "end": 1783,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nMessage when there are no filtered results\n",
          "description": "<p>Message when there are no filtered results</p>\n",
          "line": 85,
          "type": "string",
          "decorators": []
        },
        {
          "name": "noResultsMessage",
          "defaultValue": "'There are no results to display.'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2355,
              "end": 2373,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2356,
                "end": 2360,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2361,
                "end": 2369,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2362,
                  "end": 2368,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nMessage for when there are no results to display\n",
          "description": "<p>Message for when there are no results to display</p>\n",
          "line": 115,
          "type": "string",
          "decorators": []
        },
        {
          "name": "pagination",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1919,
              "end": 1938,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1920,
                "end": 1924,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1925,
                "end": 1934,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1926,
                  "end": 1933,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not to display pagination\n",
          "description": "<p>Whether or not to display pagination</p>\n",
          "line": 91,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "showFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1249,
              "end": 1268,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1250,
                "end": 1254,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1255,
                "end": 1264,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1256,
                  "end": 1263,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not to display filter\n",
          "description": "<p>Whether or not to display filter</p>\n",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "showGridLines",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2234,
              "end": 2253,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2235,
                "end": 2239,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2240,
                "end": 2249,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2241,
                  "end": 2248,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not to show grid lines\n",
          "description": "<p>Whether or not to show grid lines</p>\n",
          "line": 109,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1151,
              "end": 1169,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1152,
                "end": 1156,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1157,
                "end": 1165,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1158,
                  "end": 1164,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nTitle to display in the grid\n",
          "description": "<p>Title to display in the grid</p>\n",
          "line": 49,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "action",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nParent component action to handle\n",
          "description": "<p>Parent component action to handle</p>\n",
          "jsdoctags": [
            {
              "pos": 2602,
              "end": 2635,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 2603,
                "end": 2607,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2608,
                "end": 2631,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 2609,
                  "end": 2630,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 2609,
                    "end": 2621,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "EventEmitter"
                  },
                  "typeArguments": [
                    {
                      "pos": 2622,
                      "end": 2629,
                      "flags": 8388608,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 157
                    }
                  ]
                }
              }
            }
          ],
          "line": 127,
          "type": "EventEmitter<>"
        }
      ],
      "propertiesClass": [
        {
          "name": "AbsGridCellRendererType",
          "defaultValue": "AbsGridCellRendererType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 131
        },
        {
          "name": "filteredData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 137
        },
        {
          "name": "firstPageDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 141
        },
        {
          "name": "lastPageDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 145
        },
        {
          "name": "localData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 135
        },
        {
          "name": "nextPageDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 143
        },
        {
          "name": "pages",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number[]",
          "optional": false,
          "description": "",
          "line": 129
        },
        {
          "name": "previousPageDisabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 139
        },
        {
          "name": "searchText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 133
        }
      ],
      "methodsClass": [
        {
          "name": "changePage",
          "args": [
            {
              "name": "page",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 197,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "page",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPagedData",
          "args": [
            {
              "name": "data",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 207,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nSets the data to display in the grid\n",
          "description": "<p>Sets the data to display in the grid</p>\n",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleAction",
          "args": [
            {
              "name": "action",
              "type": "GridAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "data",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 227,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nHandles grid action\n",
          "description": "<p>Handles grid action</p>\n",
          "jsdoctags": [
            {
              "name": "action",
              "type": "GridAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "data",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleExpand",
          "args": [
            {
              "name": "action",
              "type": "GridAction",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 236,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nHandles grid expand action\n",
          "description": "<p>Handles grid expand action</p>\n",
          "jsdoctags": [
            {
              "name": "action",
              "type": "GridAction",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initPagintion",
          "args": [
            {
              "name": "data",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nInitializes pagination\n",
          "description": "<p>Initializes pagination</p>\n",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setColumnSort",
          "args": [
            {
              "name": "column",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 246,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nSets up column sorting functionality\n",
          "description": "<p>Sets up column sorting functionality</p>\n",
          "jsdoctags": [
            {
              "name": "column",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPaginationActions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 186,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nSets pagination actions\n",
          "description": "<p>Sets pagination actions</p>\n"
        },
        {
          "name": "sortColumn",
          "args": [
            {
              "name": "a",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "b",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "1 | 0 | -1",
          "typeParameters": [],
          "line": 265,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nFunctionality for sorting columns\n",
          "description": "<p>Functionality for sorting columns</p>\n",
          "jsdoctags": [
            {
              "name": "a",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "whenGridFilterChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 282,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\nHandles filter change\n",
          "description": "<p>Handles filter change</p>\n",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbsFilterType, AbsGridCellRendererType } from './abs-grid.enum';\nimport { isObservable } from 'rxjs';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { IGridColumns } from './abs-grid-col.interface';\n\ninterface GridAction {\n  data: any;\n  fieldKey: string;\n  onClick: (data: unknown) => void;\n}\n\n@Component({\n  selector: 'abs-grid',\n  standalone: true,\n  imports: [CommonModule, ButtonModule, InputTextModule, DropdownModule],\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GridComponent implements OnInit, OnChanges {\n  /**\n   * Data to display in the grid\n   */\n  @Input() data!: any;\n\n  /**\n   * Columns to display in the grid\n   * @type {IGridColumns}\n   */\n  @Input() columns!: IGridColumns[] | any;\n\n  /**\n   * Title to display in the grid\n   * @type {string}\n   */\n  @Input() title!: string;\n\n  /**\n   * Whether or not to display filter\n   * @type {boolean}\n   */\n  @Input() showFilter!: boolean;\n\n  /**\n   * Type of filter to display\n   *\n   */\n  @Input() filterType: 'text' | 'dropdown' = 'text';\n\n  /**\n   * Placeholder for filter\n   * @type {string}\n   */\n  @Input() filterPlaceholder = 'Search';\n\n  /**\n   * Field to filter on\n   * @type {string}\n   */\n  @Input() filterOn = '';\n\n  /**\n   * Array of options to filter on for dropdown\n   * @type {string}\n   */\n  @Input() filterOptions: any[] = [];\n\n  /**\n   * Message when there are no filtered results\n   * @type {string}\n   */\n  @Input() noFilteredResultsMessage = 'There are no results to display.';\n\n  /**\n   * Whether or not to display pagination\n   * @type {boolean}\n   */\n  @Input() pagination = false;\n\n  /**\n   * Controls current page of the grid\n   * @type {number}\n   */\n  @Input() currentPage = 1;\n\n  /**\n   * Controls how many items to display per page\n   * @type {number}\n   */\n  @Input() itemsPerPage = 5;\n\n  /**\n   * Whether or not to show grid lines\n   * @type {boolean}\n   */\n  @Input() showGridLines = true;\n\n  /**\n   * Message for when there are no results to display\n   * @type {string}\n   */\n  @Input() noResultsMessage = 'There are no results to display.';\n\n  /**\n   * Template to display when row is expanded\n   * @type {any}\n   */\n  @Input() expandTemplate!: any;\n\n  /**\n   * Parent component action to handle\n   * @type {EventEmitter<unknown>}\n   */\n  @Output() action: EventEmitter<unknown> = new EventEmitter();\n\n  pages: number[] = [];\n\n  AbsGridCellRendererType = AbsGridCellRendererType;\n\n  searchText!: string;\n\n  localData: Array<any> = [];\n\n  filteredData: Array<any> = [];\n\n  previousPageDisabled!: boolean;\n\n  firstPageDisabled!: boolean;\n\n  nextPageDisabled!: boolean;\n\n  lastPageDisabled!: boolean;\n\n  ngOnInit() {\n    if (isObservable(this.data)) {\n      this.data.subscribe((data: any) => {\n        this.localData = data ?? [];\n        this.filteredData = data ?? [];\n        this.initPagintion(this.localData);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!isObservable(this.data)) {\n      if (changes['data']) {\n        this.localData = changes['data'].currentValue;\n        this.filteredData = changes['data'].currentValue ?? [];\n        this.initPagintion(this.localData);\n      }\n    }\n  }\n\n  /**\n   *\n   * Initializes pagination\n   */\n\n  initPagintion(data: any[]) {\n    if (this.pagination) {\n      const total = data?.length ?? 0;\n      const pagesCount = Math.ceil(total / this.itemsPerPage);\n      this.pages = [...Array(pagesCount).keys()].map((i) => i + 1);\n\n      this.setPaginationActions();\n    }\n  }\n\n  /**\n   *\n   * Sets pagination actions\n   */\n  setPaginationActions() {\n    this.previousPageDisabled = this.currentPage === 1;\n    this.firstPageDisabled =\n      this.previousPageDisabled ||\n      this.pages.length <= 2 ||\n      this.currentPage <= 2;\n\n    this.nextPageDisabled = this.currentPage === this.pages.length;\n    this.lastPageDisabled = this.nextPageDisabled;\n  }\n\n  changePage(page: number) {\n    this.currentPage = page;\n\n    this.setPaginationActions();\n  }\n\n  /**\n   *\n   * Sets the data to display in the grid\n   */\n  getPagedData(data: any[]) {\n    let sortedData = data;\n    if (data?.length > 0) {\n      sortedData = [...data];\n      sortedData.sort(this.sortColumn.bind(this));\n    }\n    if (this.pagination) {\n      return sortedData.slice(\n        (this.currentPage - 1) * this.itemsPerPage,\n        this.currentPage * this.itemsPerPage\n      );\n    } else {\n      return sortedData;\n    }\n  }\n\n  /**\n   *\n   * Handles grid action\n   */\n  handleAction(action: GridAction, data: unknown) {\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  /**\n   *\n   * Handles grid expand action\n   */\n  handleExpand(action: GridAction, data: any) {\n    data.expanded = !data.expanded;\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  /**\n   *\n   * Sets up column sorting functionality\n   */\n  setColumnSort(column: any) {\n    this.columns.forEach((col: any) => {\n      if (col.field === column.field) {\n        col.sort =\n          column.sort === 'asc'\n            ? 'desc'\n            : column.sort === 'desc'\n            ? null\n            : 'asc';\n      } else {\n        col.sort = null;\n      }\n    });\n  }\n\n  /**\n   *\n   * Functionality for sorting columns\n   */\n  sortColumn(a: any, b: any) {\n    const sortColumn = this.columns?.find((col: any) => col.sort);\n    if (sortColumn) {\n      if (sortColumn.sort === 'asc') {\n        return a[sortColumn.fieldName] > b[sortColumn.fieldName] ? 1 : -1;\n      } else {\n        return a[sortColumn.fieldName] < b[sortColumn.fieldName] ? 1 : -1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   *\n   * Handles filter change\n   */\n  whenGridFilterChange($event: any) {\n    const value =\n      this.filterType === AbsFilterType.Text\n        ? $event?.target.value\n        : $event?.value?.value;\n\n    this.filteredData = this.localData.filter((item: any) =>\n      item[this.filterOn].toLowerCase().includes(value?.toLowerCase() ?? '')\n    );\n\n    if (this.pagination) {\n      this.initPagintion(this.filteredData);\n      this.changePage(1);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".grid {\n  margin-top: 2rem;\n}\n.abs-grid-container {\n  overflow-x: auto;\n  padding: 0 0.5rem;\n  background-color: var(--global-table-background);\n\n  &::-webkit-scrollbar {\n    height: 0.65rem;\n  }\n  &::-webkit-scrollbar-track {\n    background: var(--global-warning-lighten-60);\n  }\n  &::-webkit-scrollbar-thumb {\n    background: var(--global-warning);\n    &:hover {\n      background: var(--global-warning-darken-20);\n    }\n  }\n}\n\n.bg-gray {\n  overflow-x: auto;\n}\n\n.pagination,\n.bg-gray,\ntable {\n  background-color: var(--global-table-background);\n}\n\n.pagination {\n  padding: 1.5rem 0.5rem 0.75rem;\n  .active {\n    color: var(--global-warning);\n    font-weight: bold;\n    cursor: unset;\n  }\n  button:disabled {\n    color: var(--global-gray);\n    cursor: initial;\n  }\n}\n\ntable {\n  width: 100%;\n  text-align: left;\n  border-collapse: collapse;\n  border-radius: 6px;\n  margin-top: 1rem;\n  &.no-grid-lines {\n    border-spacing: 0px;\n  }\n  thead {\n    position: relative;\n    border-bottom: 1px solid black;\n  }\n  th,\n  td {\n    padding: 15px;\n    min-width: 50px;\n  }\n  tr {\n    //figure out how to use nth-of-type(even) to skip expanded rows\n    position: relative;\n    &.alternate-row {\n      background-color: #fff;\n    }\n    // &:nth-child(even) {\n    //   background-color: #fff;\n    // }\n  }\n  td {\n    .action,\n    .expand-toggle {\n      text-align: right;\n    }\n    .prime-button {\n      width: 100%;\n      display: flex;\n      justify-content: end;\n    }\n  }\n}\n\nbutton {\n  background: none;\n  border: none;\n  font-size: 1rem;\n  text-transform: capitalize;\n  font-weight: 500;\n  cursor: pointer;\n  color: var(--global-success);\n  transition: 250ms ease-in-out;\n  &:hover {\n    color: var(--global-warning);\n  }\n  &.file-link {\n    text-transform: none;\n  }\n}\n\n.search-container {\n  position: relative;\n  i {\n    position: absolute;\n    color: var(--global-warning);\n    font-size: 20px;\n    right: 10px;\n    top: 10px;\n  }\n}\n\nsl-input {\n  margin-bottom: 1rem;\n  &::part(input) {\n    padding-right: 40px;\n  }\n}\n\n.requested {\n  color: var(--global-warning);\n  font-weight: bold;\n}\n.approved,\n.completed {\n  color: var(--global-success);\n  font-weight: bold;\n}\n\n.failed,\n.incomplete {\n  color: var(--global-danger);\n  font-weight: bold;\n}\n.passed {\n  color: var(--global-success);\n  font-weight: bold;\n}\n",
          "styleUrl": "./grid.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<div class=\"abs-grid\">\n  <div class=\"flex justify-content-between\" *ngIf=\"title || showFilter\">\n    <h4>{{ title }}</h4>\n    <div class=\"search-container mb-3\" *ngIf=\"showFilter\">\n      <div class=\"text-search\" *ngIf=\"filterType === 'text'\">\n        <input\n          type=\"text\"\n          pInputText\n          [placeholder]=\"filterPlaceholder\"\n          (keyup)=\"whenGridFilterChange($event)\"\n        />\n        <i class=\"fa-solid fa-search\"></i>\n      </div>\n      <div class=\"dropdown-search\" *ngIf=\"filterType === 'dropdown'\">\n        <p-dropdown\n          [options]=\"filterOptions\"\n          [placeholder]=\"filterPlaceholder\"\n          (onChange)=\"whenGridFilterChange($event)\"\n          [optionLabel]=\"'label'\"\n          [showClear]=\"true\"\n          [style]=\"{ minWidth: '237px' }\"\n        >\n        </p-dropdown>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"abs-grid-container\">\n    <table class=\"abs-table {{ showGridLines ? '' : 'no-grid-lines' }}\">\n      <thead>\n        <tr>\n          <th\n            *ngFor=\"let c of columns\"\n            [style.max-width]=\"c.width + 'px'\"\n            [style.min-width]=\"c.width ? 'unset' : ''\"\n          >\n            <div\n              class=\"flex justify-content-between\"\n              *ngIf=\"\n                c.cellRenderer !== AbsGridCellRendererType.Button &&\n                c.cellRenderer !== AbsGridCellRendererType.PrimeButton &&\n                c.cellRenderer !== AbsGridCellRendererType.ExpandToggle\n              \"\n            >\n              <span>{{ c.headerName }}</span>\n              <button\n                (click)=\"setColumnSort(c)\"\n                class=\"pl-1 pr-0\"\n                *ngIf=\"c.sortable\"\n              >\n                <i class=\"fa-solid fa-sort\" *ngIf=\"!c.sort\"></i>\n                <i class=\"fa-solid fa-sort-up\" *ngIf=\"c.sort === 'asc'\"></i>\n                <i class=\"fa-solid fa-sort-down\" *ngIf=\"c.sort === 'desc'\"></i>\n              </button>\n            </div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-container\n          *ngFor=\"let r of getPagedData(filteredData); let i = index\"\n        >\n          <tr\n            class=\"{{ r.rowClass }}\"\n            [ngClass]=\"{ 'alternate-row': i % 2 === 1 }\"\n            [ngStyle]=\"r.rowStyle\"\n          >\n            <td\n              *ngFor=\"let c of columns\"\n              class=\"abs-grid-col\"\n              [style.max-width]=\"c.width + 'px'\"\n              [style.min-width]=\"c.width ? 'unset' : ''\"\n            >\n              <div *ngIf=\"!c.cellRenderer\">\n                {{ r[c.fieldName] }}\n              </div>\n              <div *ngIf=\"c.cellRenderer === AbsGridCellRendererType.YesNo\">\n                {{ r[c.fieldName] ? 'Yes' : 'No' }}\n              </div>\n              <div\n                *ngIf=\"\n                  (c.cellRenderer === AbsGridCellRendererType.Button &&\n                    r[c.fieldName]) ||\n                  (c.cellRenderer === AbsGridCellRendererType.Button &&\n                    c.fieldName.toLowerCase() === c.headerName.toLowerCase())\n                \"\n                class=\"action\"\n              >\n                <button (click)=\"handleAction(c.cellRendererParams, r)\">\n                  <i [class]=\"c.icon\" *ngIf=\"c.icon\"></i>\n                  {{ c.headerName }}\n                </button>\n              </div>\n\n              <div\n                *ngIf=\"\n                  c.cellRenderer === AbsGridCellRendererType.ConditionalButton\n                \"\n                class=\"action\"\n              >\n                <button\n                  (click)=\"handleAction(c.cellRendererParams, r)\"\n                  *ngIf=\"r[c.fieldName]\"\n                >\n                  <i [class]=\"c.icon\" *ngIf=\"c.icon\"></i>\n                  {{ c.headerName }}\n                </button>\n              </div>\n\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.PrimeButton\"\n                class=\"action\"\n              >\n                <p-button\n                  [label]=\"c.headerName\"\n                  [icon]=\"c.icon ?? ''\"\n                  [styleClass]=\"c.buttonClass ?? ''\"\n                  class=\"prime-button\"\n                  [style]=\"{ width: c.width + 'px' }\"\n                  (onClick)=\"handleAction(c.cellRendererParams, r)\"\n                ></p-button>\n              </div>\n\n              <div *ngIf=\"c.cellRenderer === AbsGridCellRendererType.FileLink\">\n                <button\n                  class=\"file-link\"\n                  (click)=\"handleAction(c.cellRendererParams, r)\"\n                >\n                  <!-- TODO: [Joe] need to check what file types we are supporting and ensure that there are font awesome icons for all of them -->\n                  <i\n                    [class]=\"'fa-solid fa-file-' + r[c.fileType]\"\n                    *ngIf=\"c.fileType\"\n                  ></i>\n                  <i class=\"fa-solid fa-file\" *ngIf=\"!c.fileType\"></i>\n                  {{ r[c.fieldName] }}\n                </button>\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.DateFormatter\"\n                [class]=\"c.cellClass\"\n              >\n                {{ r[c.fieldName] | date : 'MM/dd/yyyy' }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.CustomClass\"\n                [class]=\"c.cellClass(r[c.fieldName]).toLowerCase()\"\n              >\n                {{ r[c.fieldName] }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.CustomStyle\"\n                [style]=\"c.style(r[c.fieldName])\"\n              >\n                {{ c.cellStyle }}\n                {{ r[c.fieldName] }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.ExpandToggle\"\n                class=\"expand-toggle\"\n              >\n                <button\n                  (click)=\"handleExpand(c.cellRendererParams, r)\"\n                  style=\"min-width: 95px\"\n                >\n                  <i class=\"fa-solid fa-circle-minus\" *ngIf=\"r.expanded\"></i>\n                  <i class=\"fa-solid fa-circle-plus\" *ngIf=\"!r.expanded\"></i>\n                  {{ r.expanded ? 'Collapse' : 'Expand' }}\n                </button>\n              </div>\n            </td>\n          </tr>\n          <tr\n            [ngClass]=\"{ 'expanded-row': true, 'alternate-row': i % 2 === 1 }\"\n            *ngIf=\"expandTemplate && r.expanded\"\n          >\n            <!-- <ng-container *ngTemplateOutlet=\"expandTemplate; context: { $implicit: r }\"></ng-container> -->\n            <td [attr.colspan]=\"columns.length\">\n              <ng-container\n                *ngTemplateOutlet=\"expandTemplate; context: { $implicit: r }\"\n              ></ng-container>\n            </td>\n          </tr>\n        </ng-container>\n        <tr *ngIf=\"!filteredData || filteredData.length <= 0\">\n          <td colspan=\"100%\" class=\"text-center\">\n            <div class=\"no-data font-italic\">\n              <span *ngIf=\"!localData || localData.length <= 0\">{{\n                noResultsMessage\n              }}</span>\n              <span *ngIf=\"localData && localData.length > 0\">{{\n                noFilteredResultsMessage\n              }}</span>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div\n    class=\"pagination flex justify-content-end\"\n    *ngIf=\"pagination && pages.length > 1\"\n  >\n    <div>\n      <button [disabled]=\"firstPageDisabled\" (click)=\"changePage(1)\">\n        <i class=\"fa-solid fa-angles-left\"></i>\n      </button>\n      <button\n        [disabled]=\"previousPageDisabled\"\n        (click)=\"changePage(currentPage - 1)\"\n      >\n        <i class=\"fa-solid fa-angle-left\"></i>\n      </button>\n      <button\n        *ngFor=\"let p of pages\"\n        [class.active]=\"p === currentPage\"\n        (click)=\"changePage(p)\"\n      >\n        {{ p }}\n      </button>\n      <button\n        [disabled]=\"nextPageDisabled\"\n        (click)=\"changePage(currentPage + 1)\"\n      >\n        <i class=\"fa-solid fa-angle-right\"></i>\n      </button>\n      <button [disabled]=\"lastPageDisabled\" (click)=\"changePage(pages.length)\">\n        <i class=\"fa-solid fa-angles-right\"></i>\n      </button>\n    </div>\n  </div>\n  <div class=\"bg-gray\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
    },
    {
      "name": "HighlightCardComponent",
      "id": "component-HighlightCardComponent-51eecbaea38e119a26e2e1fa9381129c1bc755bd15b2ffc23feb8d5d7b760ed8472defcd6ec1af57bc7a741cdabaaa39b2f21278bbf706f5d7162d8782d86899",
      "file": "src/app/shared/components/highlight-card/highlight-card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-highlight-card",
      "styleUrls": ["./highlight-card.component.scss"],
      "styles": [],
      "templateUrl": ["./highlight-card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "actionAction",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1209,
              "end": 1227,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1210,
                "end": 1214,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1215,
                "end": 1223,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1216,
                  "end": 1222,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nAction to perform on click\n",
          "description": "<p>Action to perform on click</p>\n",
          "line": 54,
          "type": "string",
          "decorators": []
        },
        {
          "name": "actionText",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 978,
              "end": 996,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 979,
                "end": 983,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 984,
                "end": 992,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 985,
                  "end": 991,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nAction text to display in the card\n",
          "description": "<p>Action text to display in the card</p>\n",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "actionType",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1083,
              "end": 1101,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1084,
                "end": 1088,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1089,
                "end": 1097,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1090,
                  "end": 1096,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nType of action to perform on click\n",
          "description": "<p>Type of action to perform on click</p>\n",
          "line": 48,
          "type": "\"action\" | \"download\" | \"component\"",
          "decorators": []
        },
        {
          "name": "alert",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 878,
              "end": 897,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 879,
                "end": 883,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 884,
                "end": 893,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 885,
                  "end": 892,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 134
                }
              }
            }
          ],
          "rawdescription": "\n\nWhether or not the card is an alert\n",
          "description": "<p>Whether or not the card is an alert</p>\n",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 681,
              "end": 699,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 682,
                "end": 686,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 687,
                "end": 695,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 688,
                  "end": 694,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nContent to display in the card\n",
          "description": "<p>Content to display in the card</p>\n",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "documentId",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1305,
              "end": 1323,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1306,
                "end": 1310,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1311,
                "end": 1319,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1312,
                  "end": 1318,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nDocument id to download\n",
          "description": "<p>Document id to download</p>\n",
          "line": 60,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "documentName",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1412,
              "end": 1430,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1413,
                "end": 1417,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1418,
                "end": 1426,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1419,
                  "end": 1425,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nDocument name to download\n",
          "description": "<p>Document name to download</p>\n",
          "line": 66,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "image",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 777,
              "end": 795,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 778,
                "end": 782,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 783,
                "end": 791,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 784,
                  "end": 790,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nImage to display in the card\n",
          "description": "<p>Image to display in the card</p>\n",
          "line": 30,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 585,
              "end": 603,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 586,
                "end": 590,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 591,
                "end": 599,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 592,
                  "end": 598,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\nTitle to display in the card\n",
          "description": "<p>Title to display in the card</p>\n",
          "line": 18,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "action",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAction to emit when clicked\n",
          "description": "<p>Action to emit when clicked</p>\n",
          "jsdoctags": [
            {
              "pos": 1523,
              "end": 1552,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 1524,
                "end": 1528,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1529,
                "end": 1548,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 1530,
                  "end": 1547,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 1530,
                    "end": 1542,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "EventEmitter"
                  },
                  "typeArguments": [
                    {
                      "pos": 1543,
                      "end": 1546,
                      "flags": 8388608,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 131
                    }
                  ]
                }
              }
            }
          ],
          "line": 72,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "alertClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "imageStyleUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 74
        }
      ],
      "methodsClass": [
        {
          "name": "buildImageStyleUrl",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleCardAction",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setAlertClass",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'abs-highlight-card',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './highlight-card.component.html',\n  styleUrls: ['./highlight-card.component.scss'],\n})\nexport class HighlightCardComponent implements OnInit {\n  /**\n   * Title to display in the card\n   * @type {string}\n   */\n  @Input() title!: string;\n\n  /**\n   * Content to display in the card\n   * @type {string}\n   */\n  @Input() content!: string;\n\n  /**\n   * Image to display in the card\n   * @type {string}\n   */\n  @Input() image!: string;\n\n  /**\n   * Whether or not the card is an alert\n   * @type {boolean}\n   */\n  @Input() alert = false;\n\n  /**\n   * Action text to display in the card\n   * @type {string}\n   */\n  @Input() actionText!: string;\n\n  /**\n   * Type of action to perform on click\n   * @type {string}\n   */\n  @Input() actionType!: 'action' | 'download' | 'component';\n\n  /**\n   * Action to perform on click\n   * @type {string}\n   */\n  @Input() actionAction!: string;\n\n  /**\n   * Document id to download\n   * @type {string}\n   */\n  @Input() documentId: string | undefined;\n\n  /**\n   * Document name to download\n   * @type {string}\n   */\n  @Input() documentName: string | undefined;\n\n  /**\n   * Action to emit when clicked\n   * @type {EventEmitter<any>}\n   */\n  @Output() action: EventEmitter<any> = new EventEmitter();\n\n  imageStyleUrl!: string;\n  alertClass!: string;\n\n  constructor(private _router: Router) {}\n\n  ngOnInit(): void {\n    this.buildImageStyleUrl();\n    this.setAlertClass();\n  }\n\n  buildImageStyleUrl() {\n    this.imageStyleUrl = `background-image:url(${this.image ?? ''})`;\n  }\n\n  setAlertClass() {\n    this.alertClass = `highlight-card ${this.alert ? 'alert' : ''}`;\n  }\n\n  handleCardAction(action: string) {\n    if (action === 'download') {\n      this.action.emit({\n        documentId: this.documentId,\n        documentName: this.documentName,\n      });\n    } else {\n      this.action.emit(action);\n    }\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".highlight-card {\n  background-color: #e5eff1;\n  border-radius: 6px;\n  position: relative;\n  display: flex;\n  height: 100%;\n  position: relative;\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .title {\n      color: var(--global-danger);\n    }\n  }\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  .alert-title,\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n  .img-container {\n    width: 27.75rem;\n    height: 100%;\n    background-size: cover;\n    background-repeat: no-repeat;\n    border-radius: 6px 0 0 6px;\n  }\n  .highlight-content {\n    padding: 3rem 1.5rem;\n    .content {\n      line-height: 23px;\n      width: 100%;\n    }\n    .card-action {\n      margin-top: auto;\n      padding-top: 0.25rem;\n      color: var(--global-success);\n      font-weight: bold;\n      width: 100%;\n      font-size: 1.15rem;\n    }\n  }\n}\n",
          "styleUrl": "./highlight-card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 75,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "router": {
          "name": "router",
          "getSignature": {
            "name": "router",
            "type": "",
            "returnType": "Router",
            "line": 103
          }
        }
      },
      "templateData": "<div [class]=\"alertClass\">\n  <a\n    class=\"hotspot\"\n    *ngIf=\"actionType === 'component'\"\n    [routerLink]=\"actionAction\"\n  ></a>\n  <button\n    class=\"hotspot\"\n    (click)=\"handleCardAction(actionType)\"\n    download\n    *ngIf=\"actionType === 'action' || actionType === 'download'\"\n  ></button>\n  <div class=\"flex col-12\">\n    <div *ngIf=\"image\" class=\"img-container\" [style]=\"imageStyleUrl\"></div>\n    <div class=\"highlight-content col-8 flex align-items-center\">\n      <div>\n        <div class=\"title\">{{ title }}</div>\n        <div class=\"content\" [innerHTML]=\"content\"></div>\n        <div class=\"card-action\" *ngIf=\"actionText\">\n          {{ actionText }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "InputCheckboxComponent",
      "id": "component-InputCheckboxComponent-06136c7078dd93ee8527eeb81832b96e1d9233b49eda6504cc878f6b39aeb54c2ee8e74259860a6b1c07caac1aff14219b7e185a331087043fa057b6cef820cd",
      "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "MakeProvider(InputCheckboxComponent)",
          "type": "component"
        }
      ],
      "selector": "abs-input-checkbox",
      "styleUrls": [],
      "styles": [],
      "template": "<sl-checkbox\n  #checkbox\n  [name]=\"name\"\n  [value]=\"_value\"\n  [size]=\"size\"\n  [disabled]=\"disabled\"\n  [checked]=\"checked\"\n  [defaultChecked]=\"defaultChecked\"\n  [indeterminate]=\"indeterminate\"\n  [form]=\"form\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n  ><ng-content></ng-content\n></sl-checkbox>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "defaultChecked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "form",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 102,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "_defaultChecked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "_indeterminate",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "_value",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "checkbox",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'checkbox'"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 115
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118
        }
      ],
      "methodsClass": [
        {
          "name": "mapChangeEvent",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "e",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "e",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-checkbox',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-checkbox\n      #checkbox\n      [name]=\"name\"\n      [value]=\"_value\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [checked]=\"checked\"\n      [defaultChecked]=\"defaultChecked\"\n      [indeterminate]=\"indeterminate\"\n      [form]=\"form\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n      ><ng-content></ng-content\n    ></sl-checkbox>\n  `,\n  providers: [MakeProvider(InputCheckboxComponent)],\n})\nexport class InputCheckboxComponent implements ControlValueAccessor {\n  @ViewChild('checkbox') checkbox: any;\n\n  @Input() name: string | undefined;\n  @Input() form = '';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value = false;\n  _disabled: boolean | string = false;\n  _checked: boolean | string = false;\n  _defaultChecked: boolean | string = false;\n  _indeterminate: boolean | string = false;\n  _required: boolean | string = false;\n\n  @Input()\n  get value(): boolean {\n    return this._value;\n  }\n  set value(value: boolean) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n  @Input()\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  set disabled(value: boolean | string) {\n    this._disabled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get checked(): boolean | string {\n    return this._checked;\n  }\n  set checked(value: boolean | string) {\n    this._checked = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get defaultChecked(): boolean | string {\n    return this._defaultChecked;\n  }\n  set defaultChecked(value: boolean | string) {\n    this._defaultChecked = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get indeterminate(): boolean | string {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean | string) {\n    this._indeterminate = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  writeValue(value: any) {\n    this._value = this.checked = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  onChange = (e: any) => {\n    // console.log('checkbox onChange', e);\n  };\n  onTouched = () => {\n    // console.log('checkbox onTouched');\n  };\n  registerOnChange(fn: (e: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the Shoelace input work with Angular forms\n  mapChangeEvent($event: any) {\n    this.value = this.checked = !this.value;\n  }\n}\n\n/*\nSHOELACE CHECKBOX API\nAttributes & Properties\nName\tDescription\tReflects\tType\tDefault\nname\tThe name of the checkbox, submitted as a name/value pair with form data.\t\tstring\t''\nvalue\tThe current value of the checkbox, submitted as a name/value pair with form data.\t\tstring\t-\nsize\tThe checkbox's size.\t\t'small' | 'medium' | 'large'\t'medium'\ndisabled\tDisables the checkbox.\t\tboolean\tfalse\nchecked\tDraws the checkbox in a checked state.\t\tboolean\tfalse\nindeterminate\tDraws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select all/none\" behavior when associated checkboxes have a mix of checked and unchecked states.\t\tboolean\tfalse\ndefaultChecked\n(property only)\tThe default value of the form control. Primarily used for resetting the form control.\t\tboolean\tfalse\nform\tBy default, form controls are associated with the nearest containing <form> element. This attribute allows you to place the form control outside of a form and associate it with the form that has this id. The form must be in the same document or shadow root for this to work.\t\tstring\t''\nrequired\tMakes the checkbox a required field.\t\tboolean\tfalse\nvalidity\n(property only)\tGets the validity state object\t\t-\t-\nvalidationMessage\n(property only)\tGets the validation message\t\t-\t-\nupdateComplete\tA read-only promise that resolves when the component has finished updating.\nLearn more about attributes and properties.\n\nEvents\nName\tDescription\tEvent Detail\nsl-blur\tEmitted when the checkbox loses focus.\t-\nsl-change\tEmitted when the checked state changes.\t-\nsl-focus\tEmitted when the checkbox gains focus.\t-\nsl-input\tEmitted when the checkbox receives input.\t-\nsl-invalid\tEmitted when the form control has been checked for validity and its constraints aren't satisfied.\t-\nLearn more about listening to events.\n\nMethods\nName\tDescription\tArguments\nclick()\tSimulates a click on the checkbox.\t-\nfocus()\tSets focus on the checkbox.\noptions: FocusOptions\n\nblur()\tRemoves focus from the checkbox.\t-\ncheckValidity()\tChecks for validity but does not show a validation message. Returns true when valid and false when invalid.\t-\ngetForm()\tGets the associated form, if one exists.\t-\nreportValidity()\tChecks for validity and shows the browser's validation message if the control is invalid.\t-\nsetCustomValidity()\tSets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear the custom validation message, call this method with an empty string.\nmessage: string\n */\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "boolean",
            "returnType": "boolean",
            "line": 62
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "boolean | string",
            "line": 72
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "",
            "returnType": "boolean | string",
            "line": 79
          }
        },
        "defaultChecked": {
          "name": "defaultChecked",
          "setSignature": {
            "name": "defaultChecked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 90,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "defaultChecked",
            "type": "",
            "returnType": "boolean | string",
            "line": 87
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 98,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "",
            "returnType": "boolean | string",
            "line": 95
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 105,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "boolean | string",
            "line": 102
          }
        }
      }
    },
    {
      "name": "InputRadioGroupComponent",
      "id": "component-InputRadioGroupComponent-fd27e028a0f263a21a72c9d79d902346545d46204363498ed664c1a29bedc5df5950f8725b0936239013ff4f665bf6408b33e115250787360a8c38d9bf79011f",
      "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "MakeProvider(InputRadioGroupComponent)",
          "type": "component"
        }
      ],
      "selector": "abs-input-radio-group",
      "styleUrls": [],
      "styles": [],
      "template": "<sl-radio-group\n  [name]=\"name\"\n  [label]=\"label\"\n  [value]=\"value\"\n  [size]=\"size\"\n  [form]=\"form\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n>\n  <ng-content></ng-content>\n</sl-radio-group>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "form",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "_value",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "radioGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'radioGroup'"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "mapChangeEvent",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "e",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "e",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\n// This makes the component into a form control by forwarding the value accessor\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-radio-group',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-radio-group\n      [name]=\"name\"\n      [label]=\"label\"\n      [value]=\"value\"\n      [size]=\"size\"\n      [form]=\"form\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n    >\n      <ng-content></ng-content>\n    </sl-radio-group>\n  `,\n  providers: [MakeProvider(InputRadioGroupComponent)], // Super important\n})\nexport class InputRadioGroupComponent implements ControlValueAccessor {\n  @ViewChild('radioGroup') radioGroup: any;\n\n  // Implement the API for the specific form control.\n  @Input() name: string | undefined;\n  @Input() label = '';\n  @Input() form = '';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value: any = '';\n  _required: boolean | string = false;\n  @Input()\n  get value(): string | undefined {\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n\n  // For attributes that can have a shorthand, get/set functions are needed\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  // This method is fired when the control is initially written by the form\n  // control. This is where you want to write the initial value to the\n  // component.\n  // This mainly made a big difference for checkboxes and radio buttons\n  writeValue(value: any) {\n    this._value = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  // Some of these are left empty but are here to satisfy the interface...\n  // I think\n  onChange = (e: any) => {\n    // console.log('onChange');\n  };\n  onTouched = () => {\n    // console.log('onTouched');\n  };\n  // Very important\n  registerOnChange(fn: (e: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the input work with Angular forms\n  // It is basically a listener for the sl-change event to do what is needed for the\n  // form.\n  mapChangeEvent($event: any) {\n    const target = $event.target as HTMLSelectElement;\n    this.value = target.value;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | undefined",
            "line": 57
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "boolean | string",
            "line": 69
          }
        }
      }
    },
    {
      "name": "InputSelectComponent",
      "id": "component-InputSelectComponent-51ad9b3500c54ca2fabb5c22d27dbcd80cb55ea565246503f707129974fc45f1cf097e3c7240ef81c8a04cd79d0b79670b8dff920537d73568f987a5d101f68e",
      "file": "src/app/shared/components/base-input/input-select.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "MakeProvider(InputSelectComponent)",
          "type": "component"
        }
      ],
      "selector": "abs-input-select",
      "styleUrls": [],
      "styles": [],
      "template": "<sl-select\n  [name]=\"name\"\n  [placeholder]=\"placeholder\"\n  [label]=\"label\"\n  [value]=\"value\"\n  [size]=\"size\"\n  [multiple]=\"multiple\"\n  [open]=\"open\"\n  [hoist]=\"hoist\"\n  [form]=\"form\"\n  [clearable]=\"clearable\"\n  [disabled]=\"disabled\"\n  [helpText]=\"helpText\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n>\n  <ng-content></ng-content>\n</sl-select>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 113,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "displaytext",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "filled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 128,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "form",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "name": "helpText",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "string",
          "decorators": []
        },
        {
          "name": "hoist",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 105,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "string",
          "decorators": []
        },
        {
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "open",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "pill",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 135,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "placement",
          "defaultValue": "'bottom'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "\"top\" | \"bottom\"",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 120,
          "type": "boolean | string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_clearable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "_filled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "_hoist",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "_multiple",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "_open",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "_pill",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | string",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "_value",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 148
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 151
        }
      ],
      "methodsClass": [
        {
          "name": "mapChangeEvent",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 162,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "_",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "_",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": []
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-select',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-select\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [label]=\"label\"\n      [value]=\"value\"\n      [size]=\"size\"\n      [multiple]=\"multiple\"\n      [open]=\"open\"\n      [hoist]=\"hoist\"\n      [form]=\"form\"\n      [clearable]=\"clearable\"\n      [disabled]=\"disabled\"\n      [helpText]=\"helpText\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n    >\n      <ng-content></ng-content>\n    </sl-select>\n  `,\n  providers: [MakeProvider(InputSelectComponent)],\n})\nexport class InputSelectComponent implements ControlValueAccessor {\n  @Input() name: string | undefined;\n  @Input() label = '';\n  @Input() placeholder: string | undefined;\n  @Input() displaytext: string | undefined;\n  @Input() helpText = '';\n  @Input() form = '';\n  @Input() placement: 'top' | 'bottom' = 'bottom';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value: any = '';\n  _disabled: boolean | string = false;\n  _open: boolean | string = false;\n  _hoist: boolean | string = false;\n  _filled: boolean | string = false;\n  _pill: boolean | string = false;\n  _multiple: boolean | string = false;\n  _clearable: boolean | string = false;\n  _required: boolean | string = false;\n  @Input()\n  get value(): string | undefined {\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n  @Input()\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  set disabled(value: boolean | string) {\n    this._disabled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get multiple(): boolean | string {\n    return this._multiple;\n  }\n  set multiple(value: boolean | string) {\n    this._multiple = value === '' || (value && value !== 'false');\n  }\n\n  // TODO: <Alan> this currently does set the component to the open state,\n  //  however the selects in the ng-content are not opened. Explore\n  @Input()\n  get open(): boolean | string {\n    return this._open;\n  }\n  set open(value: boolean | string) {\n    this._open = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get hoist(): boolean | string {\n    return this._hoist;\n  }\n  set hoist(value: boolean | string) {\n    this._hoist = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get clearable(): boolean | string {\n    return this._clearable;\n  }\n  set clearable(value: boolean | string) {\n    this._clearable = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get filled(): boolean | string {\n    return this._filled;\n  }\n  set filled(value: boolean | string) {\n    this._filled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get pill(): boolean | string {\n    return this._pill;\n  }\n  set pill(value: boolean | string) {\n    this._pill = value === '' || (value && value !== 'false');\n  }\n\n  writeValue(value: any) {\n    this._value = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  onChange = (_: any) => {\n    // console.log('onChange');\n  };\n  onTouched = () => {\n    // console.log('onTouched');\n  };\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the Shoelace input work with Angular forms\n  mapChangeEvent($event: any) {\n    const target = $event.target as HTMLSelectElement;\n    this.value = target.value;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | undefined",
            "line": 70
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "boolean | string",
            "line": 80
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 90,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "",
            "returnType": "boolean | string",
            "line": 87
          }
        },
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 100,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "",
            "returnType": "boolean | string",
            "line": 97
          }
        },
        "hoist": {
          "name": "hoist",
          "setSignature": {
            "name": "hoist",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 108,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hoist",
            "type": "",
            "returnType": "boolean | string",
            "line": 105
          }
        },
        "clearable": {
          "name": "clearable",
          "setSignature": {
            "name": "clearable",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 116,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clearable",
            "type": "",
            "returnType": "boolean | string",
            "line": 113
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 123,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "boolean | string",
            "line": 120
          }
        },
        "filled": {
          "name": "filled",
          "setSignature": {
            "name": "filled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 131,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "filled",
            "type": "",
            "returnType": "boolean | string",
            "line": 128
          }
        },
        "pill": {
          "name": "pill",
          "setSignature": {
            "name": "pill",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 138,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pill",
            "type": "",
            "returnType": "boolean | string",
            "line": 135
          }
        }
      }
    },
    {
      "name": "LegendComponent",
      "id": "component-LegendComponent-7456c08b51d77d4aca4de3faaf124d02a81182dc03eaa814fc9087f6c73fffab1f8a8b044eb9c3020652fe26bf04b92975a6d2ef5572e2b30774b07e1774acba",
      "file": "src/app/shared/components/legend/legend.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-legend",
      "styleUrls": ["./legend.component.scss"],
      "styles": [],
      "templateUrl": ["./legend.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "legendItems",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 385,
              "end": 408,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 386,
                "end": 390,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 391,
                "end": 402,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 392,
                  "end": 401,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 185,
                  "elementType": {
                    "pos": 392,
                    "end": 399,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 1,
                    "kind": 180,
                    "typeName": {
                      "pos": 392,
                      "end": 399,
                      "flags": 8388608,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "ILegend"
                    }
                  }
                }
              }
            },
            {
              "pos": 408,
              "end": 439,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 330,
              "tagName": {
                "pos": 409,
                "end": 417,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "memberof"
              },
              "comment": "<p>LegendComponent</p>\n"
            },
            {
              "pos": 439,
              "end": 542,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 330,
              "tagName": {
                "pos": 440,
                "end": 447,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "example"
              },
              "comment": "<p>legendItems = [\n{\n text: &#39;Legend Item 1&#39;,\n  color: &#39;#000000&#39;,\n },</p>\n"
            }
          ],
          "rawdescription": "\n\nLegend items to display\n```html\nlegendItems = [\n{\n text: 'Legend Item 1',\n  color: '#000000',\n },\n```",
          "description": "<p>Legend items to display</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">legendItems = [\n{\n text: &#39;Legend Item 1&#39;,\n  color: &#39;#000000&#39;,\n },</code></pre></div>",
          "line": 24,
          "type": "ILegend[]",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ILegend } from './legend.model';\n\n@Component({\n  selector: 'abs-legend',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './legend.component.html',\n  styleUrls: ['./legend.component.scss'],\n})\nexport class LegendComponent {\n  /**\n   * Legend items to display\n   * @type {ILegend[]}\n   * @memberof LegendComponent\n   * @example\n   * legendItems = [\n   * {\n   *  text: 'Legend Item 1',\n   *   color: '#000000',\n   *  },\n   */\n  @Input() legendItems!: ILegend[];\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".legend {\n  margin-top: 1.5rem;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.completed {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.in-progress {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.contingent {\n      color: var(--global-gray);\n      .i {\n        background-color: vvar(--global-gray);\n      }\n    }\n  }\n}\n",
          "styleUrl": "./legend.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"legend flex flex-wrap\">\n  <div\n    *ngFor=\"let legend of legendItems\"\n    class=\"l flex align-items-center\"\n    [style.color]=\"legend?.color\"\n  >\n    <div class=\"i\" [style.backgroundColor]=\"legend?.color\"></div>\n    {{ legend?.text }}\n  </div>\n</div>\n"
    },
    {
      "name": "LicenseFormComponent",
      "id": "component-LicenseFormComponent-967c5de1cb735a98c4829ef4411860a46e9b7c375558c75b40c7fa851c6ca216f0bf62de831eef51702e1affe5f00bb2a7b191912e8b358bf934c878c3405839",
      "file": "src/app/professional-standing/license-form/license-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-license-form",
      "styleUrls": ["./license-form.component.scss"],
      "styles": [],
      "templateUrl": ["./license-form.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "any",
          "decorators": []
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "Observable<any> | undefined",
          "decorators": []
        },
        {
          "name": "formData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "any",
          "decorators": []
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "picklists",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "localEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "medicalLicenseForm",
          "defaultValue": "new FormGroup({\n    issuingStateId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    licenseNumber: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    licenseTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    issueDate: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    expireDate: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "optionLists",
          "defaultValue": "{\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "originalFormValues",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 59
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFormValues",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { CalendarModule } from 'primeng/calendar';\nimport { Observable } from 'rxjs';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\n\n@Component({\n  selector: 'abs-license-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './license-form.component.html',\n  styleUrls: ['./license-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class LicenseFormComponent implements OnInit, OnChanges {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  medicalLicenseForm = new FormGroup({\n    issuingStateId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    licenseNumber: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    licenseTypeId: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    issueDate: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n\n    expireDate: new FormControl({ value: '', disabled: false }, [\n      Validators.required,\n    ]),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n        this.medicalLicenseForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.medicalLicenseForm.reset();\n    }\n  }\n\n  onSubmit() {\n    this.saveDialog.emit({\n      show: false,\n      data: this.medicalLicenseForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.closeDialog.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./license-form.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"medicalLicenseForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div class=\"col-12\">\n      <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"issuingStateId\"> License State* </label>\n\n      <p-dropdown\n        placeholder=\"Select license state...\"\n        [options]=\"optionLists.licenseStateOptions\"\n        name=\"issuingStateId\"\n        inputId=\"issuingStateId\"\n        [editable]=\"false\"\n        formControlName=\"issuingStateId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"licenseNumber\"> License Number* </label>\n\n      <input\n        placeholder=\"Enter License Number...\"\n        name=\"licenseNumber\"\n        id=\"licenseNumber\"\n        [required]=\"true\"\n        formControlName=\"licenseNumber\"\n        pInputText\n      />\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"licenseTypeId\"> License Type* </label>\n\n      <p-dropdown\n        placeholder=\"Select license type...\"\n        [options]=\"optionLists.licenseTypeOptions\"\n        name=\"licenseTypeId\"\n        inputId=\"licenseTypeId\"\n        [editable]=\"false\"\n        formControlName=\"licenseTypeId\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"issueDate\"> Issue Date* </label>\n\n      <p-calendar\n        formControlName=\"issueDate\"\n        [showIcon]=\"true\"\n        inputId=\"issueDate\"\n        placeholder=\"MM/DD/YYYY\"\n        [required]=\"true\"\n        appendTo=\"body\"\n      ></p-calendar>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex flex-column justify-content-start\">\n      <label htmlFor=\"expireDate\"> Expire Date* </label>\n\n      <p-calendar\n        formControlName=\"expireDate\"\n        [showIcon]=\"true\"\n        inputId=\"expireDate\"\n        placeholder=\"MM/DD/YYYY\"\n        [required]=\"true\"\n        appendTo=\"body\"\n      ></p-calendar>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        type=\"submit\"\n        [style]=\"{ width: '337px' }\"\n        [disabled]=\"medicalLicenseForm.invalid\"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "LoginComponent",
      "id": "component-LoginComponent-dd11324f57d34c38f0b51326a962f77c6b359a72c8a20db51f9b6ee0c292562fef7c8dce85ad23a99027fa30c876d5655d173125cbb67f069f8ea01d1554d19b",
      "file": "src/app/login/login.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-login",
      "styleUrls": ["./login.component.scss"],
      "styles": [],
      "templateUrl": ["./login.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "version",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nThe version of the application\n",
          "description": "<p>The version of the application</p>\n",
          "line": 53,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "clearErrorAction",
          "defaultValue": "new ClearAuthErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>The clear errors action</p>\n",
          "line": 105,
          "rawdescription": "\n\nThe clear errors action\n"
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IError> | undefined",
          "optional": true,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isAuthenticated$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": true,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.isAuthenticated"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isBusy",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Is the component shows the busy state either for login or password reset</p>\n",
          "line": 109,
          "rawdescription": "\n\nIs the component shows the busy state either for login or password reset\n"
        },
        {
          "name": "isBusy$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": true,
          "description": "",
          "line": 60,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.isBusy"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isPasswordReset",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>The password reset dialog open</p>\n",
          "line": 113,
          "rawdescription": "\n\nThe password reset dialog open\n"
        },
        {
          "name": "loginForm",
          "defaultValue": "new FormGroup({\n    userName: new FormControl('', [\n      Validators.required,\n      Validators.minLength(3),\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>The login form</p>\n",
          "line": 70,
          "rawdescription": "\n\nThe login form\n"
        },
        {
          "name": "now",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "passwordResetComplete",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>The password reset is complete</p>\n",
          "line": 117,
          "rawdescription": "\n\nThe password reset is complete\n"
        },
        {
          "name": "passwordResetComplete$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean> | undefined",
          "optional": true,
          "description": "",
          "line": 63,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.passwordResetComplete"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "passwordResetForm",
          "defaultValue": "new FormGroup(\n    {\n      currentPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n      newPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n      confirmPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n    },\n    {\n      validators: [matchFields('newPassword', 'confirmPassword')],\n    }\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>The password reset form</p>\n",
          "line": 83,
          "rawdescription": "\n\nThe password reset form\n"
        }
      ],
      "methodsClass": [
        {
          "name": "clearErrors",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "completePasswordReset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 180,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getErrors",
          "args": [
            {
              "name": "error",
              "type": "IError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 146,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "error",
              "type": "IError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 161,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmitPasswordReset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 168,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "PasswordModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "DialogModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  AuthSelectors,\n  Login,\n  IError,\n  IAuthCredentials,\n  ResetPassword,\n  Logout,\n} from '../state';\nimport { ClearAuthErrors } from '../state';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { ButtonModule } from 'primeng/button';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { DialogModule } from 'primeng/dialog';\nimport { matchFields, validatePassword } from '../shared/validators/validators';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputTextModule,\n    PasswordModule,\n    ButtonModule,\n    DialogModule,\n  ],\n})\nexport class LoginComponent {\n  /**\n   * The version of the application\n   */\n  @Input() version = '';\n\n  now = new Date();\n  @Select(AuthSelectors.slices.errors) errors$?: Observable<IError> | undefined;\n  @Select(AuthSelectors.slices.isAuthenticated) isAuthenticated$?:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.slices.isBusy) isBusy$?:\n    | Observable<boolean>\n    | undefined;\n  @Select(AuthSelectors.slices.passwordResetComplete) passwordResetComplete$?:\n    | Observable<boolean>\n    | undefined;\n\n  /**\n   * The login form\n   */\n  loginForm = new FormGroup({\n    userName: new FormControl('', [\n      Validators.required,\n      Validators.minLength(3),\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n  /**\n   * The password reset form\n   */\n  passwordResetForm = new FormGroup(\n    {\n      currentPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n      newPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n      confirmPassword: new FormControl('', [\n        validatePassword(),\n        Validators.required,\n      ]),\n    },\n    {\n      validators: [matchFields('newPassword', 'confirmPassword')],\n    }\n  );\n  /**\n   * The clear errors action\n   */\n  clearErrorAction = new ClearAuthErrors();\n  /**\n   * Is the component shows the busy state either for login or password reset\n   */\n  isBusy = false;\n  /**\n   * The password reset dialog open\n   */\n  isPasswordReset = false;\n  /**\n   * The password reset is complete\n   */\n  passwordResetComplete = false;\n  constructor(\n    private store: Store,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.clearErrors();\n    this.isBusy$?.pipe(untilDestroyed(this))?.subscribe((isBusy) => {\n      this.isBusy = isBusy;\n    });\n    this.isAuthenticated$?.pipe(untilDestroyed(this)).subscribe((isAuthed) => {\n      this.isPasswordReset = this.store.selectSnapshot(\n        AuthSelectors.slices.isPasswordReset\n      );\n      if (isAuthed && !this.isPasswordReset) {\n        this.router.navigate([\n          this.route.snapshot.queryParams['returnUrl'] ?? '/',\n        ]);\n      }\n    });\n    this.passwordResetComplete$?.pipe(untilDestroyed(this)).subscribe((val) => {\n      this.passwordResetComplete = val;\n    });\n  }\n\n  clearErrors() {\n    this.store.dispatch(this.clearErrorAction);\n  }\n\n  getErrors(error: IError) {\n    let errorArray: string[] = [];\n    const errors = error.errors as {\n      userName: string[];\n      Password: string[];\n    };\n    if (errors?.userName || errors?.Password) {\n      errorArray = errorArray.concat(\n        errors.userName ? errors.userName : [],\n        errors.Password ? errors.Password : []\n      );\n    }\n    return errorArray;\n  }\n\n  onSubmit() {\n    const loginPayload = {\n      ...this.loginForm.value,\n    } as unknown as IAuthCredentials;\n    this.store.dispatch(new Login(loginPayload as IAuthCredentials));\n  }\n\n  onSubmitPasswordReset() {\n    const payload: { oldPassword: string; newPassword: string } = {\n      oldPassword: this.passwordResetForm.value.currentPassword\n        ? this.passwordResetForm.value.currentPassword\n        : '',\n      newPassword: this.passwordResetForm.value.newPassword\n        ? this.passwordResetForm.value.newPassword\n        : '',\n    };\n    this.store.dispatch(new ResetPassword(payload));\n  }\n\n  completePasswordReset() {\n    this.passwordResetForm.reset();\n    this.loginForm.reset();\n    this.store.dispatch(new Logout());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  background-color: #1f3758;\n  color: var(--global-text-white);\n}\n:host:before {\n  content: '';\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.05;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='227.48' height='227.48' viewBox='0 0 227.48 227.48'%3E%3Cpath id='Path_4' fill='white' data-name='Path 4' d='M124.256 203.518l10.081-1.794.448 2.242-4.251 12.768-3.358.669 4.254-12.311-6.493 1.117Zm-10.965 3.367-.229-2.69 9.633-.448v2.242l-3.356 3.574c2.009.229 3.8 1.125 4.022 3.8s-1.783 4.713-4.92 4.931a7.566 7.566 0 0 1-5.6-2.242l2.012-2.242a4.457 4.457 0 0 0 3.585 1.576 1.831 1.831 0 0 0 2.012-1.794c0-1.114-1.114-1.791-2.908-1.791H116.2l-.669-2.012 3.126-3.585Zm-7.607-.677a2.212 2.212 0 0 0-2.69 2.009 2.008 2.008 0 0 0 2.242 2.242c1.562 0 2.457-.666 2.678-2.012C108.144 207.321 107.246 206.207 105.684 206.207Zm-1.576 11.872a6.942 6.942 0 0 1-4.47-2.023l1.78-2.242a5.4 5.4 0 0 0 2.919 1.576c1.794.218 2.678-1.125 3.126-2.908a4.118 4.118 0 0 1-2.908.666c-3.137-.23-4.917-2.012-4.7-4.931s2.69-4.7 5.827-4.469a6.074 6.074 0 0 1 4.022 1.791c.9 1.117 1.346 2.678 1.128 5.368C110.6 215.39 108.144 218.3 104.108 218.079ZM96.72 202.4l2.021.448-2.69 14.105-2.908-.669 2.012-10.976-2.46.229-.229-2.69Zm102.773-47.916-5.15-2.242 1.346-2.908 5.15 2.242 10.067-1.343-1.562 3.356-6.5.677 3.806 5.6-1.564 3.126Zm8.276-10.747c1.346.451 2.242-.448 2.69-1.791l.9-2.908-3.806-1.117-.9 3.126A1.978 1.978 0 0 0 207.769 143.738Zm-8.953-2.69 5.15-1.78.677-2.471-4.251-1.346.9-2.908 13.655 3.806-1.794 6.275c-.9 3.126-3.137 4.7-6.045 3.8a4.455 4.455 0 0 1-3.356-4.033l-5.827 2.023Zm4.254-21.491 14.114 1.791-1.346 10.529-2.69-.229.9-7.61-2.908-.448-.9 6.714-2.69-.221.9-6.722-2.908-.437-.9 7.61-2.69-.229Zm-.221-8.276a6.9 6.9 0 0 1 6.944-7.621 7.307 7.307 0 0 1 7.61 7.173 7.7 7.7 0 0 1-1.794 5.6l-2.46-1.794a5.288 5.288 0 0 0 1.346-3.8 4.1 4.1 0 0 0-4.483-3.817 4.056 4.056 0 0 0-4.251 4.483 5.59 5.59 0 0 0 .9 2.908h2.012v-3.126h2.69l.229 6.045-6.048.218A8.965 8.965 0 0 1 202.849 111.281Zm8.287-13.437c1.346-.229 1.783-1.346 1.564-2.69l-.666-3.137L208 92.7l.669 3.126C209.115 97.4 210.011 98.063 211.136 97.845Zm-9.182 1.794 3.806-3.817-.451-2.46-4.47.9-.677-3.137 13.882-2.678 1.346 6.263c.666 3.356-.677 5.6-3.585 6.045a4.355 4.355 0 0 1-4.92-2.242l-4.265 4.254Zm-4.481-16.344c-1.346-3.588 0-6.5 3.815-7.839l7.61-2.69 1.114 2.908-7.61 2.69c-2.239.9-2.908 2.242-2.239 4.033s2.009 2.46 4.251 1.783l7.621-2.678 1.114 2.908-7.61 2.69C201.724 88.444 198.816 86.868 197.473 83.295Zm-5.15-11.643a8.782 8.782 0 0 1-.9-6.277l2.919.68a7.428 7.428 0 0 0 .451 4.47c.666 1.128 1.332 1.576 2.228 1.128.68-.451.9-.9.229-3.37-.677-2.908-.9-4.917 1.564-6.263 2.242-1.114 4.7-.229 6.045 2.242a7.679 7.679 0 0 1 .9 5.368l-2.911-.218A6.64 6.64 0 0 0 202.4 65.6c-.677-1.125-1.343-1.343-2.009-1.125-.9.448-.9 1.125-.229 3.585.677 2.908.677 4.7-1.564 6.045C196.127 75.455 193.666 74.33 192.323 71.652Zm-2.908-24.413-2.242 2.023 4.481 5.147-2.239 1.783-4.483-5.15-4.251 3.588-2.012-2.46 10.747-9.185 6.941 8.287-2.242 1.794Zm-9.4-3.574a4.548 4.548 0 0 0-.229-6.277 4.274 4.274 0 0 0-6.045.451 4.55 4.55 0 0 0 .23 6.275A4.1 4.1 0 0 0 180.012 43.665Zm-8.057 2.678a7.268 7.268 0 0 1-.9-10.517c2.678-3.137 7.162-3.356 10.517-.677a7.382 7.382 0 1 1-9.622 11.195ZM160.53 29.33a4.209 4.209 0 0 0-1.791-5.827l-2.231-1.114L152.694 30l2.239 1.125C157.174 32.47 159.416 31.572 160.53 29.33ZM153.589 33.8l-4.92-2.46L155.162 18.8l4.92 2.471c4.036 2.009 5.379 6.045 3.585 9.619C161.658 34.48 157.622 35.826 153.589 33.8ZM146.2 20.6c.448-1.343-.218-2.239-1.78-2.69l-2.919-.9-1.117 3.815 2.908.9C144.866 22.171 145.75 21.723 146.2 20.6ZM143.29 29.33l-1.562-5.147-2.242-.68-1.346 4.265-2.908-.9 4.254-13.437 6.263 2.012c3.137.9 4.484 3.356 3.815 6.045a4.5 4.5 0 0 1-4.251 3.356l1.783 5.827ZM127.626 14.78l-2.471 4.254 3.8.448Zm2.908 11.195-.9-3.367-5.827-.884-1.78 2.908-3.14-.448 8.057-13.207 2.908.437 4.036 15.009ZM115.751 17.24a4.054 4.054 0 0 0-4.47-4.251 3.994 3.994 0 0 0-4.036 4.47 4.07 4.07 0 0 0 4.484 4.265A4.275 4.275 0 0 0 115.751 17.24ZM111.5 24.631c-4.483 0-7.61-3.137-7.61-7.173a7.5 7.5 0 0 1 7.391-7.607c4.47 0 7.607 3.137 7.607 7.159A7.108 7.108 0 0 1 111.5 24.631ZM99.639 21.046c-.229-.9-.9-1.346-2.471-1.117l-3.577.666.669 3.137 3.585-.677C99.188 22.837 99.857 22.171 99.639 21.046Zm-1.794-5.368c-.229-.9-.9-1.346-2.242-1.128l-3.137.677.448 2.908 2.908-.448C97.168 17.24 98.063 16.792 97.845 15.678Zm.448 10.067L91.57 27.091l-2.46-14.1L95.6 11.861c2.908-.448 4.931.448 5.368 2.69a3.383 3.383 0 0 1-1.332 3.356 3.6 3.6 0 0 1 3.356 2.919C103.213 23.5 101.419 25.079 98.293 25.745ZM80.823 30.676 70.972 25.3l3.588 8.287-2.908 1.343-5.6-13.2L68.733 20.6l9.63 5.379-3.585-8.069L77.7 16.574l5.816 12.978Zm-22.608 0 .9 4.92 3.126-2.012Zm9.4 6.493-2.908-2.021-4.931 3.367.68 3.356-2.69 1.794L54.86 28.435l2.457-1.562 12.989 8.505ZM53.284 48.135a6.9 6.9 0 0 1-10.07-.218 6.985 6.985 0 0 1 .451-10.3 7.868 7.868 0 0 1 5.6-2.239l.218 3.137a5.7 5.7 0 0 0-3.806 1.332c-1.791 1.576-1.562 4.265 0 6.045a4.263 4.263 0 0 0 6.045.451 4.9 4.9 0 0 0 1.564-3.806h2.908A8.041 8.041 0 0 1 53.284 48.135Zm-8.724 8.953L33.8 47.916l2.023-2.471L46.573 54.63Zm-10.976-.9c-1.114-.666-2.242-.437-3.137.9l-1.794 2.471 3.367 2.231L33.8 59.111C34.928 57.986 34.7 56.869 33.584 56.192Zm7.61 5.161H35.826L34.48 63.365l3.806 2.46-1.794 2.687L24.85 60.676l3.585-5.368c1.794-2.69 4.483-3.367 6.944-1.794a4.6 4.6 0 0 1 2.009 4.92h6.048ZM30.676 80.376 17.906 74.33l4.483-9.622 2.46 1.117-3.126 6.941L24.4 73.88l2.919-6.045 2.46 1.128-2.908 6.045 2.678 1.343 3.367-6.941 2.46 1.114ZM28.653 86.2 19.7 83.742l4.7 5.368-6.714 2.242 8.956 2.46-.9 2.908L12.09 92.914l.9-3.137L19.7 87.764 15 82.617l.9-3.14 13.655 3.817ZM14.332 104.786l4.472 2.231.229-3.8Zm10.747-3.367-3.137 1.128-.666 5.816 3.126 1.573-.218 3.126-13.655-7.377.218-2.919 14.78-4.7Zm.9 29.333-14.114 1.791-1.332-10.515 2.678-.451 1.125 7.61 2.908-.448-.9-6.711 2.69-.451.9 6.714 2.908-.448-1.114-7.61 2.678-.448Zm1.346 6.045-5.379 1.573 1.562 5.6 5.379-1.573.9 2.919-13.655 4.022-.9-2.908 5.368-1.562-1.562-5.6-5.379 1.562-.9-2.908 13.663-4.033Zm-5.379 17.917 10.3-4.7 1.343 2.908-10.3 4.7 1.794 3.806-2.69 1.114L17.458 151.8l2.69-1.114Zm94.708-37.388V120h6.275v2.69h-6.275v5.15h-2.908V114.855h9.849v2.69h-6.941Zm-7.61 3.8a3.885 3.885 0 0 0-4.033-4.033 4.017 4.017 0 0 0-4.036 4.033 3.886 3.886 0 0 0 4.036 4.025C107.464 125.384 109.04 123.59 109.04 121.13Zm-4.033 6.944a6.722 6.722 0 1 1 6.941-6.725A6.789 6.789 0 0 1 105.007 128.074Zm71.868-7.621c-1.343 5.15-8.057 4.483-11.195 2.69s-35.375-19.7-35.375-19.7V84.627s36.722 20.159 41.421 22.837C178.221 111.052 177.773 117.327 176.874 120.453ZM130.3 53.066s6.722 1.114 16.342 7.162c6.944 4.251 14.783 11.195 19.482 18.8 5.6 9.415 4.483 12.989 4.483 12.989l-40.528-22.39V53.066Zm49.26 46.791a14.977 14.977 0 0 0 3.585-11.864c-2.239-16.792-19.711-34.262-36.722-41.65-9.4-4.025-17.24-6.944-29.1-7.38V109.04L165.68 135.9c5.379 2.69 10.529 1.343 15.23-1.783 6.711-4.484 7.836-13.218 7.836-14.78C188.746 117.327 190.093 107.915 179.564 99.857ZM95.822 80.376 51.49 105.007c4.483-30 26.655-46.125 44.331-51.941Zm-22.16-30c-20.148 12.759-30 31.572-33.584 50.376-4.7 23.733 4.254 40.746 4.254 40.746l10.747-6.048a60.219 60.219 0 0 1-2.46-8.276 63.639 63.639 0 0 1-1.346-8.287L96.051 94.26v18.354l12.989-7.159V38.734C108.81 38.734 92.248 38.734 73.661 50.376Zm72.536 81.5H83.065l-17.01 9.171c11.413 20.162 31.561 27.539 47.687 27.539 11.195 0 26.859-4.251 38.5-15.894l7.173 4.033c-15 14.78-30.676 20.148-45.675 19.7-16.792-.448-27.091-5.15-38.963-13.655-10.3-7.159-15.219-17.906-15.449-17.906l-10.517 5.816c11.416 21.494 35.6 37.169 64.93 37.835 11.413.229 26.411-3.585 38.283-10.515 12.989-7.391 21.494-18.138 25.079-24.631l-26.193-14.55a44.392 44.392 0 0 1-37.4 19.7 43.641 43.641 0 0 1-22.16-5.827 50.15 50.15 0 0 1-10.081-7.828l4.484-2.471h50.595ZM113.742 28.882A84.858 84.858 0 1 0 198.6 113.742 84.955 84.955 0 0 0 113.742 28.882Zm0 2.242a82.616 82.616 0 1 1-82.4 82.617c0-45.459 36.94-82.617 82.4-82.617m0-31.124A113.74 113.74 0 1 0 227.48 113.742 113.754 113.754 0 0 0 113.742 0Zm0 4.033a109.546 109.546 0 0 1 77.465 186.944A109.554 109.554 0 0 1 36.274 36.044 108.881 108.881 0 0 1 113.742 4.033' /%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: 50% 0;\n  background-size: contain;\n}\nsl-button[variant='text']::part(label) {\n  text-decoration: underline;\n  padding: 0 0.3rem;\n}\nsl-button[variant='primary']::part(label) {\n  font-weight: 700;\n}\n\n.login-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  .content {\n    margin-top: auto;\n    max-width: 56rem;\n    width: 100%;\n    .form-container {\n      max-width: 31rem;\n      width: 100%;\n    }\n  }\n}\n\n.login-alert {\n  margin-bottom: 1rem;\n  border: solid thin red;\n}\n\n.form-error-text {\n  color: var(--global-danger-lighten-40);\n}\n.p-inputtext {\n  position: relative;\n}\n",
          "styleUrl": "./login.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 117,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div class=\"app-container text-center\">\n  <div class=\"login-container\">\n    <div class=\"flex flex-column align-items-center content\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"227.48\"\n        height=\"227.48\"\n        viewBox=\"0 0 227.48 227.48\"\n      >\n        <path\n          id=\"Path_4\"\n          fill=\"currentColor\"\n          data-name=\"Path 4\"\n          d=\"M124.256,203.518l10.081-1.794.448,2.242-4.251,12.768-3.358.669,4.254-12.311-6.493,1.117Zm-10.965,3.367-.229-2.69,9.633-.448v2.242l-3.356,3.574c2.009.229,3.8,1.125,4.022,3.8s-1.783,4.713-4.92,4.931a7.566,7.566,0,0,1-5.6-2.242l2.012-2.242a4.457,4.457,0,0,0,3.585,1.576,1.831,1.831,0,0,0,2.012-1.794c0-1.114-1.114-1.791-2.908-1.791H116.2l-.669-2.012,3.126-3.585Zm-7.607-.677a2.212,2.212,0,0,0-2.69,2.009,2.008,2.008,0,0,0,2.242,2.242c1.562,0,2.457-.666,2.678-2.012C108.144,207.321,107.246,206.207,105.684,206.207Zm-1.576,11.872a6.942,6.942,0,0,1-4.47-2.023l1.78-2.242a5.4,5.4,0,0,0,2.919,1.576c1.794.218,2.678-1.125,3.126-2.908a4.118,4.118,0,0,1-2.908.666c-3.137-.23-4.917-2.012-4.7-4.931s2.69-4.7,5.827-4.469a6.074,6.074,0,0,1,4.022,1.791c.9,1.117,1.346,2.678,1.128,5.368C110.6,215.39,108.144,218.3,104.108,218.079ZM96.72,202.4l2.021.448-2.69,14.105-2.908-.669,2.012-10.976-2.46.229-.229-2.69Zm102.773-47.916-5.15-2.242,1.346-2.908,5.15,2.242,10.067-1.343-1.562,3.356-6.5.677,3.806,5.6-1.564,3.126Zm8.276-10.747c1.346.451,2.242-.448,2.69-1.791l.9-2.908-3.806-1.117-.9,3.126A1.978,1.978,0,0,0,207.769,143.738Zm-8.953-2.69,5.15-1.78.677-2.471-4.251-1.346.9-2.908,13.655,3.806-1.794,6.275c-.9,3.126-3.137,4.7-6.045,3.8a4.455,4.455,0,0,1-3.356-4.033l-5.827,2.023Zm4.254-21.491,14.114,1.791-1.346,10.529-2.69-.229.9-7.61-2.908-.448-.9,6.714-2.69-.221.9-6.722-2.908-.437-.9,7.61-2.69-.229Zm-.221-8.276a6.9,6.9,0,0,1,6.944-7.621,7.307,7.307,0,0,1,7.61,7.173,7.7,7.7,0,0,1-1.794,5.6l-2.46-1.794a5.288,5.288,0,0,0,1.346-3.8,4.1,4.1,0,0,0-4.483-3.817,4.056,4.056,0,0,0-4.251,4.483,5.59,5.59,0,0,0,.9,2.908h2.012v-3.126h2.69l.229,6.045-6.048.218A8.965,8.965,0,0,1,202.849,111.281Zm8.287-13.437c1.346-.229,1.783-1.346,1.564-2.69l-.666-3.137L208,92.7l.669,3.126C209.115,97.4,210.011,98.063,211.136,97.845Zm-9.182,1.794,3.806-3.817-.451-2.46-4.47.9-.677-3.137,13.882-2.678,1.346,6.263c.666,3.356-.677,5.6-3.585,6.045a4.355,4.355,0,0,1-4.92-2.242l-4.265,4.254Zm-4.481-16.344c-1.346-3.588,0-6.5,3.815-7.839l7.61-2.69,1.114,2.908-7.61,2.69c-2.239.9-2.908,2.242-2.239,4.033s2.009,2.46,4.251,1.783l7.621-2.678,1.114,2.908-7.61,2.69C201.724,88.444,198.816,86.868,197.473,83.295Zm-5.15-11.643a8.782,8.782,0,0,1-.9-6.277l2.919.68a7.428,7.428,0,0,0,.451,4.47c.666,1.128,1.332,1.576,2.228,1.128.68-.451.9-.9.229-3.37-.677-2.908-.9-4.917,1.564-6.263,2.242-1.114,4.7-.229,6.045,2.242a7.679,7.679,0,0,1,.9,5.368l-2.911-.218A6.64,6.64,0,0,0,202.4,65.6c-.677-1.125-1.343-1.343-2.009-1.125-.9.448-.9,1.125-.229,3.585.677,2.908.677,4.7-1.564,6.045C196.127,75.455,193.666,74.33,192.323,71.652Zm-2.908-24.413-2.242,2.023,4.481,5.147-2.239,1.783-4.483-5.15-4.251,3.588-2.012-2.46,10.747-9.185,6.941,8.287-2.242,1.794Zm-9.4-3.574a4.548,4.548,0,0,0-.229-6.277,4.274,4.274,0,0,0-6.045.451,4.55,4.55,0,0,0,.23,6.275A4.1,4.1,0,0,0,180.012,43.665Zm-8.057,2.678a7.268,7.268,0,0,1-.9-10.517c2.678-3.137,7.162-3.356,10.517-.677a7.382,7.382,0,1,1-9.622,11.195ZM160.53,29.33a4.209,4.209,0,0,0-1.791-5.827l-2.231-1.114L152.694,30l2.239,1.125C157.174,32.47,159.416,31.572,160.53,29.33ZM153.589,33.8l-4.92-2.46L155.162,18.8l4.92,2.471c4.036,2.009,5.379,6.045,3.585,9.619C161.658,34.48,157.622,35.826,153.589,33.8ZM146.2,20.6c.448-1.343-.218-2.239-1.78-2.69l-2.919-.9-1.117,3.815,2.908.9C144.866,22.171,145.75,21.723,146.2,20.6ZM143.29,29.33l-1.562-5.147-2.242-.68-1.346,4.265-2.908-.9,4.254-13.437,6.263,2.012c3.137.9,4.484,3.356,3.815,6.045a4.5,4.5,0,0,1-4.251,3.356l1.783,5.827ZM127.626,14.78l-2.471,4.254,3.8.448Zm2.908,11.195-.9-3.367-5.827-.884-1.78,2.908-3.14-.448,8.057-13.207,2.908.437,4.036,15.009ZM115.751,17.24a4.054,4.054,0,0,0-4.47-4.251,3.994,3.994,0,0,0-4.036,4.47,4.07,4.07,0,0,0,4.484,4.265A4.275,4.275,0,0,0,115.751,17.24ZM111.5,24.631c-4.483,0-7.61-3.137-7.61-7.173a7.5,7.5,0,0,1,7.391-7.607c4.47,0,7.607,3.137,7.607,7.159A7.108,7.108,0,0,1,111.5,24.631ZM99.639,21.046c-.229-.9-.9-1.346-2.471-1.117l-3.577.666.669,3.137,3.585-.677C99.188,22.837,99.857,22.171,99.639,21.046Zm-1.794-5.368c-.229-.9-.9-1.346-2.242-1.128l-3.137.677.448,2.908,2.908-.448C97.168,17.24,98.063,16.792,97.845,15.678Zm.448,10.067L91.57,27.091l-2.46-14.1L95.6,11.861c2.908-.448,4.931.448,5.368,2.69a3.383,3.383,0,0,1-1.332,3.356,3.6,3.6,0,0,1,3.356,2.919C103.213,23.5,101.419,25.079,98.293,25.745ZM80.823,30.676,70.972,25.3l3.588,8.287-2.908,1.343-5.6-13.2L68.733,20.6l9.63,5.379-3.585-8.069L77.7,16.574l5.816,12.978Zm-22.608,0,.9,4.92,3.126-2.012Zm9.4,6.493-2.908-2.021-4.931,3.367.68,3.356-2.69,1.794L54.86,28.435l2.457-1.562,12.989,8.505ZM53.284,48.135a6.9,6.9,0,0,1-10.07-.218,6.985,6.985,0,0,1,.451-10.3,7.868,7.868,0,0,1,5.6-2.239l.218,3.137a5.7,5.7,0,0,0-3.806,1.332c-1.791,1.576-1.562,4.265,0,6.045a4.263,4.263,0,0,0,6.045.451,4.9,4.9,0,0,0,1.564-3.806h2.908A8.041,8.041,0,0,1,53.284,48.135Zm-8.724,8.953L33.8,47.916l2.023-2.471L46.573,54.63Zm-10.976-.9c-1.114-.666-2.242-.437-3.137.9l-1.794,2.471,3.367,2.231L33.8,59.111C34.928,57.986,34.7,56.869,33.584,56.192Zm7.61,5.161H35.826L34.48,63.365l3.806,2.46-1.794,2.687L24.85,60.676l3.585-5.368c1.794-2.69,4.483-3.367,6.944-1.794a4.6,4.6,0,0,1,2.009,4.92h6.048ZM30.676,80.376,17.906,74.33l4.483-9.622,2.46,1.117-3.126,6.941L24.4,73.88l2.919-6.045,2.46,1.128-2.908,6.045,2.678,1.343,3.367-6.941,2.46,1.114ZM28.653,86.2,19.7,83.742l4.7,5.368-6.714,2.242,8.956,2.46-.9,2.908L12.09,92.914l.9-3.137L19.7,87.764,15,82.617l.9-3.14,13.655,3.817ZM14.332,104.786l4.472,2.231.229-3.8Zm10.747-3.367-3.137,1.128-.666,5.816,3.126,1.573-.218,3.126-13.655-7.377.218-2.919,14.78-4.7Zm.9,29.333-14.114,1.791-1.332-10.515,2.678-.451,1.125,7.61,2.908-.448-.9-6.711,2.69-.451.9,6.714,2.908-.448-1.114-7.61,2.678-.448Zm1.346,6.045-5.379,1.573,1.562,5.6,5.379-1.573.9,2.919-13.655,4.022-.9-2.908,5.368-1.562-1.562-5.6-5.379,1.562-.9-2.908,13.663-4.033Zm-5.379,17.917,10.3-4.7,1.343,2.908-10.3,4.7,1.794,3.806-2.69,1.114L17.458,151.8l2.69-1.114Zm94.708-37.388V120h6.275v2.69h-6.275v5.15h-2.908V114.855h9.849v2.69h-6.941Zm-7.61,3.8a3.885,3.885,0,0,0-4.033-4.033,4.017,4.017,0,0,0-4.036,4.033,3.886,3.886,0,0,0,4.036,4.025C107.464,125.384,109.04,123.59,109.04,121.13Zm-4.033,6.944a6.722,6.722,0,1,1,6.941-6.725A6.789,6.789,0,0,1,105.007,128.074Zm71.868-7.621c-1.343,5.15-8.057,4.483-11.195,2.69s-35.375-19.7-35.375-19.7V84.627s36.722,20.159,41.421,22.837C178.221,111.052,177.773,117.327,176.874,120.453ZM130.3,53.066s6.722,1.114,16.342,7.162c6.944,4.251,14.783,11.195,19.482,18.8,5.6,9.415,4.483,12.989,4.483,12.989l-40.528-22.39V53.066Zm49.26,46.791a14.977,14.977,0,0,0,3.585-11.864c-2.239-16.792-19.711-34.262-36.722-41.65-9.4-4.025-17.24-6.944-29.1-7.38V109.04L165.68,135.9c5.379,2.69,10.529,1.343,15.23-1.783,6.711-4.484,7.836-13.218,7.836-14.78C188.746,117.327,190.093,107.915,179.564,99.857ZM95.822,80.376,51.49,105.007c4.483-30,26.655-46.125,44.331-51.941Zm-22.16-30c-20.148,12.759-30,31.572-33.584,50.376-4.7,23.733,4.254,40.746,4.254,40.746l10.747-6.048a60.219,60.219,0,0,1-2.46-8.276,63.639,63.639,0,0,1-1.346-8.287L96.051,94.26v18.354l12.989-7.159V38.734C108.81,38.734,92.248,38.734,73.661,50.376Zm72.536,81.5H83.065l-17.01,9.171c11.413,20.162,31.561,27.539,47.687,27.539,11.195,0,26.859-4.251,38.5-15.894l7.173,4.033c-15,14.78-30.676,20.148-45.675,19.7-16.792-.448-27.091-5.15-38.963-13.655-10.3-7.159-15.219-17.906-15.449-17.906l-10.517,5.816c11.416,21.494,35.6,37.169,64.93,37.835,11.413.229,26.411-3.585,38.283-10.515,12.989-7.391,21.494-18.138,25.079-24.631l-26.193-14.55a44.392,44.392,0,0,1-37.4,19.7,43.641,43.641,0,0,1-22.16-5.827,50.15,50.15,0,0,1-10.081-7.828l4.484-2.471h50.595ZM113.742,28.882A84.858,84.858,0,1,0,198.6,113.742,84.955,84.955,0,0,0,113.742,28.882Zm0,2.242a82.616,82.616,0,1,1-82.4,82.617c0-45.459,36.94-82.617,82.4-82.617m0-31.124A113.74,113.74,0,1,0,227.48,113.742,113.754,113.754,0,0,0,113.742,0Zm0,4.033a109.546,109.546,0,0,1,77.465,186.944A109.554,109.554,0,0,1,36.274,36.044,108.881,108.881,0,0,1,113.742,4.033\"\n        />\n      </svg>\n      <h1 class=\"my-3\">{{ 'LOGIN.TITLE' | translate }}</h1>\n      <div class=\"text-left mt-5 form-container\">\n        <ng-container *ngIf=\"!isPasswordReset\">\n          <sl-alert\n            variant=\"danger\"\n            open\n            closable\n            class=\"alert-closable login-alert\"\n            *ngIf=\"errors$ | async as error\"\n            (sl-hide)=\"clearErrors()\"\n          >\n            <sl-icon slot=\"icon\" name=\"exclamation-octagon\"></sl-icon>\n            <strong>{{ error.title }}</strong\n            ><br />\n            <div *ngIf=\"error.errors\">\n              <p *ngFor=\"let errmsg of getErrors(error)\">{{ errmsg }}</p>\n            </div>\n          </sl-alert>\n        </ng-container>\n\n        <form name=\"login-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n          <input\n            class=\"mt-2\"\n            id=\"userName\"\n            [placeholder]=\"'LOGIN.USERNAME' | translate\"\n            pInputText\n            formControlName=\"userName\"\n          />\n          <small\n            *ngIf=\"\n              loginForm.get('userName')?.hasError('required') &&\n              !loginForm.pristine\n            \"\n            class=\"form-error-text\"\n            >{{ 'LOGIN.USERNAME_ERROR' | translate }}</small\n          >\n\n          <p-password\n            styleClass=\"mt-2\"\n            id=\"password\"\n            [placeholder]=\"'LOGIN.PASSWORD' | translate\"\n            formControlName=\"password\"\n            [feedback]=\"false\"\n            [toggleMask]=\"true\"\n          ></p-password>\n          <small\n            *ngIf=\"\n              loginForm.get('password')?.hasError('required') &&\n              !loginForm.pristine &&\n              loginForm.get('password')?.dirty\n            \"\n            class=\"form-error-text\"\n            >{{ 'LOGIN.PASSWORD_ERROR' | translate }}</small\n          >\n\n          <p-button\n            styleClass=\"p-button-primary mt-2\"\n            class=\"login-button\"\n            type=\"submit\"\n            [disabled]=\"loginForm.invalid\"\n          >\n            <span class=\"mr-2 font-bold\">{{\n              'LOGIN.SUBMIT_BTN' | translate\n            }}</span>\n            <i class=\"fas fa-spinner fa-pulse\" *ngIf=\"isBusy\"></i>\n            <i class=\"fa-solid fa-right-to-bracket\" *ngIf=\"!isBusy\"></i>\n          </p-button>\n        </form>\n      </div>\n    </div>\n    <div class=\"text-center mt-auto\">\n      <p class=\"mb-1 footer-text\">\n        {{ 'SHELL.COPYRIGHT' | translate : { year: now.getFullYear() } }}\n      </p>\n      <p class=\"footer-text mb-1\">{{ version }}</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"card flex justify-content-center\">\n  <p-dialog\n    header=\"Header\"\n    [(visible)]=\"isPasswordReset\"\n    [modal]=\"true\"\n    [closable]=\"false\"\n    [style]=\"{ width: '50vw' }\"\n  >\n    <ng-template pTemplate=\"header\">\n      <span class=\"text-xl font-bold\">Password Reset</span>\n    </ng-template>\n    <ng-container *ngIf=\"passwordResetComplete; else resetPasswordForm\">\n      <p>Password reset is complete. Please log in again.</p>\n    </ng-container>\n    <ng-template #resetPasswordForm>\n      <sl-alert\n        variant=\"danger\"\n        open\n        closable\n        class=\"alert-closable login-alert\"\n        *ngIf=\"errors$ | async as error\"\n        (sl-hide)=\"clearErrors()\"\n      >\n        <sl-icon slot=\"icon\" name=\"exclamation-octagon\"></sl-icon>\n        <strong>{{ error.title }}</strong\n        ><br />\n        <div *ngIf=\"error.errors\">\n          <p *ngFor=\"let errmsg of getErrors(error)\">{{ errmsg }}</p>\n        </div>\n      </sl-alert>\n      <p>\n        For improved security, your password needs to be reset. You will be\n        logged out and need to log in again using the new password once you have\n        completed the reset.\n      </p>\n      <form\n        id=\"password-reset-form\"\n        name=\"password-reset-form\"\n        [formGroup]=\"passwordResetForm\"\n        (ngSubmit)=\"onSubmitPasswordReset()\"\n      >\n        <label class=\"block\">Current Password</label>\n        <p-password\n          inputId=\"currentPassword\"\n          formControlName=\"currentPassword\"\n          [feedback]=\"false\"\n          [toggleMask]=\"true\"\n        ></p-password>\n        <label class=\"block\">New Password</label>\n        <p-password\n          inputId=\"newPassword\"\n          formControlName=\"newPassword\"\n          [feedback]=\"false\"\n          [toggleMask]=\"true\"\n        ></p-password>\n        <label class=\"block\"> Confirm New Password </label>\n        <p-password\n          inputId=\"confirmPassword\"\n          formControlName=\"confirmPassword\"\n          [feedback]=\"false\"\n          [toggleMask]=\"true\"\n        ></p-password>\n      </form>\n    </ng-template>\n\n    <ng-template pTemplate=\"footer\">\n      <button\n        *ngIf=\"!passwordResetComplete\"\n        type=\"submit\"\n        class=\"primary\"\n        form=\"password-reset-form\"\n        [disabled]=\"passwordResetForm.invalid\"\n      >\n        <span class=\"mr-2 font-bold\">Reset Password</span>\n        <i class=\"fas fa-spinner fa-pulse\" *ngIf=\"isBusy\"></i>\n        <i class=\"fa-solid fa-right-to-bracket\" *ngIf=\"!isBusy\"></i>\n      </button>\n      <button\n        *ngIf=\"passwordResetComplete\"\n        class=\"primary\"\n        (click)=\"completePasswordReset()\"\n      >\n        <span class=\"mr-2 font-bold\">OK</span>\n      </button>\n    </ng-template>\n  </p-dialog>\n</div>\n"
    },
    {
      "name": "MedicalLicenseModalComponent",
      "id": "component-MedicalLicenseModalComponent-bc5ecabe8e989cf22ea04b2bbd2bbfb158a80fa7e72506ad912cd7f4b26b1e1eb66ef7325d5bbcdb44cffa28a594b901d4eac833a9b67af8961168a30323955a",
      "file": "src/app/registration-requirements/medical-license-modal/medical-license-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-medical-license-modal",
      "styleUrls": ["./medical-license-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./medical-license-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "modalName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "showDialog",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "medicalLicenseCols",
          "defaultValue": "MEDICAL_LICENSE_GRID_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "medicalLicenseData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 28
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMedicalLicenseData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "gridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleDefaultCloseModal",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { MEDICAL_LICENSE_GRID_COLS } from './medical-license-grid-cols';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-medical-license-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, ButtonModule],\n  templateUrl: './medical-license-modal.component.html',\n  styleUrls: ['./medical-license-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class MedicalLicenseModalComponent implements OnInit {\n  @Input() showDialog = false;\n  @Input() modalName!: string;\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  medicalLicenseCols = MEDICAL_LICENSE_GRID_COLS;\n  medicalLicenseData!: any;\n\n  ngOnInit() {\n    this.getMedicalLicenseData();\n  }\n\n  getMedicalLicenseData() {\n    this.medicalLicenseData = [\n      {\n        licenseState: 'Pennsylvania',\n        licenseNumber: '123456789',\n        licenseType: 'MD',\n        expirationDate: new Date('12/31/2021'),\n        issueDate: new Date('12/31/2019'),\n        varifyingOrganization: 'American Board of Surgery',\n      },\n    ];\n  }\n\n  gridAction($event: any) {\n    console.log('unhandled grid action', $event);\n  }\n\n  handleDefaultCloseModal(event: any) {\n    event.preventDefault();\n  }\n\n  close() {\n    this.closeDialog.emit({ action: this.modalName });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-dialog::part(header-actions) {\n  padding: 0;\n}\nsl-dialog::part(close-button) {\n  display: none;\n}\nsl-dialog::part(header)::after {\n  height: 1px;\n  color: var(--global-gray-lightest);\n}\n\nsl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n\n.text-success {\n  color: var(--global-success);\n}\n.text-warning {\n  color: var(--global-warning);\n}\n.text-danger {\n  color: var(--global-danger);\n}\n",
          "styleUrl": "./medical-license-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"mb-5\">\n  <p><strong>Please update the information below as needed. </strong></p>\n  <p>\n    A full and unrestricted medical license is not required for the Qualifying\n    Examination. A full and unrestricted medical license will be waived to\n    register for the Certifying Examination (CE). A full and unrestricted\n    medical license will be required before you will be considered certified by\n    the ABS\n  </p>\n</div>\n<p-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add Medical License</span>\n</p-button>\n<abs-grid\n  [columns]=\"medicalLicenseCols\"\n  [data]=\"medicalLicenseData\"\n  (action)=\"gridAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button type=\"button\" [style]=\"{ width: '337px' }\" variant=\"primary\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "MedicalTrainingComponent",
      "id": "component-MedicalTrainingComponent-03dae18b1f961e92f2788553147dd02959aab5e2b603d90f115518097f2e875e280a2e4ad160cad7ace141fc60c4487cacc89d24db5f3a92569a61606e1a01fe",
      "file": "src/app/medical-training/medical-training.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-medical-training",
      "styleUrls": ["./medical-training.component.scss"],
      "styles": [],
      "templateUrl": ["./medical-training.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "additionalTraining$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAdvancedTrainingReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 142,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.additionalTraining"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "canAddRPVI",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 203
        },
        {
          "name": "certificateTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICertificateTypeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 185
        },
        {
          "name": "certificateTypes$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICertificateTypeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 137,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.certificateTypes"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearMedicalTrainingErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 162
        },
        {
          "name": "countries",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[]",
          "optional": false,
          "description": "",
          "line": 180
        },
        {
          "name": "countries$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IPickListItem[]> | undefined",
          "optional": false,
          "description": "",
          "line": 113,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.countries"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "createMode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 189
        },
        {
          "name": "degrees",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDegreeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 187
        },
        {
          "name": "degrees$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDegreeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 125,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.degrees"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "documentsCols",
          "defaultValue": "DOCUMENTS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 192
        },
        {
          "name": "documentsData$",
          "defaultValue": "new BehaviorSubject([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 174
        },
        {
          "name": "documentTypeOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 175
        },
        {
          "name": "documentTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDocumentTypeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 186
        },
        {
          "name": "documentTypes$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IDocumentTypeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 133,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.documentTypes"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFormErrors> | undefined",
          "optional": false,
          "description": "",
          "line": 158,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "fellowshipCols",
          "defaultValue": "FELLOWSHIP_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 191
        },
        {
          "name": "fellowships$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFellowshipReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 154,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.fellowships"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "globalDialogService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GlobalDialogService",
          "optional": false,
          "description": "",
          "line": 232,
          "modifierKind": [123]
        },
        {
          "name": "graduateProfiles",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IGraduateProfileReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 182
        },
        {
          "name": "graduateProfiles$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IGraduateProfileReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 121,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.graduateProfiles"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "isAdditionalAdvancedEdit$",
          "defaultValue": "new BehaviorSubject(\n    false\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 164
        },
        {
          "name": "isEdit",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 197
        },
        {
          "name": "isFellowshipEdit$",
          "defaultValue": "new BehaviorSubject(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 168
        },
        {
          "name": "isOtherCertificatesEdit$",
          "defaultValue": "new BehaviorSubject(\n    false\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 170
        },
        {
          "name": "isSubmitted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 227
        },
        {
          "name": "maxYear",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 202
        },
        {
          "name": "medicalTraining",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalTrainingModel",
          "optional": false,
          "description": "",
          "line": 183
        },
        {
          "name": "medicalTraining$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IMedicalTrainingModel> | undefined",
          "optional": false,
          "description": "",
          "line": 145,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.medicalTraining"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "medicalTrainingForm",
          "defaultValue": "new FormGroup({\n    graduateProfileId: new FormControl(''),\n    graduateProfileDescription: new FormControl(''),\n    medicalSchoolName: new FormControl('', [\n      Validators.required,\n      Validators.max(30),\n    ]),\n    medicalSchoolCity: new FormControl('', Validators.required),\n    medicalSchoolStateId: new FormControl({ value: null, disabled: true }),\n    medicalSchoolCountryId: new FormControl('', Validators.required),\n    medicalSchoolCountryName: new FormControl('', [\n      Validators.required,\n      Validators.max(30),\n    ]),\n    degreeId: new FormControl('', Validators.required),\n    degreeName: new FormControl(''),\n    medicalSchoolCompletionYear: new FormControl('', Validators.required),\n    residencyProgramName: new FormControl(0),\n    residencyCompletionYear: new FormControl('', Validators.required),\n    residencyProgramOther: new FormControl('', Validators.max(8000)),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 205
        },
        {
          "name": "medicalTrainingId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 195
        },
        {
          "name": "medicalTrainingReadOnly",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalTrainingModel",
          "optional": false,
          "description": "",
          "line": 194
        },
        {
          "name": "otherCertificationCols",
          "defaultValue": "OTHER_CERTIFICATIONS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 193
        },
        {
          "name": "otherCertifications$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IOtherCertificationsModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 152,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.otherCertifications"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "residencyPrograms",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IResidencyProgramReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 184
        },
        {
          "name": "residencyPrograms$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IResidencyProgramReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 129,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.residencyPrograms"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "showFellowshipAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 199
        },
        {
          "name": "showRPVICertificatesAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 200
        },
        {
          "name": "showTrainingAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 198
        },
        {
          "name": "states",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 181
        },
        {
          "name": "states$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IStateReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 117,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.states"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "tempData$",
          "defaultValue": "new BehaviorSubject({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 179
        },
        {
          "name": "trainingAddEditTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 196
        },
        {
          "name": "trainingCols",
          "defaultValue": "MEDICAL_TRAINING_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 190
        },
        {
          "name": "userCertificates$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserCertificateReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 147,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.userCertificates"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 188
        },
        {
          "name": "userId$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number> | undefined",
          "optional": false,
          "description": "",
          "line": 111,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userId"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userOtherCertifications$",
          "defaultValue": "new BehaviorSubject([] as unknown as IOtherCertificationsModel[])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<IOtherCertificationsModel[]>",
          "optional": false,
          "description": "",
          "line": 176
        },
        {
          "name": "year",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 201
        }
      ],
      "methodsClass": [
        {
          "name": "cancelAddEditFellowship",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 562,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cancelAddEditTraining",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 557,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cancelOtherCertificatesAddEditModal",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 567,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDocumentsData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 383,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMedicalTraining",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 297,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getRPVICertificates",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleDocumentUpload",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 391,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "form",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 395,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "form",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 248,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onCountryChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 338,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onDegreeChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 350,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onGraduateProfileChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 358,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 578,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveFellowship",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 495,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveRPVICertificate",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 525,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveTraining",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 452,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPicklists",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 268,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setStates",
          "args": [
            {
              "name": "countryId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 371,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "countryId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showFellowshipModal",
          "args": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 442,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showOtherCertificaions",
          "args": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 447,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showTrainingModal",
          "args": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 437,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isEdit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleFormEdit",
          "args": [
            {
              "name": "toggle",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 572,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "toggle",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ProfileHeaderComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "TrainingAddEditModalComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "FellowshipAddEditModalComponent",
          "type": "component"
        },
        {
          "name": "DocumentsUploadComponent",
          "type": "component"
        },
        {
          "name": "OtherCertificatesAddEditModalComponent",
          "type": "component"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../shared/gridDefinitions/medical-training-cols';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { MedicalTrainingSelectors, UserProfileSelectors } from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { AdvancedTrainingService } from '../api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from '../api/models/medicaltraining/advanced-training-read-only.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CalendarModule } from 'primeng/calendar';\nimport {\n  CreateMedicalTraining,\n  GetMedicalTraining,\n  GetUserCertificates,\n  GetOtherCertifications,\n  UpdateMedicalTraining,\n  CreateOtherCertification,\n  UpdateOtherCertifications,\n  GetFellowships,\n  DeleteFellowship,\n  UpdateFellowship,\n  CreateFellowship,\n  ClearMedicalTrainingErrors,\n  CreateAdvancedTraining,\n  UpdateAdvancedTraining,\n  GetAdvancedTrainingData,\n} from '../state/medical-training/medical-training.actions';\nimport {\n  GetCertificateTypes,\n  GetDegrees,\n  GetGraduateProfiles,\n  GetResidencyPrograms,\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { IStateReadOnlyModel } from '../api';\nimport { IGraduateProfileReadOnlyModel } from '../api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from '../api/models/picklists/degree-read-only.model';\nimport { FELLOWSHIP_COLS } from './fellowship-cols';\nimport { FellowshipAddEditModalComponent } from './fellowship-add-edit-modal/fellowship-add-edit-modal.component';\nimport { IFellowshipReadOnlyModel } from '../api/models/medicaltraining/fellowship-read-only.model';\nimport { MedicalTrainingActions } from './medical-training-models';\nimport { IMedicalTrainingModel } from '../api/models/medicaltraining/medical-training.model';\nimport { IResidencyProgramReadOnlyModel } from '../api/models/picklists/residency-program-read-only.model';\nimport { DocumentsUploadComponent } from '../shared/components/documents-upload/documents-upload.component';\nimport { DOCUMENTS_COLS } from './documents-col';\nimport { OTHER_CERTIFICATIONS_COLS } from './other-certificates-add-edit-modal/other-certifications-cols';\nimport { OtherCertificatesAddEditModalComponent } from './other-certificates-add-edit-modal/other-certificates-add-edit-modal.component';\nimport { ICertificateTypeReadOnlyModel } from '../api/models/picklists/certificate-type-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from '../api/models/picklists/document-type-read-only.model';\nimport { IUserCertificateReadOnlyModel } from '../api/models/medicaltraining/user-certificate-read-only.model';\nimport { IOtherCertificationsModel } from '../api/models/medicaltraining/other-certifications.model';\nimport { IFellowshipModel } from '../api/models/medicaltraining/fellowship.model';\nimport { FormErrorsComponent } from '../shared/components/form-errors/form-errors.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { IFormErrors } from '../shared/common';\nimport { IAdvancedTrainingModel } from '../api/models/medicaltraining/advanced-training.model';\nimport { SetUnsavedChanges } from '../state/application/application.actions';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-medical-training',\n  templateUrl: './medical-training.component.html',\n  styleUrls: ['./medical-training.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ProfileHeaderComponent,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    GridComponent,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    CalendarModule,\n    FellowshipAddEditModalComponent,\n    DocumentsUploadComponent,\n    OtherCertificatesAddEditModalComponent,\n    FormErrorsComponent,\n  ],\n})\nexport class MedicalTrainingComponent implements OnInit, OnDestroy {\n  //TODO: [Joe] - add form-errors shared component\n\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(PicklistsSelectors.slices.countries) countries$:\n    | Observable<IPickListItem[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.graduateProfiles) graduateProfiles$:\n    | Observable<IGraduateProfileReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.degrees) degrees$:\n    | Observable<IDegreeReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.residencyPrograms) residencyPrograms$:\n    | Observable<IResidencyProgramReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.documentTypes) documentTypes$:\n    | Observable<IDocumentTypeReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.certificateTypes) certificateTypes$:\n    | Observable<ICertificateTypeReadOnlyModel[]>\n    | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.additionalTraining)\n  additionalTraining$: Observable<IAdvancedTrainingReadOnlyModel[]> | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.medicalTraining)\n  medicalTraining$: Observable<IMedicalTrainingModel> | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.userCertificates) userCertificates$:\n    | Observable<IUserCertificateReadOnlyModel[]>\n    | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.otherCertifications)\n  otherCertifications$: Observable<IOtherCertificationsModel[]> | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.fellowships) fellowships$:\n    | Observable<IFellowshipReadOnlyModel[]>\n    | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.errors) errors$:\n    | Observable<IFormErrors>\n    | undefined;\n\n  clearErrors = new ClearMedicalTrainingErrors();\n\n  isAdditionalAdvancedEdit$: BehaviorSubject<boolean> = new BehaviorSubject(\n    false\n  );\n\n  isFellowshipEdit$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  isOtherCertificatesEdit$: BehaviorSubject<boolean> = new BehaviorSubject(\n    false\n  );\n\n  documentsData$: BehaviorSubject<any> = new BehaviorSubject([]);\n  documentTypeOptions!: any;\n  userOtherCertifications$: BehaviorSubject<IOtherCertificationsModel[]> =\n    new BehaviorSubject([] as unknown as IOtherCertificationsModel[]);\n\n  tempData$: BehaviorSubject<any> = new BehaviorSubject({});\n  countries!: IPickListItem[];\n  states!: IStateReadOnlyModel[];\n  graduateProfiles!: IGraduateProfileReadOnlyModel[];\n  medicalTraining!: IMedicalTrainingModel;\n  residencyPrograms!: IResidencyProgramReadOnlyModel[];\n  certificateTypes!: ICertificateTypeReadOnlyModel[];\n  documentTypes!: IDocumentTypeReadOnlyModel[];\n  degrees: IDegreeReadOnlyModel[] = [];\n  userId!: number;\n  createMode!: boolean;\n  trainingCols = MEDICAL_TRAINING_COLS;\n  fellowshipCols = FELLOWSHIP_COLS;\n  documentsCols = DOCUMENTS_COLS;\n  otherCertificationCols = OTHER_CERTIFICATIONS_COLS;\n  medicalTrainingReadOnly!: IMedicalTrainingModel;\n  medicalTrainingId!: number;\n  trainingAddEditTitle: string | undefined;\n  isEdit = true;\n  showTrainingAddEdit = false;\n  showFellowshipAddEdit = false;\n  showRPVICertificatesAddEdit = false;\n  year = new Date().getFullYear();\n  maxYear: Date = new Date();\n  canAddRPVI = true;\n\n  medicalTrainingForm = new FormGroup({\n    graduateProfileId: new FormControl(''),\n    graduateProfileDescription: new FormControl(''),\n    medicalSchoolName: new FormControl('', [\n      Validators.required,\n      Validators.max(30),\n    ]),\n    medicalSchoolCity: new FormControl('', Validators.required),\n    medicalSchoolStateId: new FormControl({ value: null, disabled: true }),\n    medicalSchoolCountryId: new FormControl('', Validators.required),\n    medicalSchoolCountryName: new FormControl('', [\n      Validators.required,\n      Validators.max(30),\n    ]),\n    degreeId: new FormControl('', Validators.required),\n    degreeName: new FormControl(''),\n    medicalSchoolCompletionYear: new FormControl('', Validators.required),\n    residencyProgramName: new FormControl(0),\n    residencyCompletionYear: new FormControl('', Validators.required),\n    residencyProgramOther: new FormControl('', Validators.max(8000)),\n  });\n\n  isSubmitted = false;\n\n  constructor(\n    private _store: Store,\n    private advancedTrainingService: AdvancedTrainingService,\n    public globalDialogService: GlobalDialogService\n  ) {\n    this._store.dispatch(new GetResidencyPrograms());\n    this._store.dispatch(new GetUserCertificates());\n    this._store.dispatch(new GetAdvancedTrainingData());\n    this._store.dispatch(new GetDegrees());\n    this._store.dispatch(new GetMedicalTraining());\n    this._store.dispatch(new GetCertificateTypes());\n    this._store.dispatch(new GetGraduateProfiles());\n    this._store.dispatch(new GetOtherCertifications());\n    this._store.dispatch(new GetFellowships());\n  }\n  ngOnDestroy(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n  }\n\n  ngOnInit(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n\n    this.maxYear.setFullYear(this.year);\n    this.userId$?.pipe(untilDestroyed(this)).subscribe((id) => {\n      this.userId = id;\n    });\n    this.setPicklists();\n    this.getDocumentsData();\n    this.getMedicalTraining();\n    this.getRPVICertificates();\n\n    this.medicalTrainingForm.valueChanges.subscribe(() => {\n      this._store.dispatch(this.clearErrors);\n      const isDirty = this.medicalTrainingForm.dirty;\n      this._store.dispatch(new SetUnsavedChanges(isDirty && !this.isSubmitted));\n    });\n    this.setStates();\n  }\n\n  setPicklists() {\n    this.countries$?.pipe(untilDestroyed(this)).subscribe((countries: IPickListItem[]) => {\n      this.countries = countries;\n    });\n    this.graduateProfiles$?.pipe(untilDestroyed(this)).subscribe(\n      (graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        this.graduateProfiles = graduateProfiles;\n      }\n    );\n    this.degrees$?.pipe(untilDestroyed(this)).subscribe((degrees: IDegreeReadOnlyModel[]) => {\n      this.degrees = degrees;\n    });\n    this.residencyPrograms$?.pipe(untilDestroyed(this)).subscribe(\n      (residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        this.residencyPrograms = residencyPrograms;\n      }\n    );\n    this.documentTypes$?.pipe(untilDestroyed(this)).subscribe(\n      (documentTypes: IDocumentTypeReadOnlyModel[]) => {\n        this.documentTypes = documentTypes;\n      }\n    );\n    this.certificateTypes$?.pipe(untilDestroyed(this)).subscribe(\n      (certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        this.certificateTypes = certificateTypes;\n      }\n    );\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining$?.pipe(untilDestroyed(this)).subscribe(\n      (medicalTraining: IMedicalTrainingModel) => {\n        if (medicalTraining) {\n          this.createMode = false;\n          this.medicalTrainingId = medicalTraining.id;\n          this.medicalTrainingReadOnly = medicalTraining;\n          const residencyProgramId = this.residencyPrograms.filter(\n            (program) =>\n              program.programName === medicalTraining.residencyProgramName\n          )[0]?.programId;\n          this.setStates(medicalTraining.medicalSchoolCountryId);\n          this.medicalTrainingForm.get('medicalSchoolStateId')?.enable();\n\n          for (const [key, value] of Object.entries(medicalTraining)) {\n            this.medicalTrainingForm.get(key)?.patchValue(value);\n          }\n          this.medicalTrainingForm\n            .get('graduateProfileId')\n            ?.patchValue(medicalTraining.graduateProfileId.toString());\n          this.medicalTrainingForm\n            .get('residencyProgramName')\n            ?.patchValue(residencyProgramId);\n          this.isEdit = false;\n        } else {\n          this.createMode = true;\n        }\n      }\n    );\n  }\n\n  getRPVICertificates() {\n    this.otherCertifications$?.pipe(untilDestroyed(this)).subscribe(\n      (otherCertifications: IOtherCertificationsModel[]) => {\n        if (otherCertifications?.length > 0) {\n          this.canAddRPVI = false;\n        }\n      }\n    );\n  }\n\n  onCountryChange(event: any) {\n    const countryId = event.value;\n    this.setStates(countryId);\n    const countryName =\n      this.countries.filter((country) => country.itemValue === countryId)[0]\n        .itemDescription ?? '';\n\n    this.medicalTrainingForm\n      .get('medicalSchoolCountryName')\n      ?.patchValue(countryName);\n  }\n\n  onDegreeChange(event: any) {\n    const degreeId = event.value;\n    const degreeName = this.degrees.filter(\n      (degree) => degree.itemValue === degreeId\n    )[0].itemDisplay;\n    this.medicalTrainingForm.get('degreeName')?.patchValue(degreeName);\n  }\n\n  onGraduateProfileChange(event: any) {\n    const graduateProfileId = event.value;\n\n    const graduateProfileDescription =\n      this.graduateProfiles.filter(\n        (graduateProfile) => graduateProfile.type === graduateProfileId\n      )[0].description ?? '';\n\n    this.medicalTrainingForm\n      .get('graduateProfileDescription')\n      ?.patchValue(graduateProfileDescription);\n  }\n\n  setStates(countryId?: string) {\n    this._store.dispatch(new GetStateList(countryId ?? '500'));\n    this.states$?.pipe(untilDestroyed(this)).subscribe((states: IStateReadOnlyModel[]) => {\n      this.states = states;\n      if (states.length > 0) {\n        this.medicalTrainingForm.get('medicalSchoolStateId')?.enable();\n      } else {\n        this.medicalTrainingForm.get('medicalSchoolStateId')?.disable();\n      }\n    });\n  }\n\n  getDocumentsData() {\n    this.userCertificates$?.pipe(untilDestroyed(this)).subscribe(\n      (userCertificates: IUserCertificateReadOnlyModel[]) => {\n        this.documentsData$.next(userCertificates);\n      }\n    );\n  }\n\n  handleDocumentUpload(event: any) {\n    console.log('unhandled upload', event);\n  }\n\n  handleGridAction($event: any, form: string) {\n    const data = $event.data;\n\n    const actions: MedicalTrainingActions = {\n      edit: {\n        additionalTraining: () => {\n          this.isAdditionalAdvancedEdit$.next(true);\n          this.tempData$.next(data);\n          this.showTrainingModal(true);\n        },\n        fellowship: () => {\n          this.isFellowshipEdit$.next(true);\n          this.tempData$.next(data);\n          this.showFellowshipModal(true);\n        },\n        otherCertificates: () => {\n          this.isOtherCertificatesEdit$.next(true);\n          this.tempData$.next(data);\n          this.showOtherCertificaions(true);\n        },\n      },\n      delete: {\n        fellowship: () => {\n          this._store.dispatch(new DeleteFellowship(data.id));\n        },\n        certificates: () => {\n          this.getDocumentsData();\n        },\n      },\n      upload: {\n        certificates: () => {\n          this.getDocumentsData();\n        },\n      },\n    };\n\n    const action = actions[$event.fieldKey]?.[form];\n    if (action) {\n      action();\n    }\n  }\n\n  showTrainingModal(isEdit = false) {\n    this.isAdditionalAdvancedEdit$.next(isEdit);\n    this.showTrainingAddEdit = !this.showTrainingAddEdit;\n  }\n\n  showFellowshipModal(isEdit = false) {\n    this.isFellowshipEdit$.next(isEdit);\n    this.showFellowshipAddEdit = !this.showFellowshipAddEdit;\n  }\n\n  showOtherCertificaions(isEdit = false) {\n    this.isOtherCertificatesEdit$.next(isEdit);\n    this.showRPVICertificatesAddEdit = !this.showRPVICertificatesAddEdit;\n  }\n\n  saveTraining($event: any) {\n    const formValues = $event.trainingRecord;\n    const programId: number | undefined = parseInt(\n      formValues.institutionName?.itemValue ?? ''\n    );\n    const trainingTypeId: number | undefined = parseInt(\n      formValues.trainingType ?? ''\n    );\n\n    const model = {\n      id: $event.trainingId,\n      trainingTypeId: trainingTypeId ?? null,\n      programId: programId ?? null,\n      other: formValues.other ?? undefined,\n      startDate: new Date(formValues.startDate ?? '').toISOString() ?? null,\n      endDate: new Date(formValues.endDate ?? '').toISOString() ?? null,\n    } as unknown as IAdvancedTrainingModel;\n\n    if ($event.edit === true && $event.trainingId) {\n      this._store\n        .dispatch(new UpdateAdvancedTraining(model))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.medical_training.errors) {\n            this.showTrainingAddEdit = $event.show;\n            this.tempData$.next({});\n          }\n        });\n    }\n\n    if ($event.edit === false) {\n      this._store\n        .dispatch(new CreateAdvancedTraining(model))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.medical_training.errors) {\n            this.showTrainingAddEdit = $event.show;\n            this.tempData$.next({});\n          }\n        });\n    }\n  }\n\n  saveFellowship($event: any) {\n    const model = {\n      id: $event.fellowshipId,\n      programName: $event.fellowshipForm.programName ?? '',\n      completionYear:\n        $event.fellowshipForm.completionYear instanceof Date\n          ? $event.fellowshipForm.completionYear.getFullYear().toString()\n          : $event.fellowshipForm.completionYear,\n      programOther: $event.fellowshipForm.programOther,\n    } as unknown as IFellowshipModel;\n\n    if ($event.edit === true && $event.fellowshipId) {\n      this._store.dispatch(new UpdateFellowship(model)).subscribe((res) => {\n        if (!res.medical_training.errors) {\n          this.showFellowshipAddEdit = $event.show;\n          this.tempData$.next({});\n        }\n      });\n    }\n\n    if ($event.edit === false) {\n      this._store.dispatch(new CreateFellowship(model)).subscribe((res) => {\n        if (!res.medical_training.errors) {\n          this.showFellowshipAddEdit = $event.show;\n          this.tempData$.next({});\n        }\n      });\n    }\n  }\n\n  saveRPVICertificate($event: any) {\n    const form = $event.otherCertificateForm;\n\n    const model: IOtherCertificationsModel = {\n      id: form.id ?? null,\n      certificateNumber: form.certificateNumber?.toString(),\n      certificateTypeId: 6,\n      issueDate: new Date(form.issueDate ?? '').toISOString() ?? null,\n    } as IOtherCertificationsModel;\n\n    if ($event.edit === true && $event.otherCertificateId) {\n      this._store\n        .dispatch(new UpdateOtherCertifications(model))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.medical_training.errors) {\n            this.showRPVICertificatesAddEdit = $event.show;\n          }\n        });\n    }\n    if ($event.edit === false) {\n      this._store\n        .dispatch(new CreateOtherCertification(model))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.medical_training.errors) {\n            this.showRPVICertificatesAddEdit = $event.show;\n          }\n        });\n    }\n  }\n\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  cancelAddEditFellowship($event: any) {\n    this.showFellowshipAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  cancelOtherCertificatesAddEditModal($event: any) {\n    this.showRPVICertificatesAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  toggleFormEdit(toggle: boolean) {\n    this.isEdit = toggle;\n    // this.hasUnsavedChanges = toggle;\n    this._store.dispatch(new SetUnsavedChanges(toggle));\n  }\n\n  save() {\n    const formValues = this.medicalTrainingForm.value;\n    const residencyProgramName = this.residencyPrograms.filter((program) => {\n      if (\n        formValues.residencyProgramName &&\n        +program.programId === +formValues.residencyProgramName\n      ) {\n        return program;\n      } else return [];\n    });\n\n    const model = {\n      userId: this.userId,\n      graduateProfileId: parseInt(formValues.graduateProfileId ?? ''),\n      medicalSchoolName: formValues.medicalSchoolName,\n      medicalSchoolCity: formValues.medicalSchoolCity,\n      medicalSchoolStateId: formValues.medicalSchoolStateId,\n      medicalSchoolCountryId: formValues.medicalSchoolCountryId,\n      medicalSchoolCountryName: formValues.medicalSchoolCountryName,\n      medicalSchoolCompletionYear: formValues.medicalSchoolCompletionYear,\n      graduateProfileDescription: formValues.graduateProfileDescription,\n      degreeId: formValues.degreeId,\n      degreeName: formValues.degreeName,\n      residencyProgramName: residencyProgramName[0].programName,\n      residencyCompletionYear: formValues.residencyCompletionYear,\n      residencyProgramOther: formValues.residencyProgramOther,\n      createdByUserId: this.userId,\n    } as unknown as IMedicalTrainingModel;\n\n    this.globalDialogService\n      .showConfirmation('Confirmation', 'Are you sure?')\n      .then((result) => {\n        if (result) {\n          this.isSubmitted = true;\n          if (this.createMode === true) {\n            this._store.dispatch(new CreateMedicalTraining(model));\n          } else {\n            model['id'] = this.medicalTrainingId;\n            this._store.dispatch(new UpdateMedicalTraining(model));\n          }\n        }\n      });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".form-section {\n  margin: 2rem 0;\n}\n.form-section__title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\nhr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\n\n.btn-upload {\n  margin-top: 1.75rem;\n  min-width: 150px;\n  color: var(--global-success);\n}\n.btn-remove {\n  margin-top: 2rem;\n  min-width: 150px;\n  color: var(--global-danger);\n}\n\n.file-upload {\n  width: 100%;\n  .file-upload__label {\n    cursor: pointer;\n    display: block;\n    width: 100%;\n    border: 1px solid #a2a2a2;\n    border-radius: 6px;\n    padding: 0.5rem 3rem 0.5rem 1rem;\n    font-weight: 400;\n    font-style: italic;\n    i {\n      margin-right: 0.75rem;\n      color: var(--global-warning);\n    }\n  }\n  .file-upload__input {\n    display: none;\n  }\n}\n",
          "styleUrl": "./medical-training.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "advancedTrainingService",
            "type": "AdvancedTrainingService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 227,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "advancedTrainingService",
            "type": "AdvancedTrainingService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<header>\n  <h1>Medical Training</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12 mb-3\">\n        <div class=\"mb-3\">\n          <abs-form-errors\n            *ngIf=\"errors$ | async as error\"\n            [errors]=\"error\"\n            [clearErrors]=\"clearErrors\"\n          ></abs-form-errors>\n        </div>\n        <form id=\"medicalTrainingForm\" [formGroup]=\"medicalTrainingForm\">\n          <div class=\"form-section mt-0\">\n            <h5 class=\"form-section__title\">Medical School</h5>\n            <hr />\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12\">\n                <label\n                  >Select the statement that best describes you (Country of\n                  medical school)\n                </label>\n                <div>\n                  {{ medicalTrainingReadOnly.graduateProfileDescription }}\n                </div>\n              </div>\n              <div class=\"col-12 flex flex-column\">\n                <label>Medical School</label>\n                <div>\n                  {{ medicalTrainingReadOnly.medicalSchoolName }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>Country</label>\n                {{ medicalTrainingReadOnly.medicalSchoolCountryName }}\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>State / Province / Territory</label>\n                {{ medicalTrainingReadOnly.medicalSchoolStateId }}\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>City or Town</label>\n                <div>\n                  {{ medicalTrainingReadOnly.medicalSchoolCity }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>Degree</label>\n                {{ medicalTrainingReadOnly.degreeName }}\n              </div>\n              <div class=\"col-12 md:col-6 flex flex-column\">\n                <label>Year of Completion</label>\n                {{ medicalTrainingReadOnly.medicalSchoolCompletionYear }}\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"graduateProfileId\"\n                  >Select the statement that best describes you (Country of\n                  medical school) *</label\n                >\n                <p-dropdown\n                  [options]=\"graduateProfiles\"\n                  (onChange)=\"onGraduateProfileChange($event)\"\n                  formControlName=\"graduateProfileId\"\n                  inputId=\"graduateProfileId\"\n                  placeholder=\"Select one\"\n                  optionLabel=\"description\"\n                  optionValue=\"type\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"medicalSchool\"\n                  >Medical School *</label\n                >\n                <input\n                  pInputText\n                  formControlName=\"medicalSchoolName\"\n                  type=\"text\"\n                  placeholder=\"Enter school name\"\n                  name=\"medicalSchool\"\n                  maxlength=\"30\"\n                />\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"medicalSchoolCountryId\">\n                  Country *\n                </label>\n                <p-dropdown\n                  inputId=\"country\"\n                  [options]=\"countries\"\n                  (onChange)=\"onCountryChange($event)\"\n                  placeholder=\"Choose country\"\n                  formControlName=\"medicalSchoolCountryId\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"state\"\n                  >State / Province / Territory</label\n                >\n                <p-dropdown\n                  inputId=\"state\"\n                  [options]=\"states\"\n                  placeholder=\"Choose state\"\n                  formControlName=\"medicalSchoolStateId\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"medicalSchoolCity\"\n                  >City or Town *</label\n                >\n                <input\n                  pInputText\n                  type=\"text\"\n                  placeholder=\"Enter city name\"\n                  formControlName=\"medicalSchoolCity\"\n                  maxlength=\"30\"\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"degreeId\">Degree *</label>\n                <p-dropdown\n                  [options]=\"degrees\"\n                  (onChange)=\"onDegreeChange($event)\"\n                  formControlName=\"degreeId\"\n                  inputId=\"degreeId\"\n                  placeholder=\"Select a degree\"\n                  optionLabel=\"itemDisplay\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"flex flex-column col-12 md:col-6\">\n                <label htmlFor=\"other\">Year of Completion *</label>\n                <p-calendar\n                  [maxDate]=\"maxYear\"\n                  view=\"year\"\n                  dateFormat=\"yy\"\n                  inputId=\"yearpicker\"\n                  formControlName=\"medicalSchoolCompletionYear\"\n                  placeholder=\"YYYY\"\n                  appendTo=\"body\"\n                ></p-calendar>\n                <small\n                  *ngIf=\"\n                    medicalTrainingForm.get('medicalSchoolCompletionYear')\n                      ?.errors &&\n                    medicalTrainingForm.get('medicalSchoolCompletionYear')\n                      ?.dirty\n                  \"\n                  id=\"trainingType-help\"\n                  class=\"form-error-text\"\n                >\n                  This is required\n                </small>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Residency</h5>\n            <hr />\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label>Program Name</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyProgramName }}\n                    </div>\n                  </div>\n                  <div class=\"col-12\">\n                    <label>Year of Completion</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyCompletionYear }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label>My program is not listed</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyProgramOther }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label class=\"block\" for=\"residencyProgramName\"\n                      >Enter program name *</label\n                    >\n                    <p-dropdown\n                      [options]=\"residencyPrograms\"\n                      [showClear]=\"true\"\n                      formControlName=\"residencyProgramName\"\n                      inputId=\"residencyProgramName\"\n                      placeholder=\"Select a program\"\n                      optionLabel=\"programName\"\n                      optionValue=\"programId\"\n                      appendTo=\"body\"\n                    ></p-dropdown>\n                  </div>\n                  <div class=\"flex flex-column col-12\">\n                    <label htmlFor=\"other\">Year of Completion *</label>\n                    <p-calendar\n                      [maxDate]=\"maxYear\"\n                      view=\"year\"\n                      dateFormat=\"yy\"\n                      inputId=\"yearpicker\"\n                      formControlName=\"residencyCompletionYear\"\n                      placeholder=\"YYYY\"\n                      appendTo=\"body\"\n                    ></p-calendar>\n                    <small\n                      *ngIf=\"\n                        medicalTrainingForm.get('residencyCompletionYear')\n                          ?.errors &&\n                        medicalTrainingForm.get('residencyCompletionYear')\n                          ?.dirty\n                      \"\n                      id=\"trainingType-help\"\n                      class=\"form-error-text\"\n                    >\n                      This is required\n                    </small>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label class=\"block\" for=\"residencyProgramOther\"\n                      >My program is not listed *</label\n                    >\n                    <textarea\n                      pInputTextarea\n                      rows=\"5\"\n                      maxlength=\"8000\"\n                      id=\"residencyProgramOther\"\n                      formControlName=\"residencyProgramOther\"\n                      placeholder=\"Explain...\"\n                    ></textarea>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-12\">\n            <div class=\"flex justify-content-end\" *ngIf=\"!isEdit\">\n              <p-button\n                [style]=\"{ width: '200px' }\"\n                (click)=\"toggleFormEdit(true)\"\n                >Edit</p-button\n              >\n            </div>\n            <div class=\"flex justify-content-end\" *ngIf=\"isEdit\">\n              <p-button\n                styleClass=\"p-button-link p-button-primary\"\n                (click)=\"toggleFormEdit(false)\"\n                >Cancel</p-button\n              >\n              <p-button\n                type=\"submit\"\n                [style]=\"{ width: '337px' }\"\n                (click)=\"save()\"\n                [disabled]=\"!medicalTrainingForm.valid\"\n                >Save</p-button\n              >\n            </div>\n          </div>\n        </form>\n      </sl-card>\n      <sl-card class=\"col-12\">\n        <div class=\"form-section\">\n          <h5 class=\"form-section__title\">Fellowship</h5>\n          <hr />\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n            neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n            erat, egestas sit amet tortor at, condimentum tempor erat.\n          </p>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p-button\n                class=\"btn-add mt-4 mb-3\"\n                (click)=\"showFellowshipModal()\"\n              >\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD FELLOWSHIP\n              </p-button>\n              <abs-grid\n                [columns]=\"fellowshipCols\"\n                [data]=\"fellowships$\"\n                (action)=\"handleGridAction($event, 'fellowship')\"\n                class=\"margin-bottom-2\"\n              ></abs-grid>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-section\">\n          <h5 class=\"form-section__title\">Certificates</h5>\n          <hr />\n          <abs-documents-upload\n            [allowUpload]=\"true\"\n            [documentsData$]=\"documentsData$\"\n            [gridCols]=\"documentsCols\"\n            [dropdownOptions]=\"certificateTypes\"\n            [dropdownPlaceholder]=\"'Select a certificate type'\"\n            [dropdownLabel]=\"'name'\"\n            [dropdownValue]=\"'id'\"\n            [filterOn]=\"'documentName'\"\n            [showFilter]=\"true\"\n            [userId]=\"userId\"\n            (documentsAction)=\"handleGridAction($event, 'certificates')\"\n          ></abs-documents-upload>\n        </div>\n\n        <div class=\"form-section\">\n          <h5 class=\"form-section__title\">RPVI Certificate</h5>\n          <hr />\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p-button\n                *ngIf=\"canAddRPVI\"\n                class=\"btn-add mt-4 mb-3\"\n                (click)=\"showOtherCertificaions()\"\n              >\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD RPVI CERTIFICATION\n              </p-button>\n              <abs-grid\n                [columns]=\"otherCertificationCols\"\n                [data]=\"otherCertifications$\"\n                (action)=\"handleGridAction($event, 'otherCertificates')\"\n                class=\"margin-bottom-2\"\n              ></abs-grid>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-section\">\n          <h5 class=\"form-section__title\">\n            Additional / Advanced Medical Training\n          </h5>\n          <hr />\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p-button class=\"btn-add mt-4 mb-3\" (click)=\"showTrainingModal()\">\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD TRAINING\n              </p-button>\n              <abs-grid\n                [columns]=\"trainingCols\"\n                [data]=\"additionalTraining$\"\n                (action)=\"handleGridAction($event, 'additionalTraining')\"\n                class=\"margin-bottom-2\"\n                [pagination]=\"true\"\n                [itemsPerPage]=\"5\"\n              ></abs-grid>\n            </div>\n          </div>\n        </div>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<abs-modal\n  [open]=\"showTrainingAddEdit\"\n  [preventOverlayClose]=\"true\"\n  [hideClose]=\"true\"\n  (closeDialog)=\"cancelAddEditTraining($event)\"\n  title=\"{{\n    (isAdditionalAdvancedEdit$ | async) ? 'Edit' : 'Add'\n  }} Additional / Advanced Medical Training\"\n>\n  <abs-training-add-edit-modal\n    *ngIf=\"showTrainingAddEdit\"\n    [userId]=\"userId\"\n    [training$]=\"tempData$\"\n    [errors$]=\"errors$\"\n    [isEdit$]=\"isAdditionalAdvancedEdit$\"\n    (cancelDialog)=\"cancelAddEditTraining($event)\"\n    (saveDialog)=\"saveTraining($event)\"\n  ></abs-training-add-edit-modal>\n</abs-modal>\n\n<abs-modal\n  [open]=\"showFellowshipAddEdit\"\n  [preventOverlayClose]=\"true\"\n  [hideClose]=\"true\"\n  (closeDialog)=\"cancelAddEditFellowship($event)\"\n  title=\"{{ (isFellowshipEdit$ | async) ? 'Edit' : 'Add' }} Fellowship\"\n>\n  <abs-fellowship-add-edit-modal\n    *ngIf=\"showFellowshipAddEdit\"\n    [userId]=\"userId\"\n    [fellowship$]=\"tempData$\"\n    [isEdit$]=\"isFellowshipEdit$\"\n    [errors$]=\"errors$\"\n    (cancelDialog)=\"cancelAddEditFellowship($event)\"\n    (saveDialog)=\"saveFellowship($event)\"\n  ></abs-fellowship-add-edit-modal>\n</abs-modal>\n\n<abs-modal\n  [open]=\"showRPVICertificatesAddEdit\"\n  [preventOverlayClose]=\"true\"\n  [hideClose]=\"true\"\n  (closeDialog)=\"cancelOtherCertificatesAddEditModal($event)\"\n  title=\"{{\n    (isOtherCertificatesEdit$ | async) ? 'Edit' : 'Add'\n  }} RPVI Certification\"\n>\n  <abs-other-certificates-add-edit-modal\n    *ngIf=\"showRPVICertificatesAddEdit\"\n    [userId]=\"userId\"\n    [otherCertificate$]=\"tempData$\"\n    [isEdit$]=\"isOtherCertificatesEdit$\"\n    [errors$]=\"errors$\"\n    (cancelDialog)=\"cancelOtherCertificatesAddEditModal($event)\"\n    (saveDialog)=\"saveRPVICertificate($event)\"\n  ></abs-other-certificates-add-edit-modal>\n</abs-modal>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading medical training...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ModalComponent",
      "id": "component-ModalComponent-6876b901c5ce6ade69937a0d7b40e7d9db9c64f96a535955c7ddb33ce892635b77580b9de0183614677561ca96583e2eaa65a1ff19ee9af57e29ebef24e7b30c",
      "file": "src/app/shared/components/modal/modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-modal",
      "styleUrls": ["./modal.component.scss"],
      "styles": [],
      "templateUrl": ["./modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "hideClose",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "modalName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "any",
          "decorators": []
        },
        {
          "name": "open",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "preventOverlayClose",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"completed\" | \"in-progress\" | \"alert\" | undefined",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "width",
          "defaultValue": "70",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-modal',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ModalComponent {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Input() open = false;\n  @Input() title: string | undefined;\n  @Input() status: 'completed' | 'in-progress' | 'alert' | undefined;\n  @Input() modalName!: any;\n  @Input() preventOverlayClose = false;\n  @Input() hideClose = false;\n  @Input() width = 70;\n\n  close(event: any) {\n    if (this.preventOverlayClose && event.detail.source === 'overlay') {\n      event.preventDefault();\n    } else {\n      this.closeDialog.emit({ action: this.modalName });\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-dialog::part(header-actions) {\n  padding: 0;\n}\nsl-dialog::part(close-button) {\n  padding-right: 1rem;\n}\nsl-dialog.hide-close::part(close-button) {\n  display: none;\n}\nsl-dialog::part(header)::after {\n  height: 1px;\n  color: var(--global-gray-lightest);\n}\n\nsl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n\n.status {\n  text-transform: capitalize;\n}\n.completed {\n  color: var(--global-success);\n}\n.in-progress {\n  color: var(--global-warning);\n}\n.alert {\n  color: var(--global-danger);\n}\n",
          "styleUrl": "./modal.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<sl-dialog\n  [open]=\"open\"\n  [style]=\"'--width: ' + width + '%'\"\n  [class]=\"hideClose ? 'hide-close' : ''\"\n  (sl-request-close)=\"close($event)\"\n>\n  <div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n    <span class=\"text-2xl\">{{ title }}</span>\n    <!-- TODO: [Joe] status and status class should be derieved from state of reactive form(s) -->\n    <span class=\"text-base\" *ngIf=\"status\">\n      Status:\n      <span [class]=\"'status ' + status\">{{\n        status.replace('-', ' ')\n      }}</span></span\n    >\n  </div>\n  <div class=\"modal-content\">\n    <ng-content></ng-content>\n  </div>\n</sl-dialog>\n"
    },
    {
      "name": "MyAccountComponent",
      "id": "component-MyAccountComponent-bfb7d8aabc35549695e52e1a45e067efeab5aa8a15843cc71a9713ec5626405d227022d41d365b89ce333f50e609301e1341bb5acf9604d72d582bbd62ba4dcc",
      "file": "src/app/my-account/my-account.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-my-account",
      "styleUrls": ["./my-account.component.scss"],
      "styles": [],
      "templateUrl": ["./my-account.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "clearErrors",
          "defaultValue": "new ClearErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "MyAccountSelectors.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "globalDialogService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GlobalDialogService",
          "optional": false,
          "description": "",
          "line": 86,
          "modifierKind": [123]
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "isSubmitted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "myAccountForm",
          "defaultValue": "new FormGroup(\n    {\n      emailAddress: new FormControl('', [Validators.email]),\n      confirmEmailAddress: new FormControl('', [Validators.email]),\n      password: new FormControl('', [validatePassword()]),\n      confirmPassword: new FormControl('', [validatePassword()]),\n      mailingList: new FormControl(true),\n    },\n    {\n      validators: [\n        matchFields('emailAddress', 'confirmEmailAddress'),\n        matchFields('password', 'confirmPassword'),\n      ],\n    }\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroup",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "profilePicture",
          "defaultValue": "'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserProfile | null",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile | null> | undefined",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userSub",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 60
        }
      ],
      "methodsClass": [
        {
          "name": "getErrors",
          "args": [
            {
              "name": "error",
              "type": "object",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "error",
              "type": "object",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 128,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetForm",
          "args": [
            {
              "name": "$event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectAll",
          "args": [
            {
              "name": "$event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ProfileHeaderComponent",
          "type": "component"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "PasswordModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { matchFields, validatePassword } from '../shared/validators/validators';\nimport {\n  IUserCredential,\n  MyAccountSelectors,\n  SaveMyAccountChanges,\n  UserProfileSelectors,\n  IUserProfile,\n} from '../state';\nimport { ClearErrors } from '../state';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { FormErrorsComponent } from '../shared/components/form-errors/form-errors.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { ButtonModule } from 'primeng/button';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { SetUnsavedChanges } from '../state/application/application.actions';\n\n@Component({\n  selector: 'abs-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    ProfileHeaderComponent,\n    FormErrorsComponent,\n    InputTextModule,\n    PasswordModule,\n    CheckboxModule,\n    ButtonModule,\n  ],\n})\nexport class MyAccountComponent implements OnDestroy {\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile | null>\n    | undefined;\n  @Select(MyAccountSelectors.errors) errors$: Observable<any> | undefined;\n\n  clearErrors = new ClearErrors();\n\n  userSub: Subscription | undefined;\n  user: IUserProfile | null = null;\n\n  isEdit = false;\n  profilePicture =\n    'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU';\n\n  isSubmitted = false;\n\n  myAccountForm: FormGroup = new FormGroup(\n    {\n      emailAddress: new FormControl('', [Validators.email]),\n      confirmEmailAddress: new FormControl('', [Validators.email]),\n      password: new FormControl('', [validatePassword()]),\n      confirmPassword: new FormControl('', [validatePassword()]),\n      mailingList: new FormControl(true),\n    },\n    {\n      validators: [\n        matchFields('emailAddress', 'confirmEmailAddress'),\n        matchFields('password', 'confirmPassword'),\n      ],\n    }\n  );\n  constructor(\n    private store: Store,\n    public globalDialogService: GlobalDialogService\n  ) {\n    this.store.dispatch(new SetUnsavedChanges(false));\n    this.userSub = this.user$?.pipe(untilDestroyed(this)).subscribe((user) => {\n      if (user) {\n        this.user = user;\n        this.myAccountForm.patchValue({\n          emailAddress: this.user?.emailAddress,\n          confirmEmailAddress: this.user?.emailAddress,\n        });\n      }\n    });\n\n    this.myAccountForm.valueChanges.subscribe(() => {\n      const isDirty = this.myAccountForm.dirty;\n      this.store.dispatch(new SetUnsavedChanges(isDirty && !this.isSubmitted));\n    });\n  }\n\n  ngOnDestroy() {\n    this.userSub?.unsubscribe();\n    this.store.dispatch(new SetUnsavedChanges(false));\n  }\n\n  getErrors(error: object) {\n    return Object.values(error);\n  }\n\n  resetForm($event: Event) {\n    $event.preventDefault();\n    this.myAccountForm.reset();\n    this.myAccountForm.patchValue({\n      emailAddress: this.user?.emailAddress,\n      confirmEmailAddress: this.user?.emailAddress,\n    });\n    this.isEdit = false;\n  }\n\n  selectAll($event: Event) {\n    const target = $event.target as HTMLInputElement;\n    target.select();\n  }\n  onSubmit() {\n    // submit actions\n    const emailAddress = this.myAccountForm.value.emailAddress\n      ? this.myAccountForm.value.emailAddress\n      : null;\n    const password = this.myAccountForm.value.password;\n    const userCreds: IUserCredential = {\n      emailAddress,\n      password,\n    };\n    this.store.dispatch(new SaveMyAccountChanges(userCreds));\n    this.isSubmitted = true;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mock-placeholder {\n  width: 80%;\n  //min-width: 100rem;\n  opacity: 1;\n  img {\n    width: 100%;\n  }\n}\n\n.account-status {\n  color: var(--global-gray-dark);\n}\n",
          "styleUrl": "./my-account.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 83,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "templateData": "<header>\n  <h1>{{ 'MYACCOUNT.TITLE' | translate }}</h1>\n</header>\n<ng-container *ngIf=\"user$ | async as user; else loading\">\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header\n          [profilePicture]=\"profilePicture\"\n          [user]=\"user\"\n        ></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>{{ 'MYACCOUNT.SUBTITLE' | translate }}</p>\n        <ng-container *ngIf=\"isEdit\">\n          <abs-form-errors\n            *ngIf=\"errors$ | async as error\"\n            [errors]=\"error\"\n            [clearErrors]=\"clearErrors\"\n          ></abs-form-errors>\n        </ng-container>\n        <div class=\"grid\" *ngIf=\"!isEdit\">\n          <div class=\"col-12 md:col-6\">\n            <label>Email Address</label>\n            <div>{{ user.emailAddress }}</div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label>Password</label>\n            <div>********</div>\n          </div>\n          <div class=\"col-12 md:col-6 flex align-items-center gap-2\">\n            <p-checkbox\n              inputId=\"mailingList\"\n              name=\"mailingList\"\n              formControlName=\"mailingList\"\n              [binary]=\"true\"\n              [readonly]=\"true\"\n            ></p-checkbox>\n            <label for=\"mailingList\">Receive ABS Emails / Newsletters?</label>\n          </div>\n          <div class=\"col-12 flex justify-content-end\">\n            <p-button\n              variant=\"primary\"\n              [style]=\"{ width: '200px' }\"\n              (click)=\"isEdit = true\"\n              >Edit</p-button\n            >\n          </div>\n        </div>\n        <form\n          name=\"myAccountForm\"\n          [formGroup]=\"myAccountForm\"\n          (ngSubmit)=\"onSubmit()\"\n        >\n          <div class=\"grid\" *ngIf=\"isEdit\">\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"emailAddress\">Email Address</label>\n              <input\n                id=\"emailAddress\"\n                pInputText\n                type=\"email\"\n                formControlName=\"emailAddress\"\n              />\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"confirmEmailAddress\"\n                >Confirm Email Address</label\n              >\n              <input\n                id=\"confirmEmailAddress\"\n                pInputText\n                type=\"email\"\n                formControlName=\"confirmEmailAddress\"\n              />\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" htmlFor=\"password\">Password</label>\n              <p-password\n                inputId=\"password\"\n                formControlName=\"password\"\n                [feedback]=\"false\"\n                [toggleMask]=\"true\"\n              ></p-password>\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"confirmPassword\"\n                >Confirm Password</label\n              >\n              <p-password\n                inputId=\"confirmPassword\"\n                formControlName=\"confirmPassword\"\n                [feedback]=\"false\"\n                [toggleMask]=\"true\"\n              ></p-password>\n            </div>\n            <div class=\"col-12 md:col-6 flex align-items-center gap-2\">\n              <p-checkbox\n                inputId=\"mailingList\"\n                name=\"mailingList\"\n                formControlName=\"mailingList\"\n                [binary]=\"true\"\n              ></p-checkbox>\n              <label for=\"mailingList\">Receive ABS Emails / Newsletters?</label>\n            </div>\n            <div class=\"col-12 flex justify-content-end\">\n              <p-button\n                styleClass=\"p-button-link p-button-primary\"\n                (click)=\"resetForm($event)\"\n                >Cancel</p-button\n              >\n              <p-button\n                type=\"submit\"\n                [style]=\"{ width: '337px' }\"\n                [disabled]=\"myAccountForm.invalid\"\n                >Save</p-button\n              >\n            </div>\n          </div>\n        </form>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading account details...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "OralExaminationsComponent",
      "id": "component-OralExaminationsComponent-62ec5c901ed39fcc037f31be52c2b6aa7135a1a6b2dfcb0fd87f0c5816570a71485e11f50907081891824e29d00d716540fb3d8711a11055429cf124c8cd01dc",
      "file": "src/app/oral-examination/oral-examination.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-oral-examination",
      "styleUrls": ["./oral-examination.component.scss"],
      "styles": [],
      "templateUrl": ["./oral-examination.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "activeCase",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "candidateCaseScores",
          "defaultValue": "{} as any",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 94
        },
        {
          "name": "candidateName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "candidateScores",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 96
        },
        {
          "name": "cases$",
          "defaultValue": "new BehaviorSubject([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "casesLength",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "currentIncrement",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 92
        },
        {
          "name": "currentYear",
          "defaultValue": "new Date().getFullYear()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "dayTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "disable",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 98
        },
        {
          "name": "disableSubmit",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 101
        },
        {
          "name": "examHeaderId",
          "defaultValue": "491",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "examinationId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 85
        },
        {
          "name": "examinee$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamineeReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 61,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examinee"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examineeUserId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "examScheduleId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "examScoringId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "ExamTimerComponent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ExamTimerComponent",
          "optional": false,
          "description": "",
          "line": 77,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ExamTimerComponent"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examTitle$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamTitleReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 73,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examTitle"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "globalDialogService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GlobalDialogService",
          "optional": false,
          "description": "",
          "line": 107,
          "modifierKind": [123]
        },
        {
          "name": "gradedCandidateCaseCores",
          "defaultValue": "{} as any",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "gradedScores$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICaseScoreReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 69,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.selectedExamScores"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "scores",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 93
        },
        {
          "name": "showTimer",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "submitDisable",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 99
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "userId$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number> | undefined",
          "optional": false,
          "description": "",
          "line": 65,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.userId"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "getExaminationData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGradedChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleNextCase",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleSave",
          "args": [
            {
              "name": "examCaseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "skipped",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "examCaseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "skipped",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleSaveAndSubmitLater",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 239,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132]
        },
        {
          "name": "handleSubmit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 256,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onRightClick",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'contextmenu', ['$event']"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToElementById",
          "args": [
            {
              "name": "elementId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 230,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "elementId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "skipCase",
          "args": [
            {
              "name": "examCaseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 214,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "examCaseId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateScores",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 294,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [132]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "contextmenu",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ExpandableComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "ExaminationScoreCardComponent",
          "type": "component"
        },
        {
          "name": "ExamTimerComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ExpandableComponent } from '../shared/components/expandable/expandable.component';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { ExaminationScoreCardComponent } from '../shared/components/examination-score-card/examination-score-card.component';\nimport { BehaviorSubject, Observable, take } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  CreateCaseScore,\n  CreateExamScore,\n  ExamScoringSelectors,\n  GetExamTitle,\n  GetExaminee,\n  GetSelectedExamScores,\n  SkipExam,\n  UpdateCaseScore,\n  UserProfileSelectors,\n} from '../state';\nimport { IExamineeReadOnlyModel } from '../api/models/scoring/ce/examinee-read-only.model';\nimport { ExamTimerComponent } from '../shared/components/exam-timer-component/exam-timer.component';\nimport { ICaseScoreModel, ICaseScoreReadOnlyModel } from '../api';\nimport { IExamScoreModel } from '../api/models/ce/exam-score.model';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SetExamInProgress } from '../state/application/application.actions';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-oral-examination',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    ExpandableComponent,\n    ButtonModule,\n    InputTextareaModule,\n    ExaminationScoreCardComponent,\n    ExamTimerComponent,\n  ],\n  templateUrl: './oral-examination.component.html',\n  styleUrls: ['./oral-examination.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class OralExaminationsComponent implements OnInit, OnDestroy {\n  @HostListener('contextmenu', ['$event'])\n  onRightClick(event: any) {\n    event.preventDefault();\n  }\n\n  @Select(ExamScoringSelectors.slices.examinee) examinee$:\n    | Observable<IExamineeReadOnlyModel>\n    | undefined;\n\n  @Select(UserProfileSelectors.slices.userId) userId$:\n    | Observable<number>\n    | undefined;\n\n  @Select(ExamScoringSelectors.slices.selectedExamScores) gradedScores$:\n    | Observable<ICaseScoreReadOnlyModel[]>\n    | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  @ViewChild(ExamTimerComponent) ExamTimerComponent!: ExamTimerComponent;\n\n  examHeaderId = 491; // TODO - remove hard coded value\n\n  cases$: BehaviorSubject<any> = new BehaviorSubject([]);\n  userId!: number;\n  casesLength!: number;\n  currentYear = new Date().getFullYear();\n  examinationId!: string | null;\n  candidateName!: string;\n  examScoringId!: number;\n  examineeUserId!: number;\n  examScheduleId!: number;\n  dayTime!: string;\n  activeCase = 0;\n  currentIncrement = 1;\n  scores!: any[];\n  candidateCaseScores = {} as any;\n  gradedCandidateCaseCores = {} as any;\n  candidateScores: any[] = [];\n  showTimer = false;\n  disable = true;\n  submitDisable = true;\n\n  disableSubmit = true;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private _store: Store,\n    private router: Router,\n    public globalDialogService: GlobalDialogService\n  ) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n  }\n  ngOnDestroy(): void {\n    this._store.dispatch(new SetExamInProgress(false));\n  }\n\n  ngOnInit(): void {\n    this._store.dispatch(new SetExamInProgress(true));\n\n    this.activatedRoute.params.subscribe((params) => {\n      this.examScheduleId = params['examinationId'];\n      this._store.dispatch(new GetExaminee(params['examinationId']));\n    });\n\n    this.userId$?.pipe(untilDestroyed(this)).subscribe((userId: number) => {\n      this.userId = userId;\n    });\n\n    this.getExaminationData();\n  }\n\n  getExaminationData() {\n    this.examinee$?.pipe(untilDestroyed(this)).subscribe((examinee: IExamineeReadOnlyModel) => {\n      if (examinee) {\n        this.candidateName = examinee?.fullName;\n        this.dayTime = examinee?.examDate;\n        this.cases$.next(examinee.cases);\n        this.casesLength = examinee.cases?.length;\n        this.examScoringId = examinee?.examScoringId;\n        this.examineeUserId = examinee?.examineeUserId;\n        this.showTimer = true;\n      }\n    });\n  }\n\n  handleChange(event: any) {\n    if (event.case.score || event.case.remarks) {\n      this.candidateCaseScores[event.case.examCaseId] = event.case;\n      if (event.case.score && event.case.score > 0) {\n        this.disable = false;\n      }\n    }\n  }\n\n  handleGradedChange(event: any) {\n    this.gradedCandidateCaseCores[event.case.examCaseId] = { ...event.case };\n\n    const scores: number[] = [];\n\n    Object.entries(this.gradedCandidateCaseCores).forEach(([key, value]) => {\n      const data = value as ICaseScoreModel;\n      if (data?.score > 0) {\n        scores.push(data?.score);\n      }\n    });\n\n    setTimeout(() => {\n      if (scores.length === this.casesLength) {\n        this.disableSubmit = false;\n      }\n    }, 0);\n  }\n\n  handleNextCase() {\n    this.activeCase += 1;\n    this.currentIncrement += 1;\n    this.disable = true;\n\n    if (this.currentIncrement > this.casesLength) {\n      this.scrollToElementById('expandableHeader' + this.casesLength);\n      this.ExamTimerComponent.stopTimers();\n      this.globalDialogService.showLoading();\n      this._store.dispatch(new GetSelectedExamScores(this.examScheduleId));\n      this.disable = true;\n    } else {\n      this.scrollToElementById(\n        'expandableHeader' + (this.currentIncrement - 1)\n      );\n    }\n  }\n\n  handleSave(examCaseId: number, skipped = false) {\n    const currentCase = this.candidateCaseScores[examCaseId];\n\n    const model = {\n      examCaseId: currentCase?.examCaseId,\n      examinerUserId: this.userId,\n      examineeUserId: this.examineeUserId,\n      score: !skipped ? currentCase?.score ?? 0 : 0,\n      criticalFail: currentCase?.criticalFail ?? false,\n      remarks: currentCase?.remarks ?? '',\n    } as ICaseScoreModel;\n\n    if ((model?.score && model.score > 0) || model?.remarks) {\n      this._store\n        .dispatch(new CreateCaseScore(model))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.handleNextCase();\n        });\n    } else {\n      this.handleNextCase();\n    }\n  }\n\n  skipCase(examCaseId: number) {\n    let message = 'Are you sure you want to skip this case?';\n    const currentCase = this.candidateCaseScores[examCaseId];\n    if (currentCase?.score > 0) {\n      message =\n        'Are you sure you want to skip this case? This will remove the selected case score.';\n    }\n    this.globalDialogService\n      ?.showConfirmation('Skip Case', message)\n      .then((result) => {\n        if (result) {\n          this.handleSave(examCaseId, true);\n        }\n      });\n  }\n\n  scrollToElementById(elementId: string) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      setTimeout(() => {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }, 0);\n    }\n  }\n\n  async handleSaveAndSubmitLater() {\n    await this.updateScores();\n\n    this._store.dispatch(new SetExamInProgress(false));\n\n    const dateParts = this.dayTime.replace(/\\s+/g, ' ').trim().split(' ');\n    const formattedDate = `${dateParts[1]} ${dateParts[0]} ${dateParts[2]}`;\n    const examDate = new Date(formattedDate);\n\n    this._store\n      .dispatch(new SkipExam(this.examScheduleId, examDate.toISOString()))\n      .pipe(take(1))\n      .subscribe(() => {\n        this.router.navigate(['/ce-scoring/oral-examinations']);\n      });\n  }\n\n  async handleSubmit() {\n    this.globalDialogService.showLoading();\n    await this.updateScores();\n    const model = {\n      examScheduleId: this.examScheduleId,\n    } as IExamScoreModel;\n\n    this._store.dispatch(new SetExamInProgress(false));\n\n    const caseCount = Object.keys(this.gradedCandidateCaseCores).length;\n    let currentCase = 0;\n    const dateParts = this.dayTime.replace(/\\s+/g, ' ').trim().split(' ');\n    const formattedDate = `${dateParts[1]} ${dateParts[0]} ${dateParts[2]}`;\n    const examDate = new Date(formattedDate);\n\n    if (Object.entries(this.gradedCandidateCaseCores).length > 0) {\n      Object.entries(this.gradedCandidateCaseCores).forEach(() => {\n        currentCase += 1;\n      });\n    }\n\n    this._store\n      .dispatch(new CreateExamScore(model, false))\n      .pipe(take(1))\n      .subscribe(() => {\n        if (currentCase === caseCount) {\n          this._store\n            .dispatch(\n              new SkipExam(this.examScheduleId, examDate.toISOString(), false)\n            )\n            .pipe(take(1))\n            .subscribe(() => {\n              this.router.navigate(['/ce-scoring/oral-examinations']);\n            });\n        }\n      });\n  }\n\n  async updateScores() {\n    const promise: Promise<any>[] = [];\n    if (Object.entries(this.gradedCandidateCaseCores).length > 0) {\n      Object.entries(this.gradedCandidateCaseCores).forEach(([key, value]) => {\n        const data = value as ICaseScoreModel;\n        const model = {\n          examCaseId: data?.examCaseId,\n          examScoringId: data?.examScoringId,\n          examinerUserId: data?.examinerUserId,\n          examineeUserId: data?.examineeUserId,\n          score: +data?.score,\n          criticalFail: data?.criticalFail,\n          remarks: data?.remarks,\n        } as ICaseScoreModel;\n        this._store.dispatch(new SetExamInProgress(false));\n\n        if (data?.examScoringId) {\n          promise.push(\n            this._store.dispatch(new UpdateCaseScore(model, false)).toPromise()\n          );\n        } else if ((model?.score && model.score > 0) || model?.remarks) {\n          promise.push(\n            this._store.dispatch(new CreateCaseScore(model, false)).toPromise()\n          );\n        }\n      });\n    }\n\n    await Promise.all(promise);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".text-xl {\n  font-weight: bold;\n}\n\n.view-header {\n  font-size: 1.25rem;\n}\n\n.section-details {\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n}\n",
          "styleUrl": "./oral-examination.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 101,
        "jsdoctags": [
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<h1>\n  {{ (examTitle$ | async)?.examName || 'EXAMSCORING.DEFAULT_EXAM' | translate }}\n</h1>\n<div class=\"text-xl\">\n  {{ 'EXAMSCORING.EXAMINATION.INSTRUCTIONS' | translate }}\n</div>\n<abs-exam-timer\n  *ngIf=\"showTimer\"\n  [totalIncrements]=\"casesLength\"\n  [currentIncrement]=\"currentIncrement\"\n  incrementLabel=\"Case\"\n></abs-exam-timer>\n<sl-card class=\"w-11 mt-5 no-highlight\">\n  <h3 class=\"mt-0 mb-2\" header>\n    {{ 'EXAMSCORING.EXAMINATION.TITLE' | translate }}\n  </h3>\n  <hr />\n  <div class=\"grid\">\n    <p\n      class=\"col-12\"\n      *ngIf=\"('EXAMSCORING.EXAMINATION.SUBTITLE' | translate) !== ''\"\n    >\n      {{ 'EXAMSCORING.EXAMINATION.SUBTITLE' | translate }}\n    </p>\n\n    <div class=\"flex gap-5 view-header col-12\">\n      <div\n        [innerHTML]=\"\n          'EXAMSCORING.EXAMINATION.CANDIDATE'\n            | translate : { name: candidateName }\n        \"\n      ></div>\n      <div\n        [innerHTML]=\"\n          'EXAMSCORING.EXAMINATION.TIME' | translate : { time: dayTime }\n        \"\n      ></div>\n    </div>\n\n    <abs-expandable\n      class=\"col-12\"\n      *ngFor=\"let case of cases$ | async; index as i\"\n      [caseId]=\"case.examCaseId\"\n      [caseTitle]=\"case.title\"\n      [index]=\"i\"\n      [checked]=\"i === activeCase\"\n      [completed]=\"case.completed\"\n    >\n      <div class=\"grid\">\n        <div class=\"col-12\" *ngFor=\"let section of case.sections\">\n          <p class=\"font-bold m-0\">{{ section.heading }}</p>\n          <div class=\"section-details\" [innerHTML]=\"section?.content\"></div>\n\n          <div *ngIf=\"section.comments || section.editComment\">\n            <label [for]=\"section?.caseCommentId\">Comment:</label>\n            <p class=\"my-1\" *ngIf=\"!section.editComment\">\n              {{ section?.comments }}\n            </p>\n            <textarea\n              [name]=\"section?.caseCommentId\"\n              rows=\"5\"\n              pInputTextarea\n              *ngIf=\"section.editComment\"\n            ></textarea>\n          </div>\n          <p-button\n            *ngIf=\"!section.editComment && section.showEdit\"\n            styleClass=\"p-button-success p-button-text\"\n            (click)=\"section.editComment = true\"\n          >\n            {{ section.comment ? 'Edit Comment' : 'Add Comment' }}\n          </p-button>\n        </div>\n        <abs-examination-score-card\n          class=\"col-12\"\n          [case]=\"case\"\n          (handleChange)=\"handleChange($event)\"\n        ></abs-examination-score-card>\n        <div class=\"col-12 flex justify-content-end mt-3\">\n          <p-button\n            variant=\"text\"\n            styleClass=\"p-button-link p-button-primary\"\n            (onClick)=\"skipCase(case.examCaseId)\"\n          >\n            Skip Scoring Case\n          </p-button>\n          <p-button\n            [style]=\"{ width: '337px' }\"\n            (onClick)=\"handleSave(case.examCaseId)\"\n            [disabled]=\"disable\"\n            >Save & Continue</p-button\n          >\n        </div>\n      </div>\n    </abs-expandable>\n\n    <abs-expandable\n      [customTitle]=\"'Review & Submit Scores'\"\n      [index]=\"casesLength\"\n      [checked]=\"casesLength === activeCase\"\n      class=\"w-full\"\n    >\n      <div class=\"grid w-full\">\n        <ng-template\n          ngFor\n          [ngForOf]=\"gradedScores$ | async\"\n          let-case\n          let-i=\"index\"\n        >\n          <abs-examination-score-card\n            class=\"col-12\"\n            [case]=\"case\"\n            (handleChange)=\"handleGradedChange($event)\"\n          ></abs-examination-score-card>\n        </ng-template>\n      </div>\n\n      <div class=\"flex justify-content-end mt-5\">\n        <p-button\n          variant=\"text\"\n          styleClass=\"p-button-link p-button-primary\"\n          (onClick)=\"handleSaveAndSubmitLater()\"\n          >Save & Submit Later</p-button\n        >\n        <p-button\n          type=\"submit\"\n          [style]=\"{ width: '337px' }\"\n          [disabled]=\"disableSubmit\"\n          (onClick)=\"handleSubmit()\"\n        >\n          Submit Scores\n        </p-button>\n      </div>\n    </abs-expandable>\n  </div>\n</sl-card>\n"
    },
    {
      "name": "OralExaminationsComponent",
      "id": "component-OralExaminationsComponent-9c69e7f081b51f19247cccfd159eb1cb82eb481e27f09db3caa1c4f470ead34aeb196b96f063766f75b86ef0060ffd354ff63ce43ef5d9943c6fe6ecaeb8fe98-1",
      "file": "src/app/oral-examinations/oral-examinations.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-oral-examinations",
      "styleUrls": ["./oral-examinations.component.scss"],
      "styles": [],
      "templateUrl": ["./oral-examinations.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "examDate",
          "defaultValue": "new Date('01/01/24')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "examDateDisplay",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "examHeaderId",
          "defaultValue": "491",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "examineeList$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamSessionReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examineeList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "examTitle$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IExamTitleReadOnlyModel> | undefined",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.examTitle"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "legendItems",
          "defaultValue": "[\n    {\n      text: 'Not Submitted',\n      color: '#7f7f7f',\n    },\n    {\n      text: 'Current Session',\n      color: '#dbad6a',\n    },\n    {\n      text: 'Submitted',\n      color: '#1c827d',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "oralExaminationCols",
          "defaultValue": "ORAL_EXAMINATION_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "oralExaminations$",
          "defaultValue": "new BehaviorSubject<IExamSessionReadOnlyModel[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<IExamSessionReadOnlyModel[]>",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "zoomLink",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 54
        }
      ],
      "methodsClass": [
        {
          "name": "copyFromTextInput",
          "args": [
            {
              "name": "element",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 192,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOralExaminations",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "openZoomLink",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 203,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setExaminationStatus",
          "args": [
            {
              "name": "exam",
              "type": "IExamSessionReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "\"current-session\" | \"submitted-session\" | \"not-started\"",
          "typeParameters": [],
          "line": 133,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "exam",
              "type": "IExamSessionReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "LegendComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ORAL_EXAMINATION_COLS } from './oral-examination-cols';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { IExamSessionReadOnlyModel } from '../api/models/scoring/exam-session-read-only.model';\nimport {\n  ExamScoringSelectors,\n  GetExamTitle,\n  GetExamineeList,\n  SkipExam,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { IExamTitleReadOnlyModel } from '../api/models/examinations/exam-title-read-only.model';\nimport { LegendComponent } from '../shared/components/legend/legend.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-oral-examinations',\n  standalone: true,\n  imports: [\n    FormsModule,\n    CommonModule,\n    TranslateModule,\n    GridComponent,\n    InputTextModule,\n    ButtonModule,\n    LegendComponent,\n  ],\n  templateUrl: './oral-examinations.component.html',\n  styleUrls: ['./oral-examinations.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class OralExaminationsComponent implements OnInit {\n  @Select(ExamScoringSelectors.slices.examineeList)\n  examineeList$: Observable<IExamSessionReadOnlyModel[]> | undefined;\n\n  @Select(ExamScoringSelectors.slices.examTitle) examTitle$:\n    | Observable<IExamTitleReadOnlyModel>\n    | undefined;\n\n  examHeaderId = 491; // TODO - remove hard coded value\n  examDate: Date = new Date('01/01/24'); // TODO - remove hard coded value\n\n  examDateDisplay: Date = new Date();\n  zoomLink: string | undefined = '';\n  oralExaminations$: BehaviorSubject<IExamSessionReadOnlyModel[]> =\n    new BehaviorSubject<IExamSessionReadOnlyModel[]>([]);\n  oralExaminationCols = ORAL_EXAMINATION_COLS;\n\n  legendItems = [\n    {\n      text: 'Not Submitted',\n      color: '#7f7f7f',\n    },\n    {\n      text: 'Current Session',\n      color: '#dbad6a',\n    },\n    {\n      text: 'Submitted',\n      color: '#1c827d',\n    },\n  ];\n\n  constructor(\n    private _route: Router,\n    private _globalDialogService: GlobalDialogService,\n    private _store: Store,\n    private _translateService: TranslateService\n  ) {\n    this._store.dispatch(new GetExamTitle(this.examHeaderId));\n  }\n\n  ngOnInit(): void {\n    this.getOralExaminations();\n  }\n\n  getOralExaminations() {\n    this._store.dispatch(new GetExamineeList(this.examDate.toISOString()));\n\n    this.examineeList$\n      ?.pipe(\n        untilDestroyed(this),\n        map((examineeList) => {\n          if (examineeList?.length > 0) {\n            return examineeList.map((examinee) => {\n              let examTime = 'not scheduled';\n              if (examinee.startTime) {\n                examTime = `${examinee.startTime}`;\n                if (examinee.endTime) {\n                  examTime = `${examTime} - ${examinee.endTime}`;\n                }\n              } else if (examinee.endTime) {\n                examTime = `${examinee.endTime}`;\n              }\n              return {\n                ...examinee,\n                fullName: `${examinee.firstName} ${examinee.lastName}`,\n                examTime: `${examTime}`,\n                rowClass: this.setExaminationStatus(examinee),\n              };\n            });\n          }\n          return [];\n        })\n      )\n      .subscribe((examineeList) => {\n        this.oralExaminations$.next(examineeList);\n        if (examineeList?.length > 0) {\n          const currentExam = examineeList.find(\n            (exam) => exam.isCurrentSession\n          );\n          if (currentExam && currentExam.meetingLink) {\n            this.zoomLink = currentExam.meetingLink;\n          } else {\n            this.zoomLink = examineeList[0].meetingLink;\n          }\n        } else {\n          this.zoomLink = '';\n        }\n      });\n  }\n\n  setExaminationStatus(exam: IExamSessionReadOnlyModel) {\n    if (exam.isCurrentSession) {\n      return 'current-session';\n    } else if (exam.isSubmitted) {\n      return 'submitted-session';\n    } else {\n      return 'not-started';\n    }\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'startExam') {\n      // add any store logic required to start the exam here\n      // add any checks to prevent the exam from being started incorrectly here\n      console.log('start exam', $event);\n      this._globalDialogService\n        .showConfirmation(\n          this._translateService.instant('EXAMSCORING.EXAMINATION.START.TITLE'),\n          this._translateService.instant(\n            'EXAMSCORING.EXAMINATION.START.SUBTITLE',\n            {\n              name: data.fullName,\n            }\n          )\n        )\n        .then((result) => {\n          if (result) {\n            this._route.navigate([\n              'ce-scoring/oral-examinations/exam',\n              data.examScheduleId,\n            ]);\n          }\n          // take any actions required on cancel of confirmation here\n        });\n    } else if ($event.fieldKey === 'skipExam') {\n      console.log('skip exam', $event);\n      this._globalDialogService\n        .showConfirmation(\n          this._translateService.instant('EXAMSCORING.EXAMINATION.SKIP.TITLE'),\n          this._translateService.instant(\n            'EXAMSCORING.EXAMINATION.SKIP.SUBTITLE'\n          )\n        )\n        .then((result) => {\n          if (result) {\n            this._store.dispatch(\n              new SkipExam(\n                $event.data.examScheduleId,\n                this.examDate.toISOString()\n              )\n            );\n          }\n        });\n    } else {\n      console.log('unhandled grid action', $event);\n    }\n  }\n\n  copyFromTextInput(element: any) {\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(element.value);\n    } else {\n      // handle any older browsers that don't support navigator.clipboard\n      element.select();\n      document.execCommand('copy');\n      element.setSelectionRange(0, 0);\n    }\n  }\n\n  openZoomLink() {\n    if (this.zoomLink) {\n      window.open(this.zoomLink, '_blank');\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".exam-grid {\n  ::ng-deep {\n    .action {\n      display: none;\n    }\n\n    .submitted-session {\n      color: var(--global-success);\n    }\n    .current-session {\n      color: var(--global-warning);\n      font-weight: bold;\n      .action {\n        display: block;\n      }\n    }\n    .not-started {\n      color: var(--global-gray);\n    }\n  }\n}\n\n.zoom-link {\n  ::ng-deep {\n    .p-button-label {\n      white-space: nowrap;\n    }\n  }\n}\n",
          "styleUrl": "./oral-examinations.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_route",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 72,
        "jsdoctags": [
          {
            "name": "_route",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "OralExaminationsComponent-1",
      "templateData": "<header>\n  <h1>\n    {{\n      (examTitle$ | async)?.examName || 'EXAMSCORING.DEFAULT_EXAM' | translate\n    }}\n  </h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <div slot=\"header\">\n          {{ 'EXAMSCORING.EXAMINATION.LIST_TITLE' | translate }}\n        </div>\n        <div class=\"grid\">\n          <div class=\"col-12 flex justify-content-between\">\n            <p\n              [innerHTML]=\"\n                'EXAMSCORING.EXAMINATION.LIST_DATE'\n                  | translate : { date: examDateDisplay | date : 'MM/dd/yyyy' }\n              \"\n            ></p>\n            <div\n              class=\"flex align-items-center justify-content-end flex-grow-1\"\n            >\n              <p-button\n                label=\"Zoom Link\"\n                icon=\"fa fa-video-camera\"\n                class=\"zoom-link\"\n                styleClass=\"p-button-success p-button-text\"\n                (onClick)=\"openZoomLink()\"\n              ></p-button>\n              <div class=\"p-inputgroup\" style=\"max-width: 450px\">\n                <input\n                  pInputText\n                  type=\"text\"\n                  placeholder=\"Zoom Link\"\n                  [value]=\"zoomLink\"\n                  [disabled]=\"true\"\n                  placeholder=\"No Zoom Link Available\"\n                  #zoomLinkInput\n                />\n                <button\n                  pButton\n                  icon=\"pi pi-copy\"\n                  styleClass=\"p-button-primary\"\n                  (onClick)=\"copyFromTextInput(zoomLinkInput)\"\n                ></button>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-12\">\n            <abs-legend\n              [legendItems]=\"legendItems\"\n              class=\"block pb-3\"\n            ></abs-legend>\n            <abs-grid\n              class=\"margin-bottom-2 exam-grid\"\n              [columns]=\"oralExaminationCols\"\n              [data]=\"oralExaminations$\"\n              (action)=\"handleGridAction($event)\"\n              [pagination]=\"true\"\n              [itemsPerPage]=\"10\"\n            ></abs-grid>\n          </div>\n        </div>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading examinations...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "OtherCertificatesAddEditModalComponent",
      "id": "component-OtherCertificatesAddEditModalComponent-b3065a9cb7d3ffe60dc314aed68971895cd208ab5ce82f78f427d28e72ede72dc2e3f5fda514738445a4c50eb5fc9bc46c438b48affbed1561cef758a67e3265",
      "file": "src/app/medical-training/other-certificates-add-edit-modal/other-certificates-add-edit-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-other-certificates-add-edit-modal",
      "styleUrls": ["./other-certificates-add-edit-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./other-certificates-add-edit-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "Observable<IFormErrors> | undefined",
          "decorators": []
        },
        {
          "name": "isEdit$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "Subject<boolean>",
          "decorators": []
        },
        {
          "name": "otherCertificate$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "Subject<any>",
          "decorators": []
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "certificateTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ICertificateTypeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "certificateTypes$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ICertificateTypeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.certificateTypes"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearMedicalTrainingErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "hasUnsavedChanges",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "isEdit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "otherCertificateId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "otherCertificatesForm",
          "defaultValue": "new FormGroup({\n    id: new FormControl(0),\n    certificateTypeId: new FormControl(\n      { value: 6, disabled: true },\n      Validators.required\n    ),\n    certificateNumber: new FormControl(''),\n    issueDate: new FormControl('', [Validators.required]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 74
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "subscribeToRowData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "InputSelectComponent",
          "type": "component"
        },
        {
          "name": "AutoCompleteModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { CalendarModule } from 'primeng/calendar';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputSelectComponent } from 'src/app/shared/components/base-input/input-select.component';\nimport { Observable, Subject } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { ICertificateTypeReadOnlyModel } from 'src/app/api/models/picklists/certificate-type-read-only.model';\nimport { PicklistsSelectors } from 'src/app/state/picklists';\nimport { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\nimport { IFormErrors } from 'src/app/shared/common';\nimport {\n  ClearMedicalTrainingErrors,\n  MedicalTrainingSelectors,\n  SetUnsavedChanges,\n} from 'src/app/state';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\n\n@Component({\n  selector: 'abs-other-certificates-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    AutoCompleteModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './other-certificates-add-edit-modal.component.html',\n  styleUrls: ['./other-certificates-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class OtherCertificatesAddEditModalComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.certificateTypes) certificateTypes$:\n    | Observable<ICertificateTypeReadOnlyModel[]>\n    | undefined;\n\n  @Input() userId!: number;\n  @Input() isEdit$: Subject<boolean> = new Subject();\n  @Input() otherCertificate$: Subject<any> = new Subject();\n  @Input() errors$: Observable<IFormErrors> | undefined;\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  clearErrors = new ClearMedicalTrainingErrors();\n\n  certificateTypes!: ICertificateTypeReadOnlyModel[];\n\n  otherCertificateId!: number;\n  isEdit!: boolean;\n\n  hasUnsavedChanges = false;\n\n  otherCertificatesForm = new FormGroup({\n    id: new FormControl(0),\n    certificateTypeId: new FormControl(\n      { value: 6, disabled: true },\n      Validators.required\n    ),\n    certificateNumber: new FormControl(''),\n    issueDate: new FormControl('', [Validators.required]),\n  });\n\n  constructor(\n    private globalDialogService: GlobalDialogService,\n    private _store: Store\n  ) {}\n\n  ngOnInit(): void {\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEdit = isEdit;\n    });\n    this.subscribeToRowData();\n    this.certificateTypes$?.pipe(untilDestroyed(this)).subscribe(\n      (certificateTypes: ICertificateTypeReadOnlyModel[]) => {\n        this.certificateTypes = certificateTypes;\n      }\n    );\n\n    this.otherCertificatesForm.valueChanges.subscribe(() => {\n      this._store.dispatch(this.clearErrors);\n      const isDirty = this.otherCertificatesForm.dirty;\n      if (isDirty && !this.hasUnsavedChanges) {\n        this.hasUnsavedChanges = true;\n        this._store.dispatch(new SetUnsavedChanges(true));\n      }\n    });\n  }\n\n  subscribeToRowData() {\n    this.otherCertificate$.subscribe((res) => {\n      if (Object.keys(res.length > 0)) {\n        for (const [key, value] of Object.entries(res)) {\n          this.otherCertificatesForm.get(key)?.setValue(value);\n          this.otherCertificateId = res.id;\n        }\n        this.otherCertificatesForm\n          .get('issueDate')\n          ?.setValue(new Date(res.issueDate).toLocaleDateString());\n      }\n    });\n  }\n\n  cancel() {\n    if (this.hasUnsavedChanges) {\n      this.globalDialogService\n        .showConfirmation('Unsaved Changes', 'Do you want to navigate away')\n        .then((result) => {\n          if (result) {\n            this._store.dispatch(new SetUnsavedChanges(false));\n            this.cancelDialog.emit({ show: false });\n          }\n        });\n    } else {\n      this._store.dispatch(new SetUnsavedChanges(false));\n      this.cancelDialog.emit({ show: false });\n    }\n  }\n\n  save() {\n    this.hasUnsavedChanges = false;\n    this._store.dispatch(new SetUnsavedChanges(false));\n    this.saveDialog.emit({\n      edit: this.isEdit,\n      show: false,\n      otherCertificateForm: this.otherCertificatesForm.value,\n      otherCertificateId: this.otherCertificateId,\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".ng-trigger.ng-trigger.ng-trigger {\n  min-width: 150px;\n  max-width: 300px;\n}\n",
          "styleUrl": "./other-certificates-add-edit-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 82,
        "jsdoctags": [
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form\n  name=\"personProfileForm\"\n  [formGroup]=\"otherCertificatesForm\"\n  (ngSubmit)=\"save()\"\n>\n  <div class=\"grid\">\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"trainingType\">Certification *</label>\n      <p-dropdown\n        [options]=\"certificateTypes\"\n        [showClear]=\"true\"\n        [required]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"name\"\n        optionValue=\"id\"\n        formControlName=\"certificateTypeId\"\n        placeholder=\"Choose a Certification\"\n      ></p-dropdown>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Certification Number *</label>\n      <input\n        [required]=\"true\"\n        pInputText\n        type=\"number\"\n        placeholder=\"Enter a Certificate Number\"\n        formControlName=\"certificateNumber\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Issue Date *</label>\n      <p-calendar\n        [required]=\"true\"\n        [showIcon]=\"true\"\n        formControlName=\"issueDate\"\n        placeholder=\"MM/DD/YYYY\"\n        appendTo=\"body\"\n      ></p-calendar>\n      <small\n        *ngIf=\"\n          otherCertificatesForm.get('issueDate')?.errors &&\n          otherCertificatesForm.get('issueDate')?.dirty\n        \"\n        id=\"trainingType-help\"\n        class=\"form-error-text\"\n      >\n        This is required\n      </small>\n    </div>\n  </div>\n  <div class=\"flex justify-content-end mt-4\" slot=\"footer\">\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"cancel()\"\n      >Cancel</p-button\n    >\n    <p-button\n      type=\"submit\"\n      [style]=\"{ width: '337px' }\"\n      variant=\"primary\"\n      [disabled]=\"otherCertificatesForm.invalid || !otherCertificatesForm.dirty\"\n      >Save\n    </p-button>\n  </div>\n</form>\n"
    },
    {
      "name": "OutcomeRegistriesModalComponent",
      "id": "component-OutcomeRegistriesModalComponent-9f6f2ea41640ea2eec9fe6ec858ae3c78797ba4a768bb80384d8a0d14a2af7baf87c1eecb18fa8aa80a520ae0fccb94690221633a8bf240e9163c5ef88822799",
      "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-outcome-registries-modal",
      "styleUrls": ["./outcome-registries-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./outcome-registries-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "call",
          "defaultValue": "{\n    isSuccess: false,\n    message: '',\n    showDialog: false,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "disableSubmit",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "outcomeRegistries$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IOutcomeRegistryModel> | undefined",
          "optional": false,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "ContinuousCertificationSelectors.GetOutcomeRegistries"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "outcomeRegistriesForm",
          "defaultValue": "new FormGroup({\n    surgeonSpecificRegistry: new FormControl(false, [Validators.required]),\n    registryComments: new FormControl('', [Validators.required]),\n    registeredWithACHQC: new FormControl(false, [Validators.required]),\n    registeredWithCESQIP: new FormControl(false, [Validators.required]),\n    registeredWithMBSAQIP: new FormControl(false, [Validators.required]),\n    registeredWithABA: new FormControl(false, [Validators.required]),\n    registeredWithASBS: new FormControl(false, [Validators.required]),\n    registeredWithStatewideCollaboratives: new FormControl(false, [\n      Validators.required,\n    ]),\n    registeredWithABMS: new FormControl(false, [Validators.required]),\n    registeredWithNCDB: new FormControl(false, [Validators.required]),\n    registeredWithRQRS: new FormControl(false, [Validators.required]),\n    registeredWithNSQIP: new FormControl(false, [Validators.required]),\n    registeredWithNTDB: new FormControl(false, [Validators.required]),\n    registeredWithSTS: new FormControl(false, [Validators.required]),\n    registeredWithTQIP: new FormControl(false, [Validators.required]),\n    registeredWithUNOS: new FormControl(false, [Validators.required]),\n    registeredWithNCDR: new FormControl(false, [Validators.required]),\n    registeredWithSVS: new FormControl(false, [Validators.required]),\n    registeredWithELSO: new FormControl(false, [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "outcomesandRegistriesFormFields",
          "defaultValue": "OutcomeRegistriesFormFields",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "userId$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number> | undefined",
          "optional": false,
          "description": "",
          "line": 55,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userId"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getOutcomeRegistriesData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "SuccessFailModalComponent",
          "type": "component"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  ContinuousCertificationSelectors,\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from 'src/app/state/continuous-certification';\nimport { UserProfileSelectors } from 'src/app/state';\nimport { Observable } from 'rxjs';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport { OutcomeRegistriesFormFields } from './outcome-registries-form';\nimport { SuccessFailModalComponent } from 'src/app/shared/components/success-fail-modal/success-fail-modal.component';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-outcome-registries-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SuccessFailModalComponent,\n    RadioButtonModule,\n    InputTextareaModule,\n    CheckboxModule,\n    ButtonModule,\n  ],\n  templateUrl: './outcome-registries-modal.component.html',\n  styleUrls: ['./outcome-registries-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class OutcomeRegistriesModalComponent implements OnInit {\n  //TODO: [Joe] - add form-errors shared component\n\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  userId!: number;\n\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n  @Select(ContinuousCertificationSelectors.GetOutcomeRegistries)\n  outcomeRegistries$: Observable<IOutcomeRegistryModel> | undefined;\n  outcomesandRegistriesFormFields = OutcomeRegistriesFormFields;\n\n  call = {\n    isSuccess: false,\n    message: '',\n    showDialog: false,\n  };\n\n  disableSubmit = true;\n\n  outcomeRegistriesForm = new FormGroup({\n    surgeonSpecificRegistry: new FormControl(false, [Validators.required]),\n    registryComments: new FormControl('', [Validators.required]),\n    registeredWithACHQC: new FormControl(false, [Validators.required]),\n    registeredWithCESQIP: new FormControl(false, [Validators.required]),\n    registeredWithMBSAQIP: new FormControl(false, [Validators.required]),\n    registeredWithABA: new FormControl(false, [Validators.required]),\n    registeredWithASBS: new FormControl(false, [Validators.required]),\n    registeredWithStatewideCollaboratives: new FormControl(false, [\n      Validators.required,\n    ]),\n    registeredWithABMS: new FormControl(false, [Validators.required]),\n    registeredWithNCDB: new FormControl(false, [Validators.required]),\n    registeredWithRQRS: new FormControl(false, [Validators.required]),\n    registeredWithNSQIP: new FormControl(false, [Validators.required]),\n    registeredWithNTDB: new FormControl(false, [Validators.required]),\n    registeredWithSTS: new FormControl(false, [Validators.required]),\n    registeredWithTQIP: new FormControl(false, [Validators.required]),\n    registeredWithUNOS: new FormControl(false, [Validators.required]),\n    registeredWithNCDR: new FormControl(false, [Validators.required]),\n    registeredWithSVS: new FormControl(false, [Validators.required]),\n    registeredWithELSO: new FormControl(false, [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n  });\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetOutcomeRegistries());\n  }\n\n  ngOnInit(): void {\n    this.getOutcomeRegistriesData();\n  }\n\n  getOutcomeRegistriesData() {\n    this.outcomeRegistries$?.pipe(untilDestroyed(this)).subscribe((res: any) => {\n      const outcomeRegistries = res.outcomeRegistries;\n      if (outcomeRegistries) {\n        for (const [key, value] of Object.entries(outcomeRegistries)) {\n          this.outcomeRegistriesForm.patchValue({\n            [key]: value,\n          });\n        }\n      }\n    });\n  }\n\n  onSubmit() {\n    const formValues = {\n      ...this.outcomeRegistriesForm.value,\n      userId: this.userId,\n      userConfirmedDateUtc: new Date().toDateString(),\n    };\n\n    this._store\n      .dispatch(new UpdateOutcomeRegistries(<IOutcomeRegistryModel>formValues))\n      .subscribe((result: any) => {\n        if (!result.continuous_certification.errors) {\n          this.call = {\n            showDialog: true,\n            message:\n              'Outcome Registries / Quality Assessment Programs Saved Successfully',\n            isSuccess: true,\n          };\n        } else {\n          this.call = {\n            showDialog: true,\n            message: 'An error occured while saving',\n            isSuccess: false,\n          };\n        }\n      });\n  }\n\n  close() {\n    this.closeDialog.emit();\n    this.call = {\n      isSuccess: false,\n      message: '',\n      showDialog: false,\n    };\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-radio-group,\nsl-textarea {\n  margin-bottom: 2rem;\n}\n\nsl-radio-group::part(form-control-label) {\n  font-weight: medium;\n}\n\nspan {\n  display: block;\n  font-size: 0.875rem;\n  font-style: italic;\n  margin: 0 0 0.875rem 0;\n  position: relative;\n  // min-height: 21px;\n}\n\nsl-radio {\n  margin-right: 1.25rem;\n}\n\n.align-right {\n  text-align: right;\n}\n\nsmall {\n  display: block;\n}\n",
          "styleUrl": "./outcome-registries-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 91,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<form\n  name=\"outcomeRegistriesForm\"\n  [formGroup]=\"outcomeRegistriesForm\"\n  (ngSubmit)=\"onSubmit()\"\n>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat. All fields are required.\n  </p>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of outcomesandRegistriesFormFields\"\n      class=\"flex-column col-12 md:{{ formField.size }} gap-3\"\n    >\n      <label>{{ formField.label }}</label>\n      <small class=\"mb-2\">{{ formField.subLabel }}</small>\n      <div class=\"flex gap-3\" *ngIf=\"formField.type === 'radio'\">\n        <div\n          class=\"flex flex-row align-items-center\"\n          *ngFor=\"let option of formField.options\"\n        >\n          <p-radioButton\n            [name]=\"formField.name\"\n            [formControlName]=\"formField.name\"\n            [inputId]=\"formField.name\"\n            [value]=\"option.value\"\n            [formControlName]=\"formField.name\"\n            ngDefaultControl\n          ></p-radioButton>\n          <label [for]=\"formField.name\" class=\"ml-2\">{{ option.label }}</label>\n        </div>\n      </div>\n      <textarea\n        *ngIf=\"formField.type === 'textarea'\"\n        pInputTextarea\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n      ></textarea>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex align-items-start gap-2\">\n      <p-checkbox\n        value=\"yes\"\n        formControlName=\"userConfirmed\"\n        ngDefaultControl\n      ></p-checkbox>\n      <label for=\"userConfirmed\"\n        >I confirm the above information is completed and correct to the best of\n        my knowledge</label\n      >\n    </div>\n    <div class=\"col-12 md:col-6 align-right\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        [style]=\"{ width: '337px' }\"\n        type=\"submit\"\n        [disabled]=\"\n          outcomeRegistriesForm.untouched && !outcomeRegistriesForm.valid\n        \"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n\n<abs-success-fail-modal\n  [isSuccess]=\"call.isSuccess\"\n  [showDialog]=\"call.showDialog\"\n  [message]=\"call.message\"\n  (closeDialog)=\"close()\"\n>\n</abs-success-fail-modal>\n"
    },
    {
      "name": "PayFeeComponent",
      "id": "component-PayFeeComponent-e1b69c2c3d24a5b3f75ff9a21a87bc51da6c4db225fd780364cf5c367bbe5e1e4a725b8fc7d4068429a1b740df8c918b69eb40d7a109e978c2f4defa66201db6",
      "file": "src/app/shared/components/pay-fee/pay-fee.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-pay-fee",
      "styleUrls": ["./pay-fee.component.scss"],
      "styles": [],
      "templateUrl": ["./pay-fee.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "payFeeData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "any",
          "decorators": []
        },
        {
          "name": "paymentGridData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelAction",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "payFeeCols",
          "defaultValue": "PAY_FEE_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 138
        },
        {
          "name": "paymentInformationFormFields",
          "defaultValue": "[\n    {\n      label: 'First Name',\n      value: '',\n      required: true,\n      name: 'firstName',\n      placeholder: 'Enter your first name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Last Name',\n      value: '',\n      required: true,\n      name: 'lastName',\n      placeholder: 'Enter your last name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Email Address',\n      value: '',\n      required: true,\n      name: 'emailAddress',\n      placeholder: 'Enter your email address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Phone Number',\n      value: '',\n      required: true,\n      name: 'phoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Street Address Line 1',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'streetAddressLine1',\n      placeholder: 'Enter your full address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Suite/Floor/Apt',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'streetAddressLine2',\n      placeholder: 'ex. Suite 3',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'state',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Zipcode',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'zipcode',\n      placeholder: 'Enter your zip code',\n      type: 'text',\n      size: 'col-4',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormFields[]",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "states",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "states$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IStateReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.states"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "handleCancelAction",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 163,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 159,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleSubmitAction",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setPicklists",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 148,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from '../grid/grid.component';\nimport { PAY_FEE_COLS } from './pay-fee-cols';\nimport { FormsModule } from '@angular/forms';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { GetStateList, PicklistsSelectors } from 'src/app/state/picklists';\nimport { Observable } from 'rxjs';\nimport { IStateReadOnlyModel } from 'src/app/api';\nimport { Select, Store } from '@ngxs/store';\nimport { IFormFields } from '../../models/form-fields/form-fields';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-pay-fee',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    FormsModule,\n    InputTextModule,\n    DropdownModule,\n    ButtonModule,\n  ],\n  templateUrl: './pay-fee.component.html',\n  styleUrls: ['./pay-fee.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PayFeeComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Output() cancelAction: EventEmitter<any> = new EventEmitter();\n  @Input() payFeeData: any;\n  @Input() paymentGridData: any;\n\n  states: IStateReadOnlyModel[] = [];\n\n  paymentInformationFormFields: IFormFields[] = [\n    {\n      label: 'First Name',\n      value: '',\n      required: true,\n      name: 'firstName',\n      placeholder: 'Enter your first name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Last Name',\n      value: '',\n      required: true,\n      name: 'lastName',\n      placeholder: 'Enter your last name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Email Address',\n      value: '',\n      required: true,\n      name: 'emailAddress',\n      placeholder: 'Enter your email address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Phone Number',\n      value: '',\n      required: true,\n      name: 'phoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Street Address Line 1',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'streetAddressLine1',\n      placeholder: 'Enter your full address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Suite/Floor/Apt',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'streetAddressLine2',\n      placeholder: 'ex. Suite 3',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'state',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Zipcode',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'zipcode',\n      placeholder: 'Enter your zip code',\n      type: 'text',\n      size: 'col-4',\n    },\n  ];\n\n  payFeeCols = PAY_FEE_COLS;\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n  }\n\n  ngOnInit(): void {\n    this.setPicklists();\n  }\n\n  setPicklists() {\n    this.states$?.pipe(untilDestroyed(this)).subscribe((states) => {\n      this.states = states;\n      this.paymentInformationFormFields.filter((fields) => {\n        if (fields.name === 'state') {\n          fields.options = states;\n        }\n      });\n    });\n  }\n\n  handleGridAction(event: any) {\n    console.log('unhandled grid action', event);\n  }\n\n  handleCancelAction() {\n    this.cancelAction.emit();\n  }\n\n  handleSubmitAction() {\n    console.log('Submit');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".align-right {\n  text-align: right;\n}\n",
          "styleUrl": "./pay-fee.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 138,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"dialog-intro col-12\">\n  <ng-content></ng-content>\n</div>\n\n<div class=\"flex flex-wrap\">\n  <div class=\"col-12 md:col-3\">Total Amount of Fee:</div>\n  <div class=\"col-12 md:col-9\">\n    <strong>{{ payFeeData?.totalAmountOfFee }}</strong>\n  </div>\n  <div class=\"col-12 md:col-3\">\n    Total Amount Paid as of\n    {{ payFeeData?.totalAmountPaidDate | date : 'MM/dd/yyyy' }}:\n  </div>\n  <div class=\"col-12 md:col-9\">\n    <strong>{{ payFeeData?.totalAmountPaid }}</strong>\n  </div>\n  <div class=\"col-12 md:col-3\">Remaining Balance:</div>\n  <div class=\"col-12 md:col-9 danger\">\n    <strong style=\"color: #8b040a\">{{ payFeeData?.remainingBalance }}</strong>\n  </div>\n</div>\n\n<abs-grid\n  [columns]=\"payFeeCols\"\n  [data]=\"paymentGridData\"\n  (action)=\"handleGridAction($event)\"\n  class=\"margin-bottom-2\"\n>\n</abs-grid>\n\n<h5 class=\"mt-5\">Payment Information</h5>\n\n<form class=\"mt-5\">\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of paymentInformationFormFields\"\n      class=\"flex flex-column gap-2 col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\">{{ formField.label }}</label>\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        pInputText\n      />\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [editable]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n      <span>{{ formField.subLabel }}</span>\n    </div>\n    <div class=\"col-12 md:col-12 align-right mt-5\">\n      <p-button\n        styleClass=\"p-button-link p-button-primary\"\n        (click)=\"handleCancelAction()\"\n        >Cancel</p-button\n      >\n      <p-button [style]=\"{ width: '337px' }\" (click)=\"handleSubmitAction()\"\n        >Proceed to Pay</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "PaymentHistoryComponent",
      "id": "component-PaymentHistoryComponent-f1e2439bfc34db2f52f1f6d5c9306e2dee7b7554b6996c9ba55e4e2a8f2156fa3ec3f37cc0450e03076c192234064d8f09aef334682524f55c25a4631ae1afe3",
      "file": "src/app/payment-history/payment-history.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-payment-history",
      "styleUrls": ["./payment-history.component.scss"],
      "styles": [],
      "templateUrl": ["./payment-history.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "paymentFooterData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "paymentHistoryCols",
          "defaultValue": "PAYMENT_HISTORY_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "paymentHistoryData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methodsClass": [
        {
          "name": "getPaymentHistoryData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handlePaymentClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "AlertComponent",
          "type": "component"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { PAYMENT_HISTORY_COLS } from './payment-histroy-grid';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-payment-history',\n  imports: [CommonModule, GridComponent, AlertComponent, ButtonModule],\n  templateUrl: './payment-history.component.html',\n  styleUrls: ['./payment-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PaymentHistoryComponent implements OnInit {\n  paymentHistoryData!: any;\n  paymentHistoryCols = PAYMENT_HISTORY_COLS;\n  paymentFooterData!: any;\n\n  ngOnInit(): void {\n    this.getPaymentHistoryData();\n  }\n\n  getPaymentHistoryData() {\n    this.paymentHistoryData = [\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Vasular Surgery Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Pediatric Surgery Qualifying Examination (PQ - 2022)',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Pediatric Surgery Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Complex General Surgical Oncology Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Hand Surgery Certification Examination (HC - 2022)',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n    ];\n\n    this.paymentFooterData = {\n      date: new Date('10/10/2022'),\n      amount: '$1,700.00',\n    };\n  }\n\n  handlePaymentClick() {\n    console.log('handlePaymentClick');\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".footer {\n  width: 100%;\n  font-weight: 500;\n  font-size: 15px;\n  strong {\n    margin-right: 5px;\n  }\n  .amount {\n    margin-left: 1.5rem;\n  }\n}\n",
          "styleUrl": "./payment-history.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<h1>Payment History</h1>\n<sl-card class=\"w-full\">\n  <div slot=\"header\">Invoices and Payments Received</div>\n\n  <div class=\"mb-3\">\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n  </div>\n\n  <abs-grid [columns]=\"paymentHistoryCols\" [data]=\"paymentHistoryData\">\n    <div class=\"pb-5 pl-5 pr-5\">\n      <abs-alert alertType=\"info\" [hideIcon]=\"true\">\n        <div class=\"div flex justify-content-end footer\">\n          <strong>Total Unpaid balance</strong> as of\n          {{ paymentFooterData.date | date : 'shortDate' }}:\n          <div class=\"amount\">\n            {{ paymentFooterData.amount }}\n          </div>\n        </div>\n      </abs-alert>\n    </div>\n  </abs-grid>\n\n  <div class=\"flex justify-content-end mt-3\">\n    <p-button type=\"primary\" (click)=\"handlePaymentClick()\"\n      >Make a Payment</p-button\n    >\n  </div>\n</sl-card>\n"
    },
    {
      "name": "PersonalProfileComponent",
      "id": "component-PersonalProfileComponent-365f5dfce23a26d05a334dbebfc8c243b505c2fcccd079ee731766cbfda84dde4598ce243167b3f265d129d110ec62acce80584db533c7fc475462a691b70993",
      "file": "src/app/personal-profile/personal-profile.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "provideNgxMask()"
        }
      ],
      "selector": "abs-personal-profile",
      "styleUrls": ["./personal-profile.component.scss"],
      "styles": [],
      "templateUrl": ["./personal-profile.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "birthStates",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearUserProfileErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 122
        },
        {
          "name": "countries$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IPickListItem[]> | undefined",
          "optional": false,
          "description": "",
          "line": 106,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.countries"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IFormErrors> | undefined",
          "optional": false,
          "description": "",
          "line": 99,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.errors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "ethnicities$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IEthnicityReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 109,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.ethnicities"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "genders$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IPickListItem[]> | undefined",
          "optional": false,
          "description": "",
          "line": 112,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.genders"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "globalDialogService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "GlobalDialogService",
          "optional": false,
          "description": "",
          "line": 170,
          "modifierKind": [123]
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 129
        },
        {
          "name": "isSubmitted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 166
        },
        {
          "name": "languages$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IPickListItem[]> | undefined",
          "optional": false,
          "description": "",
          "line": 115,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.languages"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "mailingStates",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IStateReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 124
        },
        {
          "name": "races$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IRaceReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 118,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.races"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDisplayUserProfile",
          "optional": false,
          "description": "",
          "line": 127
        },
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile> | undefined",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userPicklistValues$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IPickListItem[]> | undefined",
          "optional": false,
          "description": "",
          "line": 103,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "PicklistsSelectors.userPicklistValues"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userProfileForm",
          "defaultValue": "new FormGroup({\n    absId: new FormControl('', []), //readonly\n    npi: new FormControl('', []), //readonly\n    emailAddress: new FormControl('', []), //readonly\n    birthState: new FormControl('', []), //sometimes no options\n    state: new FormControl('', []), //sometimes no options\n    street2: new FormControl('', []), //sometimes no valid value\n    suffix: new FormControl('', []), //sometimes no valid value\n    mobilePhoneNumber: new FormControl('', []), // typically not required in forms\n    middleName: new FormControl('', [\n      Validators.minLength(1),\n      Validators.maxLength(1),\n    ]), // typically not required in forms\n    profilePicture: new FormControl('', []), //currently no input\n    bestLanguageId: new FormControl('', [Validators.required]),\n    birthCity: new FormControl('', [Validators.required]),\n    birthCountry: new FormControl('', [Validators.required]),\n    birthDate: new FormControl(new Date(), [Validators.required]),\n    city: new FormControl('', [Validators.required]),\n    country: new FormControl('', [Validators.required]),\n    countryCitizenship: new FormControl('', [Validators.required]),\n    displayName: new FormControl('', [Validators.required]),\n    ethnicity: new FormControl('', [Validators.required]),\n    firstLanguageId: new FormControl('', [Validators.required]),\n    firstName: new FormControl('', [Validators.required]),\n    genderId: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    officePhoneNumber: new FormControl('', [Validators.required]),\n    race: new FormControl('', [Validators.required]),\n    receiveComms: new FormControl(false, [Validators.required]),\n    street1: new FormControl('', [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n    zipCode: new FormControl('', [Validators.required]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroup",
          "optional": false,
          "description": "",
          "line": 131
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 283,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 287,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 313,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetFormDefaults",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 296,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleEdit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 306,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ProfileHeaderComponent",
          "type": "component"
        },
        {
          "name": "SuccessFailModalComponent",
          "type": "component"
        },
        {
          "name": "NgxMaskDirective",
          "type": "directive"
        },
        {
          "name": "NgxMaskPipe",
          "type": "pipe"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputMaskModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { debounceTime, Observable, take } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { NgxMaskDirective } from 'ngx-mask';\nimport { NgxMaskPipe } from 'ngx-mask';\nimport { provideNgxMask } from 'ngx-mask';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport {\n  ClearUserProfileErrors,\n  GetUserProfile,\n  UpdateUserProfile,\n  UserProfileSelectors,\n} from '../state';\nimport { IUserProfile } from '../state';\nimport {\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport {\n  IEthnicityReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n} from '../api';\n\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { SuccessFailModalComponent } from '../shared/components/success-fail-modal/success-fail-modal.component';\n\nimport '../../web-components';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { CalendarModule } from 'primeng/calendar';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { IFormErrors } from '../shared/common';\nimport { FormErrorsComponent } from '../shared/components/form-errors/form-errors.component';\nimport { SetUnsavedChanges } from '../state/application/application.actions';\n\ninterface IDisplayUserProfile extends IUserProfile {\n  gender: string;\n  countryDisplay: string;\n  birthCountryDisplay: string;\n  citizenshipCountryDisplay: string;\n  firstLanguage: string;\n  bestLanguage: string;\n  ethnicityDisplay: string;\n  raceDisplay: string;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-personal-profile',\n  templateUrl: './personal-profile.component.html',\n  styleUrls: ['./personal-profile.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    TranslateModule,\n    ProfileHeaderComponent,\n    SuccessFailModalComponent,\n    NgxMaskDirective,\n    NgxMaskPipe,\n    InputTextModule,\n    DropdownModule,\n    InputMaskModule,\n    CalendarModule,\n    CheckboxModule,\n    FormErrorsComponent,\n  ],\n  providers: [provideNgxMask()],\n})\nexport class PersonalProfileComponent implements OnInit, OnDestroy {\n  // TODO: [Joe] set up national provider identifier (NPI) report button\n\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  @Select(UserProfileSelectors.errors) errors$:\n    | Observable<IFormErrors>\n    | undefined;\n\n  @Select(PicklistsSelectors.userPicklistValues) userPicklistValues$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.countries) countries$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.ethnicities) ethnicities$:\n    | Observable<IEthnicityReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.genders) genders$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.languages) languages$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.races) races$:\n    | Observable<IRaceReadOnlyModel[]>\n    | undefined;\n\n  clearErrors = new ClearUserProfileErrors();\n\n  mailingStates: IStateReadOnlyModel[] = [];\n  birthStates: IStateReadOnlyModel[] = [];\n\n  user!: IDisplayUserProfile;\n\n  isEdit = false;\n\n  userProfileForm: FormGroup = new FormGroup({\n    absId: new FormControl('', []), //readonly\n    npi: new FormControl('', []), //readonly\n    emailAddress: new FormControl('', []), //readonly\n    birthState: new FormControl('', []), //sometimes no options\n    state: new FormControl('', []), //sometimes no options\n    street2: new FormControl('', []), //sometimes no valid value\n    suffix: new FormControl('', []), //sometimes no valid value\n    mobilePhoneNumber: new FormControl('', []), // typically not required in forms\n    middleName: new FormControl('', [\n      Validators.minLength(1),\n      Validators.maxLength(1),\n    ]), // typically not required in forms\n    profilePicture: new FormControl('', []), //currently no input\n    bestLanguageId: new FormControl('', [Validators.required]),\n    birthCity: new FormControl('', [Validators.required]),\n    birthCountry: new FormControl('', [Validators.required]),\n    birthDate: new FormControl(new Date(), [Validators.required]),\n    city: new FormControl('', [Validators.required]),\n    country: new FormControl('', [Validators.required]),\n    countryCitizenship: new FormControl('', [Validators.required]),\n    displayName: new FormControl('', [Validators.required]),\n    ethnicity: new FormControl('', [Validators.required]),\n    firstLanguageId: new FormControl('', [Validators.required]),\n    firstName: new FormControl('', [Validators.required]),\n    genderId: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    officePhoneNumber: new FormControl('', [Validators.required]),\n    race: new FormControl('', [Validators.required]),\n    receiveComms: new FormControl(false, [Validators.required]),\n    street1: new FormControl('', [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n    zipCode: new FormControl('', [Validators.required]),\n  });\n\n  isSubmitted = false;\n\n  constructor(\n    private _store: Store,\n    public globalDialogService: GlobalDialogService\n  ) {\n    this.userProfileForm.controls['state'].disable();\n    this.userProfileForm.controls['birthState'].disable();\n    this.user$\n      ?.pipe(debounceTime(300), untilDestroyed(this))\n      .subscribe((user: IUserProfile) => {\n        if (!user) {\n          this.isEdit = true;\n        }\n        const languages = this._store.selectSnapshot(\n          PicklistsSelectors.slices.languages\n        ) as IPickListItem[];\n\n        const genders = this._store.selectSnapshot(\n          PicklistsSelectors.slices.genders\n        ) as IPickListItem[];\n\n        //countries\n        const countries = this._store.selectSnapshot(\n          PicklistsSelectors.slices.countries\n        ) as IPickListItem[];\n\n        //ethnicities\n        const ethnicities = this._store.selectSnapshot(\n          PicklistsSelectors.slices.ethnicities\n        ) as IEthnicityReadOnlyModel[];\n\n        //races\n        const races = this._store.selectSnapshot(\n          PicklistsSelectors.slices.races\n        ) as IRaceReadOnlyModel[];\n\n        this.user = {\n          ...user,\n          gender:\n            genders.find((x) => x.itemValue === user?.genderId)\n              ?.itemDescription || '',\n          countryDisplay:\n            countries.find((x) => x.itemValue === user?.country)\n              ?.itemDescription || '',\n          birthCountryDisplay:\n            countries.find((x) => x.itemValue === user?.birthCountry)\n              ?.itemDescription || '',\n          citizenshipCountryDisplay:\n            countries.find((x) => x.itemValue === user?.countryCitizenship)\n              ?.itemDescription || '',\n          firstLanguage:\n            languages.find((x) => x.itemValue === user?.firstLanguageId)\n              ?.itemDescription || '',\n          bestLanguage:\n            languages.find((x) => x.itemValue === user?.bestLanguageId)\n              ?.itemDescription || '',\n          ethnicityDisplay:\n            ethnicities.find((x) => x.itemValue === user?.ethnicity)\n              ?.itemDescription || '',\n          raceDisplay:\n            races.find((x) => x.itemValue === user?.race)?.itemDescription ||\n            '',\n        } as IDisplayUserProfile;\n\n        this._store.dispatch(new GetStateList(user.country)).subscribe();\n        this.mailingStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this._store.dispatch(new GetStateList(user.birthCountry));\n        this.birthStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this.userProfileForm.patchValue({ ...user });\n        const date = new Date(Date.parse(user?.birthDate));\n        if (!isNaN(date as unknown as number)) {\n          this.userProfileForm.get('birthDate')?.patchValue(date);\n        }\n      });\n\n    this.userProfileForm\n      .get('country')\n      ?.valueChanges.pipe(debounceTime(300), untilDestroyed(this))\n      .subscribe((value) => {\n        this._store\n          .dispatch(new GetStateList(value))\n          .pipe(take(1))\n          .subscribe(() => {\n            this.mailingStates = this._store.selectSnapshot(\n              PicklistsSelectors.slices.states\n            ) as IStateReadOnlyModel[];\n            if (this.mailingStates.length > 0) {\n              this.userProfileForm.controls['state'].enable();\n            } else {\n              this.userProfileForm.controls['state'].disable();\n            }\n          });\n      });\n\n    this.userProfileForm\n      .get('birthCountry')\n      ?.valueChanges.subscribe((value) => {\n        this._store\n          .dispatch(new GetStateList(value))\n          .pipe(take(1))\n          .subscribe(() => {\n            this.birthStates = this._store.selectSnapshot(\n              PicklistsSelectors.slices.states\n            ) as IStateReadOnlyModel[];\n            if (this.birthStates.length > 0) {\n              this.userProfileForm.controls['birthState'].enable();\n            } else {\n              this.userProfileForm.controls['birthState'].disable();\n            }\n          });\n      });\n  }\n  ngOnDestroy(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n  }\n\n  ngOnInit(): void {\n    this._store.dispatch(new SetUnsavedChanges(false));\n\n    this.userProfileForm.valueChanges.subscribe(() => {\n      const isDirty = this.userProfileForm.dirty;\n      this._store.dispatch(new SetUnsavedChanges(isDirty && !this.isSubmitted));\n    });\n  }\n\n  resetFormDefaults() {\n    this.userProfileForm.patchValue({ ...this.user });\n    if (this.user?.birthDate) {\n      const date = new Date(Date.parse(this.user.birthDate));\n      if (!isNaN(date as unknown as number)) {\n        this.userProfileForm.get('birthDate')?.patchValue(date);\n      }\n    }\n  }\n\n  toggleEdit() {\n    this.isEdit = !this.isEdit;\n    this.resetFormDefaults();\n    this._store.dispatch(new SetUnsavedChanges(false));\n    this._store.dispatch(new ClearUserProfileErrors());\n  }\n\n  onSubmit() {\n    const model = this.userProfileForm.value;\n    model.birthDate = new Date(model.birthDate).toISOString();\n\n    this._store\n      .dispatch(new UpdateUserProfile(model))\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (!res.userProfile.errors) {\n          this.isSubmitted = true;\n          this.isEdit = false;\n          this._store.dispatch(new SetUnsavedChanges(false));\n        } else {\n          this.userProfileForm.get('userConfrimed')?.setValue(false);\n        }\n      });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".form-section {\n  margin: 2rem 0;\n}\n.form-section__title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\nhr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\n",
          "styleUrl": "./personal-profile.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 166,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<header>\n  <h1>{{ 'PROFILE.TITLE' | translate }}</h1>\n</header>\n<ng-container *ngIf=\"user\">\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header\n          [profilePicture]=\"user.profilePicture\"\n        ></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>{{ 'PROFILE.SUBTITLE' | translate }}</p>\n        <div class=\"mb-3\">\n          <abs-form-errors\n            *ngIf=\"errors$ | async as error\"\n            [errors]=\"error\"\n            [clearErrors]=\"clearErrors\"\n          ></abs-form-errors>\n        </div>\n        <form\n          name=\"personProfileForm\"\n          [formGroup]=\"userProfileForm\"\n          (ngSubmit)=\"onSubmit()\"\n        >\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Name</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 sm:col-8 md:col-4\">\n                <label>First Name</label>\n                <div>{{ user.firstName === '' ? 'n/a' : user.firstName }}</div>\n              </div>\n              <div class=\"col-12 sm:col-4 md:col-2\">\n                <label>M. I.</label>\n                <div>{{ user.middleName === '' ? '-' : user.middleName }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Last Name</label>\n                <div>{{ user.lastName === '' ? '-' : user.lastName }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Last Name</label>\n                <div>{{ user.suffix === '' ? '-' : user.suffix }}</div>\n              </div>\n              <div class=\"col-12\">\n                <label\n                  >Name as it should appear on your printed certificate</label\n                >\n                <div>\n                  {{ user.displayName === '' ? '-' : user.displayName }}\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 sm:col-8 md:col-3\">\n                <label class=\"block\" for=\"firstName\">First Name *</label>\n                <input\n                  id=\"firstName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"firstName\"\n                />\n              </div>\n              <div class=\"col-12 sm:col-4 md:col-3\">\n                <label class=\"block\" for=\"middleName\">M. I.</label>\n                <input\n                  id=\"middleName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"middleName\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"lastName\">Last Name *</label>\n                <input\n                  id=\"lastName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"lastName\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"suffix\">Suffix</label>\n                <input\n                  id=\"suffix\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"suffix\"\n                />\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"displayName\"\n                  >Name as it should appear on your printed certificate *</label\n                >\n                <input pInputText type=\"text\" formControlName=\"displayName\" />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Mailing Address</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-9\">\n                <label>Street Address</label>\n                <div>{{ user.street1 === '' ? '-' : user.street1 }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Apt</label>\n                <div>{{ user.street2 === '' ? '-' : user.street2 }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Country</label>\n                <div>\n                  {{ user.countryDisplay === '' ? '-' : user.countryDisplay }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>City</label>\n                <div>{{ user.city === '' ? '-' : user.city }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>State / Province</label>\n                <div>{{ user.state === '' ? '-' : user.state }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Zipcode</label>\n                <div>{{ user.zipCode === '' ? '-' : user.zipCode }}</div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-9 flex flex-column gap-1\">\n                <label class=\"block\" for=\"street1\">Street Address *</label>\n                <input\n                  id=\"street1\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"street1\"\n                />\n                <small id=\"street1Help\" class=\"form-helper-text text-muted\"\n                  >Address Line 1</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3 flex flex-column gap-1\">\n                <label class=\"block\" for=\"street2\">&nbsp;</label>\n                <input\n                  id=\"street2\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"street2\"\n                />\n                <small id=\"street2Help\" class=\"form-helper-text text-muted\"\n                  >Address Line 2</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"country\">Country *</label>\n                <p-dropdown\n                  inputId=\"country\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"country\"\n                  placeholder=\"Select a Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"city\">City *</label>\n                <input\n                  id=\"city\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"city\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"state\">State / Province </label>\n                <p-dropdown\n                  inputId=\"state\"\n                  [options]=\"mailingStates\"\n                  formControlName=\"state\"\n                  placeholder=\"Select a State\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"zipCode\">Zipcode *</label>\n                <input\n                  id=\"zipCode\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"zipCode\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Contact Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>Email Address</label>\n                <div>\n                  {{ user.emailAddress === '' ? '-' : user.emailAddress }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Primary Phone Number</label>\n                <div>\n                  {{\n                    user.officePhoneNumber === ''\n                      ? '-'\n                      : user.officePhoneNumber\n                      ? user.officePhoneNumber\n                      : ('' | mask : '(000) 000-0000')\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Alternative Phone Number</label>\n                <div>\n                  {{\n                    user.mobilePhoneNumber === ''\n                      ? '-'\n                      : user.mobilePhoneNumber\n                      ? user.mobilePhoneNumber\n                      : ('' | mask : '(000) 000-0000')\n                  }}\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6 flex flex-column gap-1\">\n                <label class=\"block\" for=\"emailAddress\">Email Address</label>\n                <input\n                  id=\"emailAddress\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"emailAddress\"\n                  [disabled]=\"true\"\n                  readonly\n                />\n                <small id=\"emailAddressHelp\" class=\"form-helper-text text-muted\"\n                  >Go to your My Account page to change your email</small\n                >\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"officePhoneNumber\"\n                  >Primary Phone Number *</label\n                >\n                <p-inputMask\n                  inputId=\"officePhoneNumber\"\n                  mask=\"(999) 999-9999\"\n                  formControlName=\"officePhoneNumber\"\n                  placeholder=\"(999) 999-9999\"\n                ></p-inputMask>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"mobilePhoneNumber\"\n                  >Alternative Phone Number</label\n                >\n                <p-inputMask\n                  inputId=\"mobilePhoneNumber\"\n                  mask=\"(999) 999-9999\"\n                  formControlName=\"mobilePhoneNumber\"\n                  placeholder=\"(999) 999-9999\"\n                ></p-inputMask>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Citizenship Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>Country of Birth</label>\n                <div>\n                  {{\n                    user.birthCountryDisplay === ''\n                      ? '-'\n                      : user.birthCountryDisplay\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Town or City of Birth</label>\n                <div>{{ user.birthCity === '' ? '-' : user.birthCity }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>State, Province, or Territory of Birth</label>\n                <div>{{ user.birthState === '' ? '-' : user.birthState }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Country of Citizenship</label>\n                <div>\n                  {{\n                    user.citizenshipCountryDisplay === ''\n                      ? '-'\n                      : user.citizenshipCountryDisplay\n                  }}\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthCountry\"\n                  >Country of Birth *</label\n                >\n                <p-dropdown\n                  inputId=\"birthCountry\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"birthCountry\"\n                  placeholder=\"Select a Birth Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthCity\"\n                  >Town or City of Birth *</label\n                >\n                <input\n                  id=\"birthCity\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"birthCity\"\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthState\"\n                  >State, Province, or Territory of Birth</label\n                >\n                <p-dropdown\n                  inputId=\"birthState\"\n                  [options]=\"birthStates\"\n                  formControlName=\"birthState\"\n                  placeholder=\"Select a Birth State\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"countryCitizenship\"\n                  >Country of Citizenship *</label\n                >\n                <p-dropdown\n                  inputId=\"countryCitizenship\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"countryCitizenship\"\n                  placeholder=\"Select a Citizenship Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Demographic Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>ABS ID</label>\n                <div>{{ user.absId === '' ? '-' : user.absId }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>National Provider Identification</label>\n                <div>{{ user.npi === '' ? '-' : user.npi }}</div>\n                <small class=\"form-helper-text text-muted\"\n                  >Please contact ABS if your NPI is incorrect.</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Gender</label>\n                <div>{{ user.gender === '' ? '-' : user.gender }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Date of Birth</label>\n                <div>\n                  {{\n                    user.birthDate === ''\n                      ? '-'\n                      : (user.birthDate | date : 'shortDate')\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Race</label>\n                <div>\n                  {{ user.raceDisplay === '' ? '-' : user.raceDisplay }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Ethnicity</label>\n                <div>\n                  {{\n                    user.ethnicityDisplay === '' ? '-' : user.ethnicityDisplay\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>First Language</label>\n                <div>\n                  {{ user.firstLanguage === '' ? '-' : user.firstLanguage }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Best Language</label>\n                <div>\n                  {{ user.bestLanguage === '' ? '-' : user.bestLanguage }}\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"absId\">ABS ID</label>\n                <input\n                  id=\"absId\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"absId\"\n                  readonly\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"npi\"\n                  >National Provider Identification</label\n                >\n                <input\n                  id=\"npi\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"npi\"\n                  readonly\n                />\n                <small class=\"form-helper-text text-muted\"\n                  >Please contact ABS if your NPI is incorrect.</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"gender\">Gender *</label>\n                <p-dropdown\n                  inputId=\"gender\"\n                  *ngIf=\"genders$ | async as genders\"\n                  [options]=\"genders\"\n                  formControlName=\"genderId\"\n                  placeholder=\"Select a Gender\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"birthDate\">Date of Birth *</label>\n                <p-calendar\n                  id=\"birthDate\"\n                  [showIcon]=\"true\"\n                  placeholder=\"DD/MM/YYYY\"\n                  formControlName=\"birthDate\"\n                  appendTo=\"body\"\n                ></p-calendar>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"race\">Race *</label>\n                <p-dropdown\n                  inputId=\"race\"\n                  *ngIf=\"races$ | async as races\"\n                  [options]=\"races\"\n                  formControlName=\"race\"\n                  placeholder=\"Select a Race\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"ethnicity\">Ethnicity *</label>\n                <p-dropdown\n                  inputId=\"ethnicity\"\n                  *ngIf=\"ethnicities$ | async as ethnicities\"\n                  [options]=\"ethnicities\"\n                  formControlName=\"ethnicity\"\n                  placeholder=\"Select an Ethnicity\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"firstLanguageId\"\n                  >First Language *</label\n                >\n                <p-dropdown\n                  inputId=\"firstLanguageId\"\n                  *ngIf=\"languages$ | async as languages\"\n                  [options]=\"languages\"\n                  formControlName=\"firstLanguageId\"\n                  placeholder=\"Select a First Language\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"bestLanguageId\"\n                  >Best Language *</label\n                >\n                <p-dropdown\n                  inputId=\"bestLanguageId\"\n                  *ngIf=\"languages$ | async as languages\"\n                  [options]=\"languages\"\n                  formControlName=\"bestLanguageId\"\n                  placeholder=\"Select a Best Language\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-section\" *ngIf=\"isEdit\">\n            <div class=\"grid\">\n              <div\n                class=\"col-12 text-center flex justify-content-center align-items-center gap-2\"\n              >\n                <p-checkbox\n                  inputId=\"userConfirmed\"\n                  name=\"userConfirmed\"\n                  formControlName=\"userConfirmed\"\n                  [binary]=\"true\"\n                ></p-checkbox>\n                <label for=\"userConfirmed\"\n                  >I confirm the above information is completed and correct to\n                  the best of my knowledge</label\n                >\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-12\">\n            <div class=\"flex justify-content-end\" *ngIf=\"!isEdit\">\n              <p-button [style]=\"{ width: '200px' }\" (onClick)=\"toggleEdit()\">\n                Edit\n              </p-button>\n            </div>\n            <div class=\"flex justify-content-end\" *ngIf=\"isEdit\">\n              <p-button\n                variant=\"text\"\n                (onClick)=\"toggleEdit()\"\n                styleClass=\"p-button-link p-button-primary\"\n                >Cancel</p-button\n              >\n              <p-button\n                type=\"submit\"\n                [style]=\"{ width: '337px' }\"\n                [disabled]=\"userProfileForm.invalid\"\n              >\n                Save\n              </p-button>\n            </div>\n          </div>\n        </form>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading personal profile...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
      "id": "component-ProfessionalActivitiesAndPrivilegesModalComponent-4d66a67173cf1b7fe02ba74c9ccd53c0bc3c812de86235779d4f2eb3fc142532a03f4c5cbdc0ec85fe846628c71b2c6f7e7c4c4d9038196a4d504a9fb90b4378",
      "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "provideNgxMask()"
        }
      ],
      "selector": "abs-professional-activities-and-privileges-modal",
      "styleUrls": [
        "./professional-activities-and-privileges-modal.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./professional-activities-and-privileges-modal.component.html"
      ],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "activePanel",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "explanationOfLackOfPrivilegesForm",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "hospitalAppointmentsCols",
          "defaultValue": "HOSPOITAL_APPOINTMENTS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "hospitalAppointmentsData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "nonClincalActivitiesForm",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "panels",
          "defaultValue": "[\n    'hospitalAppointments',\n    'explanationOfLackOfPrivileges',\n    'nonClinicalActivities',\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "surgeonProfile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getProfessionalActivitiesAndPrivilegesData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleDefaultShowTab",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "showTabPanel",
          "args": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { provideNgxMask } from 'ngx-mask';\nimport { HOSPOITAL_APPOINTMENTS_COLS } from './hospital-appointments-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-professional-activities-and-privileges-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, InputTextareaModule, ButtonModule],\n  templateUrl: './professional-activities-and-privileges-modal.component.html',\n  styleUrls: ['./professional-activities-and-privileges-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [provideNgxMask()],\n})\nexport class ProfessionalActivitiesAndPrivilegesModalComponent\n  implements OnInit\n{\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  panels = [\n    'hospitalAppointments',\n    'explanationOfLackOfPrivileges',\n    'nonClinicalActivities',\n  ];\n  activePanel = 0;\n\n  surgeonProfile: any;\n\n  hospitalAppointmentsCols = HOSPOITAL_APPOINTMENTS_COLS;\n  hospitalAppointmentsData!: any;\n\n  explanationOfLackOfPrivilegesForm = '';\n  nonClincalActivitiesForm = '';\n\n  ngOnInit() {\n    this.getProfessionalActivitiesAndPrivilegesData();\n  }\n\n  handleGridAction(event: any) {\n    console.log('unhandled grid action', event);\n  }\n\n  getProfessionalActivitiesAndPrivilegesData() {\n    this.hospitalAppointmentsData = [\n      {\n        practiceType: 'Administration (Exclusively)',\n        apptType: 'Other',\n        organizationType: 'Organization Type',\n        city: 'York',\n        state: 'PA',\n        institution: 'York Hospital [6228]',\n        other: '-',\n        authOfficial: 'ME',\n      },\n      {\n        practiceType: 'Clinical Practice In Surgery',\n        apptType: 'Active Staff',\n        organizationType: 'Governmental (Military, VA, State, etc.)',\n        city: 'York',\n        state: 'PA',\n        institution: 'Other Institution',\n        other: 'ABS',\n        authOfficial: 'Frank Lewis, Jr.',\n      },\n    ];\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#surgeonProfileTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
          "styleUrl": "./professional-activities-and-privileges-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div>\n  <p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n  <sl-tab-group\n    [noScrollControls]=\"true\"\n    id=\"surgeonProfileTabs\"\n    (sl-tab-show)=\"handleDefaultShowTab($event)\"\n  >\n    <sl-tab slot=\"nav\" panel=\"hospitalAppointments\" class=\"tab__complete\">\n      <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n      Hospital Appointments\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"explanationOfLackOfPrivileges\">\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Explanation of Lack of Privileges\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"nonClinicalActivities\">\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Non Clinical Activities\n    </sl-tab>\n\n    <!-- Hospital Appointments -->\n    <sl-tab-panel name=\"hospitalAppointments\">\n      <p>\n        Please update as needed the hospitals or surgical centers where you\n        expect to hold any privileges after completion of your residency\n        training by clicking on <strong>Add New Record</strong>. If you are\n        unable to find your institution in the list, type the name in the field\n        labeled “Other.” A hospital would be considered a multidisciplinary\n        clinic (over 10).\n      </p>\n\n      <p>\n        If you will not hold privileges following residency, please skip this\n        section\n      </p>\n\n      <p-button class=\"btn-add\">\n        <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n        <span>Add a Record</span>\n      </p-button>\n      <abs-grid\n        [columns]=\"hospitalAppointmentsCols\"\n        [data]=\"hospitalAppointmentsData\"\n        (action)=\"handleGridAction($event)\"\n      >\n      </abs-grid>\n    </sl-tab-panel>\n\n    <sl-tab-panel name=\"explanationOfLackOfPrivileges\">\n      <p>\n        <strong>\n          If you do not hold full surgical privileges, please explain in the\n          space provided.\n        </strong>\n      </p>\n      <label for=\"describe\">Describe</label>\n      <textarea\n        label=\"Describe\"\n        pInputTextarea\n        [value]=\"explanationOfLackOfPrivilegesForm\"\n        rows=\"10\"\n      ></textarea>\n    </sl-tab-panel>\n\n    <sl-tab-panel name=\"nonClinicalActivities\">\n      <p>\n        <strong>\n          Diplomats not in the active practice of surgery should describe below\n          their current non-clinical activities.\n        </strong>\n      </p>\n      <label for=\"describe\">Describe</label>\n      <textarea\n        pInputTextarea\n        label=\"Describe\"\n        [value]=\"nonClincalActivitiesForm\"\n        rows=\"10\"\n      ></textarea>\n    </sl-tab-panel>\n  </sl-tab-group>\n</div>\n<div class=\"flex justify-content-end mt-3\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button type=\"button\" [style]=\"{ width: '337px' }\" (click)=\"save()\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "ProfessionalStandingComponent",
      "id": "component-ProfessionalStandingComponent-396dc4fea357980963b6e232c416f40a86f4119b05a6d545b3851b6b50b8157f8ee2ea5bc7af43bc9b48c3bc138d4e100e80808622c0abebf9d24dcad15937f0",
      "file": "src/app/professional-standing/professional-standing.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-professional-standing",
      "styleUrls": ["./professional-standing.component.scss"],
      "styles": [],
      "templateUrl": ["./professional-standing.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "allAppointments$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserAppointmentReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 152,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.allAppointments"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "appointmentErrors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 110,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.appointmentErrors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "appointmentsPrivilegesCols",
          "defaultValue": "APPOINTMENTS_PRIVILEGES_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 158
        },
        {
          "name": "appointmentsPrivilegesPickLists",
          "defaultValue": "{\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAppointementsPrivilegesPickLists",
          "optional": false,
          "description": "",
          "line": 162
        },
        {
          "name": "appointmentsTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 159
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearProfessionalStandingErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 106
        },
        {
          "name": "currentAppointmentErrors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 112,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.professionalStandingErrors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "currentAppointmentPickLists",
          "defaultValue": "{\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IProfessionalStandingPickLists",
          "optional": false,
          "description": "",
          "line": 145
        },
        {
          "name": "currentAppointments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 144
        },
        {
          "name": "currentAppointments$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfessionalStandingModel> | undefined",
          "optional": false,
          "description": "",
          "line": 143,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.userProfessionalStandingDetails"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "editHospitalAppointmentsAndPrivileges$",
          "defaultValue": "new BehaviorSubject(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 155
        },
        {
          "name": "editSanctionsAndEthics$",
          "defaultValue": "new BehaviorSubject(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 137
        },
        {
          "name": "extendedMedicalLicenses$",
          "defaultValue": "new BehaviorSubject([] as any)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<IMedicalLicense[]> | undefined",
          "optional": false,
          "description": "",
          "line": 122
        },
        {
          "name": "licensesCols",
          "defaultValue": "LICENSES_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "medicalLicenseErrors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 108,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.medicalLicenseErrors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "medicalLicensePickLists",
          "defaultValue": "{\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicensePickLists",
          "optional": false,
          "description": "",
          "line": 129
        },
        {
          "name": "medicalLicenses$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IMedicalLicense[]> | undefined",
          "optional": false,
          "description": "",
          "line": 118,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.medicalLiscenseList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "sanctionsAndEthics",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ISanctionsModel | undefined",
          "optional": false,
          "description": "",
          "line": 139
        },
        {
          "name": "sanctionsAndEthics$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ISanctionsModel> | undefined",
          "optional": false,
          "description": "",
          "line": 136,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.sanctions"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "sanctionsErrors$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 114,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.sanctionsErrors"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedAppointment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IUserAppointmentModel | undefined",
          "optional": false,
          "description": "",
          "line": 160
        },
        {
          "name": "selectedAppointment$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserAppointmentModel> | undefined",
          "optional": false,
          "description": "",
          "line": 154,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.selectedAppointment"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedMedicalLicense",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMedicalLicenseModel | undefined",
          "optional": false,
          "description": "",
          "line": 126
        },
        {
          "name": "selectedMedicalLicense$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IMedicalLicenseModel> | undefined",
          "optional": false,
          "description": "",
          "line": 120,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.selectedMedicalLicense"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "showAppointmentsAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 161
        },
        {
          "name": "showLicensesAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 128
        },
        {
          "name": "stateMedicalLicenseTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 127
        }
      ],
      "methodsClass": [
        {
          "name": "cancelAddEditAppointment",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 530,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cancelAddEditLicense",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 392,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteAppointment",
          "args": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 526,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "apptId",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAppointmentDetails",
          "args": [
            {
              "name": "appointment",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 299,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "appointment",
              "type": "IUserAppointmentModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCurrentAppointmentDetails",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 267,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMedicalLicenseDetails",
          "args": [
            {
              "name": "license",
              "type": "IMedicalLicenseReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 316,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "license",
              "type": "IMedicalLicenseReadOnlyModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMedicalLicenses",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 312,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getPreviousAppointmentsAndPrivileges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 295,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSanctionsAndEthicsDetails",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 281,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleAppointementsGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 461,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleLicensesGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 330,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initPicklistValues",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 194,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "initProfileData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 260,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 177,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveAppointment",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 490,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveCurrentAppointments",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 428,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveLicense",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 349,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveSanctionsAndEthics",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 397,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setStateMedicalLicenseEdit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 182,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "showAppointmentModal",
          "args": [
            {
              "name": "appointment",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 479,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "appointment",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showLicenseModal",
          "args": [
            {
              "name": "license",
              "type": "IMedicalLicenseReadOnlyModel | null | undefined",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 338,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "license",
              "type": "IMedicalLicenseReadOnlyModel | null | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleEdit",
          "args": [
            {
              "name": "observable$",
              "type": "Subject<boolean>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 536,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "observable$",
              "type": "Subject<boolean>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "CollapsePanelComponent",
          "type": "component"
        },
        {
          "name": "ProfileHeaderComponent",
          "type": "component"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "LicenseFormComponent",
          "type": "component"
        },
        {
          "name": "SanctionsFormComponent",
          "type": "component"
        },
        {
          "name": "AppointmentsFormComponent",
          "type": "component"
        },
        {
          "name": "CurrentAppointmentFormComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\nimport {\n  ProfessionalStandingSelectors,\n  GetPSMedicalLicenseList,\n  GetPSMedicalLicenseDetails,\n  CreatePSMedicalLicense,\n  UpdatePSMedicalLicense,\n  GetUserProfessionalStandingDetails,\n  UpdateUserProfessionalStandingDetails,\n  CreateUserProfessionalStandingDetails,\n  GetPSAppointmentsAndPrivilegesList,\n  GetProfessionalStandingSanctionsDetails,\n  CreateProfessionalStandingSanctionsDetails,\n  UpdateProfessionalStandingSanctionsDetails,\n  UpdatePSAppointmentAndPrivilege,\n  CreatePSAppointmentAndPrivilege,\n  GetPSAppointmentAndPrivilegeDetails,\n  DeletePSAppointmentAndPrivilege,\n  ClearProfessionalStandingErrors,\n} from '../state';\nimport {\n  GetPicklists,\n  IPickListItemNumber,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IMedicalLicenseReadOnlyModel,\n  IMedicalLicenseModel,\n  IStateReadOnlyModel,\n  IUserProfessionalStandingModel,\n  ISanctionsModel,\n  IUserAppointmentModel,\n  IUserAppointmentReadOnlyModel,\n} from '../api';\nimport { LicenseFormComponent } from './license-form/license-form.component';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SanctionsFormComponent } from './sanctions-form/sanctions-form.component';\nimport { AppointmentsFormComponent } from './appointments-form/appointments-form.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CurrentAppointmentFormComponent } from './current-appointment-form/current-appointment-form.component';\ninterface IMedicalLicensePickLists {\n  licenseStateOptions: IStateReadOnlyModel[] | undefined;\n  licenseTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IProfessionalStandingPickLists {\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  primaryPracticeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IAppointementsPrivilegesPickLists {\n  stateCodeOptions: IStateReadOnlyModel[] | undefined;\n  practiceTypeOptions: IPickListItemNumber[] | undefined;\n  organizationTypeOptions: IPickListItemNumber[] | undefined;\n  organizationOptions: IPickListItemNumber[] | undefined;\n  appointmentTypeOptions: IPickListItemNumber[] | undefined;\n}\n\ninterface IMedicalLicense extends IMedicalLicenseReadOnlyModel {\n  showEdit: boolean;\n}\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    ButtonModule,\n    LicenseFormComponent,\n    SanctionsFormComponent,\n    AppointmentsFormComponent,\n    CurrentAppointmentFormComponent,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  /* error variables */\n  clearErrors = new ClearProfessionalStandingErrors(); // may need to break this into dividual error clearing actions\n  @Select(ProfessionalStandingSelectors.slices.medicalLicenseErrors)\n  medicalLicenseErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.appointmentErrors)\n  appointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.professionalStandingErrors)\n  currentAppointmentErrors$: Observable<any> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.sanctionsErrors)\n  sanctionsErrors$: Observable<any> | undefined;\n\n  /* Medical License variables */\n  @Select(ProfessionalStandingSelectors.slices.medicalLiscenseList)\n  medicalLicenses$: Observable<IMedicalLicense[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedMedicalLicense)\n  selectedMedicalLicense$: Observable<IMedicalLicenseModel> | undefined;\n\n  extendedMedicalLicenses$: Subject<IMedicalLicense[]> | undefined =\n    new BehaviorSubject([] as any);\n\n  licensesCols = LICENSES_COLS;\n  selectedMedicalLicense: IMedicalLicenseModel | undefined;\n  stateMedicalLicenseTitle: string | undefined;\n  showLicensesAddEdit = false;\n  medicalLicensePickLists: IMedicalLicensePickLists = {\n    licenseStateOptions: [],\n    licenseTypeOptions: [],\n  };\n\n  /* Sanctions and Ethics variables */\n  @Select(ProfessionalStandingSelectors.slices.sanctions)\n  sanctionsAndEthics$: Observable<ISanctionsModel> | undefined;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(false);\n\n  sanctionsAndEthics: ISanctionsModel | undefined;\n\n  /* Current Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.userProfessionalStandingDetails)\n  currentAppointments$: Observable<IUserProfessionalStandingModel> | undefined;\n  currentAppointments: any;\n  currentAppointmentPickLists: IProfessionalStandingPickLists = {\n    organizationTypeOptions: [],\n    primaryPracticeOptions: [],\n  };\n\n  /* Appointments and Privileges variables */\n  @Select(ProfessionalStandingSelectors.slices.allAppointments)\n  allAppointments$: Observable<IUserAppointmentReadOnlyModel[]> | undefined;\n  @Select(ProfessionalStandingSelectors.slices.selectedAppointment)\n  selectedAppointment$: Observable<IUserAppointmentModel> | undefined;\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(false);\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  appointmentsTitle: string | undefined;\n  selectedAppointment: IUserAppointmentModel | undefined;\n  showAppointmentsAddEdit = false;\n  appointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists = {\n    stateCodeOptions: [],\n    practiceTypeOptions: [],\n    organizationTypeOptions: [],\n    organizationOptions: [],\n    appointmentTypeOptions: [],\n  };\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initProfileData();\n  }\n\n  ngOnInit() {\n    this.initPicklistValues();\n    this.setStateMedicalLicenseEdit();\n  }\n\n  setStateMedicalLicenseEdit() {\n    this.medicalLicenses$?.pipe(untilDestroyed(this)).subscribe((medicalLicenses: IMedicalLicense[]) => {\n      const extendedLicenses: IMedicalLicense[] = medicalLicenses.map(\n        (license) => ({\n          ...license,\n          showEdit: license.reportingOrganization === 'Self',\n        })\n      );\n      this.extendedMedicalLicenses$?.next(extendedLicenses);\n    });\n  }\n\n  initPicklistValues() {\n    // defaulting country code to 500 for US states\n    this._store\n      .dispatch(new GetPicklists('500'))\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        //create new objects to trigger change detection\n        const newMedicalLicensePickLists: IMedicalLicensePickLists = {\n          licenseStateOptions: [],\n          licenseTypeOptions: [],\n        };\n        const newAppointmentsPrivilegesPickLists: IAppointementsPrivilegesPickLists =\n          {\n            stateCodeOptions: [],\n            practiceTypeOptions: [],\n            organizationTypeOptions: [],\n            organizationOptions: [],\n            appointmentTypeOptions: [],\n          };\n        const newProfessionalStandingPickLists: IProfessionalStandingPickLists =\n          {\n            organizationTypeOptions: [],\n            primaryPracticeOptions: [],\n          };\n\n        //medical license picklists\n        newMedicalLicensePickLists.licenseStateOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newMedicalLicensePickLists.licenseTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.licenseTypes);\n\n        this.medicalLicensePickLists = newMedicalLicensePickLists;\n\n        //appointments and privileges picklists\n        newAppointmentsPrivilegesPickLists.stateCodeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.states);\n        newAppointmentsPrivilegesPickLists.practiceTypeOptions =\n          this._store.selectSnapshot(PicklistsSelectors.slices.practiceTypes);\n        newAppointmentsPrivilegesPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newAppointmentsPrivilegesPickLists.organizationOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.jcahoOrganizations\n          );\n        newAppointmentsPrivilegesPickLists.appointmentTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.appointmentTypes\n          );\n        this.appointmentsPrivilegesPickLists =\n          newAppointmentsPrivilegesPickLists;\n\n        //professional standing picklists\n        newProfessionalStandingPickLists.organizationTypeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.organizationTypes\n          );\n        newProfessionalStandingPickLists.primaryPracticeOptions =\n          this._store.selectSnapshot(\n            PicklistsSelectors.slices.primaryPractices\n          );\n        this.currentAppointmentPickLists = newProfessionalStandingPickLists;\n      });\n  }\n\n  initProfileData() {\n    this.getMedicalLicenses();\n    this.getCurrentAppointmentDetails();\n    this.getPreviousAppointmentsAndPrivileges();\n    this.getSanctionsAndEthicsDetails();\n  }\n\n  getCurrentAppointmentDetails() {\n    this._store\n      .dispatch(new GetUserProfessionalStandingDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.currentAppointments$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.currentAppointments = res;\n          if (!res) {\n            this.editHospitalAppointmentsAndPrivileges$.next(true);\n          }\n        });\n      });\n  }\n\n  getSanctionsAndEthicsDetails() {\n    this._store\n      .dispatch(new GetProfessionalStandingSanctionsDetails())\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.sanctionsAndEthics$?.pipe(untilDestroyed(this)).subscribe((res) => {\n          this.sanctionsAndEthics = res;\n          if (!res) {\n            this.editSanctionsAndEthics$.next(true);\n          }\n        });\n      });\n  }\n\n  getPreviousAppointmentsAndPrivileges() {\n    this._store.dispatch(new GetPSAppointmentsAndPrivilegesList());\n  }\n\n  getAppointmentDetails(appointment: IUserAppointmentModel) {\n    if (appointment.apptId) {\n      this._store\n        .dispatch(new GetPSAppointmentAndPrivilegeDetails(appointment.apptId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedAppointment = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedAppointment\n          );\n        });\n    }\n  }\n\n  getMedicalLicenses() {\n    this._store.dispatch(new GetPSMedicalLicenseList());\n  }\n\n  getMedicalLicenseDetails(license: IMedicalLicenseReadOnlyModel) {\n    if (license.licenseId) {\n      this._store\n        .dispatch(new GetPSMedicalLicenseDetails(license.licenseId))\n        .pipe(untilDestroyed(this))\n        .subscribe(() => {\n          this.selectedMedicalLicense = this._store.selectSnapshot(\n            ProfessionalStandingSelectors.slices.selectedMedicalLicense\n          );\n        });\n    }\n  }\n\n  /* Medical License Functions */\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: IMedicalLicenseReadOnlyModel | null | undefined) {\n    if (license) {\n      this.getMedicalLicenseDetails(license);\n      this.stateMedicalLicenseTitle = 'Edit Medical License';\n    } else {\n      this.selectedMedicalLicense = undefined;\n      this.stateMedicalLicenseTitle = 'Add Medical License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n\n  saveLicense($event: any) {\n    let issueDate = '';\n    let expireDate = '';\n    if ($event.data.issueDate) {\n      issueDate = new Date($event.data.issueDate).toISOString();\n    }\n    if ($event.data.expireDate) {\n      expireDate = new Date($event.data.expireDate).toISOString();\n    }\n    const newLicense = {\n      licenseId: this.selectedMedicalLicense?.licenseId ?? 0,\n      issuingStateId: $event.data.issuingStateId ?? '',\n      licenseNumber: $event.data.licenseNumber ?? '',\n      licenseTypeId: $event.data.licenseTypeId ?? 0,\n      issueDate: issueDate,\n      expireDate: expireDate,\n      reportingOrganization:\n        this.selectedMedicalLicense?.reportingOrganization ?? 'Self',\n    } as unknown as IMedicalLicenseModel;\n\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSMedicalLicense(newLicense))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.medicalLicenseErrors) {\n            this.showLicensesAddEdit = $event.show;\n            this.selectedMedicalLicense = undefined;\n          }\n        });\n    }\n  }\n\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n  }\n\n  /* Sanctions and Ethics Functions */\n  saveSanctionsAndEthics($event: any) {\n    const newSanctionsAndEthics = {\n      ...$event.data,\n    } as unknown as ISanctionsModel;\n\n    if (this.sanctionsAndEthics) {\n      this._store\n        .dispatch(\n          new UpdateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    } else {\n      this._store\n        .dispatch(\n          new CreateProfessionalStandingSanctionsDetails(newSanctionsAndEthics)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.sanctionsErrors) {\n            this.toggleEdit(this.editSanctionsAndEthics$, false);\n          }\n        });\n    }\n  }\n\n  /* Current Appointments Functions */\n  saveCurrentAppointments($event: any) {\n    const newCurrentAppointments = {\n      ...$event.data,\n      clinicallyActive: $event.data.clinicallyActive ? 1 : 0,\n    } as unknown as IUserProfessionalStandingModel;\n\n    if (this.currentAppointments) {\n      this._store\n        .dispatch(\n          new UpdateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    } else {\n      // create\n      this._store\n        .dispatch(\n          new CreateUserProfessionalStandingDetails(newCurrentAppointments)\n        )\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.professionalStandingErrors) {\n            this.toggleEdit(this.editHospitalAppointmentsAndPrivileges$, false);\n          }\n        });\n    }\n  }\n\n  /* Appointments List Functions */\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteAppointment($event.data.apptId);\n          }\n        });\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.getAppointmentDetails(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.selectedAppointment = undefined;\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n\n  saveAppointment($event: any) {\n    // get orgId from autocomplete object\n    const orgId = $event.data.organizationId?.itemValue ?? 0;\n    const newAppointment = {\n      apptId: this.selectedAppointment?.apptId ?? 0,\n      practiceTypeId: $event.data.practiceTypeId ?? 0,\n      appointmentTypeId: $event.data.appointmentTypeId ?? 0,\n      organizationTypeId: $event.data.organizationTypeId ?? 0,\n      authorizingOfficial: $event.data.authorizingOfficial ?? '',\n      organizationId: orgId,\n      stateCode: $event.data.stateCode ?? '',\n      other: $event.data.other ?? '',\n    } as unknown as IUserAppointmentModel;\n    if ($event.isEdit) {\n      this._store\n        .dispatch(new UpdatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    } else {\n      this._store\n        .dispatch(new CreatePSAppointmentAndPrivilege(newAppointment))\n        .pipe(untilDestroyed(this))\n        .subscribe((res) => {\n          if (!res.professionalStanding?.appointmentErrors) {\n            this.showAppointmentsAddEdit = $event.show;\n            this.selectedAppointment = undefined;\n          }\n        });\n    }\n  }\n\n  deleteAppointment(apptId: number) {\n    this._store.dispatch(new DeletePSAppointmentAndPrivilege(apptId));\n  }\n\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.selectedAppointment = undefined;\n  }\n\n  /* on page form helper functions */\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-radio-group::part(form-control-label) {\n  font-weight: 700;\n}\nsl-radio-group::part(form-control-input) {\n  display: flex;\n}\nsl-radio::part(base) {\n  margin-right: 1.5rem;\n}\n\nsl-textarea::part(form-control) {\n  display: flex;\n  flex-direction: column;\n}\n\nsl-textarea::part(form-control-label) {\n  order: 1;\n  font-weight: 700;\n}\nsl-textarea::part(form-control-help-text) {\n  order: 2;\n  font-style: italic;\n  font-size: 0.8rem;\n  line-height: 0.9rem;\n  color: var(--global-primary);\n}\nsl-textarea::part(form-control-input) {\n  order: 3;\n}\n\n.white-space-break-spaces {\n  white-space: break-spaces;\n}\n.section__sub-header {\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid var(--global-gray-light);\n  margin: 2rem 0 1.5rem;\n}\n",
          "styleUrl": "./professional-standing.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 168,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<header>\n  <h1>Professional Standing</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <abs-collapse-panel [panelId]=\"1\" [startExpanded]=\"true\">\n          <h5 class=\"mt-0 mb-2\" panel-header>State Medical License</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p-button class=\"btn-add my-2\" (click)=\"showLicenseModal(null)\">\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD RECORD\n              </p-button>\n              <abs-grid\n                [columns]=\"licensesCols\"\n                [data]=\"extendedMedicalLicenses$\"\n                (action)=\"handleLicensesGridAction($event)\"\n                class=\"margin-bottom-2\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n      <sl-card class=\"col-12\">\n        <div>\n          <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n            <h5 class=\"mt-0 mb-2\" panel-header>\n              Current Hospital Appointments / Privileges\n            </h5>\n            <p class=\"mt-1\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <h6 class=\"section__sub-header\">Primary Appointments/Privileges</h6>\n            <div\n              class=\"grid\"\n              *ngIf=\"(editHospitalAppointmentsAndPrivileges$ | async) === false\"\n            >\n              <div class=\"col-12\">\n                <label>Clindally Active</label>\n                <div>\n                  <span\n                    *ngIf=\"\n                      currentAppointments &&\n                      currentAppointments.clinicallyActive\n                    \"\n                    >{{\n                      currentAppointments.clinicallyActive ? 'True' : 'False'\n                    }}</span\n                  >\n                  <span\n                    class=\"text-muted font-italic\"\n                    *ngIf=\"\n                      !currentAppointments ||\n                      !currentAppointments.clinicallyActive\n                    \"\n                    >False</span\n                  >\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Primary Current Practice or Training</label>\n                <div>\n                  <span\n                    *ngIf=\"\n                      currentAppointments && currentAppointments.primaryPractice\n                    \"\n                    >{{ currentAppointments.primaryPractice }}</span\n                  >\n                  <span\n                    class=\"text-muted font-italic\"\n                    *ngIf=\"\n                      !currentAppointments ||\n                      !currentAppointments.primaryPractice\n                    \"\n                    >not specified</span\n                  >\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label\n                  >Type of Organization of Primary Practice or Training</label\n                >\n                <div>\n                  <span\n                    *ngIf=\"\n                      currentAppointments &&\n                      currentAppointments.organizationType\n                    \"\n                    >{{ currentAppointments.organizationType }}</span\n                  >\n                  <span\n                    class=\"text-muted font-italic\"\n                    *ngIf=\"\n                      !currentAppointments ||\n                      !currentAppointments.organizationType\n                    \"\n                    >not specified</span\n                  >\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Lack of Hospital Privileges</label>\n                <div class=\"white-space-break-spaces\">\n                  <span\n                    *ngIf=\"\n                      currentAppointments &&\n                      currentAppointments.explanationOfNonPrivileges\n                    \"\n                    >{{ currentAppointments.explanationOfNonPrivileges }}</span\n                  >\n                  <span\n                    class=\"text-muted font-italic\"\n                    *ngIf=\"\n                      !currentAppointments ||\n                      !currentAppointments.explanationOfNonPrivileges\n                    \"\n                    >none</span\n                  >\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Non-Clinical Activities</label>\n                <div class=\"white-space-break-spaces\">\n                  <span\n                    *ngIf=\"\n                      currentAppointments &&\n                      currentAppointments.explanationOfNonClinicalActivities\n                    \"\n                    >{{\n                      currentAppointments.explanationOfNonClinicalActivities\n                    }}</span\n                  >\n                  <span\n                    class=\"text-muted font-italic\"\n                    *ngIf=\"\n                      !currentAppointments ||\n                      !currentAppointments.explanationOfNonClinicalActivities\n                    \"\n                    >none</span\n                  >\n                </div>\n              </div>\n            </div>\n\n            <div\n              class=\"grid col-12\"\n              *ngIf=\"editHospitalAppointmentsAndPrivileges$ | async\"\n            >\n              <abs-current-appointment-form\n                [formData]=\"currentAppointments\"\n                [isEdit]=\"false\"\n                [picklists]=\"currentAppointmentPickLists\"\n                [errors$]=\"currentAppointmentErrors$\"\n                [clearErrors]=\"clearErrors\"\n                (cancelForm)=\"\n                  toggleEdit(editHospitalAppointmentsAndPrivileges$, false)\n                \"\n                (saveForm)=\"saveCurrentAppointments($event)\"\n                class=\"w-full\"\n              ></abs-current-appointment-form>\n            </div>\n\n            <div\n              class=\"grid mt-3\"\n              *ngIf=\"(editHospitalAppointmentsAndPrivileges$ | async) === false\"\n            >\n              <div class=\"col-12 flex justify-content-end\">\n                <p-button\n                  [style]=\"{ width: '200px' }\"\n                  (click)=\"\n                    toggleEdit(editHospitalAppointmentsAndPrivileges$, true)\n                  \"\n                  >Edit</p-button\n                >\n              </div>\n            </div>\n\n            <h6 class=\"section__sub-header\">\n              All Hospital Appointments/Privileges\n            </h6>\n\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <p-button\n                  class=\"btn-add my-2\"\n                  (click)=\"showAppointmentModal(null)\"\n                >\n                  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                  ADD RECORD\n                </p-button>\n                <abs-grid\n                  [columns]=\"appointmentsPrivilegesCols\"\n                  [data]=\"allAppointments$\"\n                  (action)=\"handleAppointementsGridAction($event)\"\n                  class=\"margin-bottom-2\"\n                ></abs-grid>\n              </div>\n            </div>\n          </abs-collapse-panel>\n        </div>\n      </sl-card>\n      <sl-card class=\"col-12\">\n        <div>\n          <abs-collapse-panel [panelId]=\"3\" [startExpanded]=\"true\">\n            <h5 class=\"mt-0 mb-2\" panel-header>Sanctions and Ethics</h5>\n            <div\n              class=\"grid\"\n              *ngIf=\"(editSanctionsAndEthics$ | async) === false\"\n            >\n              <div class=\"col-12\">\n                <label>Have you had treatment for drug or alcohol abuse?</label>\n                <div>\n                  {{\n                    sanctionsAndEthics?.hadDrugAlchoholTreatment ? 'Yes' : 'No'\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <label>Have you been denied hospital privileges</label>\n                <div>\n                  {{\n                    sanctionsAndEthics?.hadHospitalPrivilegesDenied\n                      ? 'Yes'\n                      : 'No'\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <label\n                  >Have you been reprimanded by any licensing authority or had\n                  your license to practice medicine restricted, denied,\n                  suspended or revoked, or has it been voluntarily surrendered\n                  in any jurisdiction while under investigation?</label\n                >\n                <div>\n                  {{ sanctionsAndEthics?.hadLicenseRestricted ? 'Yes' : 'No' }}\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <label\n                  >Have you had hospital staff privileges (or any portion\n                  thereof) restricted, suspended, or revoked, or otherwise\n                  subject to disciplinary action?</label\n                >\n                <div>\n                  {{\n                    sanctionsAndEthics?.hadHospitalPrivilegesRestricted\n                      ? 'Yes'\n                      : 'No'\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <label>Have you been convicted of a felony?</label>\n                <div>\n                  {{ sanctionsAndEthics?.hadFelonyConviction ? 'Yes' : 'No' }}\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <label\n                  >Have you been censured by the American College of Surgeons, a\n                  hospital or other national or state society?</label\n                >\n                <div>\n                  {{ sanctionsAndEthics?.hadCensure ? 'Yes' : 'No' }}\n                </div>\n              </div>\n              <div class=\"col-12\" *ngIf=\"sanctionsAndEthics?.explanation\">\n                <label>Explain</label>\n                <div class=\"white-space-break-spaces\">\n                  {{ sanctionsAndEthics?.explanation }}\n                </div>\n              </div>\n            </div>\n            <div *ngIf=\"editSanctionsAndEthics$ | async\">\n              <abs-sanctions-form\n                [formData]=\"sanctionsAndEthics\"\n                [isEdit]=\"false\"\n                [errors$]=\"sanctionsErrors$\"\n                [clearErrors]=\"clearErrors\"\n                (cancelForm)=\"toggleEdit(editSanctionsAndEthics$, false)\"\n                (saveForm)=\"saveSanctionsAndEthics($event)\"\n              ></abs-sanctions-form>\n            </div>\n\n            <div\n              class=\"grid\"\n              *ngIf=\"(editSanctionsAndEthics$ | async) === false\"\n            >\n              <div class=\"col-12 flex justify-content-end\">\n                <p-button\n                  [style]=\"{ width: '200px' }\"\n                  (click)=\"toggleEdit(editSanctionsAndEthics$, true)\"\n                  >Edit</p-button\n                >\n              </div>\n            </div>\n          </abs-collapse-panel>\n        </div>\n      </sl-card>\n    </div>\n    <abs-modal\n      [open]=\"showAppointmentsAddEdit\"\n      (closeDialog)=\"cancelAddEditAppointment($event)\"\n      [title]=\"appointmentsTitle\"\n      modalName=\"appointmentAddEditModal\"\n    >\n      <abs-appointments-form\n        *ngIf=\"showAppointmentsAddEdit\"\n        [formData]=\"selectedAppointment\"\n        [isEdit]=\"selectedAppointment !== undefined\"\n        [picklists]=\"appointmentsPrivilegesPickLists\"\n        [errors$]=\"appointmentErrors$\"\n        [clearErrors]=\"clearErrors\"\n        (cancelForm)=\"cancelAddEditAppointment($event)\"\n        (saveForm)=\"saveAppointment($event)\"\n      ></abs-appointments-form>\n    </abs-modal>\n\n    <abs-modal\n      [open]=\"showLicensesAddEdit\"\n      (closeDialog)=\"cancelAddEditLicense($event)\"\n      [title]=\"stateMedicalLicenseTitle\"\n      modalName=\"licenseAddEditModal\"\n      [hideClose]=\"true\"\n    >\n      <abs-license-form\n        *ngIf=\"showLicensesAddEdit\"\n        [formData]=\"selectedMedicalLicense\"\n        [isEdit]=\"selectedMedicalLicense !== undefined\"\n        [picklists]=\"medicalLicensePickLists\"\n        [errors$]=\"medicalLicenseErrors$\"\n        [clearErrors]=\"clearErrors\"\n        (closeDialog)=\"cancelAddEditLicense($event)\"\n        (saveDialog)=\"saveLicense($event)\"\n      ></abs-license-form>\n    </abs-modal>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading professional standing...</p>\n  </div>\n</ng-template>\n"
    },
    {
      "name": "ProfileHeaderComponent",
      "id": "component-ProfileHeaderComponent-236557c2b7578b536ef8cbf7b40ae3663cbd8a8aedc80939cbe0d59984f15b66281004f02da4a99a8399f7988aee573e7aa7dd2f8d1e224dfe044f2347faaa24",
      "file": "src/app/shared/components/profile-header/profile-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-profile-header",
      "styleUrls": ["./profile-header.component.scss"],
      "styles": [],
      "templateUrl": ["./profile-header.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "profilePicture",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 858,
              "end": 876,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 859,
                "end": 863,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 864,
                "end": 872,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 865,
                  "end": 871,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 152
                }
              }
            }
          ],
          "rawdescription": "\n\n\nProfile picture to display in the header\n",
          "description": "<p>Profile picture to display in the header</p>\n",
          "line": 30,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "user$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IUserProfile> | undefined",
          "optional": false,
          "description": "<p>Loads user profile from the state store</p>\n",
          "line": 21,
          "rawdescription": "\n\nLoads user profile from the state store\n",
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.user"
            }
          ],
          "modifierKind": [167],
          "jsdoctags": [
            {
              "pos": 664,
              "end": 700,
              "flags": 8421376,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 347,
              "tagName": {
                "pos": 665,
                "end": 669,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 670,
                "end": 696,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 312,
                "type": {
                  "pos": 671,
                  "end": 695,
                  "flags": 8388608,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 180,
                  "typeName": {
                    "pos": 671,
                    "end": 681,
                    "flags": 8388608,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 79,
                    "escapedText": "Observable"
                  },
                  "typeArguments": [
                    {
                      "pos": 682,
                      "end": 694,
                      "flags": 8388608,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 180,
                      "typeName": {
                        "pos": 682,
                        "end": 694,
                        "flags": 8388608,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 79,
                        "escapedText": "IUserProfile"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "userClaims",
          "defaultValue": "UserClaims",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>User claims enum to display in the header</p>\n",
          "line": 35,
          "rawdescription": "\n\nUser claims enum to display in the header\n"
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IUserProfile, UserProfileSelectors } from '../../../state';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { UserClaims } from 'src/app/side-navigation/user-status.enum';\n\n@Component({\n  selector: 'abs-profile-header',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './profile-header.component.html',\n  styleUrls: ['./profile-header.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ProfileHeaderComponent {\n  /**\n   * Loads user profile from the state store\n   * @type {Observable<IUserProfile>}\n   */\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  /**\n   *\n   * Profile picture to display in the header\n   * @type {string}\n   */\n  @Input() profilePicture: string | undefined;\n\n  /**\n   * User claims enum to display in the header\n   */\n  userClaims = UserClaims;\n\n  // TODO: [Joe] we need to get status from something other than the second item in the list of user claims\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".account-status {\n  color: var(--global-gray-dark);\n}\n",
          "styleUrl": "./profile-header.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"flex\">\n  <sl-avatar\n    [image]=\"profilePicture\"\n    label=\"Profile Picture\"\n    style=\"--size: 5rem\"\n  ></sl-avatar>\n  <div class=\"ml-3\" *ngIf=\"user$ | async as user; else noUser\">\n    <h2 class=\"font-normal mt-0 mb-0\">\n      <span>{{ user.displayName }}</span>\n    </h2>\n    <p class=\"font-bold mt-0 mb-1\" *ngIf=\"user.emailAddress\">\n      {{ user.emailAddress }}\n    </p>\n    <p class=\"font-bold mt-0 mb-1 account-status\" *ngIf=\"user.claims\">\n      Status:\n      {{ user.claims.includes(userClaims.surgeon) ? 'Surgeon' : 'Trainee' }}\n    </p>\n  </div>\n  <ng-template #noUser>\n    <div class=\"ml-3\">\n      <h2 class=\"font-normal mt-0 mb-0\">\n        <span>Guest</span>\n      </h2>\n      <p class=\"font-bold mt-0 mb-1\">Not logged in</p>\n    </div>\n  </ng-template>\n</div>\n"
    },
    {
      "name": "ProgressBarComponent",
      "id": "component-ProgressBarComponent-30a28cef605502aa69fc0a6d4a562c53b314504c976062169f6b5bceb3dbac5c8acb8a4ce9d72f9fa1c68f966dce2dad6f103505f923497bbe80b397c054d797",
      "file": "src/app/shared/components/progress-bar/progress-bar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-progress-bar",
      "styleUrls": ["./progress-bar.component.scss"],
      "styles": [],
      "templateUrl": ["./progress-bar.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "barColor",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        },
        {
          "name": "currentNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "number",
          "decorators": []
        },
        {
          "name": "statusLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        },
        {
          "name": "toolTipText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "name": "totalNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "progressBarWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "remainingNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-progress-bar',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ProgressBarComponent implements OnInit {\n  @Input() currentNumber!: number;\n  @Input() totalNumber!: number;\n  @Input() statusLabel!: string;\n  @Input() barColor!: string;\n  @Input() toolTipText!: string;\n\n  remainingNumber!: number;\n  progressBarWidth!: number;\n\n  ngOnInit(): void {\n    this.remainingNumber = this.totalNumber - this.currentNumber;\n    this.progressBarWidth = Math.round(\n      (this.currentNumber / this.totalNumber) * 100\n    );\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".numbers {\n  font-size: 28px;\n  font-weight: bold;\n  .ratio {\n    margin-right: 0.75rem;\n    position: relative;\n  }\n  .remaining {\n    color: var(--global-gray);\n    font-size: 15px;\n  }\n}\n\nh5 {\n  font-weight: 500;\n  margin-top: 5px;\n}\n\n.progress-bar {\n  position: relative;\n  .bar {\n    width: calc(100% - 55px);\n    height: 60px;\n    background-color: #d7d7d7;\n    border-radius: 8px;\n    border-right: 5px solid white;\n    z-index: 2;\n    position: relative;\n    .fill {\n      height: 100%;\n      position: relative;\n      border-radius: 8px;\n    }\n  }\n  .progress {\n    position: absolute;\n    right: 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 60px;\n    height: 100%;\n    background-color: var(--global-primary);\n    color: white;\n    font-weight: 700;\n    font-size: 1.25rem;\n    border-radius: 0px 8px 8px 0px;\n    z-index: 1;\n  }\n}\n\n.tooltip {\n  margin-left: 5px;\n  .trigger {\n    width: 15px;\n    height: 15px;\n    color: white;\n    font-size: 12px;\n    display: flex;\n    background-color: var(--global-danger);\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    cursor: pointer;\n  }\n}\n",
          "styleUrl": "./progress-bar.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex numbers align-items-center\">\n  <div class=\"ratio flex align-items-center flex-wrap\">\n    {{ currentNumber || 0 }}/{{ totalNumber || 0 }}\n    <div class=\"tooltip\" *ngIf=\"toolTipText\">\n      <sl-tooltip [content]=\"toolTipText\">\n        <div class=\"trigger\">?</div>\n      </sl-tooltip>\n    </div>\n  </div>\n  <div class=\"remaining\">{{ remainingNumber || 0 }} Remaining</div>\n</div>\n<h5>{{ statusLabel }}</h5>\n<div class=\"progress-bar flex\">\n  <div class=\"bar\">\n    <div\n      class=\"fill\"\n      [style.width.%]=\"progressBarWidth\"\n      [style.background]=\"barColor\"\n    ></div>\n  </div>\n  <div class=\"progress\">%{{ progressBarWidth }}</div>\n</div>\n"
    },
    {
      "name": "ReferenceFormModalComponent",
      "id": "component-ReferenceFormModalComponent-02faee8b1e7c3ae4a69d130efbe04ad9bf950e45cef55cf10cebcec5111b846c952cb5ba7574adaa9573c6ab5bc5a4b01557f60e26024c2202f71e2fa6fdc2f3",
      "file": "src/app/continuous-certification/reference-form-modal/reference-form-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-reference-form-modal",
      "styleUrls": ["./reference-form-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./reference-form-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "referenceFormFields",
          "defaultValue": "[\n    {\n      label: 'Name of Authenticating Official',\n      subLabel: '(Must be a Physician)',\n      value: '',\n      required: true,\n      name: 'nameOfAuthenticatingOfficial',\n      placeholder: 'Enter Official’s name',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: \"Authenticating Official'/s Role\",\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialRole',\n      placeholder: 'Choose their role',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Chief of Staff',\n          itemValue: 'chief',\n        },\n        {\n          itemDescription: 'Medical Director',\n          itemValue: 'medical',\n        },\n        {\n          itemDescription: 'Program Director',\n          itemValue: 'program',\n        },\n      ],\n    },\n    {\n      label: 'Reason for Alternate Official',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'reasonForAlternateOfficial',\n      placeholder: 'Enter a reason',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Option 1',\n          itemValue: 'option1',\n        },\n        {\n          itemDescription: 'Option 2',\n          itemValue: 'option2',\n        },\n        {\n          itemDescription: 'Option 3',\n          itemValue: 'option3',\n        },\n      ],\n    },\n    {\n      label: 'Authenticating Official’s Title',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'authenticatingOfficialTitle',\n      placeholder: 'Enter Official’s title',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'Authenticating Official’s Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialEmail',\n      placeholder: 'Enter Official’s email address',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Confirm Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'confirmEmailAddress',\n      placeholder: 'Enter Official’s email address again',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Authenticating Official’s Phone Number',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialPhoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Name of Affiliated Institution',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'nameOfAffiliatedInstitution',\n      placeholder: 'Enter affiliated institution',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'states',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Name',\n      subLabel: '',\n      value: this.userData.diplayName,\n      required: false,\n      readonly: true,\n      name: 'name',\n      placeholder: 'Enter your full name',\n      type: 'text',\n      size: 'col-12',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IFormFields[]",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "referenceFormsCols",
          "defaultValue": "REFERENCE_FORMS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "refrenceGridData",
          "defaultValue": "[\n    {\n      referenceFormId: 'MD19143',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Doe, M.D.',\n      date: new Date('09/21/2019'),\n      status: 'Requested',\n    },\n    {\n      referenceFormId: 'MD08221',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'Mary Joseph',\n      date: new Date('08/12/2019'),\n      status: 'Approved',\n    },\n    {\n      referenceFormId: 'MD12345',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Dorian',\n      date: new Date('8/1/2019'),\n      status: 'Approved',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 192
        },
        {
          "name": "states$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IStateReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.states"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userData",
          "defaultValue": "{\n    diplayName: 'John Doe, M.D',\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 45
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 238,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 230,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 216,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [
            {
              "name": "formFields",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 234,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "formFields",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPicklists",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 220,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { FormsModule } from '@angular/forms';\nimport { REFERENCE_FORMS_COLS } from './refrence-forms-cols';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { IFormFields } from 'src/app/shared/models/form-fields/form-fields';\nimport { Select } from '@ngxs/store';\nimport { PicklistsSelectors } from 'src/app/state/picklists';\nimport { Observable } from 'rxjs';\nimport { IStateReadOnlyModel } from 'src/app/api';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-reference-form-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    FormsModule,\n    InputTextModule,\n    DropdownModule,\n    CheckboxModule,\n    ButtonModule,\n  ],\n  templateUrl: './reference-form-modal.component.html',\n  styleUrls: ['./reference-form-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ReferenceFormModalComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  userData = {\n    diplayName: 'John Doe, M.D',\n  };\n\n  referenceFormsCols = REFERENCE_FORMS_COLS;\n  referenceFormFields: IFormFields[] = [\n    {\n      label: 'Name of Authenticating Official',\n      subLabel: '(Must be a Physician)',\n      value: '',\n      required: true,\n      name: 'nameOfAuthenticatingOfficial',\n      placeholder: 'Enter Official’s name',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: \"Authenticating Official'/s Role\",\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialRole',\n      placeholder: 'Choose their role',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Chief of Staff',\n          itemValue: 'chief',\n        },\n        {\n          itemDescription: 'Medical Director',\n          itemValue: 'medical',\n        },\n        {\n          itemDescription: 'Program Director',\n          itemValue: 'program',\n        },\n      ],\n    },\n    {\n      label: 'Reason for Alternate Official',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'reasonForAlternateOfficial',\n      placeholder: 'Enter a reason',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Option 1',\n          itemValue: 'option1',\n        },\n        {\n          itemDescription: 'Option 2',\n          itemValue: 'option2',\n        },\n        {\n          itemDescription: 'Option 3',\n          itemValue: 'option3',\n        },\n      ],\n    },\n    {\n      label: 'Authenticating Official’s Title',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'authenticatingOfficialTitle',\n      placeholder: 'Enter Official’s title',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'Authenticating Official’s Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialEmail',\n      placeholder: 'Enter Official’s email address',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Confirm Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'confirmEmailAddress',\n      placeholder: 'Enter Official’s email address again',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Authenticating Official’s Phone Number',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialPhoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Name of Affiliated Institution',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'nameOfAffiliatedInstitution',\n      placeholder: 'Enter affiliated institution',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'states',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Name',\n      subLabel: '',\n      value: this.userData.diplayName,\n      required: false,\n      readonly: true,\n      name: 'name',\n      placeholder: 'Enter your full name',\n      type: 'text',\n      size: 'col-12',\n    },\n  ];\n  refrenceGridData = [\n    {\n      referenceFormId: 'MD19143',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Doe, M.D.',\n      date: new Date('09/21/2019'),\n      status: 'Requested',\n    },\n    {\n      referenceFormId: 'MD08221',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'Mary Joseph',\n      date: new Date('08/12/2019'),\n      status: 'Approved',\n    },\n    {\n      referenceFormId: 'MD12345',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Dorian',\n      date: new Date('8/1/2019'),\n      status: 'Approved',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.setPicklists();\n  }\n\n  setPicklists() {\n    this.states$?.pipe(untilDestroyed(this)).subscribe((states) => {\n      this.referenceFormFields.filter((field) => {\n        if (field.name === 'states') {\n          field.options = states;\n        }\n      });\n    });\n  }\n\n  handleGridAction(event: any) {\n    console.log('unhandled action', event);\n  }\n\n  onSubmit(formFields: any) {\n    console.log('unhandled submit', formFields);\n  }\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./reference-form-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"dialog-intro\">\n  Please provide contact information for the Authenticating Official from the\n  hospital or surgical center where you perform most of your work. If you hold\n  this position yourself, you may request another physician of comparable rank\n  to provide the reference. The reference cannot be provided by a relative, by\n  someone with whom you have a close personal relationship, or by the same\n  person who is providing you another ABS reference.\n</div>\n<abs-grid\n  title=\"Current Reference Forms\"\n  [columns]=\"referenceFormsCols\"\n  [data]=\"refrenceGridData\"\n  (action)=\"handleGridAction($event)\"\n  class=\"mb-2\"\n></abs-grid>\n\n<h5>Add Reference</h5>\n\n<form>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of referenceFormFields\"\n      class=\"col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\">{{ formField.label }}</label>\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        pInputText\n      />\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [editable]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n      <span>{{ formField.subLabel }}</span>\n    </div>\n    <div class=\"col-12 mb-3\">\n      I hereby authorize any hospital or medical staff where I now have, have\n      had, or have applied for medical staff privileges, and any medical\n      organization of which I am a member or to which I have applied for\n      membership, and any person who may have information (including medical\n      records, patient records, and reports of committees) which is deemed by\n      ABS to be material to its evaluation of this application, to provide such\n      information to representatives of the ABS. I agree that communications of\n      any nature made to the ABS regarding this application may be made in\n      confidence and shall not be made available to me under any circumstances.\n      I hereby release from liability any hospital, medical staff, medical\n      organization or person, and ABS and its representatives, for acts\n      performed in connection with this application. I authorize the ABS to\n      transmit a reference form request electronically to the above named\n      physician at the email address above, and affirm that it ultimately\n      remains my responsibility to ensure these forms are completed.\n    </div>\n    <div class=\"col-12 md:col-6 flex align-items-start gap-3\">\n      <p-checkbox value=\"Yes\" inputId=\"sendEmail\"></p-checkbox>\n      <label for=\"ny\"\n        >I would like my reference form sent to me via email</label\n      >\n    </div>\n    <div class=\"col-12 md:col-6 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\">\n        Cancel\n      </p-button>\n      <p-button\n        [style]=\"{ width: '337px' }\"\n        (click)=\"onSubmit(referenceFormFields)\"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "RegistrationRequirementsComponent",
      "id": "component-RegistrationRequirementsComponent-b8e3b5f1faa1c961cf23b8e45cdd26e49ec494f3c1c5b0629c0a0fb2d6823e842090b235e670f2f4aae3d631a1e31fb7918322d31a28874d95bf1629511fc62c",
      "file": "src/app/registration-requirements/registration-requirements.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-registration-requirements",
      "styleUrls": ["./registration-requirements.component.scss"],
      "styles": [],
      "templateUrl": ["./registration-requirements.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "actionMap",
          "defaultValue": "{\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ActionMap",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [121]
        },
        {
          "name": "applyForAnExamActionCardData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "legendItems",
          "defaultValue": "[\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Alert',\n      color: '#8b0d0a',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "registrationRequirementsData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "showACGMEexprience",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "showGraduateMedicalEducation",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "showMedicalLicense",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "showProfessionalActivitiesAndPrivileges",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "showSpecialAccommodations",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "showSurgeonProfile",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "showTraining",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "userData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "viewContainerRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "closeModal",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRegistrationRequirementsData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getUserData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleCardAction",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 264,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ActionCardComponent",
          "type": "component"
        },
        {
          "name": "SurgeonProfileModalComponent",
          "type": "component"
        },
        {
          "name": "MedicalLicenseModalComponent",
          "type": "component"
        },
        {
          "name": "TrainingModalComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "AcgmeExperienceModalComponent",
          "type": "component"
        },
        {
          "name": "GraduateMedicalEducationModalComponent",
          "type": "component"
        },
        {
          "name": "SpecialAccommodationsModalComponent",
          "type": "component"
        },
        {
          "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
          "type": "component"
        },
        {
          "name": "LegendComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { SurgeonProfileModalComponent } from './surgeon-profile-modal/surgeon-profile-modal.component';\nimport { MedicalLicenseModalComponent } from './medical-license-modal/medical-license-modal.component';\nimport { TrainingModalComponent } from './training-modal/training-modal.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { AcgmeExperienceModalComponent } from './acgme-experience-modal/acgme-experience-modal.component';\nimport { GraduateMedicalEducationModalComponent } from './graduate-medical-education-modal/graduate-medical-education-modal.component';\nimport { SpecialAccommodationsModalComponent } from './special-accommodations-modal/special-accommodations-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { ProfessionalActivitiesAndPrivilegesModalComponent } from './professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { LegendComponent } from '../shared/components/legend/legend.component';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-registration-requirements',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    SurgeonProfileModalComponent,\n    MedicalLicenseModalComponent,\n    TrainingModalComponent,\n    ModalComponent,\n    AcgmeExperienceModalComponent,\n    GraduateMedicalEducationModalComponent,\n    SpecialAccommodationsModalComponent,\n    ProfessionalActivitiesAndPrivilegesModalComponent,\n    LegendComponent,\n  ],\n  templateUrl: './registration-requirements.component.html',\n  styleUrls: ['./registration-requirements.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class RegistrationRequirementsComponent implements OnInit {\n  userData!: any;\n  registrationRequirementsData!: Array<any>;\n  applyForAnExamActionCardData!: any;\n  showSurgeonProfile = false;\n  showMedicalLicense = false;\n  showACGMEexprience = false;\n  showTraining = false;\n  showGraduateMedicalEducation = false;\n  showSpecialAccommodations = false;\n  showProfessionalActivitiesAndPrivileges = false;\n\n  legendItems = [\n    {\n      text: 'Completed',\n      color: '#1c827c',\n    },\n    {\n      text: 'In Progress',\n      color: '#dbad69',\n    },\n    {\n      text: 'Alert',\n      color: '#8b0d0a',\n    },\n    {\n      text: 'Contingent',\n      color: '#a0a0a0',\n    },\n  ];\n\n  constructor(\n    private _globalDialogService: GlobalDialogService,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._globalDialogService.setViewContainerRef = this.viewContainerRef;\n  }\n\n  private actionMap: ActionMap = {\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  };\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getRegistrationRequirementsData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe M.D',\n    };\n  }\n\n  closeModal(event: any) {\n    const actionFunction = this.actionMap[event.action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n\n  getRegistrationRequirementsData() {\n    this.registrationRequirementsData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'surgeonProfileModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'trainingModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-language fa-solid',\n        status: Status.InProgress,\n        recievedOn: new Date('2021-01-01'),\n      },\n      {\n        title: 'Professional Activities and Privileges',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'professionalActivitiesAndPrivilegesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-doctor',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical License',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'medicalLicenseModal',\n        },\n        actionDisplay: 'View / Update my license',\n        icon: 'fa-certificate fa-solid',\n        status: Status.InProgress,\n      },\n      {\n        title: 'ACGME Experience Report by Role',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'ACGMEExperienceModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Graduate Medical Education (GME)',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'graduateMedicalEducationModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Alert,\n      },\n      {\n        title: 'Program Director Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/program-director-attestation',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.Completed,\n      },\n      {\n        title: 'Certification(s) Upload',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/certifications-upload',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.Completed,\n      },\n      {\n        title: 'Application Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/application-fee',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-cash-register',\n        status: Status.Contingent,\n      },\n      {\n        title: 'Special Accommodations',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'specialAccommodationsModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-star',\n        status: Status.InProgress,\n      },\n    ];\n    this.applyForAnExamActionCardData = {\n      title: 'Apply for an Exam',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n      action: {\n        style: 2,\n      },\n      disabled: true,\n      actionDisplay: 'Apply Now',\n      icon: 'fa-solid fa-language',\n    };\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".legend {\n  margin-top: 1.5rem;\n  position: relative;\n  right: 0;\n  width: 100%;\n  text-align: right;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.completed {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.in-progress {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.alert {\n      color: var(--global-danger);\n      .i {\n        background-color: var(--global-danger);\n      }\n    }\n    &.contingent {\n      color: var(--global-gray);\n      .i {\n        background-color: vvar(--global-gray);\n      }\n    }\n  }\n}\n\n.margin-bottom-2 {\n  margin-bottom: 2rem;\n}\n\n.action-card {\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0px 0px 6px #24365526;\n  padding: 1.5rem;\n  height: 100%;\n  min-height: 16rem;\n  transition: 150ms ease-in-out;\n  position: relative;\n  width: 100%;\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  &:hover {\n    box-shadow: none;\n  }\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    margin-bottom: 2rem;\n    span {\n      font-size: 2rem;\n      margin-right: 0.75rem;\n    }\n  }\n  .icon {\n    color: var(--global-warning);\n  }\n  .description {\n    margin-bottom: 3rem;\n  }\n  .action-display {\n    position: absolute;\n    bottom: 1rem;\n    color: var(--global-success);\n    font-weight: bold;\n    width: 100%;\n    left: 0;\n    padding: 0 2rem;\n  }\n  &.completed {\n    border-right: 10px solid var(--global-success);\n    .icon {\n      color: var(--global-success);\n    }\n  }\n  &.in-progress {\n    border-right: 10px solid var(--global-warning);\n    .icon {\n      color: var(--global-warning);\n    }\n  }\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .description {\n      color: var(--global-danger);\n    }\n    .action-display {\n      color: var(--global-danger);\n    }\n    .icon {\n      color: var(--global-danger);\n    }\n  }\n  &.contingent {\n    border-right: 10px solid var(--global-gray);\n    .icon {\n      color: var(--global-gray);\n    }\n  }\n  &.disabled {\n    cursor: not-allowed;\n    .icon {\n      color: var(--global-gray);\n    }\n    .action-display {\n      color: var(--global-gray);\n    }\n    &:hover {\n      box-shadow: 0px 0px 6px #24365526;\n    }\n  }\n  &.status-card {\n    min-height: 12rem;\n    .title {\n      margin-bottom: 1rem;\n    }\n    .status {\n      margin-bottom: 1rem;\n    }\n    .description {\n      margin-bottom: 2.5rem;\n    }\n  }\n}\n",
          "styleUrl": "./registration-requirements.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 75,
        "jsdoctags": [
          {
            "name": "_globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n  <div>\n    <h1>General Surgery Qualifying Examination</h1>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eros arcu,\n    mattis ut urna id, convallis eleifend purus. Phasellus sodales condimentum\n    orci, id malesuada ante faucibus eu.\n  </div>\n\n  <abs-legend\n    [legendItems]=\"legendItems\"\n    class=\"block w-full flex justify-content-end\"\n  ></abs-legend>\n</div>\n\n<div class=\"grid margin-bottom-2\">\n  <abs-action-card\n    class=\"col-12 md:col-6 lg:col-6\"\n    *ngFor=\"let actionCard of registrationRequirementsData\"\n    [actionCard]=\"actionCard\"\n    [title]=\"actionCard.title\"\n    [description]=\"actionCard.description\"\n    [icon]=\"actionCard.icon\"\n    [actionType]=\"actionCard?.action?.type\"\n    [actionAction]=\"actionCard?.action?.action\"\n    (cardAction)=\"handleCardAction(actionCard.action.action)\"\n    [actionDisplay]=\"actionCard?.actionDisplay\"\n    [status]=\"actionCard?.status\"\n    [disabled]=\"actionCard.disabled\"\n  ></abs-action-card>\n  <abs-action-card\n    class=\"col-12\"\n    [title]=\"applyForAnExamActionCardData.title\"\n    [description]=\"applyForAnExamActionCardData.description\"\n    [icon]=\"applyForAnExamActionCardData.icon\"\n    [actionType]=\"applyForAnExamActionCardData?.action?.type\"\n    [actionAction]=\"applyForAnExamActionCardData?.action?.action\"\n    [actionDisplay]=\"applyForAnExamActionCardData?.actionDisplay\"\n    [disabled]=\"applyForAnExamActionCardData.disabled\"\n  ></abs-action-card>\n\n  <abs-modal\n    [open]=\"showMedicalLicense\"\n    (closeDialog)=\"handleCardAction('medicalLicenseModal')\"\n    modalName=\"medicalLicenseModal\"\n    title=\"Medical License\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-medical-license-modal\n      (closeDialog)=\"handleCardAction('medicalLicenseModal')\"\n    ></abs-medical-license-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showACGMEexprience\"\n    (closeDialog)=\"handleCardAction('ACGMEExperienceModal')\"\n    title=\"ACGME Experience Report by Role\"\n    modalName=\"ACGMEExperienceModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-acgme-experience-modal\n      (closeDialog)=\"handleCardAction('ACGMEExperienceModal')\"\n    ></abs-acgme-experience-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showSurgeonProfile\"\n    title=\"Surgeon Profile\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n    [preventOverlayClose]=\"true\"\n  >\n    <abs-surgeon-profile-modal\n      (closeDialog)=\"handleCardAction('surgeonProfileModal')\"\n    ></abs-surgeon-profile-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showTraining\"\n    title=\"Training\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n    [preventOverlayClose]=\"true\"\n    [width]=\"75\"\n  >\n    <abs-training-modal\n      (closeDialog)=\"handleCardAction('trainingModal')\"\n    ></abs-training-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showGraduateMedicalEducation\"\n    (closeDialog)=\"handleCardAction('graduateMedicalEducationModal')\"\n    title=\"Graduate Medical Education\"\n    modalName=\"graduateMedicalEducationModal\"\n    status=\"alert\"\n    [hideClose]=\"true\"\n  >\n    <abs-graduate-medical-education-modal\n      (closeDialog)=\"handleCardAction('graduateMedicalEducationModal')\"\n    ></abs-graduate-medical-education-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showSpecialAccommodations\"\n    (closeDialog)=\"handleCardAction('specialAccommodationsModal')\"\n    title=\"Special Accommodations\"\n    modalName=\"specialAccommodationsModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-special-accommodations-modal\n      (closeDialog)=\"handleCardAction('specialAccommodationsModal')\"\n    ></abs-special-accommodations-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showProfessionalActivitiesAndPrivileges\"\n    (closeDialog)=\"handleCardAction('professionalActivitiesAndPrivilegesModal')\"\n    title=\"Professional Activities and Privileges\"\n    modalName=\"professionalActivitiesAndPrivilegesModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-professional-activities-and-privileges-modal\n      (closeDialog)=\"\n        handleCardAction('professionalActivitiesAndPrivilegesModal')\n      \"\n    >\n    </abs-professional-activities-and-privileges-modal>\n  </abs-modal>\n</div>\n"
    },
    {
      "name": "SanctionsFormComponent",
      "id": "component-SanctionsFormComponent-a2f1ac6bdc42e8f3d27f8a8f8098f5932ea2f8557e26fff1e3cbe8547382fb8390e8f12350b23bb49eb6655fb11a5a4ac779c72384396faa25e21e59a033a65c",
      "file": "src/app/professional-standing/sanctions-form/sanctions-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-sanctions-form",
      "styleUrls": ["./sanctions-form.component.scss"],
      "styles": [],
      "templateUrl": ["./sanctions-form.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "clearErrors",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "any",
          "decorators": []
        },
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "Observable<any> | undefined",
          "decorators": []
        },
        {
          "name": "formData",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "any",
          "decorators": []
        },
        {
          "name": "isEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "picklists",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveForm",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "localEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "optionLists",
          "defaultValue": "{\n    yesNoOptions: [\n      { label: 'Yes', value: true },\n      { label: 'No', value: false },\n    ],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "originalFormValues",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "sanctionsEthicsForm",
          "defaultValue": "new FormGroup({\n    hadDrugAlchoholTreatment: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadHospitalPrivilegesDenied: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadLicenseRestricted: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    hadHospitalPrivilegesRestricted: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadFelonyConviction: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    hadCensure: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    explanation: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63
        }
      ],
      "methodsClass": [
        {
          "name": "checkSantionsAndEthics",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 199,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onFormChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setFormValues",
          "args": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  OnInit,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\nimport { FormErrorsComponent } from 'src/app/shared/components/form-errors/form-errors.component';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-sanctions-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './sanctions-form.component.html',\n  styleUrls: ['./sanctions-form.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SanctionsFormComponent implements OnInit, OnChanges {\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n  @Output() saveForm: EventEmitter<any> = new EventEmitter();\n  @Input() formData: any;\n  @Input() isEdit = false;\n  @Input() picklists: any;\n  @Input() errors$?: Observable<any> | undefined;\n  @Input() clearErrors?: any;\n\n  optionLists = {\n    yesNoOptions: [\n      { label: 'Yes', value: true },\n      { label: 'No', value: false },\n    ],\n  };\n\n  originalFormValues: any;\n  localEdit = false;\n\n  sanctionsEthicsForm = new FormGroup({\n    hadDrugAlchoholTreatment: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadHospitalPrivilegesDenied: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadLicenseRestricted: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    hadHospitalPrivilegesRestricted: new FormControl(\n      { value: null, disabled: false },\n      [Validators.required]\n    ),\n\n    hadFelonyConviction: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    hadCensure: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n\n    explanation: new FormControl({ value: null, disabled: false }, [\n      Validators.required,\n    ]),\n  });\n\n  ngOnInit() {\n    this.optionLists = { ...this.optionLists, ...this.picklists };\n\n    this.originalFormValues = this.formData;\n    this.setFormValues(this.originalFormValues);\n    this.onFormChanges();\n    this.checkSantionsAndEthics();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['formData']) {\n      this.originalFormValues = changes['formData'].currentValue;\n      this.setFormValues(this.originalFormValues);\n    }\n    if (changes['isEdit']) {\n      this.localEdit = changes['isEdit'].currentValue;\n    }\n    if (changes['picklists']) {\n      this.optionLists = {\n        ...this.optionLists,\n        ...changes['picklists'].currentValue,\n      };\n    }\n  }\n\n  onFormChanges() {\n    this.sanctionsEthicsForm\n      .get('hadDrugAlchoholTreatment')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n    this.sanctionsEthicsForm\n      .get('hadHospitalPrivilegesDenied')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n    this.sanctionsEthicsForm\n      .get('hadLicenseRestricted')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n    this.sanctionsEthicsForm\n      .get('hadHospitalPrivilegesRestricted')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n    this.sanctionsEthicsForm\n      .get('hadFelonyConviction')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n    this.sanctionsEthicsForm\n      .get('hadCensure')\n      ?.valueChanges.pipe(untilDestroyed(this))\n      .subscribe((val) => {\n        this.checkSantionsAndEthics();\n      });\n  }\n\n  setFormValues(data: any) {\n    if (data) {\n      for (const [key, value] of Object.entries(data)) {\n        let newValue = value;\n        if (key.includes('Date')) {\n          newValue = new Date(value as any).toLocaleDateString();\n        }\n        this.sanctionsEthicsForm.get(key)?.setValue(newValue);\n      }\n    } else {\n      this.sanctionsEthicsForm.reset();\n    }\n  }\n\n  checkSantionsAndEthics() {\n    const disableDescribe = !Object.values(\n      this.sanctionsEthicsForm.getRawValue()\n    ).some((value) => value === true);\n    if (disableDescribe) {\n      this.sanctionsEthicsForm.get('explanation')?.disable();\n      this.sanctionsEthicsForm.get('explanation')?.patchValue(null);\n      this.sanctionsEthicsForm.get('explanation')?.clearValidators();\n    } else {\n      this.sanctionsEthicsForm.get('explanation')?.enable();\n      this.sanctionsEthicsForm\n        .get('explanation')\n        ?.setValidators([Validators.required]);\n    }\n    this.sanctionsEthicsForm.get('explanation')?.updateValueAndValidity();\n  }\n\n  onSubmit() {\n    this.saveForm.emit({\n      show: false,\n      data: this.sanctionsEthicsForm.getRawValue(),\n      isEdit: this.localEdit,\n    });\n  }\n\n  close() {\n    this.cancelForm.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./sanctions-form.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"sanctionsEthicsForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadDrugAlchoholTreatment\"\n        >Have you had treatment for drug or alcohol abuse?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadDrugAlchoholTreatment\"\n            [value]=\"option.value\"\n            formControlName=\"hadDrugAlchoholTreatment\"\n            [inputId]=\"'hadDrugAlchoholTreatment' + option.value\"\n          ></p-radioButton>\n          <label [for]=\"'hadDrugAlchoholTreatment' + option.value\" class=\"ml-2\">\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadHospitalPrivilegesDenied\"\n        >Have you been denied hospital privileges?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadHospitalPrivilegesDenied\"\n            [value]=\"option.value\"\n            formControlName=\"hadHospitalPrivilegesDenied\"\n            [inputId]=\"'hadHospitalPrivilegesDenied' + option.value\"\n          ></p-radioButton>\n          <label\n            [for]=\"'hadHospitalPrivilegesDenied' + option.value\"\n            class=\"ml-2\"\n          >\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadLicenseRestricted\"\n        >Have you been reprimanded by any licensing authority or had your\n        license to practice medicine restricted, denied, suspended or revoked,\n        or has it been voluntarily surrendered in any jurisdiction while under\n        investigation?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadLicenseRestricted\"\n            [value]=\"option.value\"\n            formControlName=\"hadLicenseRestricted\"\n            [inputId]=\"'hadLicenseRestricted' + option.value\"\n          ></p-radioButton>\n          <label [for]=\"'hadLicenseRestricted' + option.value\" class=\"ml-2\">\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadHospitalPrivilegesRestricted\"\n        >Have you had hospital staff privileges (or any portion thereof)\n        restricted, suspended, or revoked, or otherwise subject to disciplinary\n        action?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadHospitalPrivilegesRestricted\"\n            [value]=\"option.value\"\n            formControlName=\"hadHospitalPrivilegesRestricted\"\n            [inputId]=\"'hadHospitalPrivilegesRestricted' + option.value\"\n          ></p-radioButton>\n          <label\n            [for]=\"'hadHospitalPrivilegesRestricted' + option.value\"\n            class=\"ml-2\"\n          >\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadFelonyConviction\"\n        >Have you been convicted of a felony?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadFelonyConviction\"\n            [value]=\"option.value\"\n            formControlName=\"hadFelonyConviction\"\n            [inputId]=\"'hadFelonyConviction' + option.value\"\n          ></p-radioButton>\n          <label [for]=\"'hadFelonyConviction' + option.value\" class=\"ml-2\">\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label htmlFor=\"hadCensure\"\n        >Have you been censured by the American College of Surgeons, a hospital\n        or other national or state society?*</label\n      >\n\n      <div class=\"flex flex-wrap gap-3\">\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of optionLists.yesNoOptions\"\n        >\n          <p-radioButton\n            name=\"hadCensure\"\n            [value]=\"option.value\"\n            formControlName=\"hadCensure\"\n            [inputId]=\"'hadCensure' + option.value\"\n          ></p-radioButton>\n          <label [for]=\"'hadCensure' + option.value\" class=\"ml-2\">\n            {{ option.label }}\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-12 md:col-12 flex flex-column justify-content-start\">\n      <label class=\"mb-2\" htmlFor=\"explanation\"\n        >Explain if you answered YES to any of the above questions</label\n      >\n      <textarea\n        pInputTextarea\n        id=\"explanation\"\n        name=\"explanation\"\n        placeholder=\"Explain any 'yes' answers here...\"\n        rows=\"5\"\n        formControlName=\"explanation\"\n      ></textarea>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n        >Cancel</p-button\n      >\n      <p-button\n        type=\"submit\"\n        [style]=\"{ width: '337px' }\"\n        [disabled]=\"sanctionsEthicsForm.invalid\"\n        >Save</p-button\n      >\n    </div>\n  </div>\n</form>\n"
    },
    {
      "name": "SelectWrapperComponent",
      "id": "component-SelectWrapperComponent-d2ef7b215d774435f5eae7775535a7d73b35197d5e36be3f6ac70328cb16c798316fae17359782e12225fdb77b97377c8b6721e9b037d9bc4692a7058b09ddce",
      "file": "src/app/shared/components/select-wrapper/select-wrapper.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-select-wrapper",
      "styleUrls": ["./select-wrapper.component.scss"],
      "styles": [],
      "templateUrl": ["./select-wrapper.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<SlChangeEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "EventEmitter<SlChangeEvent>"
        },
        {
          "name": "valueChange",
          "defaultValue": "new EventEmitter<\n    string | undefined\n  >()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter<string | undefined>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 29
        }
      ],
      "methodsClass": [
        {
          "name": "changeBtn",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "dispatchChange",
          "args": [
            {
              "name": "event",
              "type": "SlChangeEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "SlChangeEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlChangeEvent } from '@shoelace-style/shoelace';\n\n@Component({\n  selector: 'abs-select-wrapper',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './select-wrapper.component.html',\n  styleUrls: ['./select-wrapper.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SelectWrapperComponent {\n  @Output() valueChange: EventEmitter<string | undefined> = new EventEmitter<\n    string | undefined\n  >();\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() change: EventEmitter<SlChangeEvent> =\n    new EventEmitter<SlChangeEvent>();\n  // @Output() label: string | undefined;\n  // @Output() name: string | undefined;\n\n  _value: string | undefined;\n\n  @Input()\n  get value(): string | undefined {\n    // console.log('GET', this._value);\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    // console.log('SET', this._value, value);\n    this._value = value;\n    this.valueChange.emit(value);\n  }\n\n  dispatchChange(event: SlChangeEvent) {\n    // console.log('DISPATCH', event);\n    this.change.emit(event);\n  }\n\n  changeBtn() {\n    this.value = 'option-1';\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./select-wrapper.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | undefined",
            "line": 32
          }
        }
      },
      "templateData": "<sl-select [value]=\"value\" (sl-change)=\"dispatchChange($event)\"\n  ><ng-content></ng-content\n></sl-select>\n<button type=\"button\" (click)=\"changeBtn()\">Change: {{ value }}</button>\n"
    },
    {
      "name": "SideNavigationComponent",
      "id": "component-SideNavigationComponent-30309cfc46a472f0d368dd3c12c2857250c408828b9f4842a2fe79e010121e69d635aea3e25c8e9d079d2a069a6cb8f8e6113cf14f5d7427d92a5defc639c931",
      "file": "src/app/side-navigation/side-navigation.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-side-navigation",
      "styleUrls": ["./side-navigation.component.scss"],
      "styles": [],
      "templateUrl": ["./side-navigation.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "currentStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "isExaminer",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "isSurgeon",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "handleSideNavToggle",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "navItems",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<IMenuItem>",
          "optional": false,
          "description": "",
          "line": 27
        }
      ],
      "methodsClass": [
        {
          "name": "featureToggle",
          "args": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getNavItemsByUserRole",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "logout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleSideNav",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleSubNav",
          "args": [
            {
              "name": "item",
              "type": "IMenuItem",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "IMenuItem",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "translateNavItem",
          "args": [
            {
              "name": "navItems",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any[]",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n\n",
          "description": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "navItems",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "tagName": {
                "pos": 2329,
                "end": 2336,
                "flags": 8421376,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        },
        {
          "name": "NgxsModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { IMenuItem } from 'src/web-components/menuItem';\nimport { NgxsModule, Store } from '@ngxs/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  CERTIFIED_NAV_ITEMS,\n  EXAMINER_NAV_ITEMS,\n  TRAINEE_NAV_ITEMS,\n} from './nav-items';\nimport { CloseApplication } from '../state/application/application.actions';\n\n@Component({\n  selector: 'abs-side-navigation',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive, NgxsModule],\n  templateUrl: './side-navigation.component.html',\n  styleUrls: ['./side-navigation.component.scss'],\n})\nexport class SideNavigationComponent implements OnInit {\n  @Output() handleSideNavToggle: EventEmitter<any> = new EventEmitter();\n  @Input() currentStatus: string | undefined;\n  @Input() isSurgeon = false;\n  @Input() isExaminer = false;\n\n  navItems: Array<IMenuItem> = [];\n\n  constructor(\n    private _router: Router,\n    private _store: Store,\n    private _translateService: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    this.getNavItemsByUserRole();\n  }\n\n  getNavItemsByUserRole() {\n    if (this.isSurgeon) {\n      this.navItems = CERTIFIED_NAV_ITEMS;\n    } else {\n      this.navItems = TRAINEE_NAV_ITEMS;\n    }\n\n    if (this.isExaminer) {\n      this.navItems = this.navItems.concat(EXAMINER_NAV_ITEMS);\n    }\n    // let the page init before translating\n    // TODO: [Joe] address this timing issue in a way that does not rely on a timeout\n    setTimeout(() => {\n      this.navItems = this.translateNavItem(this.navItems);\n    }, 100);\n  }\n\n  logout() {\n    this._store.dispatch(new CloseApplication());\n  }\n\n  toggleSideNav() {\n    this.handleSideNavToggle.emit();\n  }\n\n  featureToggle(item: any) {\n    if (item.feature) {\n      const feature = item.feature;\n      return this._store.selectSnapshot((state) =>\n        state.application?.featureFlags\n          ? state.application.featureFlags[feature]\n          : false\n      );\n    } else {\n      return true;\n    }\n  }\n\n  toggleSubNav(item: IMenuItem) {\n    console.log('toggle side nav', item);\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n\n  /**\n   *\n   * @param alert\n   * @returns\n   */\n  private translateNavItem(navItems: any[]): any[] {\n    return navItems.map((navItem) => {\n      if (navItem.displayKey) {\n        // this safeguards against the timing issue of the page loading before the translations are ready\n        // TODO: [Joe] address this timing issue in a way that does not rely on a timeout\n        const newDisplay = this._translateService.instant(navItem.displayKey);\n        if (newDisplay !== navItem.displayKey) {\n          navItem.display = newDisplay;\n        }\n      }\n      if (navItem.children) {\n        navItem.children = this.translateNavItem(navItem.children);\n      }\n      return navItem;\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".container {\n  padding-right: 0;\n}\n\nimg {\n  width: 100%;\n}\n\nh1 {\n  color: var(--global-primary);\n  text-transform: uppercase;\n  font-size: 1.35rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.hamburger {\n  border: none;\n  background: none;\n  display: block;\n  cursor: pointer;\n  span {\n    position: relative;\n    display: block;\n    height: 5px;\n    width: 3rem;\n    background-color: var(--global-primary);\n    transition: 250ms ease-in-out;\n    margin-bottom: 5px;\n    &:first-child {\n      transform: rotate(-45deg);\n      top: 9px;\n    }\n    &:nth-child(2) {\n      transform: rotate(45deg);\n    }\n  }\n  &:hover {\n    span {\n      background-color: var(--global-warning);\n    }\n  }\n}\n\n.container {\n  position: relative;\n  height: 100%;\n}\n\n.nav-header {\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  justify-content: space-between;\n  .logo {\n    margin: 0 1rem 0 0;\n    display: flex;\n    align-items: center;\n    max-width: 5rem;\n  }\n}\n\n.left-padding,\n.lower-nav {\n  padding: 0 0 0 1.5rem;\n}\n\n.lower-nav {\n  position: absolute;\n  bottom: 1.25rem;\n}\n\nnav {\n  max-height: calc(100vh - 17.5rem);\n  overflow: hidden;\n  &:hover {\n    overflow-y: auto;\n  }\n\n  &::-webkit-scrollbar {\n    width: 0.125rem;\n  }\n  &::-webkit-scrollbar-track {\n    background: var(--global-warning-lighten-60);\n  }\n  &::-webkit-scrollbar-thumb {\n    background: var(--global-warning);\n    &:hover {\n      background: var(--global-warning-darken-20);\n    }\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    li {\n      margin-bottom: 2.5rem;\n      position: relative;\n      a {\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        position: relative;\n        font-size: 1.25rem;\n        color: var(--global-primary);\n        font-weight: bold;\n        width: 100%;\n        &::after {\n          content: '';\n          position: absolute;\n          right: 0;\n          width: 5px;\n          height: 55px;\n          background-color: none;\n          transition: 250ms ease-in-out;\n        }\n        i {\n          margin-right: 1rem;\n          margin-right: 0 auto;\n          font-size: 1.5rem;\n          width: 1.5rem;\n          transition: 250ms ease-in-out;\n        }\n        &:hover,\n        &.active {\n          i {\n            color: var(--global-warning);\n          }\n          &::after {\n            background-color: var(--global-warning);\n          }\n        }\n      }\n    }\n  }\n\n  .sub-menu {\n    max-height: 0;\n    overflow: hidden;\n    transition: 550ms ease-in-out;\n    ul {\n      li {\n        margin-top: 1.5rem;\n        margin-bottom: 0rem;\n        a {\n          font-size: 1rem;\n          transition: 250ms ease-in-out;\n          &:hover,\n          &.active {\n            color: var(--global-success);\n            &::after {\n              display: none;\n            }\n          }\n        }\n      }\n    }\n    &:hover {\n      max-height: 500px;\n    }\n  }\n\n  .has-sub-menu {\n    &:hover,\n    &.active {\n      + .sub-menu {\n        max-height: 500px;\n      }\n    }\n  }\n}\n\n.lower-nav {\n  color: var(--global-primary);\n  font-weight: bold;\n  button {\n    background: none;\n    border: none;\n    font-size: 1.25rem;\n    color: var(--global-primary);\n    font-weight: bold;\n    font-family: 'proxima-nova', sans-serif;\n    cursor: pointer;\n    i {\n      transition: 250ms ease-in-out;\n      margin: 0 1rem;\n    }\n    &:hover {\n      i {\n        color: var(--global-warning);\n      }\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  .hamburger {\n    display: none;\n  }\n}\n",
          "styleUrl": "./side-navigation.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "router": {
          "name": "router",
          "getSignature": {
            "name": "router",
            "type": "",
            "returnType": "Router",
            "line": 81
          }
        }
      },
      "templateData": "<div class=\"container\">\n  <div class=\"nav-header\">\n    <div class=\"flex\">\n      <div class=\"logo\">\n        <img\n          src=\"../../assets/img/abs-logo.svg\"\n          alt=\"The American Board Of Surgery\"\n        />\n      </div>\n      <h3>\n        The American <br />\n        Board of Surgery\n      </h3>\n    </div>\n    <div class=\"nav-toggle\">\n      <div class=\"hamburger\" (click)=\"toggleSideNav()\">\n        <span></span>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <nav>\n    <ul class=\"main-navigation\">\n      <ng-container *ngFor=\"let item of navItems\">\n        <li class=\"left-padding\" *ngIf=\"featureToggle(item)\">\n          <a\n            [routerLink]=\"item.action\"\n            routerLinkActive=\"active\"\n            (click)=\"toggleSideNav()\"\n            *ngIf=\"!item.children\"\n            ><i [ngClass]=\"item.icon\"></i>{{ item.display }}</a\n          >\n          <a\n            (click)=\"toggleSubNav(item)\"\n            *ngIf=\"item.children\"\n            [routerLink]=\"item.action\"\n            routerLinkActive=\"active\"\n            class=\"has-sub-menu\"\n          >\n            <i [ngClass]=\"item.icon\"></i>{{ item.display }}\n          </a>\n          <div class=\"sub-menu\" *ngIf=\"item.children\">\n            <ul>\n              <li *ngFor=\"let child of item.children\">\n                <a\n                  [routerLink]=\"[item.action, child.action]\"\n                  routerLinkActive=\"active\"\n                  (click)=\"toggleSideNav()\"\n                  ><i [ngClass]=\"child.icon\"></i>{{ child.display }}</a\n                >\n              </li>\n            </ul>\n          </div>\n        </li>\n      </ng-container>\n    </ul>\n  </nav>\n\n  <nav class=\"lower-nav\">\n    <ng-container *ngIf=\"featureToggle({ feature: 'myAccountPage' })\">\n      <button (click)=\"router.navigateByUrl('my-account')\">\n        <i class=\"fa-solid fa-user-doctor\"></i>My Account\n      </button>\n      |\n    </ng-container>\n    <button (click)=\"logout()\">\n      Logout<i class=\"fa-sharp fa-solid fa-arrow-right-from-bracket\"></i>\n    </button>\n  </nav>\n</div>\n"
    },
    {
      "name": "SpecialAccommodationsModalComponent",
      "id": "component-SpecialAccommodationsModalComponent-a455732668a39ba0345a90218162ca54f7db0582f7bff8f70895fa078f6adc4f6eae5856a6f7015dfd2b745edfc19696d5e5f1f09a3610fb2eab91e83ccc0569",
      "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-special-accommodations-modal",
      "styleUrls": ["./special-accommodations-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./special-accommodations-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "documentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "fileUploadedName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "selectedDocumentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null | undefined",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "specialAccommodationsCols",
          "defaultValue": "SPECIAL_ACCOMMODATIONS_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "specialAccommodationsData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "specialAccommodationsTypeOptions",
          "defaultValue": "[\n    {\n      label: 'Other medical condition',\n      value: 'other_medical_condition',\n    },\n    {\n      label: 'Lactating mother',\n      value: 'lactating_mother',\n    },\n    {\n      label: 'ADA (Learning disability)',\n      value: 'ada_learning_disability',\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "uploadedFile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "File | undefined",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSpecialAccommodationsData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "gridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleFileOnChange",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleSelectChange",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDocumentUpload",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SPECIAL_ACCOMMODATIONS_COLS } from './special-accommodations-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { FormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-special-accommodations-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    FormsModule,\n    DropdownModule,\n    ButtonModule,\n  ],\n  templateUrl: './special-accommodations-modal.component.html',\n  styleUrls: ['./special-accommodations-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SpecialAccommodationsModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  specialAccommodationsCols = SPECIAL_ACCOMMODATIONS_COLS;\n  specialAccommodationsData!: any;\n\n  fileUploadedName!: string | undefined;\n  uploadedFile!: File | undefined;\n  documentType!: string;\n\n  selectedDocumentType: string | null | undefined;\n\n  specialAccommodationsTypeOptions = [\n    {\n      label: 'Other medical condition',\n      value: 'other_medical_condition',\n    },\n    {\n      label: 'Lactating mother',\n      value: 'lactating_mother',\n    },\n    {\n      label: 'ADA (Learning disability)',\n      value: 'ada_learning_disability',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.getSpecialAccommodationsData();\n  }\n\n  getSpecialAccommodationsData() {\n    this.specialAccommodationsData = [\n      {\n        fileName: 'ABC_Special-Accommodation-Request_1-2-22.pdf',\n        uploadDate: new Date('09/22/19'),\n        type: 'Other medical condition',\n      },\n    ];\n  }\n\n  handleSelectChange(event: any) {\n    this.selectedDocumentType = event.target.__displayLabel;\n  }\n\n  handleFileOnChange($event: any) {\n    this.fileUploadedName = $event.target.files[0].name;\n    this.uploadedFile = $event.target.files;\n  }\n\n  onDocumentUpload() {\n    if (this.uploadedFile) {\n      this.specialAccommodationsData.push({\n        fileName: this.fileUploadedName,\n        uploadDate: new Date(),\n        type: this.selectedDocumentType,\n      });\n      this.resetData();\n    }\n  }\n\n  resetData() {\n    this.fileUploadedName = undefined;\n    this.uploadedFile = undefined;\n    this.selectedDocumentType = null;\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'specialAccommodationsModal' });\n  }\n\n  gridAction($event: any) {\n    console.log('unhandled grid action', $event);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mr-5 {\n  margin-right: 5px;\n}\n\ninput[type='file'] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n\n.input-file {\n  margin-right: 5px;\n  label {\n    position: relative;\n    top: 8px;\n    padding: 6px 40px;\n    border: 1px solid #595959;\n    border-radius: 6px;\n    opacity: 1;\n    color: #595959;\n    font-weight: 500;\n    transition: 250ms ease-in-out;\n    cursor: pointer;\n    i {\n      color: var(--global-warning);\n      margin-left: 20px;\n    }\n    &:hover &:focus-visible {\n      border: 1px solid var(--global-warning);\n    }\n  }\n}\n\n.upload-controls {\n  position: absolute;\n}\n",
          "styleUrl": "./special-accommodations-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"mb-5\">\n  <p>\n    Please complete and upload below\n    <a href=\"#\">Accommodation Request Other Medical Conditions</a>\n  </p>\n</div>\n<div class=\"flex align-items-end gap-3\">\n  <div>\n    <label class=\"block\" for=\"appointmentType\">Appointment Type</label>\n    <p-dropdown\n      [options]=\"specialAccommodationsTypeOptions\"\n      (onChange)=\"handleSelectChange($event)\"\n      inputId=\"appointmentType\"\n      name=\"appointmentType\"\n      placeholder=\"Select an Appointment Type\"\n      optionLabel=\"label\"\n      optionValue=\"value\"\n    ></p-dropdown>\n  </div>\n\n  <div class=\"flex\">\n    <div class=\"input-file\">\n      <label>\n        <input type=\"file\" (change)=\"handleFileOnChange($event)\" />\n        <span\n          >{{ fileUploadedName ?? 'Upload a File' }}\n          <i class=\"fa-solid fa-upload\"></i\n        ></span>\n      </label>\n    </div>\n    <p-button\n      (click)=\"onDocumentUpload()\"\n      [disabled]=\"documentType === '' || !uploadedFile\"\n      class=\"btn-add\"\n    >\n      <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n      <span>UPLOAD DOCUMENT</span>\n    </p-button>\n  </div>\n</div>\n\n<abs-grid\n  [columns]=\"specialAccommodationsCols\"\n  [data]=\"specialAccommodationsData\"\n  (action)=\"gridAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button type=\"button\" [style]=\"{ width: '337px' }\" variant=\"primary\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "SuccessFailModalComponent",
      "id": "component-SuccessFailModalComponent-8dda0b4163f69fe33a70b6a02ad6c1bea2408f31fc8699aad3b85cf1e3c6c4f65d0b6e3ffa71ac0f73420f5830119d14ec3e9df55d744a7d1909a99d25b44fa7",
      "file": "src/app/shared/components/success-fail-modal/success-fail-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-success-fail-modal",
      "styleUrls": ["./success-fail-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./success-fail-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "isSuccess",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        },
        {
          "name": "showDialog",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-success-fail-modal',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './success-fail-modal.component.html',\n  styleUrls: ['./success-fail-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SuccessFailModalComponent {\n  @Input() isSuccess!: boolean;\n  @Input() message!: string;\n  @Input() title!: string;\n  @Input() showDialog = false;\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  close() {\n    this.closeDialog.emit({ show: false });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".success-icon {\n  font-size: 5rem;\n  color: var(--global-success);\n}\n.error-icon {\n  font-size: 5rem;\n  color: var(--global-danger);\n}\n\np {\n  text-align: center;\n}\n",
          "styleUrl": "./success-fail-modal.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<sl-dialog [noHeader]=\"true\" [open]=\"showDialog\" (sl-request-close)=\"close()\">\n  <div class=\"flex flex-column justify-content-center align-items-center\">\n    <i class=\"fa-regular fa-circle-check success-icon\" *ngIf=\"isSuccess\"></i>\n    <i class=\"fa-regular fa-circle-xmark error-icon\" *ngIf=\"!isSuccess\"></i>\n    <h2 class=\"font-normal mt-3 mb-1\">\n      {{ title }}\n    </h2>\n    <p class=\"font-bold mt-0 mb-1\" *ngIf=\"message\">{{ message }}</p>\n    <sl-button\n      slot=\"footer\"\n      class=\"mt-5\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      (click)=\"close()\"\n      >{{ isSuccess ? 'Continue' : 'Okay' }}</sl-button\n    >\n  </div>\n</sl-dialog>\n"
    },
    {
      "name": "SurgeonProfileModalComponent",
      "id": "component-SurgeonProfileModalComponent-f8625b9e86210aa65a6723147834d76620bd37a92fbfdb148394f6074907f167d1519e01dacbef26565050a0fee7b84870f8be4d2f30204d5239ecfc7a0ab101",
      "file": "src/app/registration-requirements/surgeon-profile-modal/surgeon-profile-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "provideNgxMask()"
        }
      ],
      "selector": "abs-surgeon-profile-modal",
      "styleUrls": ["./surgeon-profile-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./surgeon-profile-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "activePanel",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "fakeOptions",
          "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "panels",
          "defaultValue": "['personalInformation', 'contactInformation']",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "surgeonProfile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 48
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSurgeonProfile",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleDefaultShowTab",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "showTabPanel",
          "args": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "NgxMaskDirective",
          "type": "directive"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "InputMaskModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaskDirective } from 'ngx-mask';\nimport { provideNgxMask } from 'ngx-mask';\n// import { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-surgeon-profile-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgxMaskDirective,\n    InputTextModule,\n    DropdownModule,\n    InputMaskModule,\n    ButtonModule,\n  ],\n  templateUrl: './surgeon-profile-modal.component.html',\n  styleUrls: ['./surgeon-profile-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [provideNgxMask()],\n})\nexport class SurgeonProfileModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ];\n\n  panels = ['personalInformation', 'contactInformation'];\n  activePanel = 0;\n\n  surgeonProfile: any;\n\n  // constructor(private _globalDialogService: GlobalDialogService) {}\n\n  ngOnInit() {\n    this.getSurgeonProfile();\n  }\n\n  getSurgeonProfile() {\n    this.surgeonProfile = {\n      personalInfo: {\n        cid: '123456789',\n        fullName: 'Joe Bob Smith',\n        firstName: 'Joe',\n        middleName: 'Bob',\n        lastName: 'Smith',\n        certName: 'Joe Bob Smith, M.D.',\n        gender: 'male',\n        race: 'white',\n        ethnicity: 'white',\n        firstLanguage: 'english',\n        bestLanguage: 'english',\n      },\n      contactInfo: {\n        address: '123 Main St',\n        address2: 'Apt 1',\n        city: 'Philadelphia',\n        state: 'PA',\n        zip: '94105',\n        country: 'USA',\n        phone: '1234567890',\n        mobile: '1234567890',\n        fax: '1234567890',\n        email: 'test@test.io',\n        npid: '123456789',\n      },\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#surgeonProfileTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // this._globalDialogService.closeOpenDialog();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
          "styleUrl": "./surgeon-profile-modal.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div>\n  <p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n  <sl-tab-group\n    [noScrollControls]=\"true\"\n    id=\"surgeonProfileTabs\"\n    (sl-tab-show)=\"handleDefaultShowTab($event)\"\n  >\n    <!-- TODO: [Joe] tab__complete should be applied to tab based on form state (hopefully derived from reactive form in the ngx-store) -->\n    <sl-tab slot=\"nav\" panel=\"personalInformation\" class=\"tab__complete\">\n      <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n      Personal Information\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"contactInformation\">\n      <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Contact Information\n    </sl-tab>\n\n    <sl-tab-panel name=\"personalInformation\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n      <div class=\"grid\">\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"cid\">Candidate Identification Number</label>\n          <input\n            id=\"cid\"\n            pInputText\n            type=\"text\"\n            name=\"cid\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.cid\"\n            required\n          />\n        </div>\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"fullName\">Full Name</label>\n          <input\n            id=\"fullName\"\n            pInputText\n            type=\"text\"\n            name=\"fullName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.fullName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"firstName\">First Name</label>\n          <input\n            id=\"firstName\"\n            pInputText\n            type=\"text\"\n            name=\"firstName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.firstName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"middleName\">Middle Name</label>\n          <input\n            id=\"middleName\"\n            pInputText\n            type=\"text\"\n            name=\"middleName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.middleName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"lastName\">Last Name</label>\n          <input\n            id=\"lastName\"\n            pInputText\n            type=\"text\"\n            name=\"lastName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.lastName\"\n            required\n          />\n        </div>\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"certName\"\n            >Name as it Should Appear on Certificate</label\n          >\n          <input\n            id=\"certName\"\n            pInputText\n            type=\"text\"\n            name=\"certName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.certName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"gender\">Gender</label>\n          <p-dropdown\n            inputId=\"gender\"\n            name=\"gender\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.gender\"\n            placeholder=\"Select a Gender\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"race\">Race</label>\n          <p-dropdown\n            inputId=\"race\"\n            name=\"race\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.race\"\n            placeholder=\"Select a Race\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"ethnicity\">Ethnicity</label>\n          <p-dropdown\n            inputId=\"ethnicity\"\n            name=\"ethnicity\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.ethnicity\"\n            placeholder=\"Select a Ethnicity\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"firstLanguage\"\n            >What Language Did You Learn to Speak First?</label\n          >\n          <p-dropdown\n            inputId=\"firstLanguage\"\n            name=\"firstLanguage\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.firstLanguage\"\n            placeholder=\"Select a First Language\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            [required]=\"true\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"bestLanguage\"\n            >What Language Do You Speak Best?</label\n          >\n          <p-dropdown\n            inputId=\"bestLanguage\"\n            name=\"bestLanguage\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.bestLanguage\"\n            placeholder=\"Select a Best Language\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n      </div>\n    </sl-tab-panel>\n    <sl-tab-panel name=\"contactInformation\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n      <div class=\"grid\">\n        <div class=\"col-12 md:col-8\">\n          <label class=\"block\" for=\"street1\">Street Address</label>\n          <input\n            id=\"street1\"\n            pInputText\n            type=\"text\"\n            name=\"street1\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.address\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"street2\">Address Line 2</label>\n          <input\n            id=\"street2\"\n            pInputText\n            type=\"text\"\n            name=\"street2\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.address2\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"city\">City</label>\n          <input\n            id=\"city\"\n            pInputText\n            type=\"text\"\n            name=\"city\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.city\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"state\">State / Province / Territory</label>\n          <p-dropdown\n            inputId=\"state\"\n            name=\"state\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.state\"\n            placeholder=\"Select a State\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"zip\">Zip</label>\n          <input\n            id=\"zip\"\n            pInputText\n            type=\"text\"\n            name=\"zip\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.zip\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"country\">Country</label>\n          <p-dropdown\n            inputId=\"country\"\n            name=\"country\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.country\"\n            placeholder=\"Select a State\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"officePhoneNumber\"\n            >Daytime Phone Number</label\n          >\n          <!-- NOTE: p-inputMask is apparently broken using ngModel, but works file (on profile page) using reactive forms -->\n          <p-inputMask\n            inputId=\"officePhoneNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"officePhoneNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.phone\"\n            placeholder=\"(999) 999-9999\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"mobilePhoneNumber\"\n            >Mobile Phone Number</label\n          >\n          <p-inputMask\n            inputId=\"mobilePhoneNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"mobilePhoneNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.mobile\"\n            placeholder=\"(999) 999-9999\"\n            [unmask]=\"true\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"faxNumber\">Fax Number</label>\n          <p-inputMask\n            inputId=\"faxNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"faxNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.fax\"\n            placeholder=\"(999) 999-9999\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"emailAddress\">Email Address</label>\n          <input\n            id=\"emailAddress\"\n            pInputText\n            type=\"email\"\n            name=\"emailAddress\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.email\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"npid\">National Provider ID</label>\n          <input\n            id=\"npid\"\n            pInputText\n            type=\"text\"\n            name=\"npid\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.npid\"\n            readonly\n          />\n        </div>\n      </div>\n    </sl-tab-panel>\n  </sl-tab-group>\n</div>\n<div class=\"flex justify-content-end\" slot=\"footer\">\n  <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n    >Cancel</p-button\n  >\n  <p-button\n    type=\"button\"\n    [style]=\"{ width: '337px' }\"\n    variant=\"primary\"\n    (click)=\"save()\"\n    >Save\n  </p-button>\n</div>\n"
    },
    {
      "name": "TooltipComponent",
      "id": "component-TooltipComponent-55ed974027bb7ee0788b8dca9795fba74abd197ee4aa8f0fc547106724c0b0a837b54767cd52e62f239c3b0e706d78c989a5108cd5a6f16fd5b211f7e6ca8a4c",
      "file": "src/app/shared/components/tooltip/tooltip.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-tooltip",
      "styleUrls": ["./tooltip.component.scss"],
      "styles": [],
      "templateUrl": ["./tooltip.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "containerId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string | undefined",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "'top'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "\"top\" | \"bottom\" | \"left\" | \"right\"",
          "decorators": []
        },
        {
          "name": "tooltipText",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "iconRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'icon', {static: false}"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "localPosition",
          "defaultValue": "'top'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"top\" | \"bottom\" | \"left\" | \"right\"",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "tooltipRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tooltip', {static: false}"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "adjustPosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-tooltip',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent implements OnInit, AfterViewInit, OnChanges {\n  @ViewChild('tooltip', { static: false }) tooltipRef!: ElementRef;\n  @ViewChild('icon', { static: false }) iconRef!: ElementRef;\n\n  @Input() tooltipText: string | undefined;\n  @Input() position: 'top' | 'bottom' | 'left' | 'right' = 'top';\n  @Input() containerId: string | undefined;\n\n  localPosition: 'top' | 'bottom' | 'left' | 'right' = 'top';\n\n  ngOnInit(): void {\n    this.localPosition = this.position;\n  }\n\n  ngAfterViewInit(): void {\n    this.adjustPosition();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['tooltipText']) {\n      this.adjustPosition();\n      //check that the adjusted position is still valid\n      setTimeout(() => {\n        this.adjustPosition();\n      }, 100);\n    }\n  }\n\n  adjustPosition() {\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n\n    const tooltipRect = this.tooltipRef.nativeElement.getBoundingClientRect();\n    const iconRect = this.iconRef.nativeElement.getBoundingClientRect();\n\n    if (iconRect.top - tooltipRect.height < 0) {\n      //tooltip spills over top of page\n      this.localPosition = 'bottom';\n    } else if (iconRect.bottom + tooltipRect.height > windowHeight) {\n      //tooltip spills over bottom of page\n      this.localPosition = 'top';\n    } else if (iconRect.left - tooltipRect.width < 0) {\n      //tooltip spills over left of page\n      this.localPosition = 'right';\n    } else if (iconRect.right + tooltipRect.width > windowWidth) {\n      //tooltip spills over right of page\n      this.localPosition = 'left';\n    }\n\n    // TODO - allow the user to set a container value to check against instead of window\n\n    // let containerElement: any = document.querySelector('body');\n    // if (this.containerId) {\n    //   containerElement = document.getElementById(this.containerId);\n    // }\n\n    // const tooltipRect = this.tooltipRef.nativeElement.getBoundingClientRect();\n    // const containerRect = containerElement.getBoundingClientRect();\n    // const iconRect = this.iconRef.nativeElement.getBoundingClientRect();\n\n    // console.log('innerWidth', window.innerWidth);\n    // console.log('innerHeight', window.innerHeight);\n    // console.log('containerElement', containerElement?.getBoundingClientRect());\n\n    // console.log(\n    //   'tooltipRef',\n    //   this.tooltipRef.nativeElement.getBoundingClientRect()\n    // );\n\n    // console.log('iconRef', this.iconRef.nativeElement.getBoundingClientRect());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".tooltip-container {\n  position: relative;\n  display: inline-block;\n}\n\n.tooltip-icon {\n  cursor: pointer;\n}\n\n.tooltip-text {\n  z-index: 100;\n  position: absolute;\n  background-color: rgba(42, 42, 42, 0.75);\n  color: var(--global-text-white);\n  padding: 8px;\n  border-radius: 4px;\n  font-size: 0.875rem;\n  max-width: 400px;\n  width: max-content;\n  text-align: center;\n  visibility: hidden;\n  opacity: 0;\n  transition: opacity 0.3s, visibility 0.3s;\n}\n\n.tooltip-caret {\n  position: absolute;\n  border-style: solid;\n  border-width: 0.5rem;\n}\n\n.tooltip-container.top {\n  .tooltip-text {\n    bottom: calc(100% + 0.6rem);\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .tooltip-caret {\n    bottom: -1rem;\n    left: 50%;\n    transform: translateX(-50%);\n    border-color: rgba(42, 42, 42, 0.85) transparent transparent transparent;\n  }\n}\n\n.tooltip-container.bottom {\n  .tooltip-text {\n    top: calc(100% + 0.6rem);\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .tooltip-caret {\n    top: -1rem;\n    left: 50%;\n    transform: translateX(-50%);\n    border-color: transparent transparent rgba(42, 42, 42, 0.85) transparent;\n  }\n}\n\n.tooltip-container.left {\n  .tooltip-text {\n    right: calc(100% + 0.6rem);\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .tooltip-caret {\n    top: 50%;\n    right: -1rem;\n    transform: translateY(-50%);\n    border-color: transparent transparent transparent rgba(42, 42, 42, 0.85);\n    //border-color: transparent rgba(42,42,42,.85) transparent transparent;\n  }\n}\n\n.tooltip-container.right {\n  .tooltip-text {\n    left: calc(100% + 0.6rem);\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .tooltip-caret {\n    top: 50%;\n    left: -1rem;\n    transform: translateY(-50%);\n    border-color: transparent rgba(42, 42, 42, 0.85) transparent transparent;\n  }\n}\n\n.tooltip-container:hover .tooltip-text {\n  visibility: visible;\n  opacity: 1;\n}\n",
          "styleUrl": "./tooltip.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "AfterViewInit", "OnChanges"],
      "templateData": "<div class=\"tooltip-container\" [ngClass]=\"localPosition\">\n  <div #icon class=\"tooltip-icon fa-solid fa-circle-question\"></div>\n  <div #tooltip class=\"tooltip-text\" *ngIf=\"tooltipText\">\n    <div class=\"tooltip-caret\"></div>\n    {{ tooltipText }}\n  </div>\n</div>\n"
    },
    {
      "name": "TrainingAddEditModalComponent",
      "id": "component-TrainingAddEditModalComponent-1e3005fc447762d1fc6ac6487e0fe38f00c8a992b35388c1461ed358ec8246ac992c1a25a6d5d0301dc77062733385bffa4feb32c32dd906c79073d03c395d84",
      "file": "src/app/shared/components/training-add-edit-modal/training-add-edit-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-training-add-edit-modal",
      "styleUrls": ["./training-add-edit-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./training-add-edit-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "errors$",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "Observable<IFormErrors> | undefined",
          "decorators": []
        },
        {
          "name": "isEdit$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "Subject<boolean>",
          "decorators": []
        },
        {
          "name": "training$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "Subject<IAdvancedTrainingModel>",
          "decorators": []
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancelDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "EventEmitter<any>"
        },
        {
          "name": "saveDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "accreditedInstitutions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAccreditedProgramInstitutionReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 100
        },
        {
          "name": "accreditedInstitutions$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.accreditedInstitutions"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "additionalTrainingForm",
          "defaultValue": "new FormGroup(\n    {\n      trainingType: new FormControl(0, Validators.required),\n      startDate: new FormControl(new Date(), Validators.required),\n      endDate: new FormControl(new Date(), Validators.required),\n      institutionName: new FormControl({ itemDescription: '', itemValue: '' }),\n      state: new FormControl({ value: '', disabled: true }),\n      city: new FormControl({ value: '', disabled: true }),\n      other: new FormControl(''),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "clearErrors",
          "defaultValue": "new ClearMedicalTrainingErrors()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "filteredInstitutionOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[]",
          "optional": false,
          "description": "",
          "line": 102
        },
        {
          "name": "hasUnsavedChanges",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "institutionOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[]",
          "optional": false,
          "description": "",
          "line": 99
        },
        {
          "name": "isEdit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 104
        },
        {
          "name": "stateOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IPickListItem[]",
          "optional": false,
          "description": "",
          "line": 98
        },
        {
          "name": "states$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IStateReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 66,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.states"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "trainingId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 103
        },
        {
          "name": "trainingTypes",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ITrainingTypeReadOnlyModel[]",
          "optional": false,
          "description": "",
          "line": 101
        },
        {
          "name": "trainingTypes$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<ITrainingTypeReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 75,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "undefined.trainingTypes"
            }
          ],
          "modifierKind": [167]
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 224,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "clearAutoComplete",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "filterItems",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleDefaultClose",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onInstitutionSelect",
          "args": [
            {
              "name": "selected",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "selected",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 240,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setPicklistOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "subscribeToTraining",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "trackByFn",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "IPickListItem",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | number | null | undefined",
          "typeParameters": [],
          "line": 251,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "IPickListItem",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "InputSelectComponent",
          "type": "component"
        },
        {
          "name": "AutoCompleteModule",
          "type": "module"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CalendarModule",
          "type": "module"
        },
        {
          "name": "FormErrorsComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from 'src/app/state/picklists';\nimport { IStateReadOnlyModel } from 'src/app/api';\nimport { Select, Store } from '@ngxs/store';\nimport { InputSelectComponent } from '../../../shared/components/base-input/input-select.component';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CalendarModule } from 'primeng/calendar';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { validateStartAndEndDates } from '../../validators/validators';\nimport { GlobalDialogService } from '../../services/global-dialog.service';\nimport { ClearMedicalTrainingErrors, SetUnsavedChanges } from 'src/app/state';\nimport { IFormErrors } from '../../common';\nimport { FormErrorsComponent } from '../form-errors/form-errors.component';\n\n@Component({\n  selector: 'abs-training-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    AutoCompleteModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './training-add-edit-modal.component.html',\n  styleUrls: ['./training-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingAddEditModalComponent implements OnInit {\n  @Input() training$: Subject<IAdvancedTrainingModel> = new Subject();\n  @Input() isEdit$: Subject<boolean> = new Subject();\n  @Input() userId!: number;\n  @Input() errors$: Observable<IFormErrors> | undefined;\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.accreditedInstitutions)\n  accreditedInstitutions$:\n    | Observable<IAccreditedProgramInstitutionReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.trainingTypes) trainingTypes$:\n    | Observable<ITrainingTypeReadOnlyModel[]>\n    | undefined;\n\n  clearErrors = new ClearMedicalTrainingErrors();\n\n  hasUnsavedChanges = false;\n\n  additionalTrainingForm = new FormGroup(\n    {\n      trainingType: new FormControl(0, Validators.required),\n      startDate: new FormControl(new Date(), Validators.required),\n      endDate: new FormControl(new Date(), Validators.required),\n      institutionName: new FormControl({ itemDescription: '', itemValue: '' }),\n      state: new FormControl({ value: '', disabled: true }),\n      city: new FormControl({ value: '', disabled: true }),\n      other: new FormControl(''),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  );\n\n  stateOptions: IPickListItem[] = [];\n  institutionOptions: IPickListItem[] = [];\n  accreditedInstitutions: IAccreditedProgramInstitutionReadOnlyModel[] = [];\n  trainingTypes: ITrainingTypeReadOnlyModel[] = [];\n  filteredInstitutionOptions: IPickListItem[] = [];\n  trainingId!: number | undefined;\n  isEdit!: boolean;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this._store.dispatch(new GetStateList('500'));\n    this._store.dispatch(new GetAccreditedProgramInstitutionsList());\n    this.states$?.pipe(untilDestroyed(this)).subscribe((value) => {\n      this.stateOptions = value;\n    });\n  }\n\n  ngOnInit() {\n    this.setPicklistOptions();\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEdit = isEdit;\n    });\n    this.additionalTrainingForm.valueChanges.subscribe(() => {\n      const isDirty = this.additionalTrainingForm.dirty;\n      if (isDirty && !this.hasUnsavedChanges) {\n        this.hasUnsavedChanges = true;\n        this._store.dispatch(new SetUnsavedChanges(true));\n      }\n    });\n    this.subscribeToTraining();\n  }\n\n  subscribeToTraining() {\n    this.training$.subscribe((formData) => {\n      if (Object.keys(formData).length > 0) {\n        this.trainingId = formData.id;\n        for (const [key, value] of Object.entries(formData)) {\n          this.additionalTrainingForm.get(key)?.patchValue(value);\n          if (key === 'institutionName') {\n            this.institutionOptions.filter((inst) => {\n              if (inst.itemDescription === value) {\n                this.additionalTrainingForm.get(key)?.patchValue({\n                  itemDescription: inst.itemDescription ?? '',\n                  itemValue: inst.itemValue ?? '',\n                });\n              }\n            });\n          }\n          if (key === 'trainingType') {\n            this.trainingTypes.filter((training) => {\n              if (training.trainingType === value) {\n                this.additionalTrainingForm.get(key)?.patchValue(training.id);\n              }\n            });\n          }\n          if (key === 'other') {\n            if (value.length > 0) {\n              this.clearAutoComplete();\n            }\n          }\n        }\n\n        this.additionalTrainingForm\n          .get('startDate')\n          ?.patchValue(new Date(formData.startDate ?? ''));\n\n        this.additionalTrainingForm\n          .get('endDate')\n          ?.patchValue(new Date(formData.endDate ?? ''));\n      } else {\n        this.additionalTrainingForm.reset();\n      }\n    });\n  }\n\n  clearAutoComplete() {\n    this.additionalTrainingForm.get('institutionName')?.patchValue(null);\n    this.additionalTrainingForm.get('city')?.patchValue('');\n    this.additionalTrainingForm.get('state')?.patchValue('');\n  }\n\n  get typeOfTraining() {\n    return this.additionalTrainingForm.get('typeOfTraining');\n  }\n\n  setPicklistOptions() {\n    this.accreditedInstitutions$?.pipe(untilDestroyed(this)).subscribe((insitutions) => {\n      this.accreditedInstitutions = insitutions;\n      insitutions.forEach((insitution) => {\n        this.institutionOptions.push({\n          itemValue: insitution.programId.toString(),\n          itemDescription: insitution.institutionName,\n        });\n      });\n    });\n\n    this.trainingTypes$?.pipe(untilDestroyed(this)).subscribe((training) => {\n      this.trainingTypes = training;\n    });\n  }\n\n  handleDefaultClose(event: any) {\n    event.preventDefault();\n  }\n\n  onInstitutionSelect(selected: any) {\n    this.additionalTrainingForm.get('other')?.patchValue('');\n    this.accreditedInstitutions.filter((i) => {\n      if (i.programId === +selected.itemValue) {\n        this.additionalTrainingForm.patchValue({\n          state: i.state,\n          city: i.city,\n        });\n      }\n    });\n  }\n\n  filterItems($event: any) {\n    const value = $event.query;\n    this.filteredInstitutionOptions = this.institutionOptions.filter((i) => {\n      return i.itemDescription?.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  cancel() {\n    if (this.hasUnsavedChanges) {\n      this.globalDialogService\n        .showConfirmation('Unsaved Changes', 'Do you want to navigate away')\n        .then((result) => {\n          if (result) {\n            this._store.dispatch(new SetUnsavedChanges(false));\n            this.cancelDialog.emit({ show: false });\n          }\n        });\n    } else {\n      this._store.dispatch(new SetUnsavedChanges(false));\n      this.cancelDialog.emit({ show: false });\n    }\n  }\n\n  save() {\n    this.hasUnsavedChanges = false;\n    this._store.dispatch(new SetUnsavedChanges(false));\n    this.saveDialog.emit({\n      edit: this.isEdit,\n      show: false,\n      trainingRecord: this.additionalTrainingForm.value,\n      trainingId: this.trainingId,\n    });\n  }\n\n  trackByFn(\n    index: number,\n    item: IPickListItem\n  ): string | number | null | undefined {\n    return item.itemValue;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./training-add-edit-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 104,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDialogService",
            "type": "GlobalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "typeOfTraining": {
          "name": "typeOfTraining",
          "getSignature": {
            "name": "typeOfTraining",
            "type": "",
            "returnType": "",
            "line": 181
          }
        }
      },
      "templateData": "<ng-container *ngIf=\"clearErrors && errors$ | async as error\">\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form\n  name=\"personProfileForm\"\n  [formGroup]=\"additionalTrainingForm\"\n  (ngSubmit)=\"save()\"\n  *ngIf=\"additionalTrainingForm\"\n>\n  <div class=\"grid\">\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"trainingType\">Type of Training *</label>\n      <p-dropdown\n        [options]=\"trainingTypes\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        optionLabel=\"trainingType\"\n        optionValue=\"id\"\n        formControlName=\"trainingType\"\n        placeholder=\"Choose a Training Type\"\n      ></p-dropdown>\n      <small\n        *ngIf=\"\n          additionalTrainingForm.get('trainingType')?.errors &&\n          additionalTrainingForm.get('trainingType')?.dirty\n        \"\n        id=\"trainingType-help\"\n        class=\"form-error-text\"\n      >\n        This is required\n      </small>\n    </div>\n    <div class=\"col-12 full-width gap-2 flex flex-column\">\n      <label htmlFor=\"institutionName\">Institution</label>\n      <p-autoComplete\n        [dropdown]=\"true\"\n        [suggestions]=\"filteredInstitutionOptions\"\n        (completeMethod)=\"filterItems($event)\"\n        (onSelect)=\"onInstitutionSelect($event)\"\n        (onClear)=\"clearAutoComplete()\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [disabled]=\"additionalTrainingForm.get('other')?.value ? true : false\"\n        [showClear]=\"true\"\n        appendTo=\"body\"\n        id=\"institutionName\"\n        placeholder=\"Select or Enter Institution name\"\n        field=\"itemDescription\"\n        formControlName=\"institutionName\"\n      >\n      </p-autoComplete>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"city\">City</label>\n      <input\n        pInputText\n        id=\"city\"\n        placeholder=\"Choose an Institution\"\n        formControlName=\"city\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"state\">State</label>\n      <p-dropdown\n        [options]=\"stateOptions\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [readonly]=\"true\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        formControlName=\"state\"\n        placeholder=\"Choose an Institution\"\n      ></p-dropdown>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Other</label>\n      <input\n        [attr.disabled]=\"additionalTrainingForm.get('institutionName')?.value\"\n        pInputText\n        id=\"other\"\n        placeholder=\"If you do not see your Institution in the list, type it in here...\"\n        formControlName=\"other\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"startDate\">Date Started *</label>\n      <p-calendar\n        [showIcon]=\"true\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        id=\"startDate\"\n        placeholder=\"Type your answer...\"\n        formControlName=\"startDate\"\n      >\n      </p-calendar>\n      <small\n        *ngIf=\"additionalTrainingForm.get('endDate')?.dirty\"\n        id=\"startDate-help\"\n        class=\"form-error-text\"\n      >\n        {{\n            this.additionalTrainingForm.errors?.['datesValid'] === false\n              ? 'Start Date must come before End Date'\n              : ''\n        }}\n      </small>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"endDate\">Date Ended *</label>\n      <p-calendar\n        [showIcon]=\"true\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        id=\"endDate\"\n        placeholder=\"Type your answer...\"\n        formControlName=\"endDate\"\n      >\n      </p-calendar>\n      <small\n        *ngIf=\"additionalTrainingForm.get('endDate')?.dirty\"\n        id=\"endDate-help\"\n        class=\"form-error-text\"\n      >\n        {{\n          this.additionalTrainingForm.errors?.['datesValid'] === false\n            ? 'Date Started must be before Date Ended'\n            : ''\n        }}\n      </small>\n    </div>\n  </div>\n  <div class=\"flex justify-content-end mt-4\" slot=\"footer\">\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"cancel()\"\n      >Cancel</p-button\n    >\n    <p-button\n      type=\"submit\"\n      [style]=\"{ width: '337px' }\"\n      [disabled]=\"additionalTrainingForm.invalid\"\n      >Save\n    </p-button>\n  </div>\n</form>\n"
    },
    {
      "name": "TrainingModalComponent",
      "id": "component-TrainingModalComponent-e0fa4aa21262121f7c176c76e8e32d89d9e8d77201cd177b0678b14e70845871bc2fddccb0aacfd63bc313faaa4132e917faf454f34e1136117bbb3bcff115a5",
      "file": "src/app/registration-requirements/training-modal/training-modal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-training-modal",
      "styleUrls": ["./training-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./training-modal.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "closeDialog",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "activePanel",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 125
        },
        {
          "name": "additionalTrainingList$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<IAdditionalTrainingReadOnlyModel[]> | undefined",
          "optional": false,
          "description": "",
          "line": 72,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GQAdditionalTrainingSelectors.additionalTrainingList"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "documentCols",
          "defaultValue": "BASIC_DOCUMENT_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 96
        },
        {
          "name": "emptyTraining",
          "defaultValue": "{\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAdvancedTrainingModel",
          "optional": false,
          "description": "",
          "line": 99
        },
        {
          "name": "fakeOptions",
          "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "medicalTraining",
          "defaultValue": "{\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MedicalTrainingData",
          "optional": false,
          "description": "",
          "line": 127
        },
        {
          "name": "panels",
          "defaultValue": "[\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 119
        },
        {
          "name": "selectedTraining$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any> | undefined",
          "optional": false,
          "description": "",
          "line": 77,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "selectedTrainingSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 93
        },
        {
          "name": "showTrainingAddEdit",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "tempTraining$",
          "defaultValue": "new BehaviorSubject(\n    this.emptyTraining\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<IAdvancedTrainingModel>",
          "optional": false,
          "description": "",
          "line": 116
        },
        {
          "name": "trainingAddEditTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | undefined",
          "optional": false,
          "description": "",
          "line": 98
        },
        {
          "name": "trainingCols",
          "defaultValue": "MEDICAL_TRAINING_COLS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "userId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 132
        },
        {
          "name": "userId$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number> | undefined",
          "optional": false,
          "description": "",
          "line": 69,
          "decorators": [
            {
              "name": "Select",
              "stringifiedArguments": "UserProfileSelectors.userId"
            }
          ],
          "modifierKind": [167]
        },
        {
          "name": "userSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription | undefined",
          "optional": false,
          "description": "",
          "line": 92
        }
      ],
      "methodsClass": [
        {
          "name": "cancelAddEditTraining",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 270,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 219,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMedicalTraining",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 158,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleDefaultShowTab",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 202,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleGridAction",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fileList",
              "type": "any[] | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 275,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fileList",
              "type": "any[] | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initTrainingData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 146,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 137,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 211,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveTraining",
          "args": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 247,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showTabPanel",
          "args": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 206,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "panel",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showTrainingModal",
          "args": [
            {
              "name": "trainingId",
              "type": "number | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 233,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "trainingId",
              "type": "number | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "uploadFile",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fileList",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 227,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fileList",
              "type": "any[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "GridComponent",
          "type": "component"
        },
        {
          "name": "TrainingAddEditModalComponent",
          "type": "component"
        },
        {
          "name": "FileUploadButtonComponent",
          "type": "component"
        },
        {
          "name": "ModalComponent",
          "type": "component"
        },
        {
          "name": "InputTextModule",
          "type": "module"
        },
        {
          "name": "InputTextareaModule",
          "type": "module"
        },
        {
          "name": "DropdownModule",
          "type": "module"
        },
        {
          "name": "CheckboxModule",
          "type": "module"
        },
        {
          "name": "RadioButtonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { FileUploadButtonComponent } from 'src/app/shared/components/file-upload-button/file-upload-button.component';\nimport { ModalComponent } from 'src/app/shared/components/modal/modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../../shared/gridDefinitions/medical-training-cols';\nimport { BASIC_DOCUMENT_COLS } from '../../shared/gridDefinitions/basic-document-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport {\n  UserProfileSelectors,\n  GQAdditionalTrainingSelectors,\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button';\n\ninterface MedicalTrainingData {\n  medicalSchool: any;\n  residency: any;\n  additionalDocuments: any;\n}\n\n@Component({\n  selector: 'abs-training-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    FileUploadButtonComponent,\n    ModalComponent,\n    InputTextModule,\n    InputTextareaModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioButtonModule,\n    ButtonModule,\n  ],\n  templateUrl: './training-modal.component.html',\n  styleUrls: ['./training-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.additionalTrainingList)\n  additionalTrainingList$:\n    | Observable<IAdditionalTrainingReadOnlyModel[]>\n    | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails)\n  selectedTraining$: Observable<any> | undefined;\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ];\n\n  userSubscription: Subscription | undefined;\n  selectedTrainingSubscription: Subscription | undefined;\n\n  trainingCols = MEDICAL_TRAINING_COLS;\n  documentCols = BASIC_DOCUMENT_COLS;\n  showTrainingAddEdit = false;\n  trainingAddEditTitle: string | undefined;\n  emptyTraining: IAdvancedTrainingModel = {\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  };\n  tempTraining$: BehaviorSubject<IAdvancedTrainingModel> = new BehaviorSubject(\n    this.emptyTraining\n  );\n  panels = [\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ];\n  activePanel = 0;\n\n  medicalTraining: MedicalTrainingData = {\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  };\n  userId: number | undefined;\n\n  constructor(private _store: Store) {\n    this.initTrainingData();\n  }\n  ngOnDestroy(): void {\n    this.userSubscription?.unsubscribe();\n    this.selectedTrainingSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.getMedicalTraining();\n  }\n\n  initTrainingData() {\n    this._store.dispatch(new GetAdditionalTrainingList());\n\n    this.selectedTrainingSubscription = this.selectedTraining$?.pipe(untilDestroyed(this)).subscribe(\n      (selectedTraining) => {\n        if (selectedTraining?.trainingId > -1) {\n          this.tempTraining$.next(selectedTraining);\n        }\n      }\n    );\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining.medicalSchool = {\n      statement: 'USA',\n      name: 'Johns Hopkins University',\n      city: 'Baltimore',\n      state: 'MD',\n      country: 'USA',\n      degree: 'MD',\n      yearGraduated: '2010',\n    };\n    this.medicalTraining.residency = {\n      programName: 'General Surgery',\n      yearOfCompletion: '2015',\n      programNotListed: 'an explanation goes here',\n      completedInCanada: null,\n      postResidencyPlans: null,\n      postFellowshipPlans: null,\n      vascularTraining: null,\n      vascularFellowship: null,\n      thoracicTraining: null,\n      thoracicFellowship: null,\n    };\n    this.medicalTraining.additionalDocuments = {\n      multiplePrograms: null,\n      completionDocuments: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n      recievedABSApprovalLetter: null,\n      approvalLetters: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#trainingTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n\n  uploadFile(event: any, fileList: any[]) {\n    if (event.file) {\n      fileList.push(event.file);\n    }\n  }\n\n  showTrainingModal(trainingId?: number | undefined) {\n    if (trainingId) {\n      this._store.dispatch(new GetAdditionalTrainingDetails(trainingId));\n      const selectedTraining = this._store.selectSnapshot<any>(\n        GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails\n      );\n\n      this.trainingAddEditTitle = 'Edit Additional / Advanced Training';\n    } else {\n      this.tempTraining$.next(this.emptyTraining);\n      this.trainingAddEditTitle = 'Add Additional / Advanced Training';\n    }\n    this.showTrainingAddEdit = true;\n  }\n  saveTraining($event: any) {\n    $event.trainingRecord.institutionId = parseInt(\n      $event.trainingRecord.institutionId\n    );\n    if ($event.trainingRecord.dateEnded) {\n      $event.trainingRecord.dateEnded = new Date(\n        $event.trainingRecord.dateEnded\n      );\n    }\n    if ($event.trainingRecord.dateStarted) {\n      $event.trainingRecord.dateStarted = new Date(\n        $event.trainingRecord.dateStarted\n      );\n    }\n    // TODO: [Joe] show the universal success/error message\n    if ($event.trainingRecord.trainingId > -1) {\n      this._store.dispatch(new UpdateAdditionalTraining($event.trainingRecord));\n    } else {\n      this._store.dispatch(new CreateAdditionalTraining($event.trainingRecord));\n    }\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n\n  handleGridAction($event: any, fileList?: any[] | undefined) {\n    if ($event.fieldKey === 'edit') {\n      this.showTrainingModal($event.data.trainingId);\n    } else if ($event.fieldKey === 'delete') {\n      // TODO: [Joe] once we have the ngx-store implemented see if this can be done cleaner without passing in the fileList\n      if (fileList) {\n        const index = fileList.indexOf($event.data);\n        if (index > -1) {\n          fileList.splice(index, 1);\n        }\n      } else {\n        console.log('handle delete', $event);\n      }\n    } else if ($event.fieldKey === 'download') {\n      const link = document.createElement('a');\n      link.setAttribute('href', URL.createObjectURL($event.data.file));\n      link.setAttribute('download', $event.data.fileName);\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
          "styleUrl": "./training-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 132,
        "jsdoctags": [
          {
            "name": "_store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<div>\n  <div>\n    <p class=\"m-0\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n    <sl-tab-group\n      [noScrollControls]=\"true\"\n      id=\"trainingTabs\"\n      (sl-tab-show)=\"handleDefaultShowTab($event)\"\n    >\n      <!-- TODO: [Joe] tab__complete should be applied to tab based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <sl-tab slot=\"nav\" panel=\"medicalSchool\" class=\"tab__complete\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n        Medical School\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"residency\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Residency\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"additionalTraining\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Additional Training\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"additionalDocuments\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Additional Documents\n      </sl-tab>\n\n      <sl-tab-panel name=\"medicalSchool\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <div class=\"col-12\">\n            <label class=\"block\" for=\"statement\"\n              >Select the statement that best describes you (Country of medical\n              school)</label\n            >\n            <p-dropdown\n              inputId=\"statement\"\n              name=\"statement\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.statement\"\n              placeholder=\"Select a Country\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12\">\n            <label class=\"block\" for=\"medicalSchool\">Medical School</label>\n            <input\n              id=\"medicalSchool\"\n              pInputText\n              type=\"text\"\n              name=\"medicalSchool\"\n              placeholder=\"Enter school name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.name\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"city\">City or Town</label>\n            <input\n              id=\"city\"\n              pInputText\n              type=\"text\"\n              name=\"city\"\n              placeholder=\"Enter city name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.city\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"state\"\n              >State / Province / Territory</label\n            >\n            <p-dropdown\n              inputId=\"state\"\n              name=\"state\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.state\"\n              placeholder=\"Choose a State\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"country\">Country</label>\n            <p-dropdown\n              inputId=\"country\"\n              name=\"country\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.country\"\n              placeholder=\"Choose a Country\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"degree\">Degree</label>\n            <input\n              id=\"degree\"\n              pInputText\n              type=\"text\"\n              name=\"degree\"\n              placeholder=\"Enter degree name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.degree\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"yearGraduated\">Year of Completion</label>\n            <input\n              id=\"yearGraduated\"\n              pInputText\n              type=\"text\"\n              name=\"yearGraduated\"\n              placeholder=\"YYYY\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.yearGraduated\"\n              required\n            />\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"residency\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <h5 class=\"col-12 mb-1\">Residency</h5>\n          <div class=\"col-6\">\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyName\">Program Name</label>\n                <input\n                  id=\"residencyName\"\n                  pInputText\n                  type=\"text\"\n                  name=\"residencyName\"\n                  placeholder=\"Enter program name\"\n                  [(ngModel)]=\"medicalTraining.residency.programName\"\n                  required\n                />\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyYear\"\n                  >Year of Completion</label\n                >\n                <input\n                  id=\"residencyYear\"\n                  pInputText\n                  type=\"text\"\n                  name=\"residencyYear\"\n                  placeholder=\"YYYY\"\n                  [(ngModel)]=\"medicalTraining.residency.yearOfCompletion\"\n                  required\n                />\n              </div>\n            </div>\n          </div>\n          <div class=\"col-6\">\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyNotListed\"\n                  >My program is not listed</label\n                >\n                <textarea\n                  rows=\"5\"\n                  pInputTextarea\n                  id=\"residencyNotListed\"\n                  placeholder=\"Explain...\"\n                  name=\"residencyNotListed\"\n                  [(ngModel)]=\"medicalTraining.residency.programNotListed\"\n                ></textarea>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-12 text-center flex align-items-center gap-2\">\n            <p-checkbox\n              inputId=\"completedInCanada\"\n              name=\"completedInCanada\"\n              [(ngModel)]=\"medicalTraining.residency.completedInCanada\"\n              [binary]=\"true\"\n            ></p-checkbox>\n            <label for=\"completedInCanada\"\n              >Did you complete your training in canada?</label\n            >\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Post Residency and Fellowship Plans</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"postResidencyPlans\"\n              >Upon completing my General Surgery residency I will:</label\n            >\n            <p-dropdown\n              inputId=\"postResidencyPlans\"\n              name=\"postResidencyPlans\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.postResidencyPlans\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"fellowshipPlans\"\n              >Upon completing my fellowship, I anticipate that my clinical\n              practice will include:</label\n            >\n            <p-dropdown\n              inputId=\"fellowshipPlans\"\n              name=\"fellowshipPlans\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.fellowshipPlans\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Vascular Surgery Training</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\"\n              >Will you be pursuing vascular surgery training?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"vascularTraining\"\n                [value]=\"true\"\n                [(ngModel)]=\"medicalTraining.residency.vascularTraining\"\n                inputId=\"vascularTrainingYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"vascularTraining\"\n                [value]=\"false\"\n                [(ngModel)]=\"medicalTraining.residency.vascularTraining\"\n                inputId=\"vascularTrainingNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"vascularFellowship\"\n              >In which program will you complete a vascular surgery\n              fellowship?</label\n            >\n            <p-dropdown\n              inputId=\"vascularFellowship\"\n              name=\"vascularFellowship\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.vascularFellowship\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Thoracic Surgery Training</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\"\n              >Will you be pursuing thoracic surgery training?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"thoracicTraining\"\n                [value]=\"true\"\n                [(ngModel)]=\"medicalTraining.residency.thoracicTraining\"\n                inputId=\"thoracicTrainingYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"thoracicTraining\"\n                [value]=\"false\"\n                [(ngModel)]=\"medicalTraining.residency.thoracicTraining\"\n                inputId=\"thoracicTrainingNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"thoracicFellowship\"\n              >In which program will you complete a thoracic surgery\n              fellowship?</label\n            >\n            <p-dropdown\n              inputId=\"thoracicFellowship\"\n              name=\"thoracicFellowship\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.thoracicFellowship\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"additionalTraining\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <div class=\"col-12\">\n            <p-button\n              variant=\"default\"\n              class=\"btn-add mt-2 mb-2\"\n              (click)=\"showTrainingModal()\"\n            >\n              <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n              ADD RECORD\n            </p-button>\n            <abs-grid\n              [columns]=\"trainingCols\"\n              [data]=\"additionalTrainingList$\"\n              (action)=\"handleGridAction($event)\"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"additionalDocuments\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Trained in Multiple Programs</h5>\n          <div class=\"col-12\">\n            <label class=\"block\"\n              >Did you complete training in more than one program in the\n              speciality for which you are applying?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"multiplePrograms\"\n                [value]=\"true\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.multiplePrograms\n                \"\n                inputId=\"multipleProgramsYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"multiplePrograms\"\n                [value]=\"false\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.multiplePrograms\n                \"\n                inputId=\"multipleProgramsNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12\">\n            <abs-file-upload-button\n              inputId=\"completionDocument\"\n              inputName=\"completionDocument\"\n              buttonText=\"Add Documentation of Trained in Multiple Programs\"\n              (fileUploaded)=\"\n                uploadFile(\n                  $event,\n                  medicalTraining.additionalDocuments.completionDocuments\n                )\n              \"\n            ></abs-file-upload-button>\n            <abs-grid\n              [columns]=\"documentCols\"\n              [data]=\"medicalTraining.additionalDocuments.completionDocuments\"\n              (action)=\"\n                handleGridAction(\n                  $event,\n                  medicalTraining.additionalDocuments.completionDocuments\n                )\n              \"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">ABS Approval Letter</h5>\n          <div class=\"col-12\">\n            <label class=\"block\"\n              >Did you have international rotations, flexible rotations and/or\n              did you receive credit for foreign medical education or ABS\n              approval letter for other reasons?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"recievedABSApprovalLetter\"\n                [value]=\"true\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.recievedABSApprovalLetter\n                \"\n                inputId=\"recievedABSApprovalLetterYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"recievedABSApprovalLetter\"\n                [value]=\"false\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.recievedABSApprovalLetter\n                \"\n                inputId=\"recievedABSApprovalLetterNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12\">\n            <abs-file-upload-button\n              inputId=\"approvalLetter\"\n              inputName=\"approvalLetter\"\n              buttonText=\"Add abs approval letter\"\n              (fileUploaded)=\"\n                uploadFile(\n                  $event,\n                  medicalTraining.additionalDocuments.approvalLetters\n                )\n              \"\n            ></abs-file-upload-button>\n            <abs-grid\n              [columns]=\"documentCols\"\n              [data]=\"medicalTraining.additionalDocuments.approvalLetters\"\n              (action)=\"\n                handleGridAction(\n                  $event,\n                  medicalTraining.additionalDocuments.approvalLetters\n                )\n              \"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n      </sl-tab-panel>\n    </sl-tab-group>\n  </div>\n  <div class=\"flex justify-content-end\" slot=\"footer\">\n    <p-button styleClass=\"p-button-link p-button-primary\" (click)=\"close()\"\n      >Cancel</p-button\n    >\n    <p-button\n      type=\"button\"\n      [style]=\"{ width: '337px' }\"\n      variant=\"primary\"\n      (click)=\"save()\"\n      >Save\n    </p-button>\n  </div>\n\n  <abs-modal\n    [open]=\"showTrainingAddEdit\"\n    (closeDialog)=\"cancelAddEditTraining($event)\"\n    [title]=\"trainingAddEditTitle\"\n  >\n    <abs-training-add-edit-modal\n      [training$]=\"tempTraining$\"\n      (cancelDialog)=\"cancelAddEditTraining($event)\"\n      (saveDialog)=\"saveTraining($event)\"\n    ></abs-training-add-edit-modal>\n  </abs-modal>\n</div>\n"
    },
    {
      "name": "UnauthorizedComponent",
      "id": "component-UnauthorizedComponent-b80ef4df9b725dfd5fb5d9dde413afca48fafdd04013a973254d8e68e4fef6deba76f9e2ae165f1985fbb3d21f9b167e06ceefb1cfef4513b8e0a043d5bd5d75",
      "file": "src/app/unauthorized/unauthorized.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-unauthorized",
      "styleUrls": ["./unauthorized.component.scss"],
      "styles": [],
      "templateUrl": ["./unauthorized.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onDashboard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-unauthorized',\n  templateUrl: './unauthorized.component.html',\n  styleUrls: ['./unauthorized.component.scss'],\n  imports: [CommonModule, ButtonModule],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class UnauthorizedComponent {\n  constructor(private _router: Router) {}\n\n  onDashboard() {\n    this._router.navigate(['/dashboard']);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "sl-card {\n  width: 100%;\n}\n\n.four04 {\n  font-size: 15rem;\n  font-weight: bold;\n  line-height: 190px;\n}\n\n.text {\n  border-bottom: 1px solid #ccc;\n}\n",
          "styleUrl": "./unauthorized.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<sl-card>\n  <div\n    class=\"flex flex-column justify-content-center align-items-center h-30rem\"\n  >\n    <div class=\"four04 mb-5\">401</div>\n    <div class=\"mb-5 pb-4 text\">\n      We're sorry, you are not authorized to access this page.\n    </div>\n    <p-button\n      [style]=\"{\n        width: '350px',\n        fontWeight: 'bold',\n        textTransform: 'uppercase'\n      }\"\n      (onClick)=\"onDashboard()\"\n    >\n      Return To Dashboard\n    </p-button>\n  </div>\n</sl-card>\n"
    },
    {
      "name": "UserInformationCardComponent",
      "id": "component-UserInformationCardComponent-c24dce2bb57d44adfc80a0ad904998fd41fe585161c122d06a8cabe58cfcc502831a3095b6504281f665e966372866cbd93a5cb66b07d59851cb1220fd389132",
      "file": "src/app/shared/components/user-information-card/user-information-card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-user-information-card",
      "styleUrls": ["./user-information-card.component.scss"],
      "styles": [],
      "templateUrl": ["./user-information-card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "currentStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "name": "isSurgeon",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean | undefined",
          "decorators": []
        },
        {
          "name": "userInformation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "localCurrentStatus",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "localIsSurgeon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  CUSTOM_ELEMENTS_SCHEMA,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'abs-user-information-card',\n  standalone: true,\n  imports: [CommonModule, TranslateModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  templateUrl: './user-information-card.component.html',\n  styleUrls: ['./user-information-card.component.scss'],\n})\nexport class UserInformationCardComponent implements OnInit, OnChanges {\n  @Input() userInformation: any;\n  @Input() currentStatus!: string;\n  @Input() isSurgeon: boolean | undefined;\n\n  localIsSurgeon!: boolean;\n  localCurrentStatus!: string;\n\n  ngOnInit(): void {\n    this.localIsSurgeon = this.isSurgeon || false;\n    this.localCurrentStatus = this.currentStatus || 'Not Certified';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['isSurgeon']) {\n      this.localIsSurgeon = changes['isSurgeon'].currentValue;\n    }\n    if (changes['currentStatus']) {\n      this.localCurrentStatus = changes['currentStatus'].currentValue;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".user-information-card {\n  background-color: var(--global-primary);\n  color: white;\n  padding: 2rem 2rem 4rem;\n  border-radius: 6px;\n  .status-container {\n    font-size: 1.25rem;\n    padding-bottom: 1.5rem;\n    margin-bottom: 3rem;\n    border-bottom: 1px solid #51657e;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    .status-indicators {\n      display: flex;\n      margin-right: 0.5rem;\n      .status {\n        width: 12px;\n        height: 12px;\n        background: #51657e;\n        border-radius: 50%;\n        margin-right: 3px;\n        &.active {\n          &.one {\n            background-color: var(--global-danger);\n          }\n          &.two {\n            background-color: var(--global-warning);\n          }\n          &.three {\n            background-color: var(--global-secondary);\n          }\n        }\n      }\n    }\n  }\n  .info-container {\n    display: flex;\n    column-gap: 5rem;\n    row-gap: 2rem;\n    flex-wrap: wrap;\n    .info {\n      display: flex;\n      line-height: 25px;\n      max-width: 18rem;\n      span,\n      .certified-title {\n        margin-right: 0.5rem;\n        font-weight: bold;\n      }\n      &.certified {\n        display: block;\n        .certified-title {\n          margin-bottom: 0.5rem;\n        }\n      }\n    }\n  }\n}\n\n.info-data {\n  line-height: 18px;\n}\n",
          "styleUrl": "./user-information-card.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit", "OnChanges"],
      "templateData": "<div class=\"user-information-card\">\n  <div class=\"status-container\">\n    <div class=\"status-indicators\">\n      <div class=\"status one active\"></div>\n      <div class=\"status two active\"></div>\n      <div class=\"status three active\"></div>\n    </div>\n    <span\n      [innerHTML]=\"\n        'DASHBOARD.STATUS'\n          | translate\n            : { status: localIsSurgeon ? localCurrentStatus : 'Trainee' }\n      \"\n    ></span>\n  </div>\n\n  <div class=\"info-container\" *ngIf=\"!localIsSurgeon; else certified\">\n    <div class=\"info\">\n      <span>Program Director:</span>\n      {{ userInformation?.programDirector ?? 'N/A' }}\n    </div>\n    <div class=\"info\">\n      <span>Program:</span>\n      {{ userInformation?.programName || 'N/A' }} <br />\n      {{\n        userInformation?.city && userInformation?.state\n          ? userInformation?.city + ', ' + userInformation?.state\n          : ''\n      }}\n    </div>\n    <div class=\"info\">\n      <span>Clinical Level:</span>\n      {{ userInformation?.clinicalLevel ?? 'N/A' }}\n    </div>\n  </div>\n\n  <ng-template #certified>\n    <div class=\"info-container\" *ngIf=\"userInformation; else loading\">\n      <div class=\"info certified\" *ngFor=\"let info of userInformation\">\n        <div class=\"certified-title\">\n          {{ info?.speciality }}\n        </div>\n        <div class=\"info-data\">\n          <span>Certificate Number:</span>\n          {{ info?.certificateId ? info?.certificateId : 'N/A' }}\n        </div>\n        <div class=\"info-data\" *ngIf=\"info.status && info.isClinicallyInactive\">\n          <span>Status:</span>\n          {{ info?.status }}\n        </div>\n        <div class=\"info-data\">\n          {{ info?.initialCertificationDate }}\n        </div>\n        <div class=\"info-data\">\n          {{ info?.endDateDisplay }}\n        </div>\n      </div>\n    </div>\n\n    <ng-template #loading>\n      <div\n        class=\"my-5 flex flex-column justify-content-center align-items-center\"\n      >\n        <sl-spinner\n          class=\"block\"\n          style=\"font-size: 3rem; --indicator-color: var(--global-warning)\"\n        ></sl-spinner>\n      </div>\n    </ng-template>\n  </ng-template>\n</div>\n"
    },
    {
      "name": "UserInformationSliderComponent",
      "id": "component-UserInformationSliderComponent-5fd50e7e4f77944d68d96ad43cbef8842d71ae3b536a069150bb6e3a6a7eccd939bb3cadbaf0f122bfa9c83a4a4da4f2e0b57265df14a156d9684ba295e20cf5",
      "file": "src/app/shared/components/user-information-slider/user-information-slider.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "abs-user-information-slider",
      "styleUrls": ["./user-information-slider.component.scss"],
      "styles": [],
      "templateUrl": ["./user-information-slider.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "examinationWeek",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "name": "sliderData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "IRosterReadOnlyModel[]",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "responsiveOptions",
          "defaultValue": "[\n    {\n      breakpoint: '1199px',\n      numVisible: 1,\n      numScroll: 1,\n    },\n    {\n      breakpoint: '991px',\n      numVisible: 2,\n      numScroll: 1,\n    },\n    {\n      breakpoint: '767px',\n      numVisible: 1,\n      numScroll: 1,\n    },\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "CarouselModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CarouselModule } from 'primeng/carousel';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IRosterReadOnlyModel } from 'src/app/api/models/scoring/roster-read-only.model';\n\n@Component({\n  selector: 'abs-user-information-slider',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TranslateModule,\n    CarouselModule,\n    RouterLink,\n    RouterLinkActive,\n  ],\n  templateUrl: './user-information-slider.component.html',\n  styleUrls: ['./user-information-slider.component.scss'],\n})\nexport class UserInformationSliderComponent {\n  @Input() sliderData: IRosterReadOnlyModel[] = [];\n  @Input() examinationWeek!: string;\n  responsiveOptions = [\n    {\n      breakpoint: '1199px',\n      numVisible: 1,\n      numScroll: 1,\n    },\n    {\n      breakpoint: '991px',\n      numVisible: 2,\n      numScroll: 1,\n    },\n    {\n      breakpoint: '767px',\n      numVisible: 1,\n      numScroll: 1,\n    },\n  ];\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".user-information-card {\n  background-color: var(--global-primary);\n  color: white;\n  padding: 2rem 2rem 4rem;\n  border-radius: 6px;\n  width: 100%;\n  position: relative;\n  .status-container {\n    font-size: 1.25rem;\n    padding-bottom: 0.5rem;\n    margin-bottom: 3rem;\n    border-bottom: 1px solid #51657e;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    .status-indicators {\n      display: flex;\n      margin-right: 0.5rem;\n      .status {\n        width: 12px;\n        height: 12px;\n        background: #51657e;\n        border-radius: 50%;\n        margin-right: 3px;\n        &.active {\n          &.one {\n            background-color: var(--global-danger);\n          }\n          &.two {\n            background-color: var(--global-warning);\n          }\n          &.three {\n            background-color: var(--global-secondary);\n          }\n        }\n      }\n    }\n  }\n  .info-container {\n    display: flex;\n    column-gap: 5rem;\n    row-gap: 2rem;\n    flex-wrap: wrap;\n    .info {\n      display: flex;\n      line-height: 25px;\n      max-width: 18rem;\n      span,\n      .certified-title {\n        margin-right: 0.5rem;\n        font-weight: bold;\n      }\n      &.certified {\n        display: block;\n        .certified-title {\n          margin-bottom: 0.5rem;\n        }\n      }\n    }\n  }\n}\n\n.info-data {\n  line-height: 18px;\n}\n\n.name {\n  font-weight: bold;\n}\n\n.link a {\n  cursor: pointer;\n  color: var(--global-warning);\n  display: inline-block;\n  font-weight: bold;\n  transition: 250ms ease-in-out;\n  border-bottom: 1px solid transparent;\n  &:hover {\n    border-bottom: 1px solid var(--global-warning);\n  }\n}\n\np-carousel.p-element {\n  width: 100%;\n}\n\n.item {\n  margin-left: 2rem;\n}\n",
          "styleUrl": "./user-information-slider.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"user-information-card\">\n  <div class=\"status-container\">\n    <strong>{{\n      'EXAMSCORING.DASHBOARD.CERTIFYING_TITLE'\n        | translate : { date: examinationWeek }\n    }}</strong>\n  </div>\n\n  <div class=\"info-container\">\n    <p-carousel\n      *ngIf=\"sliderData?.length; else noResults\"\n      [value]=\"sliderData\"\n      [numVisible]=\"4\"\n      [numScroll]=\"4\"\n      [circular]=\"true\"\n      [showNavigators]=\"sliderData.length > 4\"\n      [responsiveOptions]=\"responsiveOptions\"\n    >\n      <ng-template let-data pTemplate=\"item\">\n        <div class=\"item\">\n          <div class=\"name mb-2\">\n            {{ data?.firstName }} {{ data?.lastName }}\n          </div>\n          <div class=\"session mb-2\">Session {{ data?.sessionNumber }}</div>\n          <div class=\"times mb-2\">\n            {{ data?.startTime }} - {{ data?.endTime }}\n          </div>\n        </div>\n      </ng-template>\n    </p-carousel>\n    <ng-template #noResults>\n      <div class=\"no-results\">\n        {{ 'EXAMSCORING.DASHBOARD.CERTIFYING_NORESULTS' | translate }}\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
    }
  ],
  "modules": [
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-c11379ebbeb214662fa378718dcee85e735e6470735aa09f41cbfa6c6a38cab24e7ef5540000bcf247da74ad7063e882dfb9d96866f6a36ff59e3956a3aa907e",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FileNotFoundComponent } from './file-not-found/file-not-found.component';\nimport { AuthGuard, FeatureToggleGuard, WorkInProgressGuard } from './state';\nimport { UserClaims } from './side-navigation/user-status.enum';\nimport { UnauthorizedComponent } from './unauthorized/unauthorized.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'login',\n    loadComponent: () =>\n      \"import('./login/login.component').then((m) => m.LoginComponent)\",\n  },\n  {\n    path: 'dashboard',\n    loadComponent: () =>\n      \"import('./dashboard/dashboard.component').then(\\\n        (m) => m.DashboardComponent\\\n      )\",\n    data: { requiredFeatures: ['dashboardPage'] },\n    canActivate: [AuthGuard, FeatureToggleGuard],\n  },\n  {\n    path: 'cme-repository',\n    loadComponent: () =>\n      \"import('./cme-repository/cme-repository.component').then(\\\n        (m) => m.CmeRepositoryComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['cmeRepositoryPage'],\n    },\n  },\n  {\n    path: 'personal-profile',\n    loadComponent: () =>\n      \"import('./personal-profile/personal-profile.component').then(\\\n        (m) => m.PersonalProfileComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2'],\n      requiredFeatures: ['personalProfilePage'],\n    },\n    canDeactivate: [WorkInProgressGuard],\n  },\n  {\n    path: 'medical-training',\n    loadComponent: () =>\n      \"import('./medical-training/medical-training.component').then(\\\n        (m) => m.MedicalTrainingComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2'],\n      requiredFeatures: ['medicalTrainingPage'],\n    },\n    canDeactivate: [WorkInProgressGuard],\n  },\n  {\n    path: 'professional-standing',\n    loadComponent: () =>\n      \"import('./professional-standing/professional-standing.component').then(\\\n        (m) => m.ProfessionalStandingComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['professionalStandingPage'],\n    },\n    canDeactivate: [WorkInProgressGuard],\n  },\n  {\n    path: 'apply-and-resgister',\n    loadComponent: () =>\n      \"import('./exam-process/exam-process.component').then(\\\n        (m) => m.ExamProcessComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['applyRegisterPage'],\n    },\n  },\n  {\n    path: 'apply-and-resgister/registration-requirements',\n    loadComponent: () =>\n      \"import(\\\n        './registration-requirements/registration-requirements.component'\\\n      ).then((m) => m.RegistrationRequirementsComponent)\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['applyRegisterPage'],\n    },\n  },\n  {\n    path: 'apply-and-resgister/exam-registration',\n    loadComponent: () =>\n      \"import('./exam-registration/exam-registration.component').then(\\\n        (m) => m.ExamRegistrationComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['applyRegisterPage'],\n    },\n  },\n  {\n    path: 'examination-history',\n    loadComponent: () =>\n      \"import('./examination-history/examination-history.component').then(\\\n        (m) => m.ExaminationHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['examHistoryPage'],\n    },\n  },\n  {\n    path: 'continuous-certification',\n    loadComponent: () =>\n      \"import(\\\n        './continuous-certification/continuous-certification.component'\\\n      ).then((m) => m.ContinuousCertificationComponent)\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['continuousCertificationPage'],\n    },\n  },\n  {\n    path: 'payment-history',\n    loadComponent: () =>\n      \"import('./payment-history/payment-history.component').then(\\\n        (m) => m.PaymentHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['paymentHistoryPage'],\n    },\n  },\n  {\n    path: 'documents',\n    loadComponent: () =>\n      \"import('./documents/documents.component').then(\\\n        (m) => m.DocumentsComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2'],\n      requiredFeatures: ['documentsPage'],\n    },\n  },\n  {\n    path: 'committees',\n    loadComponent: () =>\n      \"import('./committees/committees.component').then(\\\n        (m) => m.CommitteesComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['1BDACD5A-2F92-4FC3-81D6-9B292E27702C'],\n      requiredFeatures: ['committeesPage'],\n    },\n  },\n  {\n    path: 'my-account',\n    loadComponent: () =>\n      \"import('./my-account/my-account.component').then(\\\n        (m) => m.MyAccountComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2'],\n      requiredFeatures: ['myAccountPage'],\n    },\n    canDeactivate: [WorkInProgressGuard],\n  },\n  {\n    path: 'gme-history',\n    loadComponent: () =>\n      \"import('./gme-history/gme-history.component').then(\\\n        (m) => m.GmeHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['8E508896-0442-443E-BFF5-29EDD11C7463'],\n      requiredFeatures: ['gmeHistoryPage'],\n    },\n  },\n  {\n    path: 'ce-scoring',\n    loadComponent: () =>\n      \"import('./ce-scoring/ce-scoring.component').then(\\\n        (m) => m.CeScoringAppComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['22A5DC1E-9C24-48FE-86CE-741C25A7E21D'],\n      requiredFeatures: ['examScoringPage'],\n    },\n  },\n  {\n    path: 'ce-scoring/examination-rosters',\n    loadComponent: () =>\n      \"import('./examination-rosters/examination-rosters.component').then(\\\n        (m) => m.ExaminationRostersComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['22A5DC1E-9C24-48FE-86CE-741C25A7E21D'],\n      requiredFeatures: ['examScoringPage'],\n    },\n  },\n  {\n    path: 'ce-scoring/oral-examinations',\n    loadComponent: () =>\n      \"import('./oral-examinations/oral-examinations.component').then(\\\n        (m) => m.OralExaminationsComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['22A5DC1E-9C24-48FE-86CE-741C25A7E21D'],\n      requiredFeatures: ['examScoringPage'],\n    },\n  },\n  {\n    path: 'ce-scoring/oral-examinations/exam/:examinationId',\n    loadComponent: () =>\n      \"import('./oral-examination/oral-examination.component').then(\\\n        (m) => m.OralExaminationsComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['22A5DC1E-9C24-48FE-86CE-741C25A7E21D'],\n      requiredFeatures: ['examScoringPage'],\n    },\n    canDeactivate: [WorkInProgressGuard],\n  },\n  {\n    path: 'ce-scoring/examination-scores',\n    loadComponent: () =>\n      \"import('./examination-scores/examination-scores.component').then(\\\n        (m) => m.ExaminationScoresComponent\\\n      )\",\n    canActivate: [AuthGuard, FeatureToggleGuard],\n    data: {\n      requiredClaims: ['22A5DC1E-9C24-48FE-86CE-741C25A7E21D'],\n      requiredFeatures: ['examScoringPage'],\n    },\n  },\n  {\n    path: 'unauthorized',\n    component: UnauthorizedComponent,\n  },\n  {\n    path: '**',\n    component: FileNotFoundComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "AbsGrid",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/abs-grid.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  setTextDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setYesNoDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      cellRenderer: 'yesNo',\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      cellRenderer: 'button',\n      cellRendererParams: {\n        fieldKey: headerName.toLowerCase(),\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonConditionalCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      cellRenderer: 'conditionalButton',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomPrimeButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    buttonClass?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      buttonClass: buttonClass,\n      cellRenderer: 'primeButton',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFileLinkCol(\n    headerName: string,\n    fieldName: string,\n    fileType?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      fileType: fileType,\n      cellRenderer: 'fileLink',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setExpandToggle(\n    headerName: string,\n    fieldName: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      cellRenderer: 'expandToggle',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFormattedDateCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'dateFormatter',\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomClass(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    className?: string,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'customClass',\n      cellClass: (fieldName: string) => {\n        return className ?? fieldName;\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomStyle(\n    headerName: string,\n    fieldName: string,\n    style?: object,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'customStyle',\n      style: () => {\n        return style ?? {};\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n}"
      },
      {
        "name": "ACGME_EXPERIENCE_GRID_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
      },
      {
        "name": "ACTION_CARDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/ce-scoring/user-action-cards.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.ROSTER_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.ROSTER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/examination-rosters',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.ROSTER_BTN',\n    icon: 'fa-solid fa-clipboard-user',\n  },\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.DELIVER_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.DELIVER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/oral-examinations',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.DELIVER_BTN',\n    icon: 'fa-solid fa-person-chalkboard',\n  },\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.SCORE_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.SCORE_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/examination-scores',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.SCORE_BTN',\n    icon: 'fa-solid fa-clipboard-user',\n  },\n]"
      },
      {
        "name": "ADD_EDIT_RECORD_FIELDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    label: 'Start Date',\n    subLabel: '',\n    value: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'startDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'End Date',\n    subLabel: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'endDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'Week(s)',\n    required: false,\n    name: 'weeks',\n    placeholder: '',\n    readonly: true,\n    type: 'text-readonly',\n    size: 'col-4',\n  },\n  {\n    label: 'Program Name',\n    subLabel: '',\n    required: true,\n    name: 'programName',\n    placeholder: 'Select a program...',\n    type: 'autocomplete',\n    size: 'col-6',\n    options: [],\n    filteredOptions: [],\n  },\n  {\n    label: 'Affiliated Organization',\n    subLabel: '',\n    required: false,\n    name: 'alternateInstitutionName',\n    placeholder: 'Enter affiliated organization...',\n    helpText:\n      'This is only required if you could not find your program in the available list',\n    type: 'text',\n    size: 'col-6',\n  },\n  {\n    label: 'Clinical Level',\n    subLabel: '',\n    required: true,\n    name: 'clinicalLevelId',\n    placeholder: 'Select clinical level...',\n    type: 'select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Clinical Activity',\n    subLabel: '',\n    required: true,\n    name: 'clinicalActivityId',\n    placeholder: 'Select clinical activity...',\n    type: 'grouped-select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Explain',\n    subLabel: '',\n    required: false,\n    name: 'other',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'Description (Non-Surgical Only)',\n    subLabel: '',\n    required: false,\n    name: 'nonSurgicalActivity',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'International Rotation',\n    subLabel: '',\n    value: '',\n    required: true,\n    name: 'isInternationalRotation',\n    placeholder: 'Make a selection...',\n    helpText:\n      'If you selected yes please upload the ABS Approval letter under the training section',\n    type: 'radio-group',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n]"
      },
      {
        "name": "APPLICATION_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/application/application.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IApplicationState>(\n  'application'\n)"
      },
      {
        "name": "APPOINTMENTS_PRIVILEGES_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/professional-standing/appointments-privileges-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appointment Type', 'appointmentType'),\n  AbsGrid.setTextDisplayCol('Organization Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('State', 'stateCode'),\n  AbsGrid.setTextDisplayCol('Institution', 'organizationName'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Official', 'authorizingOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
      },
      {
        "name": "AsAlert",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    alert: true,\n  },\n}"
      },
      {
        "name": "AUTH_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/auth/auth.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IAuthState>('auth')",
        "rawdescription": "The state token for the auth state",
        "description": "<p>The state token for the auth state</p>\n"
      },
      {
        "name": "BASIC_DOCUMENT_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/gridDefinitions/basic-document-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFileLinkCol('File Name', 'fileName', 'fileType'),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol(\n    'Download',\n    'download',\n    'fa-solid fa-download',\n    undefined,\n    undefined,\n    150\n  ),\n  AbsGrid.setCustomButtonCol(\n    'Delete',\n    'delete',\n    'fa-solid fa-trash',\n    undefined,\n    undefined,\n    125\n  ),\n]"
      },
      {
        "name": "CERTIFIED_ACTION_CARDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/user-action-cards.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.CCR_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CCR_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/continuous-certification',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CCR_BTN',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.REGISTER_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.REGISTER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/apply-and-resgister',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.REGISTER_BTN',\n    icon: 'fa-solid fa-list-check',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.CME_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CME_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/cme-repository',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CME_BTN',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n]"
      },
      {
        "name": "CERTIFIED_NAV_ITEMS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/side-navigation/nav-items.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    display: 'Dashboard',\n    displayKey: 'SIDENAV.DASHBOARD',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n    feature: 'dashboardPage',\n  },\n  {\n    display: 'Personal Profile',\n    displayKey: 'SIDENAV.PROFILE',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n    feature: 'personalProfilePage',\n  },\n  {\n    display: 'Medical Training',\n    displayKey: 'SIDENAV.MEDICAL_TRAINING',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n    feature: 'medicalTrainingPage',\n  },\n  {\n    display: 'Professional Standing',\n    displayKey: 'SIDENAV.PROFESSIONAL_STANDING',\n    action: 'professional-standing',\n    icon: 'fa-solid fa-stethoscope',\n    feature: 'professionalStandingPage',\n  },\n  {\n    display: 'CME Repository',\n    displayKey: 'SIDENAV.CME',\n    action: 'cme-repository',\n    icon: 'fa-regular fa-folder-open',\n    feature: 'cmeRepositoryPage',\n  },\n  {\n    display: 'Apply & Register',\n    displayKey: 'SIDENAV.APPLY_REGISTER.MAIN',\n    action: 'apply-and-resgister',\n    icon: 'fa-solid fa-list-check',\n    feature: 'applyRegisterPage',\n    children: [\n      {\n        display: 'Registration Requirements',\n        displayKey: 'SIDENAV.APPLY_REGISTER.REQUIREMENTS',\n        action: 'registration-requirements',\n      },\n      {\n        display: 'Exam Registration',\n        displayKey: 'SIDENAV.APPLY_REGISTER.REGISTRATION',\n        action: 'exam-registration',\n      },\n    ],\n  },\n  {\n    display: 'Examination History',\n    displayKey: 'SIDENAV.EXAM_HISTORY',\n    action: 'examination-history',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n    feature: 'examHistoryPage',\n  },\n  {\n    display: 'Continuous Certification',\n    displayKey: 'SIDENAV.CONTINUOUS_CERTIFICATION',\n    action: 'continuous-certification',\n    icon: 'fa-solid fa-user-graduate',\n    feature: 'continuousCertificationPage',\n  },\n  {\n    display: 'Payment History',\n    displayKey: 'SIDENAV.PAYMENT_HISTORY',\n    action: 'payment-history',\n    icon: 'fa-regular fa-credit-card',\n    feature: 'paymentHistoryPage',\n  },\n  {\n    display: 'Documents',\n    displayKey: 'SIDENAV.DOCUMENTS',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n    feature: 'documentsPage',\n  },\n]"
      },
      {
        "name": "CME_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n)"
      },
      {
        "name": "CONFLICT_RESOLUTION_GRID_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  // AbsGrid.setFormattedDateCol('From', 'from'),\n  // AbsGrid.setFormattedDateCol('To', 'to'),\n  // AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  // AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  // AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  // AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  // AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'descriptionNonSurgicalOnly'\n  // ),\n  // AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n  // AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  // AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n\n  AbsGrid.setFormattedDateCol('From', 'startDate'),\n  AbsGrid.setFormattedDateCol('To', 'endDate'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'alternateInstitutionName'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity'),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'nonSurgicalActivity'\n  // ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  // AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
      },
      {
        "name": "CONTCERT_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IContinuousCertication>(\n  'continuous_certification'\n)"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    title: \"Action Card's Title\",\n    description: 'This is some cool description of what this card does',\n    actionDisplay: 'Click here!',\n    icon: 'fa-solid fa-id-card-clip',\n    actionType: 'dialog',\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    panelId: 1,\n    startExpanded: true,\n    panelTitle: 'Panel Title',\n    panelContent: 'Panel Content<br><br>More content.',\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 7,\n    currentIncrement: 1,\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    errors: {\n      name: ['Name is required'],\n      email: ['Email is invalid'],\n    },\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    data: GRID_DEFAULT_DATA,\n    columns: GRID_DEFAULT_COLS,\n    title: 'Grid Title',\n    noResultsMessage: 'There are no results to display.',\n    showFilter: false,\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    title: \"Action Card's Title\",\n    content: 'This is some cool description of what this card does',\n    image:\n      'https://images.pexels.com/photos/13548722/pexels-photo-13548722.jpeg',\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/legend/legend.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    legendItems: [\n      {\n        text: 'Not Submitted',\n        color: '#7f7f7f',\n      },\n      {\n        text: 'Current Session',\n        color: '#dbad6a',\n      },\n      {\n        text: 'Submitted',\n        color: '#1c827d',\n      },\n    ],\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    profilePicture: 'https://cdn-icons-png.flaticon.com/512/3135/3135715.png',\n  },\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'top',\n  },\n}"
      },
      {
        "name": "DEFAULT_DROPDOWN_OPTIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/defaults/grid-default-dropdown.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    label: 'Software Engineer',\n    value: 'Software Engineer',\n  },\n  {\n    label: 'Software Architect',\n    value: 'Software Architect',\n  },\n  {\n    label: 'CEO',\n    value: 'CEO',\n  },\n  {\n    label: 'Green Horn',\n    value: 'Green Horn',\n  },\n  {\n    label: 'Senior Green Horn',\n    value: 'Senior Green Horn',\n  },\n]"
      },
      {
        "name": "DEFAULT_PROVIDERS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/default-providers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  provideEnvironmentNgxMask(maskConfig),\n  importProvidersFrom(\n    BrowserModule,\n    AppRoutingModule,\n    TranslateModule.forRoot({\n      defaultLanguage: 'en-US',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient],\n      },\n    }),\n    NgxsModule.forRoot(surgeonPortalState, {\n      developmentMode: true,\n    }),\n    NgxsStoragePluginModule.forRoot({\n      storage: StorageOption.SessionStorage,\n      key: [AUTH_STATE_TOKEN, USER_PROFILE_STATE_TOKEN, PICKLISTS_STATE_TOKEN],\n    }),\n    NgxsLoggerPluginModule.forRoot(),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsFormPluginModule.forRoot()\n  ),\n  provideHttpClient(withInterceptorsFromDi()),\n  provideAnimations(),\n]"
      },
      {
        "name": "DefaultWithTranslationKeys",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    titleKey: 'DASHBOARD.ACTION_CARDS.CCR_TITLE',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CCR_SUBTITLE',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CCR_BTN',\n    icon: 'fa-solid fa-id-card-clip',\n    actionType: 'dialog',\n  },\n}"
      },
      {
        "name": "DIRECTORY_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/exam-process/directory-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Exam Title', 'examName'),\n  AbsGrid.setFormattedDateCol('Registry Open', 'regOpenDate'),\n  AbsGrid.setFormattedDateCol('Registry Close', 'regEndDate'),\n  AbsGrid.setFormattedDateCol('Exam Start', 'examStartDate'),\n  AbsGrid.setFormattedDateCol('Exam End', 'examEndDate'),\n]"
      },
      {
        "name": "Disabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    disabled: true,\n    actionDisplay: 'Disabled!',\n  },\n}"
      },
      {
        "name": "DislayBottom",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'bottom',\n  },\n}"
      },
      {
        "name": "DislayLeft",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'left',\n  },\n}"
      },
      {
        "name": "DislayRight",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'right',\n  },\n}"
      },
      {
        "name": "DOCUMENTS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/documents/documents-col.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Document Type', 'documentType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadedDateUtc', true),\n  AbsGrid.setTextDisplayCol('Uploaded By', 'uploadedBy', true),\n  AbsGrid.setCustomButtonCol('Download', 'id', 'fa-solid fa-download'),\n  // AbsGrid.setCustomButtonCol('Delete', 'id', 'fa-solid fa-trash'),\n]"
      },
      {
        "name": "DOCUMENTS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/medical-training/documents-col.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Certificate Type', 'certificateType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDateUtc', true),\n  AbsGrid.setCustomButtonCol('Download', 'documentId', 'fa-solid fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'documentId', 'fa-solid fa-trash'),\n]"
      },
      {
        "name": "DOCUMENTS_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/documents/documents.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IDocuments>('documents')"
      },
      {
        "name": "DrowdownFilter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    showFilter: true,\n    filterOn: 'title',\n    filterType: 'dropdown',\n    filterOptions: DEFAULT_DROPDOWN_OPTIONS,\n    noFilteredResultsMessage: 'There are no results to display.',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.development.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "EXAM_HISTORY_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/examination-history/exam-history-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomClass('Exam Name', 'examinationName', true, 'font-bold'),\n  AbsGrid.setFormattedDateCol('Date', 'examinationDate', true),\n  AbsGrid.setTextDisplayCol('Status', 'status'),\n  AbsGrid.setTextDisplayCol('Results', 'result'),\n  AbsGrid.setCustomButtonCol('Download', 'documentId', 'fa fa-download'),\n]"
      },
      {
        "name": "EXAM_HISTORY_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/exam-history/exam-history.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IExamHistory>(\n  'examHistory'\n)"
      },
      {
        "name": "EXAM_PROCESS_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/exam-process/exam-process.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IExamProcess>(\n  'examProcess'\n)"
      },
      {
        "name": "EXAM_SCORING_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/exam-scoring/exam-scoring.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IExamScoring>(\n  'examScoring'\n)"
      },
      {
        "name": "EXAMINATION_SCORES_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/examination-scores/examination-scores-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Day', 'day', true),\n  AbsGrid.setTextDisplayCol('Session', 'session', true),\n  AbsGrid.setTextDisplayCol('Roster', 'roster', true),\n  AbsGrid.setTextDisplayCol('Candidate Name', 'displayName', true),\n  // AbsGrid.setTextDisplayCol('Score', 'score', true),\n  // AbsGrid.setTextDisplayCol('Critical Fail Y/N', 'criticalFail', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
      },
      {
        "name": "EXAMINER_NAV_ITEMS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/side-navigation/nav-items.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    display: 'CE Examiner Home',\n    displayKey: 'SIDENAV.EXAM_SCORING.MAIN',\n    action: 'ce-scoring',\n    icon: 'fa-solid fa-clock',\n    feature: 'examScoringPage',\n    children: [\n      {\n        display: 'Exam Case Rosters',\n        displayKey: 'SIDENAV.EXAM_SCORING.CASE_ROSTER',\n        action: 'examination-rosters',\n      },\n      {\n        display: 'Start CE Exams',\n        displayKey: 'SIDENAV.EXAM_SCORING.EXAMINATION',\n        action: 'oral-examinations',\n      },\n      {\n        display: 'Daily Exam Scores',\n        displayKey: 'SIDENAV.EXAM_SCORING.SCORES',\n        action: 'examination-scores',\n      },\n    ],\n  },\n]"
      },
      {
        "name": "ExpandRow",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    expandTemplate: 'expandedRow',\n    columns: GRID_DEFAULT_COLS_EXPAND,\n  },\n}"
      },
      {
        "name": "FELLOWSHIP_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/medical-training/fellowship-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol('Other', 'programOther', true),\n  AbsGrid.setTextDisplayCol('Completion Year', 'completionYear', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash-can'),\n]"
      },
      {
        "name": "GME_SUMMARY_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/gme-history/gme-summary-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setFormattedDateCol('From', 'minStartDate'),\n  AbsGrid.setFormattedDateCol('To', 'maxStartDate'),\n  AbsGrid.setTextDisplayCol('Program', 'programName'),\n  AbsGrid.setTextDisplayCol('Clinical', 'clinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Non-Clinical', 'nonClinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Essentials', 'essentialsWeeks'),\n]"
      },
      {
        "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IGQAdditionalTraining>('gqAdditionalTraining')"
      },
      {
        "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n]"
      },
      {
        "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation')"
      },
      {
        "name": "GRID_DEFAULT_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Name', 'name', true),\n  AbsGrid.setTextDisplayCol('Title', 'title'),\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n]"
      },
      {
        "name": "GRID_DEFAULT_COLS_EXPAND",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Name', 'name', true),\n  AbsGrid.setTextDisplayCol('Title', 'title'),\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n  AbsGrid.setExpandToggle('Expand', 'expanded'),\n]"
      },
      {
        "name": "GRID_DEFAULT_DATA",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/defaults/grid-dafault-data.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    name: 'Daniel Sarria',\n    title: 'Software Engineer',\n    date: new Date('12-25-2024'),\n    status: 'Requested',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Joe Mayberry',\n    title: 'Software Engineer',\n    date: new Date('04-01-2024'),\n    status: 'Approved',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Alan Bryant',\n    title: 'Software Architect',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Tim Yocum',\n    title: 'CEO',\n    date: new Date('01-01-2022'),\n    status: 'Approved',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Test User',\n    title: 'Green Horn',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Test User 2',\n    title: 'Senior Green Horn',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n]"
      },
      {
        "name": "HideCloseButton",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    hideClose: true,\n  },\n}"
      },
      {
        "name": "HOSPOITAL_APPOINTMENTS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appt Type', 'apptType'),\n  AbsGrid.setTextDisplayCol('Orginiztion Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('City', 'city'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Auth Official', 'authOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n]"
      },
      {
        "name": "ITEMIZED_CME_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/cme-repository/itemized-cme-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date Earned', 'date', true),\n  AbsGrid.setFormattedDateCol('Expiration', 'creditExpDate', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Category 1', 'credits', true),\n  AbsGrid.setTextDisplayCol('SA Credits', 'creditsSA', true),\n  AbsGrid.setTextDisplayCol('CME Direct', 'cmeDirect'),\n]"
      },
      {
        "name": "ITEMIZED_GME_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/gme-history/itemized-gme-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol(\n    'Affiliated Institute',\n    'alternateInstitutionName',\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel', true),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity', true),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'nonSurgicalActivity'\n  // ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
      },
      {
        "name": "LICENSES_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/professional-standing/licenses-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('State', 'issuingState'),\n  AbsGrid.setTextDisplayCol('Number', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expire Date', 'expireDate'),\n  AbsGrid.setTextDisplayCol('Reporting Org.', 'reportingOrganization'),\n  AbsGrid.setCustomButtonCol('Edit', 'showEdit', 'fa-solid fa-pen-to-square'),\n]"
      },
      {
        "name": "maskConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/default-providers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Partial<IConfig>",
        "defaultValue": "{\n  validation: false,\n}"
      },
      {
        "name": "MEDICAL_LICENSE_GRID_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('License State', 'licenseState'),\n  AbsGrid.setTextDisplayCol('License #', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('License Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'expirationDate'),\n  AbsGrid.setTextDisplayCol('Verifying Organization', 'varifyingOrganization'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
      },
      {
        "name": "MEDICAL_TRAINING_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/gridDefinitions/medical-training-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Type of Training', 'trainingType', true),\n  AbsGrid.setTextDisplayCol('State', 'state', true),\n  AbsGrid.setTextDisplayCol('City', 'city', true),\n  AbsGrid.setTextDisplayCol('Institution', 'institutionName', true),\n  AbsGrid.setTextDisplayCol('Other', 'other', true),\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
      },
      {
        "name": "MEDICALSTATE_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/medical-training/medical-training.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IMedicalTraining>(\n  'medical_training'\n)"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ActionCardComponent>",
        "defaultValue": "{\n  title: 'Components/Action Card',\n  tags: ['autodocs'],\n  component: ActionCardComponent,\n  render: (args: ActionCardComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [ActionCardComponent],\n      declarations: [],\n    }),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<CollapsePanelComponentArgs>",
        "defaultValue": "{\n  title: 'YTG/Collapse-Panel',\n  tags: ['autodocs'],\n  component: CollapsePanelComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (CollapsePanelComponent) => `${CollapsePanelComponent}`\n    ),\n  ],\n  render: (args: CollapsePanelComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<abs-collapse-panel [panelId]=\"panelId\" [startExpanded]=\"startExpanded\">\n      <h5 class=\"mt-0 mb-2\" panel-header>${args.panelTitle}</h5>\n      <div [innerHTML]=\"'${args.panelContent}'\"></div>\n    </abs-collapse-panel>`,\n    props: {\n      ...args,\n    },\n  }),\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ExamTimerComponent>",
        "defaultValue": "{\n  title: 'Components/Exam-Timer',\n  component: ExamTimerComponent,\n  tags: ['autodocs'],\n  render: (args: ExamTimerComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<FormErrorsComponent>",
        "defaultValue": "{\n  title: 'YTG/Form Errors',\n  tags: ['autodocs'],\n  component: FormErrorsComponent,\n  render: (args: FormErrorsComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [FormErrorsComponent],\n      declarations: [],\n    }),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<GridComponent>",
        "defaultValue": "{\n  title: 'YTG/Grid',\n  tags: ['autodocs'],\n  component: GridComponent,\n  render: (args: GridComponent) => ({\n    template: `<abs-grid [data]=\"data\" [columns]=\"columns\" [title]=\"title\" [noResultsMessage]=\"noResultsMessage\" [showFilter]=\"showFilter\" [filterOn]=\"filterOn\" [filterType]=\"filterType\" [filterOptions]=\"filterOptions\" [noFilteredResultsMessage]=\"noFilteredResultsMessage\" [pagination]=\"pagination\" [currentPage]=\"currentPage\" [itemsPerPage]=\"itemsPerPage\" [expandTemplate]=\"expandedRow\">\n      <ng-template #expandedRow let-r>{{r.expandedRowContent}}</ng-template>\n    </abs-grid>`,\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [GridComponent],\n      declarations: [],\n    }),\n    componentWrapperDecorator((GridComponent) => `${GridComponent}`),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<HighlightCardComponent>",
        "defaultValue": "{\n  title: 'Components/Highlight Card',\n  tags: ['autodocs'],\n  component: HighlightCardComponent,\n  render: (args: HighlightCardComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [HighlightCardComponent],\n      declarations: [],\n    }),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/legend/legend.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<LegendComponent>",
        "defaultValue": "{\n  title: 'Components/Legend',\n  tags: ['autodocs'],\n  component: LegendComponent,\n  render: (args: LegendComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    moduleMetadata({\n      imports: [LegendComponent],\n      declarations: [],\n    }),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ModalComponentArgs>",
        "defaultValue": "{\n  title: 'Components/Modal',\n  tags: ['autodocs'],\n  component: ModalComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (ModalComponent) => `${ModalComponent}`\n    ),\n  ],\n  render: (args: ModalComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<p>Toggle the value of \"open\" in the inputs below to display the modal.</p>\n    <abs-modal [open]=\"open\" [title]=\"title\" [status]=\"status\" [modalName]=\"modalName\" [preventOverlayClose]=\"preventOverlayClose\" [hideClose]=\"hideClose\" [width]=\"width\">\n      <div [innerHTML]=\"'${args.modalContent}'\"></div>\n    </abs-modal>`,\n    props: {\n      ...args,\n    },\n  }),\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ProfileHeaderComponent>",
        "defaultValue": "{\n  title: 'YTG/Profile Header',\n  tags: ['autodocs'],\n  component: ProfileHeaderComponent,\n  render: (args: ProfileHeaderComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [ProfileHeaderComponent],\n      declarations: [],\n    }),\n  ],\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<TooltipComponent>",
        "defaultValue": "{\n  title: 'YTG/Tooltip',\n  component: TooltipComponent,\n  tags: ['autodocs'],\n  render: (args: TooltipComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
      },
      {
        "name": "ORAL_EXAMINATION_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/oral-examinations/oral-examination-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Examinee', 'fullName'),\n  AbsGrid.setTextDisplayCol('Scheduled Time', 'examTime'),\n  AbsGrid.setCustomPrimeButtonCol(\n    'Skip Examination',\n    'skipExam',\n    undefined,\n    'p-button-secondary',\n    undefined,\n    undefined,\n    337\n  ),\n  AbsGrid.setCustomPrimeButtonCol(\n    'Start Examination',\n    'startExam',\n    undefined,\n    'p-button-warning',\n    undefined,\n    undefined,\n    337\n  ),\n]"
      },
      {
        "name": "OTHER_CERTIFICATIONS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/medical-training/other-certificates-add-edit-modal/other-certifications-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Certificate Type', 'certificateTypeName'),\n  AbsGrid.setTextDisplayCol('Certificate Number', 'certificateNumber'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
      },
      {
        "name": "OutcomeRegistriesFormFields",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    label: 'Surgeeon Specific Registry (case log)',\n    subLabel: '(ACS; with 30-day complications reporting)',\n    value: '',\n    required: false,\n    name: 'surgeonSpecificRegistry',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Abdominal Core Health Quality Collaborative',\n    subLabel: '(ACHQC)',\n    value: '',\n    required: false,\n    name: 'registeredWithACHQC',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Collaborative Endocrine Surgery Quality Improvement Program',\n    subLabel: '(CESQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithCESQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label:\n      'Metabolic and Bariatric Surgery Accreditation and Quality Improvement Program',\n    subLabel: '(MBSAQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithMBSAQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Burn Repository',\n    subLabel: '(ABA)',\n    value: '',\n    required: false,\n    name: 'registeredWithABA',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Mastery of Breast Surgery',\n    subLabel: '(ASBS)',\n    value: '',\n    required: false,\n    name: 'registeredWithASBS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Statewide Collaboratives',\n    subLabel: '(MSQC, SCOAP, etc.)',\n    value: '',\n    required: false,\n    name: 'registeredWithStatewideCollaboratives',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Multi-specialty Portfolio Program',\n    subLabel: '(ABMS)',\n    value: '',\n    required: false,\n    name: 'registeredWithABMS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Cancer Data Base',\n    subLabel: '(NCDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'CoC Rapid Quality Reporting System',\n    subLabel: '(RQRS)',\n    value: '',\n    required: false,\n    name: 'registeredWithRQRS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Surgical Quality Improvement Program',\n    subLabel: '(ACS NSQIP or VASQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithNSQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'National Trauma Data Bank',\n    subLabel: '(NTDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNTDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Society of Thoracic Surgeons National Database',\n    subLabel: '(STS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSTS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Trauma Quality Improvement Program',\n    subLabel: '(ACS TQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithTQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Organ Procurement and Transplantation Network',\n    subLabel: '(UNOS)',\n    value: '',\n    required: false,\n    name: 'registeredWithUNOS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Peripheral Vascular Intervention Registry',\n    subLabel: '(NCDR)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDR',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Vascular Quality Initiative',\n    subLabel: '(SVS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSVS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Extracorporeal Life Support Organization Registry',\n    subLabel: '(ELSO)',\n    value: '',\n    required: false,\n    name: 'registeredWithELSO',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Describe',\n    subLabel:\n      'NOTE: if you responded “No” to all of the choices above, you MUST describe your Part 4 activity in the space provided below.',\n    value: '',\n    required: false,\n    name: 'registryComments',\n    type: 'textarea',\n    size: 'col-12',\n  },\n]"
      },
      {
        "name": "Pagination",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    pagination: true,\n    currentPage: 1,\n    itemsPerPage: 3,\n  },\n}"
      },
      {
        "name": "PAY_FEE_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Payment Date', 'paymentDate'),\n  AbsGrid.setTextDisplayCol('Payment Amount', 'paymentAmount'),\n  AbsGrid.setTextDisplayCol('Payment Method', 'balanceRemaining'),\n  AbsGrid.setCustomButtonCol(\n    'Download Receipt',\n    'download',\n    'fa-solid fa-download'\n  ),\n]"
      },
      {
        "name": "PAYMENT_HISTORY_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/payment-history/payment-histroy-grid.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomStyle('Invoice #', 'invoiceNumber', {\n    color: '#1C827D',\n    fontWeight: 'bold',\n  }),\n  AbsGrid.setTextDisplayCol('Fee Code', 'feeCode'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Total Billed', 'totalBilled'),\n  AbsGrid.setTextDisplayCol('Paid', 'paid'),\n  AbsGrid.setCellCustomStyle('Balance', 'balance', {\n    color: '#1F3758',\n    fontWeight: 'bold',\n  }),\n]"
      },
      {
        "name": "PICKLISTS_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/picklists/picklists.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IPicklist>('picklists')"
      },
      {
        "name": "PreventOverlayClose",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    preventOverlayClose: true,\n  },\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
      },
      {
        "name": "PROFESSIONAL_STANDING_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/professional-standing/professional-standing.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IProfessionalStanding>('professionalStanding')"
      },
      {
        "name": "REFERENCE_FORMS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Reference Form', 'referenceFormId'),\n  AbsGrid.setTextDisplayCol('Affiliated Institution', 'affiliatedInstitution'),\n  AbsGrid.setTextDisplayCol(\n    'Authenticating Official',\n    'authenticatingOfficial'\n  ),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setCellCustomClass('Status', 'status'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa-regular fa-eye'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
      },
      {
        "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date Earned', 'date', true),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'creditExpDate', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'), // potentially change to activityName\n  AbsGrid.setTextDisplayCol('Category 1', 'credits', true),\n  AbsGrid.setTextDisplayCol('SA Credits', 'creditsSA', true),\n]"
      },
      {
        "name": "ShortTimer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 0.25,\n    currentIncrement: 1,\n  },\n}"
      },
      {
        "name": "SPECIAL_ACCOMMODATIONS_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
      },
      {
        "name": "StartClosed",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    panelId: 3,\n    startExpanded: false,\n  },\n}"
      },
      {
        "name": "StartInMiddle",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 7,\n    currentIncrement: 3,\n  },\n}"
      },
      {
        "name": "StartOpen",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    panelId: 2,\n  },\n}"
      },
      {
        "name": "StatusAlert",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'alert',\n  },\n}"
      },
      {
        "name": "StatusComplete",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'completed',\n  },\n}"
      },
      {
        "name": "StatusInProgress",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'in-progress',\n  },\n}"
      },
      {
        "name": "StatusWithDate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...WithStatus.args,\n    recievedOn: new Date(),\n  },\n}"
      },
      {
        "name": "SUMMARY_CME_COLS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/cme-repository/summary-cme-cols.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Credit Type', 'rowLabel'),\n  AbsGrid.setTextDisplayCol('Category 1', 'credits'),\n  AbsGrid.setTextDisplayCol('Self-Assessment', 'saCredits'),\n]"
      },
      {
        "name": "surgeonPortalState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/surgeon-portal.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  ApplicationState,\n  AuthState,\n  MyAccountState,\n  UserProfileState,\n  PicklistsState,\n  DashboardState,\n  ContinuousCertificationState,\n  GQAdditionalTrainingState,\n  MedicalTrainingState,\n  GraduateMedicalEducationState,\n  DocumentsState,\n  ExamProcessState,\n  ProfessionalStandingState,\n  ExamScoringState,\n  ContinuingMedicalEducationState,\n  ExamScoringState,\n  ExamHistoryState,\n]"
      },
      {
        "name": "TextFilter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    showFilter: true,\n    filterOn: 'name',\n    filterType: 'text',\n    noFilteredResultsMessage: 'There are no results to display.',\n  },\n}"
      },
      {
        "name": "TRAINEE_ACTION_CARDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/user-action-cards.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.GME_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.GME_SUBTITLE',\n    actionType: 'component',\n    actionAction: '/gme-history',\n    action: {\n      type: 'component',\n      action: '/gme-history',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.GME_BTN',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.APPLY_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.APPLY_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.APPLY_BTN',\n    icon: 'fa-solid fa-user-graduate',\n    disabled: true,\n  },\n]"
      },
      {
        "name": "TRAINEE_NAV_ITEMS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/side-navigation/nav-items.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    display: 'Dashboard',\n    displayKey: 'SIDENAV.DASHBOARD',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n    feature: 'dashboardPage',\n  },\n  {\n    display: 'Personal Profile',\n    displayKey: 'SIDENAV.PROFILE',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n    feature: 'personalProfilePage',\n  },\n  {\n    display: 'Medical Training',\n    displayKey: 'SIDENAV.MEDICAL_TRAINING',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n    feature: 'medicalTrainingPage',\n  },\n  {\n    display: 'GME',\n    displayKey: 'SIDENAV.GME',\n    action: 'gme-history',\n    icon: 'fa-regular fa-folder-open',\n    feature: 'gmeHistoryPage',\n  },\n  {\n    display: 'Documents',\n    displayKey: 'SIDENAV.DOCUMENTS',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n    feature: 'documentsPage',\n  },\n]"
      },
      {
        "name": "USER_ACCOUNT_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/dashboard/dashboard.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IDashboardState>('dashboard')"
      },
      {
        "name": "USER_ACCOUNT_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/my-account/my-account.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IUserCredential>('userAccount')"
      },
      {
        "name": "USER_PROFILE_STATE_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/user-profile/user-profile.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new StateToken<IUserProfile>(\n  'userProfile'\n)"
      },
      {
        "name": "WidthLarge",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    width: 90,\n  },\n}"
      },
      {
        "name": "WIdthSmall",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    width: 40,\n  },\n}"
      },
      {
        "name": "WithAction",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    actionText: 'Click here!',\n    actionType: 'action',\n    actionAction: 'action',\n  },\n}"
      },
      {
        "name": "WithAllOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    ...StatusWithDate.args,\n    ...WithButtonCTA.args,\n  },\n}"
      },
      {
        "name": "WithButtonCTA",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    actionStyle: 'button',\n  },\n}"
      },
      {
        "name": "WithStatus",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'completed',\n    displayStatusText: true,\n  },\n}"
      },
      {
        "name": "WithStatusWithoutText",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    ...WithStatus.args,\n    displayStatusText: false,\n  },\n}"
      }
    ],
    "functions": [
      {
        "name": "createTranslateLoader",
        "file": "src/stories/default-providers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "gte",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "val",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "val",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "MakeProvider",
        "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "MakeProvider",
        "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "MakeProvider",
        "file": "src/app/shared/components/base-input/input-select.component.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "type",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "matchFields",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "field1",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "field2",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "field1",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "field2",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "validateMaxDuration",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "maxDuration",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "maxDuration",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "validateMinDuration",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "minDuration",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "minDuration",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "validatePassword",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [],
        "returnType": "ValidatorFn"
      },
      {
        "name": "validateStartAndEndDates",
        "file": "src/app/shared/validators/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "startDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "endDate",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ActionCardComponent>",
        "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<CollapsePanelComponentArgs>",
        "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ExamTimerComponent>",
        "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<FormErrorsComponent>",
        "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<GridComponent>",
        "file": "src/app/shared/components/grid/grid.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<HighlightCardComponent>",
        "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<LegendComponent>",
        "file": "src/app/shared/components/legend/legend.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ModalComponentArgs>",
        "file": "src/app/shared/components/modal/modal.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ProfileHeaderComponent>",
        "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<TooltipComponent>",
        "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 180
      }
    ],
    "enumerations": [
      {
        "name": "AbsFilterType",
        "childs": [
          {
            "name": "Text",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "text"
          },
          {
            "name": "Dropdown",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "dropdown"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/shared/components/grid/abs-grid.enum.ts"
      },
      {
        "name": "AbsGridCellRendererType",
        "childs": [
          {
            "name": "Button",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "button"
          },
          {
            "name": "ConditionalButton",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "conditionalButton"
          },
          {
            "name": "PrimeButton",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "primeButton"
          },
          {
            "name": "YesNo",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "yesNo"
          },
          {
            "name": "DateFormatter",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "dateFormatter"
          },
          {
            "name": "CustomClass",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "customClass"
          },
          {
            "name": "CustomStyle",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "customStyle"
          },
          {
            "name": "ExpandToggle",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "expandToggle"
          },
          {
            "name": "FileLink",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "fileLink"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/shared/components/grid/abs-grid.enum.ts"
      },
      {
        "name": "Action",
        "childs": [
          {
            "name": "dialog",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "dialog"
          },
          {
            "name": "component",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "component"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/shared/components/action-card/action.enum.ts"
      },
      {
        "name": "Status",
        "childs": [
          {
            "name": "incomplete",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Incomplete"
          },
          {
            "name": "complete",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Completed"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/examination-scores/examination-score-modal/status.enum.ts"
      },
      {
        "name": "Status",
        "childs": [
          {
            "name": "Completed",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "completed"
          },
          {
            "name": "InProgress",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "in-progress"
          },
          {
            "name": "Contingent",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "contingent"
          },
          {
            "name": "Alert",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "alert"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/shared/components/action-card/status.enum.ts"
      },
      {
        "name": "UserClaims",
        "childs": [
          {
            "name": "user",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2"
          },
          {
            "name": "trainee",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "8E508896-0442-443E-BFF5-29EDD11C7463"
          },
          {
            "name": "surgeon",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "1BDACD5A-2F92-4FC3-81D6-9B292E27702C"
          },
          {
            "name": "examiner",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "22A5DC1E-9C24-48FE-86CE-741C25A7E21D"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/side-navigation/user-status.enum.ts"
      }
    ],
    "groupedVariables": {
      "src/app/shared/components/grid/abs-grid.ts": [
        {
          "name": "AbsGrid",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/abs-grid.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  setTextDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setYesNoDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      cellRenderer: 'yesNo',\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      cellRenderer: 'button',\n      cellRendererParams: {\n        fieldKey: headerName.toLowerCase(),\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonConditionalCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      cellRenderer: 'conditionalButton',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomPrimeButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    buttonClass?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      icon: icon,\n      buttonClass: buttonClass,\n      cellRenderer: 'primeButton',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFileLinkCol(\n    headerName: string,\n    fieldName: string,\n    fileType?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      fileType: fileType,\n      cellRenderer: 'fileLink',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setExpandToggle(\n    headerName: string,\n    fieldName: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      fieldName,\n      cellRenderer: 'expandToggle',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFormattedDateCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'dateFormatter',\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomClass(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    className?: string,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'customClass',\n      cellClass: (fieldName: string) => {\n        return className ?? fieldName;\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomStyle(\n    headerName: string,\n    fieldName: string,\n    style?: object,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      fieldName,\n      cellRenderer: 'customStyle',\n      style: () => {\n        return style ?? {};\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n}"
        }
      ],
      "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts": [
        {
          "name": "ACGME_EXPERIENCE_GRID_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
        }
      ],
      "src/app/ce-scoring/user-action-cards.ts": [
        {
          "name": "ACTION_CARDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/ce-scoring/user-action-cards.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.ROSTER_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.ROSTER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/examination-rosters',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.ROSTER_BTN',\n    icon: 'fa-solid fa-clipboard-user',\n  },\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.DELIVER_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.DELIVER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/oral-examinations',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.DELIVER_BTN',\n    icon: 'fa-solid fa-person-chalkboard',\n  },\n  {\n    title: '',\n    titleKey: 'EXAMSCORING.DASHBOARD.SCORE_TITLE',\n    description: '',\n    descriptionKey: 'EXAMSCORING.DASHBOARD.SCORE_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/ce-scoring/examination-scores',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'EXAMSCORING.DASHBOARD.SCORE_BTN',\n    icon: 'fa-solid fa-clipboard-user',\n  },\n]"
        }
      ],
      "src/app/gme-history/add-record-modal/add-record-form-fields.ts": [
        {
          "name": "ADD_EDIT_RECORD_FIELDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    label: 'Start Date',\n    subLabel: '',\n    value: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'startDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'End Date',\n    subLabel: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'endDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'Week(s)',\n    required: false,\n    name: 'weeks',\n    placeholder: '',\n    readonly: true,\n    type: 'text-readonly',\n    size: 'col-4',\n  },\n  {\n    label: 'Program Name',\n    subLabel: '',\n    required: true,\n    name: 'programName',\n    placeholder: 'Select a program...',\n    type: 'autocomplete',\n    size: 'col-6',\n    options: [],\n    filteredOptions: [],\n  },\n  {\n    label: 'Affiliated Organization',\n    subLabel: '',\n    required: false,\n    name: 'alternateInstitutionName',\n    placeholder: 'Enter affiliated organization...',\n    helpText:\n      'This is only required if you could not find your program in the available list',\n    type: 'text',\n    size: 'col-6',\n  },\n  {\n    label: 'Clinical Level',\n    subLabel: '',\n    required: true,\n    name: 'clinicalLevelId',\n    placeholder: 'Select clinical level...',\n    type: 'select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Clinical Activity',\n    subLabel: '',\n    required: true,\n    name: 'clinicalActivityId',\n    placeholder: 'Select clinical activity...',\n    type: 'grouped-select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Explain',\n    subLabel: '',\n    required: false,\n    name: 'other',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'Description (Non-Surgical Only)',\n    subLabel: '',\n    required: false,\n    name: 'nonSurgicalActivity',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'International Rotation',\n    subLabel: '',\n    value: '',\n    required: true,\n    name: 'isInternationalRotation',\n    placeholder: 'Make a selection...',\n    helpText:\n      'If you selected yes please upload the ABS Approval letter under the training section',\n    type: 'radio-group',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n]"
        }
      ],
      "src/app/state/application/application.state.ts": [
        {
          "name": "APPLICATION_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/application/application.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IApplicationState>(\n  'application'\n)"
        }
      ],
      "src/app/professional-standing/appointments-privileges-cols.ts": [
        {
          "name": "APPOINTMENTS_PRIVILEGES_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/professional-standing/appointments-privileges-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appointment Type', 'appointmentType'),\n  AbsGrid.setTextDisplayCol('Organization Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('State', 'stateCode'),\n  AbsGrid.setTextDisplayCol('Institution', 'organizationName'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Official', 'authorizingOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
        }
      ],
      "src/app/shared/components/highlight-card/highlight-card.component.stories.ts": [
        {
          "name": "AsAlert",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    alert: true,\n  },\n}"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    title: \"Action Card's Title\",\n    content: 'This is some cool description of what this card does',\n    image:\n      'https://images.pexels.com/photos/13548722/pexels-photo-13548722.jpeg',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<HighlightCardComponent>",
          "defaultValue": "{\n  title: 'Components/Highlight Card',\n  tags: ['autodocs'],\n  component: HighlightCardComponent,\n  render: (args: HighlightCardComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [HighlightCardComponent],\n      declarations: [],\n    }),\n  ],\n}"
        },
        {
          "name": "WithAction",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    actionText: 'Click here!',\n    actionType: 'action',\n    actionAction: 'action',\n  },\n}"
        }
      ],
      "src/app/state/auth/auth.state.ts": [
        {
          "name": "AUTH_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/auth/auth.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IAuthState>('auth')",
          "rawdescription": "The state token for the auth state",
          "description": "<p>The state token for the auth state</p>\n"
        }
      ],
      "src/app/shared/gridDefinitions/basic-document-cols.ts": [
        {
          "name": "BASIC_DOCUMENT_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/gridDefinitions/basic-document-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFileLinkCol('File Name', 'fileName', 'fileType'),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol(\n    'Download',\n    'download',\n    'fa-solid fa-download',\n    undefined,\n    undefined,\n    150\n  ),\n  AbsGrid.setCustomButtonCol(\n    'Delete',\n    'delete',\n    'fa-solid fa-trash',\n    undefined,\n    undefined,\n    125\n  ),\n]"
        }
      ],
      "src/app/dashboard/user-action-cards.ts": [
        {
          "name": "CERTIFIED_ACTION_CARDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/user-action-cards.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.CCR_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CCR_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/continuous-certification',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CCR_BTN',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.REGISTER_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.REGISTER_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/apply-and-resgister',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.REGISTER_BTN',\n    icon: 'fa-solid fa-list-check',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.CME_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CME_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/cme-repository',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CME_BTN',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n]"
        },
        {
          "name": "TRAINEE_ACTION_CARDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/user-action-cards.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.GME_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.GME_SUBTITLE',\n    actionType: 'component',\n    actionAction: '/gme-history',\n    action: {\n      type: 'component',\n      action: '/gme-history',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.GME_BTN',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    title: '',\n    titleKey: 'DASHBOARD.ACTION_CARDS.APPLY_TITLE',\n    description: '',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.APPLY_SUBTITLE',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: '',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.APPLY_BTN',\n    icon: 'fa-solid fa-user-graduate',\n    disabled: true,\n  },\n]"
        }
      ],
      "src/app/side-navigation/nav-items.ts": [
        {
          "name": "CERTIFIED_NAV_ITEMS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/side-navigation/nav-items.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    display: 'Dashboard',\n    displayKey: 'SIDENAV.DASHBOARD',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n    feature: 'dashboardPage',\n  },\n  {\n    display: 'Personal Profile',\n    displayKey: 'SIDENAV.PROFILE',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n    feature: 'personalProfilePage',\n  },\n  {\n    display: 'Medical Training',\n    displayKey: 'SIDENAV.MEDICAL_TRAINING',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n    feature: 'medicalTrainingPage',\n  },\n  {\n    display: 'Professional Standing',\n    displayKey: 'SIDENAV.PROFESSIONAL_STANDING',\n    action: 'professional-standing',\n    icon: 'fa-solid fa-stethoscope',\n    feature: 'professionalStandingPage',\n  },\n  {\n    display: 'CME Repository',\n    displayKey: 'SIDENAV.CME',\n    action: 'cme-repository',\n    icon: 'fa-regular fa-folder-open',\n    feature: 'cmeRepositoryPage',\n  },\n  {\n    display: 'Apply & Register',\n    displayKey: 'SIDENAV.APPLY_REGISTER.MAIN',\n    action: 'apply-and-resgister',\n    icon: 'fa-solid fa-list-check',\n    feature: 'applyRegisterPage',\n    children: [\n      {\n        display: 'Registration Requirements',\n        displayKey: 'SIDENAV.APPLY_REGISTER.REQUIREMENTS',\n        action: 'registration-requirements',\n      },\n      {\n        display: 'Exam Registration',\n        displayKey: 'SIDENAV.APPLY_REGISTER.REGISTRATION',\n        action: 'exam-registration',\n      },\n    ],\n  },\n  {\n    display: 'Examination History',\n    displayKey: 'SIDENAV.EXAM_HISTORY',\n    action: 'examination-history',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n    feature: 'examHistoryPage',\n  },\n  {\n    display: 'Continuous Certification',\n    displayKey: 'SIDENAV.CONTINUOUS_CERTIFICATION',\n    action: 'continuous-certification',\n    icon: 'fa-solid fa-user-graduate',\n    feature: 'continuousCertificationPage',\n  },\n  {\n    display: 'Payment History',\n    displayKey: 'SIDENAV.PAYMENT_HISTORY',\n    action: 'payment-history',\n    icon: 'fa-regular fa-credit-card',\n    feature: 'paymentHistoryPage',\n  },\n  {\n    display: 'Documents',\n    displayKey: 'SIDENAV.DOCUMENTS',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n    feature: 'documentsPage',\n  },\n]"
        },
        {
          "name": "EXAMINER_NAV_ITEMS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/side-navigation/nav-items.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    display: 'CE Examiner Home',\n    displayKey: 'SIDENAV.EXAM_SCORING.MAIN',\n    action: 'ce-scoring',\n    icon: 'fa-solid fa-clock',\n    feature: 'examScoringPage',\n    children: [\n      {\n        display: 'Exam Case Rosters',\n        displayKey: 'SIDENAV.EXAM_SCORING.CASE_ROSTER',\n        action: 'examination-rosters',\n      },\n      {\n        display: 'Start CE Exams',\n        displayKey: 'SIDENAV.EXAM_SCORING.EXAMINATION',\n        action: 'oral-examinations',\n      },\n      {\n        display: 'Daily Exam Scores',\n        displayKey: 'SIDENAV.EXAM_SCORING.SCORES',\n        action: 'examination-scores',\n      },\n    ],\n  },\n]"
        },
        {
          "name": "TRAINEE_NAV_ITEMS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/side-navigation/nav-items.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    display: 'Dashboard',\n    displayKey: 'SIDENAV.DASHBOARD',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n    feature: 'dashboardPage',\n  },\n  {\n    display: 'Personal Profile',\n    displayKey: 'SIDENAV.PROFILE',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n    feature: 'personalProfilePage',\n  },\n  {\n    display: 'Medical Training',\n    displayKey: 'SIDENAV.MEDICAL_TRAINING',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n    feature: 'medicalTrainingPage',\n  },\n  {\n    display: 'GME',\n    displayKey: 'SIDENAV.GME',\n    action: 'gme-history',\n    icon: 'fa-regular fa-folder-open',\n    feature: 'gmeHistoryPage',\n  },\n  {\n    display: 'Documents',\n    displayKey: 'SIDENAV.DOCUMENTS',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n    feature: 'documentsPage',\n  },\n]"
        }
      ],
      "src/app/state/continuingmedicaleducation/cme.state.ts": [
        {
          "name": "CME_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/continuingmedicaleducation/cme.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IContinuingMedicalEducation>(\n  'ContinuingMedicalEducation'\n)"
        }
      ],
      "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts": [
        {
          "name": "CONFLICT_RESOLUTION_GRID_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  // AbsGrid.setFormattedDateCol('From', 'from'),\n  // AbsGrid.setFormattedDateCol('To', 'to'),\n  // AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  // AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  // AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  // AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  // AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'descriptionNonSurgicalOnly'\n  // ),\n  // AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n  // AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  // AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n\n  AbsGrid.setFormattedDateCol('From', 'startDate'),\n  AbsGrid.setFormattedDateCol('To', 'endDate'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'alternateInstitutionName'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity'),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'nonSurgicalActivity'\n  // ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  // AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
        }
      ],
      "src/app/state/continuous-certification/continuous-certification.state.ts": [
        {
          "name": "CONTCERT_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IContinuousCertication>(\n  'continuous_certification'\n)"
        }
      ],
      "src/app/shared/components/action-card/action-card.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    title: \"Action Card's Title\",\n    description: 'This is some cool description of what this card does',\n    actionDisplay: 'Click here!',\n    icon: 'fa-solid fa-id-card-clip',\n    actionType: 'dialog',\n  },\n}"
        },
        {
          "name": "DefaultWithTranslationKeys",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    titleKey: 'DASHBOARD.ACTION_CARDS.CCR_TITLE',\n    descriptionKey: 'DASHBOARD.ACTION_CARDS.CCR_SUBTITLE',\n    actionDisplayKey: 'DASHBOARD.ACTION_CARDS.CCR_BTN',\n    icon: 'fa-solid fa-id-card-clip',\n    actionType: 'dialog',\n  },\n}"
        },
        {
          "name": "Disabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    disabled: true,\n    actionDisplay: 'Disabled!',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ActionCardComponent>",
          "defaultValue": "{\n  title: 'Components/Action Card',\n  tags: ['autodocs'],\n  component: ActionCardComponent,\n  render: (args: ActionCardComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [ActionCardComponent],\n      declarations: [],\n    }),\n  ],\n}"
        },
        {
          "name": "StatusWithDate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...WithStatus.args,\n    recievedOn: new Date(),\n  },\n}"
        },
        {
          "name": "WithAllOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    ...StatusWithDate.args,\n    ...WithButtonCTA.args,\n  },\n}"
        },
        {
          "name": "WithButtonCTA",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    actionStyle: 'button',\n  },\n}"
        },
        {
          "name": "WithStatus",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'completed',\n    displayStatusText: true,\n  },\n}"
        },
        {
          "name": "WithStatusWithoutText",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...WithStatus.args,\n    displayStatusText: false,\n  },\n}"
        }
      ],
      "src/app/shared/components/collapse-panel/collapse-panel.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    panelId: 1,\n    startExpanded: true,\n    panelTitle: 'Panel Title',\n    panelContent: 'Panel Content<br><br>More content.',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<CollapsePanelComponentArgs>",
          "defaultValue": "{\n  title: 'YTG/Collapse-Panel',\n  tags: ['autodocs'],\n  component: CollapsePanelComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (CollapsePanelComponent) => `${CollapsePanelComponent}`\n    ),\n  ],\n  render: (args: CollapsePanelComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<abs-collapse-panel [panelId]=\"panelId\" [startExpanded]=\"startExpanded\">\n      <h5 class=\"mt-0 mb-2\" panel-header>${args.panelTitle}</h5>\n      <div [innerHTML]=\"'${args.panelContent}'\"></div>\n    </abs-collapse-panel>`,\n    props: {\n      ...args,\n    },\n  }),\n}"
        },
        {
          "name": "StartClosed",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    panelId: 3,\n    startExpanded: false,\n  },\n}"
        },
        {
          "name": "StartOpen",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    panelId: 2,\n  },\n}"
        }
      ],
      "src/app/shared/components/exam-timer-component/exam-timer.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 7,\n    currentIncrement: 1,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ExamTimerComponent>",
          "defaultValue": "{\n  title: 'Components/Exam-Timer',\n  component: ExamTimerComponent,\n  tags: ['autodocs'],\n  render: (args: ExamTimerComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
        },
        {
          "name": "ShortTimer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 0.25,\n    currentIncrement: 1,\n  },\n}"
        },
        {
          "name": "StartInMiddle",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    timerLabel: 'Total',\n    incrementLabel: 'Case',\n    totalIncrements: 4,\n    incrementDuration: 7,\n    currentIncrement: 3,\n  },\n}"
        }
      ],
      "src/app/shared/components/form-errors/form-errors.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    errors: {\n      name: ['Name is required'],\n      email: ['Email is invalid'],\n    },\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<FormErrorsComponent>",
          "defaultValue": "{\n  title: 'YTG/Form Errors',\n  tags: ['autodocs'],\n  component: FormErrorsComponent,\n  render: (args: FormErrorsComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [FormErrorsComponent],\n      declarations: [],\n    }),\n  ],\n}"
        }
      ],
      "src/app/shared/components/grid/grid.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    data: GRID_DEFAULT_DATA,\n    columns: GRID_DEFAULT_COLS,\n    title: 'Grid Title',\n    noResultsMessage: 'There are no results to display.',\n    showFilter: false,\n  },\n}"
        },
        {
          "name": "DrowdownFilter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    showFilter: true,\n    filterOn: 'title',\n    filterType: 'dropdown',\n    filterOptions: DEFAULT_DROPDOWN_OPTIONS,\n    noFilteredResultsMessage: 'There are no results to display.',\n  },\n}"
        },
        {
          "name": "ExpandRow",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    expandTemplate: 'expandedRow',\n    columns: GRID_DEFAULT_COLS_EXPAND,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<GridComponent>",
          "defaultValue": "{\n  title: 'YTG/Grid',\n  tags: ['autodocs'],\n  component: GridComponent,\n  render: (args: GridComponent) => ({\n    template: `<abs-grid [data]=\"data\" [columns]=\"columns\" [title]=\"title\" [noResultsMessage]=\"noResultsMessage\" [showFilter]=\"showFilter\" [filterOn]=\"filterOn\" [filterType]=\"filterType\" [filterOptions]=\"filterOptions\" [noFilteredResultsMessage]=\"noFilteredResultsMessage\" [pagination]=\"pagination\" [currentPage]=\"currentPage\" [itemsPerPage]=\"itemsPerPage\" [expandTemplate]=\"expandedRow\">\n      <ng-template #expandedRow let-r>{{r.expandedRowContent}}</ng-template>\n    </abs-grid>`,\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      // Provides necesarry utilities for PrimeNG components\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [GridComponent],\n      declarations: [],\n    }),\n    componentWrapperDecorator((GridComponent) => `${GridComponent}`),\n  ],\n}"
        },
        {
          "name": "Pagination",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    pagination: true,\n    currentPage: 1,\n    itemsPerPage: 3,\n  },\n}"
        },
        {
          "name": "TextFilter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    showFilter: true,\n    filterOn: 'name',\n    filterType: 'text',\n    noFilteredResultsMessage: 'There are no results to display.',\n  },\n}"
        }
      ],
      "src/app/shared/components/legend/legend.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/legend/legend.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    legendItems: [\n      {\n        text: 'Not Submitted',\n        color: '#7f7f7f',\n      },\n      {\n        text: 'Current Session',\n        color: '#dbad6a',\n      },\n      {\n        text: 'Submitted',\n        color: '#1c827d',\n      },\n    ],\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/legend/legend.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<LegendComponent>",
          "defaultValue": "{\n  title: 'Components/Legend',\n  tags: ['autodocs'],\n  component: LegendComponent,\n  render: (args: LegendComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    moduleMetadata({\n      imports: [LegendComponent],\n      declarations: [],\n    }),\n  ],\n}"
        }
      ],
      "src/app/shared/components/modal/modal.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    // openModal: (data: any) => {\n    //   console.log(data);\n    // },\n    open: false,\n    title: 'Modal Title',\n    modalName: 'modalName',\n    modalContent: 'Modal Content<br><br>More content.',\n    width: 70,\n  },\n}"
        },
        {
          "name": "HideCloseButton",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    hideClose: true,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ModalComponentArgs>",
          "defaultValue": "{\n  title: 'Components/Modal',\n  tags: ['autodocs'],\n  component: ModalComponent,\n  decorators: [\n    componentWrapperDecorator(\n      //  using the contentWrapper allows you to define content that would appear in an <ng-content> tag\n      (ModalComponent) => `${ModalComponent}`\n    ),\n  ],\n  render: (args: ModalComponentArgs) => ({\n    // The template in the render method can access component args that need to be rendered outside of the component tag\n    // this allows the support of slot based content projection\n    template: `<p>Toggle the value of \"open\" in the inputs below to display the modal.</p>\n    <abs-modal [open]=\"open\" [title]=\"title\" [status]=\"status\" [modalName]=\"modalName\" [preventOverlayClose]=\"preventOverlayClose\" [hideClose]=\"hideClose\" [width]=\"width\">\n      <div [innerHTML]=\"'${args.modalContent}'\"></div>\n    </abs-modal>`,\n    props: {\n      ...args,\n    },\n  }),\n}"
        },
        {
          "name": "PreventOverlayClose",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    preventOverlayClose: true,\n  },\n}"
        },
        {
          "name": "StatusAlert",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'alert',\n  },\n}"
        },
        {
          "name": "StatusComplete",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'completed',\n  },\n}"
        },
        {
          "name": "StatusInProgress",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    status: 'in-progress',\n  },\n}"
        },
        {
          "name": "WidthLarge",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    width: 90,\n  },\n}"
        },
        {
          "name": "WIdthSmall",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    ...Default.args,\n    width: 40,\n  },\n}"
        }
      ],
      "src/app/shared/components/profile-header/profile-header.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    profilePicture: 'https://cdn-icons-png.flaticon.com/512/3135/3135715.png',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ProfileHeaderComponent>",
          "defaultValue": "{\n  title: 'YTG/Profile Header',\n  tags: ['autodocs'],\n  component: ProfileHeaderComponent,\n  render: (args: ProfileHeaderComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  decorators: [\n    applicationConfig({\n      providers: [...DEFAULT_PROVIDERS],\n    }),\n    moduleMetadata({\n      imports: [ProfileHeaderComponent],\n      declarations: [],\n    }),\n  ],\n}"
        }
      ],
      "src/app/shared/components/tooltip/tooltip.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'top',\n  },\n}"
        },
        {
          "name": "DislayBottom",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'bottom',\n  },\n}"
        },
        {
          "name": "DislayLeft",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'left',\n  },\n}"
        },
        {
          "name": "DislayRight",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    tooltipText: 'This is a tooltip',\n    position: 'right',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<TooltipComponent>",
          "defaultValue": "{\n  title: 'YTG/Tooltip',\n  component: TooltipComponent,\n  tags: ['autodocs'],\n  render: (args: TooltipComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
        }
      ],
      "src/app/shared/components/grid/defaults/grid-default-dropdown.ts": [
        {
          "name": "DEFAULT_DROPDOWN_OPTIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/defaults/grid-default-dropdown.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    label: 'Software Engineer',\n    value: 'Software Engineer',\n  },\n  {\n    label: 'Software Architect',\n    value: 'Software Architect',\n  },\n  {\n    label: 'CEO',\n    value: 'CEO',\n  },\n  {\n    label: 'Green Horn',\n    value: 'Green Horn',\n  },\n  {\n    label: 'Senior Green Horn',\n    value: 'Senior Green Horn',\n  },\n]"
        }
      ],
      "src/stories/default-providers.ts": [
        {
          "name": "DEFAULT_PROVIDERS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/default-providers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  provideEnvironmentNgxMask(maskConfig),\n  importProvidersFrom(\n    BrowserModule,\n    AppRoutingModule,\n    TranslateModule.forRoot({\n      defaultLanguage: 'en-US',\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient],\n      },\n    }),\n    NgxsModule.forRoot(surgeonPortalState, {\n      developmentMode: true,\n    }),\n    NgxsStoragePluginModule.forRoot({\n      storage: StorageOption.SessionStorage,\n      key: [AUTH_STATE_TOKEN, USER_PROFILE_STATE_TOKEN, PICKLISTS_STATE_TOKEN],\n    }),\n    NgxsLoggerPluginModule.forRoot(),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsFormPluginModule.forRoot()\n  ),\n  provideHttpClient(withInterceptorsFromDi()),\n  provideAnimations(),\n]"
        },
        {
          "name": "maskConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/default-providers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Partial<IConfig>",
          "defaultValue": "{\n  validation: false,\n}"
        }
      ],
      "src/app/exam-process/directory-cols.ts": [
        {
          "name": "DIRECTORY_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/exam-process/directory-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Exam Title', 'examName'),\n  AbsGrid.setFormattedDateCol('Registry Open', 'regOpenDate'),\n  AbsGrid.setFormattedDateCol('Registry Close', 'regEndDate'),\n  AbsGrid.setFormattedDateCol('Exam Start', 'examStartDate'),\n  AbsGrid.setFormattedDateCol('Exam End', 'examEndDate'),\n]"
        }
      ],
      "src/app/documents/documents-col.ts": [
        {
          "name": "DOCUMENTS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/documents/documents-col.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Document Type', 'documentType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadedDateUtc', true),\n  AbsGrid.setTextDisplayCol('Uploaded By', 'uploadedBy', true),\n  AbsGrid.setCustomButtonCol('Download', 'id', 'fa-solid fa-download'),\n  // AbsGrid.setCustomButtonCol('Delete', 'id', 'fa-solid fa-trash'),\n]"
        }
      ],
      "src/app/medical-training/documents-col.ts": [
        {
          "name": "DOCUMENTS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/medical-training/documents-col.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Certificate Type', 'certificateType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDateUtc', true),\n  AbsGrid.setCustomButtonCol('Download', 'documentId', 'fa-solid fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'documentId', 'fa-solid fa-trash'),\n]"
        }
      ],
      "src/app/state/documents/documents.state.ts": [
        {
          "name": "DOCUMENTS_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/documents/documents.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IDocuments>('documents')"
        }
      ],
      "src/environments/environment.development.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.development.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "src/app/examination-history/exam-history-cols.ts": [
        {
          "name": "EXAM_HISTORY_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/examination-history/exam-history-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomClass('Exam Name', 'examinationName', true, 'font-bold'),\n  AbsGrid.setFormattedDateCol('Date', 'examinationDate', true),\n  AbsGrid.setTextDisplayCol('Status', 'status'),\n  AbsGrid.setTextDisplayCol('Results', 'result'),\n  AbsGrid.setCustomButtonCol('Download', 'documentId', 'fa fa-download'),\n]"
        }
      ],
      "src/app/state/exam-history/exam-history.state.ts": [
        {
          "name": "EXAM_HISTORY_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/exam-history/exam-history.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IExamHistory>(\n  'examHistory'\n)"
        }
      ],
      "src/app/state/exam-process/exam-process.state.ts": [
        {
          "name": "EXAM_PROCESS_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/exam-process/exam-process.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IExamProcess>(\n  'examProcess'\n)"
        }
      ],
      "src/app/state/exam-scoring/exam-scoring.state.ts": [
        {
          "name": "EXAM_SCORING_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/exam-scoring/exam-scoring.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IExamScoring>(\n  'examScoring'\n)"
        }
      ],
      "src/app/examination-scores/examination-scores-cols.ts": [
        {
          "name": "EXAMINATION_SCORES_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/examination-scores/examination-scores-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Day', 'day', true),\n  AbsGrid.setTextDisplayCol('Session', 'session', true),\n  AbsGrid.setTextDisplayCol('Roster', 'roster', true),\n  AbsGrid.setTextDisplayCol('Candidate Name', 'displayName', true),\n  // AbsGrid.setTextDisplayCol('Score', 'score', true),\n  // AbsGrid.setTextDisplayCol('Critical Fail Y/N', 'criticalFail', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
        }
      ],
      "src/app/medical-training/fellowship-cols.ts": [
        {
          "name": "FELLOWSHIP_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/medical-training/fellowship-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol('Other', 'programOther', true),\n  AbsGrid.setTextDisplayCol('Completion Year', 'completionYear', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash-can'),\n]"
        }
      ],
      "src/app/gme-history/gme-summary-cols.ts": [
        {
          "name": "GME_SUMMARY_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/gme-history/gme-summary-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setFormattedDateCol('From', 'minStartDate'),\n  AbsGrid.setFormattedDateCol('To', 'maxStartDate'),\n  AbsGrid.setTextDisplayCol('Program', 'programName'),\n  AbsGrid.setTextDisplayCol('Clinical', 'clinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Non-Clinical', 'nonClinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Essentials', 'essentialsWeeks'),\n]"
        }
      ],
      "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts": [
        {
          "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IGQAdditionalTraining>('gqAdditionalTraining')"
        }
      ],
      "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts": [
        {
          "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n]"
        }
      ],
      "src/app/state/graduatemedicaleducation/gme.state.ts": [
        {
          "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation')"
        }
      ],
      "src/app/shared/components/grid/defaults/grid-default-cols.ts": [
        {
          "name": "GRID_DEFAULT_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Name', 'name', true),\n  AbsGrid.setTextDisplayCol('Title', 'title'),\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n]"
        },
        {
          "name": "GRID_DEFAULT_COLS_EXPAND",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Name', 'name', true),\n  AbsGrid.setTextDisplayCol('Title', 'title'),\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setCellCustomClass('Status', 'status', true),\n  AbsGrid.setExpandToggle('Expand', 'expanded'),\n]"
        }
      ],
      "src/app/shared/components/grid/defaults/grid-dafault-data.ts": [
        {
          "name": "GRID_DEFAULT_DATA",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/grid/defaults/grid-dafault-data.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    name: 'Daniel Sarria',\n    title: 'Software Engineer',\n    date: new Date('12-25-2024'),\n    status: 'Requested',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Joe Mayberry',\n    title: 'Software Engineer',\n    date: new Date('04-01-2024'),\n    status: 'Approved',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Alan Bryant',\n    title: 'Software Architect',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Tim Yocum',\n    title: 'CEO',\n    date: new Date('01-01-2022'),\n    status: 'Approved',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Test User',\n    title: 'Green Horn',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n  {\n    name: 'Test User 2',\n    title: 'Senior Green Horn',\n    date: new Date('01-01-2022'),\n    status: 'Failed',\n    expandedRowContent: 'This is the expanded row content',\n    expanded: false,\n  },\n]"
        }
      ],
      "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts": [
        {
          "name": "HOSPOITAL_APPOINTMENTS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appt Type', 'apptType'),\n  AbsGrid.setTextDisplayCol('Orginiztion Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('City', 'city'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Auth Official', 'authOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n]"
        }
      ],
      "src/app/cme-repository/itemized-cme-cols.ts": [
        {
          "name": "ITEMIZED_CME_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/cme-repository/itemized-cme-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date Earned', 'date', true),\n  AbsGrid.setFormattedDateCol('Expiration', 'creditExpDate', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Category 1', 'credits', true),\n  AbsGrid.setTextDisplayCol('SA Credits', 'creditsSA', true),\n  AbsGrid.setTextDisplayCol('CME Direct', 'cmeDirect'),\n]"
        }
      ],
      "src/app/gme-history/itemized-gme-cols.ts": [
        {
          "name": "ITEMIZED_GME_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/gme-history/itemized-gme-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol(\n    'Affiliated Institute',\n    'alternateInstitutionName',\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel', true),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity', true),\n  // AbsGrid.setTextDisplayCol(\n  //   'Description (Non-Surgical Only)',\n  //   'nonSurgicalActivity'\n  // ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
        }
      ],
      "src/app/professional-standing/licenses-cols.ts": [
        {
          "name": "LICENSES_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/professional-standing/licenses-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('State', 'issuingState'),\n  AbsGrid.setTextDisplayCol('Number', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expire Date', 'expireDate'),\n  AbsGrid.setTextDisplayCol('Reporting Org.', 'reportingOrganization'),\n  AbsGrid.setCustomButtonCol('Edit', 'showEdit', 'fa-solid fa-pen-to-square'),\n]"
        }
      ],
      "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts": [
        {
          "name": "MEDICAL_LICENSE_GRID_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('License State', 'licenseState'),\n  AbsGrid.setTextDisplayCol('License #', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('License Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'expirationDate'),\n  AbsGrid.setTextDisplayCol('Verifying Organization', 'varifyingOrganization'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
        }
      ],
      "src/app/shared/gridDefinitions/medical-training-cols.ts": [
        {
          "name": "MEDICAL_TRAINING_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/gridDefinitions/medical-training-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Type of Training', 'trainingType', true),\n  AbsGrid.setTextDisplayCol('State', 'state', true),\n  AbsGrid.setTextDisplayCol('City', 'city', true),\n  AbsGrid.setTextDisplayCol('Institution', 'institutionName', true),\n  AbsGrid.setTextDisplayCol('Other', 'other', true),\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
        }
      ],
      "src/app/state/medical-training/medical-training.state.ts": [
        {
          "name": "MEDICALSTATE_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/medical-training/medical-training.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IMedicalTraining>(\n  'medical_training'\n)"
        }
      ],
      "src/app/oral-examinations/oral-examination-cols.ts": [
        {
          "name": "ORAL_EXAMINATION_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/oral-examinations/oral-examination-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Examinee', 'fullName'),\n  AbsGrid.setTextDisplayCol('Scheduled Time', 'examTime'),\n  AbsGrid.setCustomPrimeButtonCol(\n    'Skip Examination',\n    'skipExam',\n    undefined,\n    'p-button-secondary',\n    undefined,\n    undefined,\n    337\n  ),\n  AbsGrid.setCustomPrimeButtonCol(\n    'Start Examination',\n    'startExam',\n    undefined,\n    'p-button-warning',\n    undefined,\n    undefined,\n    337\n  ),\n]"
        }
      ],
      "src/app/medical-training/other-certificates-add-edit-modal/other-certifications-cols.ts": [
        {
          "name": "OTHER_CERTIFICATIONS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/medical-training/other-certificates-add-edit-modal/other-certifications-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Certificate Type', 'certificateTypeName'),\n  AbsGrid.setTextDisplayCol('Certificate Number', 'certificateNumber'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
        }
      ],
      "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts": [
        {
          "name": "OutcomeRegistriesFormFields",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    label: 'Surgeeon Specific Registry (case log)',\n    subLabel: '(ACS; with 30-day complications reporting)',\n    value: '',\n    required: false,\n    name: 'surgeonSpecificRegistry',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Abdominal Core Health Quality Collaborative',\n    subLabel: '(ACHQC)',\n    value: '',\n    required: false,\n    name: 'registeredWithACHQC',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Collaborative Endocrine Surgery Quality Improvement Program',\n    subLabel: '(CESQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithCESQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label:\n      'Metabolic and Bariatric Surgery Accreditation and Quality Improvement Program',\n    subLabel: '(MBSAQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithMBSAQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Burn Repository',\n    subLabel: '(ABA)',\n    value: '',\n    required: false,\n    name: 'registeredWithABA',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Mastery of Breast Surgery',\n    subLabel: '(ASBS)',\n    value: '',\n    required: false,\n    name: 'registeredWithASBS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Statewide Collaboratives',\n    subLabel: '(MSQC, SCOAP, etc.)',\n    value: '',\n    required: false,\n    name: 'registeredWithStatewideCollaboratives',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Multi-specialty Portfolio Program',\n    subLabel: '(ABMS)',\n    value: '',\n    required: false,\n    name: 'registeredWithABMS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Cancer Data Base',\n    subLabel: '(NCDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'CoC Rapid Quality Reporting System',\n    subLabel: '(RQRS)',\n    value: '',\n    required: false,\n    name: 'registeredWithRQRS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Surgical Quality Improvement Program',\n    subLabel: '(ACS NSQIP or VASQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithNSQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'National Trauma Data Bank',\n    subLabel: '(NTDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNTDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Society of Thoracic Surgeons National Database',\n    subLabel: '(STS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSTS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Trauma Quality Improvement Program',\n    subLabel: '(ACS TQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithTQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Organ Procurement and Transplantation Network',\n    subLabel: '(UNOS)',\n    value: '',\n    required: false,\n    name: 'registeredWithUNOS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Peripheral Vascular Intervention Registry',\n    subLabel: '(NCDR)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDR',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Vascular Quality Initiative',\n    subLabel: '(SVS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSVS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Extracorporeal Life Support Organization Registry',\n    subLabel: '(ELSO)',\n    value: '',\n    required: false,\n    name: 'registeredWithELSO',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Describe',\n    subLabel:\n      'NOTE: if you responded “No” to all of the choices above, you MUST describe your Part 4 activity in the space provided below.',\n    value: '',\n    required: false,\n    name: 'registryComments',\n    type: 'textarea',\n    size: 'col-12',\n  },\n]"
        }
      ],
      "src/app/shared/components/pay-fee/pay-fee-cols.ts": [
        {
          "name": "PAY_FEE_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Payment Date', 'paymentDate'),\n  AbsGrid.setTextDisplayCol('Payment Amount', 'paymentAmount'),\n  AbsGrid.setTextDisplayCol('Payment Method', 'balanceRemaining'),\n  AbsGrid.setCustomButtonCol(\n    'Download Receipt',\n    'download',\n    'fa-solid fa-download'\n  ),\n]"
        }
      ],
      "src/app/payment-history/payment-histroy-grid.ts": [
        {
          "name": "PAYMENT_HISTORY_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/payment-history/payment-histroy-grid.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomStyle('Invoice #', 'invoiceNumber', {\n    color: '#1C827D',\n    fontWeight: 'bold',\n  }),\n  AbsGrid.setTextDisplayCol('Fee Code', 'feeCode'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Total Billed', 'totalBilled'),\n  AbsGrid.setTextDisplayCol('Paid', 'paid'),\n  AbsGrid.setCellCustomStyle('Balance', 'balance', {\n    color: '#1F3758',\n    fontWeight: 'bold',\n  }),\n]"
        }
      ],
      "src/app/state/picklists/picklists.state.ts": [
        {
          "name": "PICKLISTS_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/picklists/picklists.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IPicklist>('picklists')"
        }
      ],
      ".storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
        }
      ],
      "src/app/state/professional-standing/professional-standing.state.ts": [
        {
          "name": "PROFESSIONAL_STANDING_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/professional-standing/professional-standing.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IProfessionalStanding>('professionalStanding')"
        }
      ],
      "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts": [
        {
          "name": "REFERENCE_FORMS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Reference Form', 'referenceFormId'),\n  AbsGrid.setTextDisplayCol('Affiliated Institution', 'affiliatedInstitution'),\n  AbsGrid.setTextDisplayCol(\n    'Authenticating Official',\n    'authenticatingOfficial'\n  ),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setCellCustomClass('Status', 'status'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa-regular fa-eye'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
        }
      ],
      "src/app/cme-repository/requirments-and-adjustments-cols.ts": [
        {
          "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date Earned', 'date', true),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'creditExpDate', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'), // potentially change to activityName\n  AbsGrid.setTextDisplayCol('Category 1', 'credits', true),\n  AbsGrid.setTextDisplayCol('SA Credits', 'creditsSA', true),\n]"
        }
      ],
      "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts": [
        {
          "name": "SPECIAL_ACCOMMODATIONS_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
        }
      ],
      "src/app/cme-repository/summary-cme-cols.ts": [
        {
          "name": "SUMMARY_CME_COLS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/cme-repository/summary-cme-cols.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Credit Type', 'rowLabel'),\n  AbsGrid.setTextDisplayCol('Category 1', 'credits'),\n  AbsGrid.setTextDisplayCol('Self-Assessment', 'saCredits'),\n]"
        }
      ],
      "src/app/state/surgeon-portal.state.ts": [
        {
          "name": "surgeonPortalState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/surgeon-portal.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  ApplicationState,\n  AuthState,\n  MyAccountState,\n  UserProfileState,\n  PicklistsState,\n  DashboardState,\n  ContinuousCertificationState,\n  GQAdditionalTrainingState,\n  MedicalTrainingState,\n  GraduateMedicalEducationState,\n  DocumentsState,\n  ExamProcessState,\n  ProfessionalStandingState,\n  ExamScoringState,\n  ContinuingMedicalEducationState,\n  ExamScoringState,\n  ExamHistoryState,\n]"
        }
      ],
      "src/app/state/dashboard/dashboard.state.ts": [
        {
          "name": "USER_ACCOUNT_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/dashboard/dashboard.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IDashboardState>('dashboard')"
        }
      ],
      "src/app/state/my-account/my-account.state.ts": [
        {
          "name": "USER_ACCOUNT_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/my-account/my-account.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IUserCredential>('userAccount')"
        }
      ],
      "src/app/state/user-profile/user-profile.state.ts": [
        {
          "name": "USER_PROFILE_STATE_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/user-profile/user-profile.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new StateToken<IUserProfile>(\n  'userProfile'\n)"
        }
      ]
    },
    "groupedFunctions": {
      "src/stories/default-providers.ts": [
        {
          "name": "createTranslateLoader",
          "file": "src/stories/default-providers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/shared/validators/validators.ts": [
        {
          "name": "gte",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "val",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "val",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "matchFields",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "field1",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "field2",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "field1",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "field2",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateMaxDuration",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "maxDuration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "maxDuration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateMinDuration",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "minDuration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "minDuration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validatePassword",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [],
          "returnType": "ValidatorFn"
        },
        {
          "name": "validateStartAndEndDates",
          "file": "src/app/shared/validators/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "startDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "endDate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/shared/components/base-input/input-checkbox.component.ts": [
        {
          "name": "MakeProvider",
          "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/shared/components/base-input/input-radio-group.component.ts": [
        {
          "name": "MakeProvider",
          "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/shared/components/base-input/input-select.component.ts": [
        {
          "name": "MakeProvider",
          "file": "src/app/shared/components/base-input/input-select.component.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/app/shared/components/grid/abs-grid.enum.ts": [
        {
          "name": "AbsFilterType",
          "childs": [
            {
              "name": "Text",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "text"
            },
            {
              "name": "Dropdown",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "dropdown"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/shared/components/grid/abs-grid.enum.ts"
        },
        {
          "name": "AbsGridCellRendererType",
          "childs": [
            {
              "name": "Button",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "button"
            },
            {
              "name": "ConditionalButton",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "conditionalButton"
            },
            {
              "name": "PrimeButton",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "primeButton"
            },
            {
              "name": "YesNo",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "yesNo"
            },
            {
              "name": "DateFormatter",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "dateFormatter"
            },
            {
              "name": "CustomClass",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "customClass"
            },
            {
              "name": "CustomStyle",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "customStyle"
            },
            {
              "name": "ExpandToggle",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "expandToggle"
            },
            {
              "name": "FileLink",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "fileLink"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/shared/components/grid/abs-grid.enum.ts"
        }
      ],
      "src/app/shared/components/action-card/action.enum.ts": [
        {
          "name": "Action",
          "childs": [
            {
              "name": "dialog",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "dialog"
            },
            {
              "name": "component",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "component"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/shared/components/action-card/action.enum.ts"
        }
      ],
      "src/app/examination-scores/examination-score-modal/status.enum.ts": [
        {
          "name": "Status",
          "childs": [
            {
              "name": "incomplete",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Incomplete"
            },
            {
              "name": "complete",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Completed"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/examination-scores/examination-score-modal/status.enum.ts"
        }
      ],
      "src/app/shared/components/action-card/status.enum.ts": [
        {
          "name": "Status",
          "childs": [
            {
              "name": "Completed",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "completed"
            },
            {
              "name": "InProgress",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "in-progress"
            },
            {
              "name": "Contingent",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "contingent"
            },
            {
              "name": "Alert",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "alert"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/shared/components/action-card/status.enum.ts"
        }
      ],
      "src/app/side-navigation/user-status.enum.ts": [
        {
          "name": "UserClaims",
          "childs": [
            {
              "name": "user",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "2AA5D2F2-0AA3-4B64-B340-26900EDF7CC2"
            },
            {
              "name": "trainee",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "8E508896-0442-443E-BFF5-29EDD11C7463"
            },
            {
              "name": "surgeon",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "1BDACD5A-2F92-4FC3-81D6-9B292E27702C"
            },
            {
              "name": "examiner",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "22A5DC1E-9C24-48FE-86CE-741C25A7E21D"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/side-navigation/user-status.enum.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/app/shared/components/action-card/action-card.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ActionCardComponent>",
          "file": "src/app/shared/components/action-card/action-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/collapse-panel/collapse-panel.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<CollapsePanelComponentArgs>",
          "file": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/exam-timer-component/exam-timer.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ExamTimerComponent>",
          "file": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/form-errors/form-errors.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<FormErrorsComponent>",
          "file": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/grid/grid.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<GridComponent>",
          "file": "src/app/shared/components/grid/grid.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/highlight-card/highlight-card.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<HighlightCardComponent>",
          "file": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/legend/legend.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<LegendComponent>",
          "file": "src/app/shared/components/legend/legend.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/modal/modal.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ModalComponentArgs>",
          "file": "src/app/shared/components/modal/modal.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/profile-header/profile-header.component.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ProfileHeaderComponent>",
          "file": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ],
      "src/app/shared/components/tooltip/tooltip.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<TooltipComponent>",
          "file": "src/app/shared/components/tooltip/tooltip.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 180
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/ce/exam-score.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamScoreModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/continuingmedicaleducation/cme-adjustment-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICmeAdjustmentReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/continuingmedicaleducation/cme-credit-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICmeCreditReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/continuouscertification/outcome-registry.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IOutcomeRegistryModel",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/documents/document-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDocumentReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/documents/document.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDocumentModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/exam-detail-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamDetailReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/exam-history-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamHistoryReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/exam-overview-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamOverviewReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/exam-title-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamTitleReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/gq/additional-training-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAdditionalTrainingReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/gq/additional-training.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAdditionalTrainingModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examinations/qualifying-exam-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IQualifyingExamReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examiners/agenda-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAgendaReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/examiners/conflict-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IConflictReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/graduatemedicaleducation/gme-summary-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGmeSummaryReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/graduatemedicaleducation/rotation-gap-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRotationGapReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/graduatemedicaleducation/rotation-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRotationReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/graduatemedicaleducation/rotation.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRotationModel",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/accredited-program-institution-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAccreditedProgramInstitutionReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/advanced-training-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAdvancedTrainingReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/advanced-training.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAdvancedTrainingModel",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/fellowship-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFellowshipReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/fellowship.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFellowshipModel",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/medical-training.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalTrainingModel",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/other-certifications-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IOtherCertificationsReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/other-certifications.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IOtherCertificationsModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/user-certificate-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserCertificateReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/medicaltraining/user-certificate.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserCertificateModel",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/accredited-program-institution-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAccreditedProgramInstitutionReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/appointment-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAppointmentTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/certificate-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICertificateTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/clinical-activity-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IClinicalActivityReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/clinical-level-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IClinicalLevelReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/country-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICountryReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/degree-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDegreeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/document-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDocumentTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/ethnicity-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IEthnicityReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/exam-specialty-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamSpecialtyReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/exam-status-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamStatusReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/exam-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/fellowship-program-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFellowshipProgramReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/fellowship-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFellowshipTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/gender-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGenderReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/graduate-profile-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGraduateProfileReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/jcaho-organization-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IJcahoOrganizationReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/language-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ILanguageReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/license-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ILicenseTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/organization-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IOrganizationTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/practice-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPracticeTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/primary-practice-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPrimaryPracticeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/race-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRaceReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/residency-program-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IResidencyProgramReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/scoring-session-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IScoringSessionReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/state-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IStateReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/picklists/training-type-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ITrainingTypeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/medical-license-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalLicenseReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/medical-license.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalLicenseModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/sanctions.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ISanctionsModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/user-appointment-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserAppointmentReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/user-appointment.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserAppointmentModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/professionalstanding/user-professional-standing.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserProfessionalStandingModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-comment.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseCommentModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-detail-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseDetailReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-feedback.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseFeedbackModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-roster-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseRosterReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-score-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseScoreReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/case-score.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseScoreModel",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/ce/examinee-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamineeReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/ce/title-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ITitleReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/dashboard-roster-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDashboardRosterReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/exam-session-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamSessionReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/scoring/roster-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRosterReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/surgeons/certification-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICertificationReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/trainees/program-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IProgramReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/trainees/registration-status-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRegistrationStatusReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/users/app-user-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAppUserReadOnlyModel",
        "coveragePercent": 14,
        "coverageCount": "1/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/users/user-credential.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserCredentialModel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/users/user-login.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserLoginModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/models/users/user-profile.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserProfileModel",
        "coveragePercent": 0,
        "coverageCount": "0/36",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/auth/auth.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AuthService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/ce/exam-score.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamScoreService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/continuingmedicaleducation/cme.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CmeService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/continuouscertification/outcome-registries.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OutcomeRegistriesService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/documents/document.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DocumentService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/examinations/examinations.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExaminationsService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/examinations/gq/additional-trainings.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AdditionalTrainingsService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/examinations/qualifying-exam.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "QualifyingExamService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/examiners/agenda.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AgendaService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/examiners/conflict.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ConflictService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/graduatemedicaleducation/gme-summary.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GmeSummaryService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/graduatemedicaleducation/rotation.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RotationService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/medicaltraining/advanced-training.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AdvancedTrainingService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/medicaltraining/fellowship.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FellowshipService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/medicaltraining/medical-training.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MedicalTrainingService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/medicaltraining/other-certifications.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OtherCertificationsService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/medicaltraining/user-certificate.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserCertificateService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/picklists/picklists.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PicklistsService",
        "coveragePercent": 0,
        "coverageCount": "0/29",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/professionalstanding/medical-license.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MedicalLicenseService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/professionalstanding/sanctions.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SanctionsService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/professionalstanding/user-appointment.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserAppointmentService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/professionalstanding/user-professional-standing.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserProfessionalStandingService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/case-contents.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CaseContentsService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/case-feedback.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CaseFeedbackService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/case-notes.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CaseNotesService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/case-scores.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CaseScoresService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/cases.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CasesService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/ce/session.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SessionService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/dashboard.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DashboardService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/exam-sessions.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamSessionsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/scoring/rosters.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RostersService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/surgeons/certifications.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CertificationsService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/trainees/exam.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/trainees/programs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ProgramsService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/users/user-credentials.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserCredentialsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/users/user-profiles.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserProfilesService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/api/services/users/users.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UsersApiService",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "src/app/ce-scoring/ce-scoring.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CeScoringAppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "src/app/ce-scoring/user-action-cards.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ACTION_CARDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/cme-repository/cme-repository.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CmeRepositoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/cme-repository/itemized-cme-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ITEMIZED_CME_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/cme-repository/summary-cme-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SUMMARY_CME_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/committees/committees.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CommitteesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/attestation-modal/attestation-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AttestationModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/continuous-certification.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ContinuousCertificationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/continuous-certification.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ActionMap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OutcomeRegistriesFormFields",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OutcomeRegistriesModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/reference-form-modal/reference-form-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ReferenceFormModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "REFERENCE_FORMS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/dashboard.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DashboardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/user-action-cards.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CERTIFIED_ACTION_CARDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/user-action-cards.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TRAINEE_ACTION_CARDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/documents/documents-col.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DOCUMENTS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/documents/documents.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DocumentsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/exam-process/directory-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DIRECTORY_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/exam-process/exam-process.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExamProcessComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/exam-registration/exam-registration.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExamRegistrationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-history/exam-history-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAM_HISTORY_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-history/examination-history.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExaminationHistoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-rosters/examination-rosters.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExaminationRostersComponent",
        "coveragePercent": 0,
        "coverageCount": "0/36",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-rosters/examination-rosters.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICaseDetailModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-scores/examination-score-modal/examination-score-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExaminationScoreModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-scores/examination-scores-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAMINATION_SCORES_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/examination-scores/examination-scores.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExaminationScoresComponent",
        "coveragePercent": 0,
        "coverageCount": "0/27",
        "status": "low"
      },
      {
        "filePath": "src/app/file-not-found/file-not-found.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FileNotFoundComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ADD_EDIT_RECORD_FIELDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/add-record-modal/add-record-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AddRecordModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/37",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CONFLICT_RESOLUTION_GRID_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConflictResolutionModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-form/gme-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GmeFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/35",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-form/gme-form.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "OptionList",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-history.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GmeHistoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/55",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-history.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICalendarFilter",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-history.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICalendarFilterOptions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-history.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICalendarFilterValue",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-history.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGmePicklistOptions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/gme-summary-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GME_SUMMARY_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/gme-history/itemized-gme-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ITEMIZED_GME_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/login/login.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LoginComponent",
        "coveragePercent": 36,
        "coverageCount": "7/19",
        "status": "medium"
      },
      {
        "filePath": "src/app/medical-training/documents-col.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DOCUMENTS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/fellowship-add-edit-modal/fellowship-add-edit-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FellowshipAddEditModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/30",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/fellowship-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FELLOWSHIP_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/medical-training-models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MedicalTrainingActions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/medical-training.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MedicalTrainingComponent",
        "coveragePercent": 0,
        "coverageCount": "0/74",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/other-certificates-add-edit-modal/other-certificates-add-edit-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OtherCertificatesAddEditModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/medical-training/other-certificates-add-edit-modal/other-certifications-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OTHER_CERTIFICATIONS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/my-account/my-account.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MyAccountComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/oral-examination/oral-examination.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OralExaminationsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/43",
        "status": "low"
      },
      {
        "filePath": "src/app/oral-examinations/oral-examination-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ORAL_EXAMINATION_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/oral-examinations/oral-examinations.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OralExaminationsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/payment-history/payment-history.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PaymentHistoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/payment-history/payment-histroy-grid.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PAYMENT_HISTORY_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/personal-profile/personal-profile.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PersonalProfileComponent",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/personal-profile/personal-profile.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDisplayUserProfile",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/appointments-form/appointments-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppointmentsFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/appointments-form/appointments-form.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "OptionList",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/appointments-privileges-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APPOINTMENTS_PRIVILEGES_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/current-appointment-form/current-appointment-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CurrentAppointmentFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/current-appointment-form/current-appointment-form.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "OptionList",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/license-form/license-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LicenseFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/licenses-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LICENSES_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/professional-standing.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProfessionalStandingComponent",
        "coveragePercent": 0,
        "coverageCount": "0/51",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/professional-standing.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAppointementsPrivilegesPickLists",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/professional-standing.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalLicense",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/professional-standing.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalLicensePickLists",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/professional-standing.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IProfessionalStandingPickLists",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/professional-standing/sanctions-form/sanctions-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SanctionsFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ACGME_EXPERIENCE_GRID_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AcgmeExperienceModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GraduateMedicalEducationModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MEDICAL_LICENSE_GRID_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/medical-license-modal/medical-license-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MedicalLicenseModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "HOSPOITAL_APPOINTMENTS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/registration-requirements.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RegistrationRequirementsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/registration-requirements.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ActionMap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SPECIAL_ACCOMMODATIONS_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SpecialAccommodationsModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/surgeon-profile-modal/surgeon-profile-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SurgeonProfileModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/training-modal/training-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TrainingModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/32",
        "status": "low"
      },
      {
        "filePath": "src/app/registration-requirements/training-modal/training-modal.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MedicalTrainingData",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/common/interceptors/auth.interceptor.ts",
        "type": "interceptor",
        "linktype": "interceptor",
        "name": "AuthInterceptor",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/common/interceptors/error.interceptor.ts",
        "type": "interceptor",
        "linktype": "interceptor",
        "name": "ErrorInterceptor",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/common/interfaces/errors.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFormErrors",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card-read-only.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IActionCardReadOnlyModel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DefaultWithTranslationKeys",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Disabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StatusWithDate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithAllOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithButtonCTA",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithStatus",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithStatusWithoutText",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/action-card/action-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ActionCardComponent",
        "coveragePercent": 68,
        "coverageCount": "15/22",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/alert/alert.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AlertComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputCheckboxComponent",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-checkbox.component.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "MakeProvider",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-radio-group.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputRadioGroupComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-radio-group.component.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "MakeProvider",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-select.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputSelectComponent",
        "coveragePercent": 0,
        "coverageCount": "0/33",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/base-input/input-select.component.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "MakeProvider",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CollapsePanelComponent",
        "coveragePercent": 40,
        "coverageCount": "2/5",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CollapsePanelComponentArgs",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StartClosed",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/collapse-panel/collapse-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StartOpen",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/dashboard-header/dashboard-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DashboardHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/documents-upload/documents-upload.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DocumentsUploadComponent",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/exam-timer-component/exam-timer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExamTimerComponent",
        "coveragePercent": 31,
        "coverageCount": "7/22",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShortTimer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/exam-timer-component/exam-timer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StartInMiddle",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/examination-score-card/examination-score-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExaminationScoreCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/expandable/expandable.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExpandableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/file-upload-button/file-upload-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FileUploadButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-errors/form-errors.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-errors/form-errors.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormErrorsComponent",
        "coveragePercent": 37,
        "coverageCount": "3/8",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/grid/abs-grid-col.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGridColumns",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/abs-grid-models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGridActions",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/abs-grid.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AbsGrid",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/defaults/grid-dafault-data.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GRID_DEFAULT_DATA",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GRID_DEFAULT_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/defaults/grid-default-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GRID_DEFAULT_COLS_EXPAND",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/defaults/grid-default-dropdown.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_DROPDOWN_OPTIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid-options.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDropdown",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid-options.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGridOptions",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DrowdownFilter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ExpandRow",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Pagination",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TextFilter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GridComponent",
        "coveragePercent": 64,
        "coverageCount": "24/37",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/grid/grid.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "GridAction",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AsAlert",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/highlight-card/highlight-card.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithAction",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/highlight-card/highlight-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HighlightCardComponent",
        "coveragePercent": 55,
        "coverageCount": "10/18",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/legend/legend.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/legend/legend.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/legend/legend.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LegendComponent",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/legend/legend.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ILegend",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModalComponentArgs",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "HideCloseButton",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PreventOverlayClose",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StatusAlert",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StatusComplete",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StatusInProgress",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WidthLarge",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/modal.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WIdthSmall",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PAY_FEE_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/pay-fee/pay-fee.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PayFeeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/profile-header/profile-header.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/profile-header/profile-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProfileHeaderComponent",
        "coveragePercent": 75,
        "coverageCount": "3/4",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/progress-bar/progress-bar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProgressBarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/select-wrapper/select-wrapper.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SelectWrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/success-fail-modal/success-fail-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SuccessFailModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TooltipComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DislayBottom",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DislayLeft",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DislayRight",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tooltip/tooltip.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/training-add-edit-modal/training-add-edit-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TrainingAddEditModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/31",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/user-information-card/user-information-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserInformationCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/user-information-slider/user-information-slider.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserInformationSliderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/highlight.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "HighlightDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/gridDefinitions/basic-document-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BASIC_DOCUMENT_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/gridDefinitions/medical-training-cols.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MEDICAL_TRAINING_COLS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/models/form-fields/form-fields.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFormFields",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/services/analytics.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AnalyticsService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/services/global-dialog.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GlobalDialogService",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/services/global-toast.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GlobalToastService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "gte",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "matchFields",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "validateMaxDuration",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "validateMinDuration",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "validatePassword",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/validators/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "validateStartAndEndDates",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/side-navigation/nav-items.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CERTIFIED_NAV_ITEMS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/side-navigation/nav-items.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAMINER_NAV_ITEMS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/side-navigation/nav-items.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TRAINEE_NAV_ITEMS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/side-navigation/side-navigation.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SideNavigationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CloseApplication",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "LoadApplication",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SetExamInProgress",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SetUnsavedChanges",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ApplicationSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ApplicationState",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IApplicationState",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IFeatureFlags",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/application.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APPLICATION_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/featureToggle.guard.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CanActivate",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/featureToggle.guard.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "FeatureToggleGuard",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/workInProgress.guard.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "WorkInProgressGuard",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/application/workInProgress.guard.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CanDeactivateFn",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearAuthErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Login",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Logout",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "RefreshToken",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ResetPassword",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.guard.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CanActivate",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.guard.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "AuthGuard",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "AuthStateModel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAuthCredentials",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAuthState",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IError",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IRefreshToken",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AuthSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/auth/auth.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AuthState",
        "coveragePercent": 88,
        "coverageCount": "15/17",
        "status": "very-good"
      },
      {
        "filePath": "src/app/state/auth/auth.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AUTH_STATE_TOKEN",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearCMEErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCMEAdjustments",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCMECreditDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCMECredits",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCmeSummary",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ContinuingMedicalEducationSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ContinuingMedicalEducationState",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICmeAdjustment",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICmeCredit",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICmeSummaryRow",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IContinuingMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDroppingCmeCredits",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuingmedicaleducation/cme.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CME_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetOutcomeRegistries",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateOutcomeRegistries",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ContinuousCertificationSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ContinuousCertificationState",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IContinuousCertication",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CONTCERT_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAlertsAndNotices",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetDashboardCertificationInformation",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetDashboardProgramInformation",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetTraineeRegistrationStatus",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DashboardSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DashboardState",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ICertification",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDashboardState",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/dashboard/dashboard.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "USER_ACCOUNT_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteCertificate",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteDocument",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DownloadDocument",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAllDocuments",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UploadDocument",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DocumentSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DocumentsState",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDocuments",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/documents/documents.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DOCUMENTS_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetActiveExams",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExamHistory",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ExamHistorySelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamHistoryState",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamHistory",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-history/exam-history.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAM_HISTORY_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-process/exam-process.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExamDirectory",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-process/exam-process.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ExamProcessSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-process/exam-process.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamProcessState",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-process/exam-process.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamProcess",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-process/exam-process.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAM_PROCESS_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearExamScoringErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateCaseComment",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateCaseFeedback",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateCaseScore",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateExamScore",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteCaseComment",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteCaseFeedback",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteCaseScore",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetActiveExamination",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCaseComment",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCaseContents",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCaseDetailsAndFeedback",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCaseFeedback",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCaseRoster",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExaminee",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExamineeList",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExaminerAgenda",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExaminerConflict",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExamScoresList",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetExamTitle",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetRoster",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetSelectedExamScores",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ResetCaseCommentsData",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ResetExamScoringData",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SkipExam",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateCaseComment",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateCaseFeedback",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateCaseScore",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ExamScoringSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExamScoringState",
        "coveragePercent": 0,
        "coverageCount": "0/30",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IExamScoring",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/state/exam-scoring/exam-scoring.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXAM_SCORING_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateAdditionalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAdditionalTrainingDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAdditionalTrainingList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateAdditionalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GQAdditionalTrainingSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GQAdditionalTrainingState",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGQAdditionalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearGraduateMedicalEducationDetails",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearGraduateMedicalEducationErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateGraduateMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteGraduateMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAllGraduateMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGraduateMedicalEducationDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGraduateMedicalEducationGapList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGraduateMedicalEducationList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGraduateMedicalEducationSummary",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateGraduateMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GraduateMedicalEducationSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GraduateMedicalEducationState",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IGraduateMedicalEducation",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearMedicalTrainingErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateAdvancedTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateFellowship",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateMedicalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateOtherCertification",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeleteFellowship",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAdvancedTrainingData",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetFellowships",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetMedicalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetOtherCertifications",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetUserCertificates",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateAdvancedTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateAdvancedTrainingData",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateFellowship",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateMedicalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateOtherCertifications",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MedicalTrainingSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MedicalTrainingState",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMedicalTraining",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/state/medical-training/medical-training.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MEDICALSTATE_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SaveMyAccountChanges",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MyAccountSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MyAccountState",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserCredential",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/my-account/my-account.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "USER_ACCOUNT_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAccreditedProgramInstitutionsList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetAppointmentTypeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCertificateTypes",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetClinicalActivityList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetClinicalLevelList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetCountryList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetDegrees",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetDocumentTypes",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetEthnicityList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetFellowshipPrograms",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetFellowshipTypes",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGenderList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetGraduateProfiles",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetJcahoOrganizationList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetLanguageList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetLicenseTypeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetOrganizationTypeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPicklists",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPracticeTypeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPrimaryPracticeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetRaceList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetResidencyPrograms",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetScoringSessionList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetStateList",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetTrainingTypeList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PicklistsSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PicklistsState",
        "coveragePercent": 0,
        "coverageCount": "0/26",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPicklist",
        "coveragePercent": 0,
        "coverageCount": "0/28",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPickListItem",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPickListItemNumber",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IPicklistUserValues",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/state/picklists/picklists.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PICKLISTS_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearProfessionalStandingErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateProfessionalStandingSanctionsDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreatePSAppointmentAndPrivilege",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreatePSMedicalLicense",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CreateUserProfessionalStandingDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeletePSAppointmentAndPrivilege",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeletePSMedicalLicense",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetProfessionalStandingSanctionsDetails",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPSAppointmentAndPrivilegeDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPSAppointmentsAndPrivilegesList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPSMedicalLicenseDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetPSMedicalLicenseList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetUserProfessionalStandingDetails",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateProfessionalStandingSanctionsDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdatePSAppointmentAndPrivilege",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdatePSMedicalLicense",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateUserProfessionalStandingDetails",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ProfessionalStandingSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ProfessionalStandingState",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IProfessionalStanding",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/state/professional-standing/professional-standing.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PROFESSIONAL_STANDING_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/surgeon-portal.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "surgeonPortalState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClearUserProfileErrors",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "GetUserProfile",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "LinkUserData",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.actions.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateUserProfile",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.selectors.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UserProfileSelectors",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserProfileState",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IUserProfile",
        "coveragePercent": 0,
        "coverageCount": "0/42",
        "status": "low"
      },
      {
        "filePath": "src/app/state/user-profile/user-profile.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "USER_PROFILE_STATE_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/unauthorized/unauthorized.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UnauthorizedComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.development.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/default-providers.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "createTranslateLoader",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/default-providers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_PROVIDERS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/default-providers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "maskConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/web-components/card-user.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CardUser",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/web-components/form-elements/abs-select/abs-select-non.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AbsSelectNon",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/web-components/form-elements/abs-select/abs-select.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AbsSelect",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/web-components/menuItem.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IMenuItem",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/web-components/user.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      }
    ]
  }
}
