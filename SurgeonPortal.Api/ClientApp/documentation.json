{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActionMap",
            "id": "interface-ActionMap-d6a3296e6a24b3bb4fe1ae8eaf1a82a22b9726fde0b580d7822cd439dbd7145b71a9001650671f4aeb0b71911618e1dfee56b49c19258f7ba105ad0e3571fea3",
            "file": "src/app/continuous-certification/continuous-certification.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { PAY_FEE_COLS } from '../shared/components/pay-fee/pay-fee-cols';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { OutcomeRegistriesModalComponent } from './outcome-registries-modal/outcome-registries-modal.component';\nimport { AttestationModalComponent } from './attestation-modal/attestation-modal.component';\nimport { ReferenceFormModalComponent } from './reference-form-modal/reference-form-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { IUserProfile, UserProfileSelectors } from '../state';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { GetStateList } from '../state/picklists';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-continuous-certification',\n  templateUrl: './continuous-certification.component.html',\n  styleUrls: ['./continuous-certification.component.scss'],\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    GridComponent,\n    FormsModule,\n    PayFeeComponent,\n    ModalComponent,\n    OutcomeRegistriesModalComponent,\n    AttestationModalComponent,\n    ReferenceFormModalComponent,\n  ],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ContinuousCertificationComponent implements OnInit {\n  userData!: any;\n  continousCertificationData!: any;\n  outcomeRegistriesModal = false;\n  attestationModal = false;\n  referenceFormsModal = false;\n  payFeeModal = false;\n  payFeeCols = PAY_FEE_COLS;\n  payFeeData!: any;\n\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  private actionMap: ActionMap = {\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  };\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n  }\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getContinuousCertificationData();\n    this.getPayFeeData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe, M.D',\n    };\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  getContinuousCertificationData() {\n    this.continousCertificationData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/personal-profile',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Outcomes Registries / Quality Assessment Programs',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'outcomeRegistriesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/medical-training',\n        },\n        actionDisplay: 'View / Update my training',\n        icon: 'fa-solid fa-language',\n        status: Status.Completed,\n      },\n      {\n        title: 'Professional Standing',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/professional-standing',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-certificate',\n        status: Status.InProgress,\n      },\n      {\n        title: 'CME Repository',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/cme-repository',\n        },\n        actionDisplay: 'View CMEs',\n        icon: 'fa-solid fa-id-card-clip',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Pay Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'payFeeModal',\n        },\n        actionDisplay: 'View / Pay Fee',\n        icon: 'fa-solid fa-language',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Reference Forms',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'referenceFormsModal',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'attestationModal',\n        },\n        disabled: false,\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Apply for an Exam',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          style: 2,\n        },\n        disabled: true,\n        actionDisplay: 'Apply Now',\n        icon: 'fa-solid fa-language',\n      },\n    ];\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-d6a3296e6a24b3bb4fe1ae8eaf1a82a22b9726fde0b580d7822cd439dbd7145b71a9001650671f4aeb0b71911618e1dfee56b49c19258f7ba105ad0e3571fea3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "ActionMap",
            "id": "interface-ActionMap-cd81f9d9381261308c6d9780ce1109cb441ef4b662a7981dd1d5bd440cf4bdb9068e0248837e30a1fe65c69fe03d562e418961d573d68ade487a9676623e0c9a-1",
            "file": "src/app/registration-requirements/registration-requirements.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { SurgeonProfileModalComponent } from './surgeon-profile-modal/surgeon-profile-modal.component';\nimport { MedicalLicenseModalComponent } from './medical-license-modal/medical-license-modal.component';\nimport { TrainingModalComponent } from './training-modal/training-modal.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { AcgmeExperienceModalComponent } from './acgme-experience-modal/acgme-experience-modal.component';\nimport { GraduateMedicalEducationModalComponent } from './graduate-medical-education-modal/graduate-medical-education-modal.component';\nimport { SpecialAccommodationsModalComponent } from './special-accommodations-modal/special-accommodations-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { ProfessionalActivitiesAndPrivilegesModalComponent } from './professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-registration-requirements',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    SurgeonProfileModalComponent,\n    MedicalLicenseModalComponent,\n    TrainingModalComponent,\n    ModalComponent,\n    AcgmeExperienceModalComponent,\n    GraduateMedicalEducationModalComponent,\n    SpecialAccommodationsModalComponent,\n    ProfessionalActivitiesAndPrivilegesModalComponent,\n  ],\n  templateUrl: './registration-requirements.component.html',\n  styleUrls: ['./registration-requirements.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class RegistrationRequirementsComponent implements OnInit {\n  userData!: any;\n  registrationRequirementsData!: Array<any>;\n  applyForAnExamActionCardData!: any;\n  showSurgeonProfile = false;\n  showMedicalLicense = false;\n  showACGMEexprience = false;\n  showTraining = false;\n  showGraduateMedicalEducation = false;\n  showSpecialAccommodations = false;\n  showProfessionalActivitiesAndPrivileges = false;\n\n  constructor(\n    private _globalDialogService: GlobalDialogService,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._globalDialogService.setViewContainerRef = this.viewContainerRef;\n  }\n\n  private actionMap: ActionMap = {\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n      // this._globalDialogService.showComponentModal(\n      //   SurgeonProfileModalComponent,\n      //   'Surgeon Profile',\n      //   'in-progress'\n      // );\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  };\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getRegistrationRequirementsData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe M.D',\n    };\n  }\n\n  closeModal(event: any) {\n    console.log('event', event);\n    const actionFunction = this.actionMap[event.action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n\n  getRegistrationRequirementsData() {\n    this.registrationRequirementsData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'surgeonProfileModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'trainingModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-language fa-solid',\n        status: Status.InProgress,\n        recievedOn: new Date('2021-01-01'),\n      },\n      {\n        title: 'Professional Activities and Privileges',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'professionalActivitiesAndPrivilegesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-doctor',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical License',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'medicalLicenseModal',\n        },\n        actionDisplay: 'View / Update my license',\n        icon: 'fa-certificate fa-solid',\n        status: Status.InProgress,\n      },\n      {\n        title: 'ACGME Experience Report by Role',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'ACGMEExperienceModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Graduate Medical Education (GME)',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'graduateMedicalEducationModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Alert,\n      },\n      {\n        title: 'Program Director Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/program-director-attestation',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.Completed,\n      },\n      {\n        title: 'Certification(s) Upload',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/certifications-upload',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.Completed,\n      },\n      {\n        title: 'Application Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/application-fee',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-cash-register',\n        status: Status.Contingent,\n      },\n      {\n        title: 'Special Accommodations',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'specialAccommodationsModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-star',\n        status: Status.InProgress,\n      },\n    ];\n    this.applyForAnExamActionCardData = {\n      title: 'Apply for an Exam',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n      action: {\n        style: 2,\n      },\n      disabled: true,\n      actionDisplay: 'Apply Now',\n      icon: 'fa-solid fa-language',\n    };\n  }\n\n  handleCardAction(action: string) {\n    console.log('action', action);\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-cd81f9d9381261308c6d9780ce1109cb441ef4b662a7981dd1d5bd440cf4bdb9068e0248837e30a1fe65c69fe03d562e418961d573d68ade487a9676623e0c9a",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ActionMap-1"
        },
        {
            "name": "AuthStateModel",
            "id": "interface-AuthStateModel-b23b18bd61b7b78364ab925260b86ce4eb30daf5153c6975cfab6ddaee9d3652f78db3e8776886cfa59124ee2574594e91caa7f6ec095e019df71c8395f66ce9",
            "file": "src/app/api/services/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { map, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\nimport { IAuthState } from '../../../state';\nimport { ApiService } from \"ytg-angular\";\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  token: string | undefined;\n  constructor(private apiService: ApiService) {}\n\n  login(payload: IAuthCredentials): Observable<IAuthState | IError> {\n    return this.apiService\n      .post<IAuthState>(`/api/users/authenticate`, {\n        userName: payload.userName,\n        password: payload.password,\n      })\n      .pipe(\n        map((resp) => {\n          sessionStorage.setItem('access_token', <string>resp.access_token);\n          return resp;\n        }),\n        catchError((err: HttpErrorResponse) => {\n          return of(err.error as IError);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "expiration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "expires_in_minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "refresh_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppUserReadOnlyModel | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "CanActivate",
            "id": "interface-CanActivate-f0031407feffa01828b578de6857412740cc9745307f53fdaadb71c8c391456fa6d866abd9147d7f58fd6c335de977d168f173ace753dc6a38f2dc31b12e9925",
            "file": "src/app/state/auth/auth.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { AuthSelectors } from './auth.selectors';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  @Select(AuthSelectors.isAuthenticated) $isAuthenticated:\n    | Observable<boolean>\n    | undefined;\n  constructor(private store: Store) {}\n\n  // TODO: Explore using an async way to validate routes\n  async test() {\n    return 1;\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    // TODO: Check claims for the route and implement role-based authorization\n    // TODO: Route to the correct route after login\n    // Route and state will be used once we have user roles\n    return this.store.selectSnapshot(AuthSelectors.isAuthenticated);\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 170,
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "GridAction",
            "id": "interface-GridAction-ef202065cb263a75285fd7e2ba37cc923535b50b4487ba857653ce101184cb38abcd4c0381237ce4e8c216c3dfd05cece63ac9e82bd8b5615523c80921696271",
            "file": "src/app/shared/components/grid/grid.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbsFilterType, AbsGridCellRendererType } from './abs-grid.enum';\nimport { IGridOptions } from './grid-options.model';\nimport { isObservable } from 'rxjs';\n\ninterface GridAction {\n  data: any;\n  fieldKey: string;\n  onClick: (data: unknown) => void;\n}\n\n@Component({\n  selector: 'abs-grid',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GridComponent implements OnInit {\n  @Input() data!: any;\n  @Input() columns!: any;\n  @Input() actions!: any;\n  @Input() title!: string;\n  @Input() subTitle!: string;\n  @Input() gridOptions: IGridOptions = {\n    showFilter: false,\n    filterOn: '',\n    filterType: AbsFilterType.Text,\n    filterOptions: [],\n  };\n  @Input() pagination = false;\n  @Input() expandTemplate!: any;\n  @Input() currentPage = 1;\n  @Input() itemsPerPage = 5;\n  @Input() showGridLines = true;\n\n  @Output() action: EventEmitter<unknown> = new EventEmitter();\n\n  pages: number[] = [];\n  AbsGridCellRendererType = AbsGridCellRendererType;\n  searchText!: string;\n  localData: Array<any> = [];\n  filteredData: Array<any> = [];\n\n  previousPageDisabled!: boolean;\n  firstPageDisabled!: boolean;\n  nextPageDisabled!: boolean;\n  lastPageDisabled!: boolean;\n\n  ngOnInit() {\n    if (isObservable(this.data)) {\n      this.data.subscribe((data: any) => {\n        this.localData = data ?? [];\n        this.filteredData = data ?? [];\n        this.initPagintion(this.localData);\n      });\n    } else {\n      this.localData = this.data;\n      this.filteredData = this.data;\n      this.initPagintion(this.data);\n    }\n  }\n\n  initPagintion(data: any[]) {\n    if (this.pagination) {\n      const total = data?.length ?? 0;\n      const pagesCount = Math.ceil(total / this.itemsPerPage);\n      this.pages = [...Array(pagesCount).keys()].map((i) => i + 1);\n\n      this.setPaginationActions();\n    }\n  }\n\n  setPaginationActions() {\n    this.previousPageDisabled = this.currentPage === 1;\n    this.firstPageDisabled =\n      this.previousPageDisabled ||\n      this.pages.length <= 2 ||\n      this.currentPage <= 2;\n\n    this.nextPageDisabled = this.currentPage === this.pages.length;\n    this.lastPageDisabled = this.nextPageDisabled;\n  }\n\n  changePage(page: number) {\n    this.currentPage = page;\n\n    this.setPaginationActions();\n  }\n\n  getPagedData(data: any[]) {\n    let sortedData = data;\n    if (data?.length > 0) {\n      sortedData = [...data];\n      sortedData.sort(this.sortColumn.bind(this));\n    }\n    if (this.pagination) {\n      return sortedData.slice(\n        (this.currentPage - 1) * this.itemsPerPage,\n        this.currentPage * this.itemsPerPage\n      );\n    } else {\n      return sortedData;\n    }\n  }\n\n  handleAction(action: GridAction, data: unknown) {\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  handleExpand(action: GridAction, data: any) {\n    data.expanded = !data.expanded;\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  setColumnSort(column: any) {\n    this.columns.forEach((col: any) => {\n      if (col.field === column.field) {\n        col.sort =\n          column.sort === 'asc'\n            ? 'desc'\n            : column.sort === 'desc'\n            ? null\n            : 'asc';\n      } else {\n        col.sort = null;\n      }\n    });\n  }\n\n  sortColumn(a: any, b: any) {\n    const sortColumn = this.columns?.find((col: any) => col.sort);\n    if (sortColumn) {\n      if (sortColumn.sort === 'asc') {\n        return a[sortColumn.field] > b[sortColumn.field] ? 1 : -1;\n      } else {\n        return a[sortColumn.field] < b[sortColumn.field] ? 1 : -1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  onGridFilterChange($event: any) {\n    const value =\n      this.gridOptions.filterType === AbsFilterType.Text\n        ? $event?.target.value\n        : $event?.target.displayLabel;\n\n    this.filteredData = this.localData.filter((item: any) =>\n      item[this.gridOptions.filterOn]\n        .toLowerCase()\n        .includes(value.toLowerCase())\n    );\n\n    if (this.pagination) {\n      this.initPagintion(this.filteredData);\n      this.changePage(1);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fieldKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAccreditedProgramInstitutionReadOnlyModel",
            "id": "interface-IAccreditedProgramInstitutionReadOnlyModel-c2b7bb9884ec54d2c4fc968e84df8416750ddfe7031ce22a590c3c897e9c446d4e920120aa862a4d442e6a4b291e6fef2f0b3e4cb881c3f2a366d6081eb5e705",
            "file": "src/app/api/models/medicaltraining/accredited-program-institution-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAccreditedProgramInstitutionReadOnlyModel {\n    programId: number;\n    institutionName: string;\n    city: string;\n    state: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "programId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAccreditedProgramInstitutionReadOnlyModel",
            "id": "interface-IAccreditedProgramInstitutionReadOnlyModel-c2b7bb9884ec54d2c4fc968e84df8416750ddfe7031ce22a590c3c897e9c446d4e920120aa862a4d442e6a4b291e6fef2f0b3e4cb881c3f2a366d6081eb5e705-1",
            "file": "src/app/api/models/picklists/accredited-program-institution-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAccreditedProgramInstitutionReadOnlyModel {\n    programId: number;\n    institutionName: string;\n    city: string;\n    state: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "programId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IAccreditedProgramInstitutionReadOnlyModel-1"
        },
        {
            "name": "IActionCardReadOnlyModel",
            "id": "interface-IActionCardReadOnlyModel-dd0a3ed351ebf4ce61c4b7eefe604d34f7a87c90ce6fbc770176d13654c38e9014a15d60b988ba52e99af78cbe694d74b749fb5456144af2953f737421d956fe",
            "file": "src/app/shared/components/action-card/action-card-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IActionCardReadOnlyModel {\n  title: string;\n  description: string;\n  action?: {\n    type: string;\n    action?: string;\n  };\n  actionDisplay: string;\n  icon: string;\n  status?: string;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "actionDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAdditionalTrainingModel",
            "id": "interface-IAdditionalTrainingModel-7b92911f59fcbea20bd2d282d3a891a923bc6e058fea90ed0e9ec6932fed140faa9c0691659d9b09e6630848be7fb539d4305bbaaf0f9e583a1dddf87e30fa82",
            "file": "src/app/api/models/examinations/gq/additional-training.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAdditionalTrainingModel {\n    trainingId: number;\n    dateEnded: string;\n    dateStarted: string;\n    other: string;\n    institutionId: number;\n    institutionName: string;\n    city: string;\n    stateId: string;\n    state: string;\n    typeOfTraining: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dateEnded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dateStarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "institutionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stateId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "trainingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "typeOfTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAdditionalTrainingReadOnlyModel",
            "id": "interface-IAdditionalTrainingReadOnlyModel-d9a8b9eeae98f4747739dd03f9b948d69a110b6d77da470d726584cc094c720475db6a12275c7e7de4d425b8568ed8bb40988b1dc54360aa7e4b53abc7b5d796",
            "file": "src/app/api/models/examinations/gq/additional-training-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAdditionalTrainingReadOnlyModel {\n    trainingId: number;\n    typeOfTraining: string;\n    state: string;\n    city: string;\n    institutionName: string;\n    other: string;\n    dateStarted: string;\n    dateEnded: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dateEnded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dateStarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "trainingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "typeOfTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAdvancedTrainingModel",
            "id": "interface-IAdvancedTrainingModel-3156266f25f1dcc9eb7961487f2df3a800d7a15e741465673715e193b44de35f22a83030252120b1f500ab2be6fde249560737ac61b813fd1dbf6a95d2acf5d0",
            "file": "src/app/api/models/medicaltraining/advanced-training.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAdvancedTrainingModel {\n  id?: number;\n  userId?: number;\n  trainingTypeId?: number;\n  trainingType?: string;\n  programId?: number;\n  institutionName?: string;\n  city?: string;\n  state?: string;\n  other?: string;\n  startDate?: string;\n  endDate?: string;\n  createdByUserId?: number;\n  createdAtUtc?: string;\n  lastUpdatedAtUtc?: string;\n  lastUpdatedByUserId?: number;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "programId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "trainingType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "trainingTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAdvancedTrainingReadOnlyModel",
            "id": "interface-IAdvancedTrainingReadOnlyModel-ed5c9b7cc801dffa89224574d1117da4e9561f7f23d5bf3a609b8bca0968d5de3383570cf6144cf0e479c86167214e255f915f1a4134ca2cb9fcc24657a7cbd7",
            "file": "src/app/api/models/medicaltraining/advanced-training-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAdvancedTrainingReadOnlyModel {\n    id: number;\n    trainingType: string;\n    institutionName: string;\n    city: string;\n    state: string;\n    other: string;\n    startDate: string;\n    endDate: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "institutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "trainingType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAppUserReadOnlyModel",
            "id": "interface-IAppUserReadOnlyModel-1f4a187a70dd3c906f6f766bdd9fae00c5b9b4893effb28d66bd45bd731932b74715d031503e99974ae3a0976bd2d1316cef4f6d8cfcfb70dc0d1c445252b4c7",
            "file": "src/app/api/models/users/app-user-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAppUserReadOnlyModel {\n  userId: number;\n  fullName: string;\n  emailAddress: string;\n  lastLoginDateUtc: string | null;\n}\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastLoginDateUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "description": "<p>#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -</p>\n<p>All client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file</p>\n<p>############################################################################</p>\n",
            "rawdescription": "\n\n#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -\n\nAll client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file\n\n############################################################################\n",
            "methods": []
        },
        {
            "name": "IAuthCredentials",
            "id": "interface-IAuthCredentials-b23b18bd61b7b78364ab925260b86ce4eb30daf5153c6975cfab6ddaee9d3652f78db3e8776886cfa59124ee2574594e91caa7f6ec095e019df71c8395f66ce9",
            "file": "src/app/api/services/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { map, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\nimport { IAuthState } from '../../../state';\nimport { ApiService } from \"ytg-angular\";\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  token: string | undefined;\n  constructor(private apiService: ApiService) {}\n\n  login(payload: IAuthCredentials): Observable<IAuthState | IError> {\n    return this.apiService\n      .post<IAuthState>(`/api/users/authenticate`, {\n        userName: payload.userName,\n        password: payload.password,\n      })\n      .pipe(\n        map((resp) => {\n          sessionStorage.setItem('access_token', <string>resp.access_token);\n          return resp;\n        }),\n        catchError((err: HttpErrorResponse) => {\n          return of(err.error as IError);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IAuthState",
            "id": "interface-IAuthState-c9b9aa9c2af9e01d3c733e06904860e9927e54c56abdbbf4105a00f7932683e82ba76100f3bcdf8b1c3f83d60f12be26418503ef3565f228b37bd362988d7ea8",
            "file": "src/app/state/auth/auth.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { Login, Logout, ClearAuthErrors } from './auth.actions';\nimport {\n  AuthStateModel,\n  AuthService,\n  IError,\n  IAppUserReadOnlyModel,\n} from '../../api';\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n}\n\nexport const AUTH_STATE_TOKEN = new StateToken<IAuthState>('auth');\n\n@State<IAuthState>({\n  name: AUTH_STATE_TOKEN,\n  defaults: {\n    access_token: null,\n    refresh_token: null,\n    token_type: null,\n    userName: null,\n    expiration: null,\n    expires_in_minutes: null,\n    user: null,\n    claims: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class AuthState {\n  constructor(private authService: AuthService, private store: Store) {}\n\n  @Action(Login)\n  login(ctx: StateContext<IAuthState>, action: Login) {\n    return this.authService.login(action.payload).pipe(\n      tap((result: AuthStateModel | IError) => {\n        if (typeof result === 'string' && result === 'Login failed') {\n          ctx.setState({\n            access_token: '',\n            refresh_token: '',\n            token_type: '',\n            userName: '',\n            expiration: '',\n            expires_in_minutes: 0,\n            user: {} as IAppUserReadOnlyModel,\n            claims: [],\n            errors: {\n              type: 'Login failed',\n              title: 'Login failed',\n              status: 400,\n              traceId: '',\n              errors: null,\n            },\n          });\n        }\n        // eslint-disable-next-line no-prototype-builtins\n        else if (result.hasOwnProperty('status')) {\n          ctx.setState({\n            access_token: '',\n            refresh_token: '',\n            token_type: '',\n            userName: '',\n            expiration: '',\n            expires_in_minutes: 0,\n            user: {} as IAppUserReadOnlyModel,\n            claims: [],\n            errors: <IError>result,\n          });\n        } else {\n          const state = ctx.getState();\n          const res = result as AuthStateModel;\n          ctx.setState({\n            ...state,\n            ...result,\n            claims: AuthState.parseJwt(<string>res.access_token).claims,\n            errors: null,\n          });\n        }\n      })\n    );\n  }\n\n  @Action(Logout)\n  logout(ctx: StateContext<IAuthState>) {\n    sessionStorage.clear();\n    this.store.reset({});\n    ctx.setState({\n      access_token: '',\n      refresh_token: '',\n      token_type: '',\n      userName: '',\n      expiration: '',\n      expires_in_minutes: 0,\n      user: {} as IAppUserReadOnlyModel,\n      claims: [],\n      errors: null,\n    });\n  }\n\n  static parseJwt(token: string): { claims: string[] } {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      window\n        .atob(base64)\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n\n    const returnObj = JSON.parse(jsonPayload);\n    returnObj.claims =\n      returnObj['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n\n    return returnObj;\n  }\n\n  @Action(ClearAuthErrors)\n  clearErrors(ctx: StateContext<IAuthState>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
            "properties": [
                {
                    "name": "claims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IError | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "AuthStateModel"
        },
        {
            "name": "ICalendarFilter",
            "id": "interface-ICalendarFilter-66ae4951fcd80539da5a8a0cb0a53867064fa2747106087e8b58492c8bf52b3a7fc2e90458600d735ec418b95ff999ba4fa514d590bcaa24cb8bbc72166d9805",
            "file": "src/app/gme-history/gme-history.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationList,\n  DeleteGraduateMedicalEducation,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationReadOnlyModel, IGmeSummaryReadOnlyModel } from 'src/app/api';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  gmeSummarySubscription: Subscription | undefined;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }\n          <br>${info.event.extendedProps['programName']}\n          <br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflicts: any[] = [];\n        this.viewConflictsToResolve(conflicts);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  summaryGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  gmeSummaryData!: any[];\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n  selectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initSummaryData();\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetGraduateMedicalEducationList());\n\n    this.gmeRotationsSubscription = this.gmeRotations$?.subscribe(\n      (gmeRotations) => {\n        this.clinicalActivity = [];\n        this.nonClinicalActivity = [];\n        this.conflicts = [];\n\n        if (gmeRotations) {\n          this.calendarFilterOptions = [\n            {\n              label: 'Activity Types',\n              items: [\n                {\n                  label: 'Clinical',\n                  value: { value: 'clinical', field: 'type' },\n                },\n                {\n                  label: 'Non-Clinical',\n                  value: { value: 'non-clinical', field: 'type' },\n                },\n                //{ label: 'Conflicts', value: { value: 'conflict', field: 'type' }, },\n              ],\n            },\n            {\n              label: 'Clinical Levels',\n              items: [],\n            },\n          ];\n\n          // set filter options for grid\n          const clinicalFilterOptions: { value: string; label: string }[] = [];\n          const yearFilterOptions: ICalendarFilter[] = [];\n          gmeRotations.forEach((item) => {\n            //get min start date\n            if (this.minStartDate) {\n              if (new Date(item.startDate) < new Date(this.minStartDate)) {\n                this.minStartDate = new Date(item.startDate);\n              }\n            } else {\n              this.minStartDate = new Date(item.startDate);\n            }\n\n            //get max end date\n            if (this.maxEndDate) {\n              if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n                this.maxEndDate = new Date(item.endDate);\n              }\n            } else {\n              this.maxEndDate = new Date(item.endDate);\n            }\n\n            // build filter options for grid\n            if (\n              !clinicalFilterOptions.some(\n                (x) =>\n                  x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n              )\n            ) {\n              clinicalFilterOptions.push({\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                label: item.clinicalLevel,\n              });\n              this.calendarFilterOptions[1].items.push({\n                label: item.clinicalLevel,\n                value: {\n                  value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                  field: 'clinicalLevel',\n                },\n              });\n            }\n\n            const itemMonth = new Date(item.startDate).getMonth();\n            const itemYear = new Date(item.startDate).getFullYear().toString();\n            let yearFilter = '';\n            // hardcoded to 5 for June\n            if (itemMonth >= 5) {\n              yearFilter = itemYear.concat(\n                ' - ',\n                (parseInt(itemYear) + 1).toString()\n              );\n            } else {\n              yearFilter = (parseInt(itemYear) - 1)\n                .toString()\n                .concat(' - ', itemYear);\n            }\n            if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n              yearFilterOptions.push({\n                label: yearFilter,\n                value: {\n                  value: yearFilter?.replaceAll(' ', '_').trim(),\n                  field: 'year',\n                },\n              });\n            }\n\n            // build calendar items\n            const endDate = new Date(item.endDate);\n            endDate.setDate(endDate.getDate() + 1);\n            const calendarItem = {\n              id: item.id,\n              start: item.startDate,\n              end: endDate,\n              class: '',\n              color: '',\n              highlightColor: '',\n              eventTitle: item.clinicalLevel,\n              programName: item.programName,\n              type: '',\n              year: yearFilter.replaceAll(' ', '_').trim(),\n              clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              allDay: true,\n              rawData: item,\n            };\n\n            if (item.isCredit) {\n              // clinical activity\n              calendarItem.class = 'clinical';\n              calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n              calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n              calendarItem.type = 'clinical';\n              this.clinicalActivity.push(calendarItem);\n            } else {\n              // non clinical activity\n              calendarItem.class = 'non-clinical';\n              calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n              calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n              calendarItem.type = 'non-clinical';\n              this.nonClinicalActivity.push(calendarItem);\n            }\n          });\n\n          clinicalFilterOptions.sort((a, b) => {\n            return a.label > b.label ? 1 : -1;\n          });\n          this.calendarFilterOptions.push({\n            label: 'Years',\n            items: yearFilterOptions,\n          });\n          this.calendarFilterOptions.forEach((filterOption) => {\n            if (filterOption.label !== 'Activity Types') {\n              filterOption.items.sort(\n                (a: ICalendarFilter, b: ICalendarFilter) => {\n                  return a.label > b.label ? 1 : -1;\n                }\n              );\n            }\n          });\n\n          this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n\n          this.itemizedGme$.next(!this.itemizedGme$.getValue());\n        }\n\n        this.applyCalendarFilters();\n      }\n    );\n  }\n\n  initSummaryData() {\n    this.gmeSummarySubscription = this.gmeSummary$?.subscribe((gmeSummary) => {\n      console.log('gmeSummary', gmeSummary);\n      if (gmeSummary) {\n        this.summaryGme$.next(!this.summaryGme$.getValue());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        //this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeSummarySubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    // class: 'conflict',\n    // classNames: ['clickable-event'],\n    // color: 'rgba(139, 4, 10, 0.25)',\n    // highlightColor: 'rgba(139, 4, 10, 1)',\n    // eventTitle: 'Rotation Conflict',\n    // type: 'conflict',\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      //this.getConflicts(filters),\n    ];\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this.selectedGmeRotationId$.next({\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    this.itemizedGme$.next(!this.itemizedGme$.getValue());\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this.selectedGmeRotationId$.next({\n        id: data.id,\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflictList: any[]) {\n    console.log(conflictList);\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICalendarFilterValue",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ICalendarFilterOptions",
            "id": "interface-ICalendarFilterOptions-66ae4951fcd80539da5a8a0cb0a53867064fa2747106087e8b58492c8bf52b3a7fc2e90458600d735ec418b95ff999ba4fa514d590bcaa24cb8bbc72166d9805",
            "file": "src/app/gme-history/gme-history.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationList,\n  DeleteGraduateMedicalEducation,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationReadOnlyModel, IGmeSummaryReadOnlyModel } from 'src/app/api';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  gmeSummarySubscription: Subscription | undefined;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }\n          <br>${info.event.extendedProps['programName']}\n          <br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflicts: any[] = [];\n        this.viewConflictsToResolve(conflicts);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  summaryGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  gmeSummaryData!: any[];\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n  selectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initSummaryData();\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetGraduateMedicalEducationList());\n\n    this.gmeRotationsSubscription = this.gmeRotations$?.subscribe(\n      (gmeRotations) => {\n        this.clinicalActivity = [];\n        this.nonClinicalActivity = [];\n        this.conflicts = [];\n\n        if (gmeRotations) {\n          this.calendarFilterOptions = [\n            {\n              label: 'Activity Types',\n              items: [\n                {\n                  label: 'Clinical',\n                  value: { value: 'clinical', field: 'type' },\n                },\n                {\n                  label: 'Non-Clinical',\n                  value: { value: 'non-clinical', field: 'type' },\n                },\n                //{ label: 'Conflicts', value: { value: 'conflict', field: 'type' }, },\n              ],\n            },\n            {\n              label: 'Clinical Levels',\n              items: [],\n            },\n          ];\n\n          // set filter options for grid\n          const clinicalFilterOptions: { value: string; label: string }[] = [];\n          const yearFilterOptions: ICalendarFilter[] = [];\n          gmeRotations.forEach((item) => {\n            //get min start date\n            if (this.minStartDate) {\n              if (new Date(item.startDate) < new Date(this.minStartDate)) {\n                this.minStartDate = new Date(item.startDate);\n              }\n            } else {\n              this.minStartDate = new Date(item.startDate);\n            }\n\n            //get max end date\n            if (this.maxEndDate) {\n              if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n                this.maxEndDate = new Date(item.endDate);\n              }\n            } else {\n              this.maxEndDate = new Date(item.endDate);\n            }\n\n            // build filter options for grid\n            if (\n              !clinicalFilterOptions.some(\n                (x) =>\n                  x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n              )\n            ) {\n              clinicalFilterOptions.push({\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                label: item.clinicalLevel,\n              });\n              this.calendarFilterOptions[1].items.push({\n                label: item.clinicalLevel,\n                value: {\n                  value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                  field: 'clinicalLevel',\n                },\n              });\n            }\n\n            const itemMonth = new Date(item.startDate).getMonth();\n            const itemYear = new Date(item.startDate).getFullYear().toString();\n            let yearFilter = '';\n            // hardcoded to 5 for June\n            if (itemMonth >= 5) {\n              yearFilter = itemYear.concat(\n                ' - ',\n                (parseInt(itemYear) + 1).toString()\n              );\n            } else {\n              yearFilter = (parseInt(itemYear) - 1)\n                .toString()\n                .concat(' - ', itemYear);\n            }\n            if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n              yearFilterOptions.push({\n                label: yearFilter,\n                value: {\n                  value: yearFilter?.replaceAll(' ', '_').trim(),\n                  field: 'year',\n                },\n              });\n            }\n\n            // build calendar items\n            const endDate = new Date(item.endDate);\n            endDate.setDate(endDate.getDate() + 1);\n            const calendarItem = {\n              id: item.id,\n              start: item.startDate,\n              end: endDate,\n              class: '',\n              color: '',\n              highlightColor: '',\n              eventTitle: item.clinicalLevel,\n              programName: item.programName,\n              type: '',\n              year: yearFilter.replaceAll(' ', '_').trim(),\n              clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              allDay: true,\n              rawData: item,\n            };\n\n            if (item.isCredit) {\n              // clinical activity\n              calendarItem.class = 'clinical';\n              calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n              calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n              calendarItem.type = 'clinical';\n              this.clinicalActivity.push(calendarItem);\n            } else {\n              // non clinical activity\n              calendarItem.class = 'non-clinical';\n              calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n              calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n              calendarItem.type = 'non-clinical';\n              this.nonClinicalActivity.push(calendarItem);\n            }\n          });\n\n          clinicalFilterOptions.sort((a, b) => {\n            return a.label > b.label ? 1 : -1;\n          });\n          this.calendarFilterOptions.push({\n            label: 'Years',\n            items: yearFilterOptions,\n          });\n          this.calendarFilterOptions.forEach((filterOption) => {\n            if (filterOption.label !== 'Activity Types') {\n              filterOption.items.sort(\n                (a: ICalendarFilter, b: ICalendarFilter) => {\n                  return a.label > b.label ? 1 : -1;\n                }\n              );\n            }\n          });\n\n          this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n\n          this.itemizedGme$.next(!this.itemizedGme$.getValue());\n        }\n\n        this.applyCalendarFilters();\n      }\n    );\n  }\n\n  initSummaryData() {\n    this.gmeSummarySubscription = this.gmeSummary$?.subscribe((gmeSummary) => {\n      console.log('gmeSummary', gmeSummary);\n      if (gmeSummary) {\n        this.summaryGme$.next(!this.summaryGme$.getValue());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        //this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeSummarySubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    // class: 'conflict',\n    // classNames: ['clickable-event'],\n    // color: 'rgba(139, 4, 10, 0.25)',\n    // highlightColor: 'rgba(139, 4, 10, 1)',\n    // eventTitle: 'Rotation Conflict',\n    // type: 'conflict',\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      //this.getConflicts(filters),\n    ];\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this.selectedGmeRotationId$.next({\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    this.itemizedGme$.next(!this.itemizedGme$.getValue());\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this.selectedGmeRotationId$.next({\n        id: data.id,\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflictList: any[]) {\n    console.log(conflictList);\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICalendarFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ICalendarFilterValue",
            "id": "interface-ICalendarFilterValue-66ae4951fcd80539da5a8a0cb0a53867064fa2747106087e8b58492c8bf52b3a7fc2e90458600d735ec418b95ff999ba4fa514d590bcaa24cb8bbc72166d9805",
            "file": "src/app/gme-history/gme-history.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationList,\n  DeleteGraduateMedicalEducation,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationReadOnlyModel, IGmeSummaryReadOnlyModel } from 'src/app/api';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  gmeSummarySubscription: Subscription | undefined;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }\n          <br>${info.event.extendedProps['programName']}\n          <br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflicts: any[] = [];\n        this.viewConflictsToResolve(conflicts);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  summaryGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  gmeSummaryData!: any[];\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n  selectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initSummaryData();\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetGraduateMedicalEducationList());\n\n    this.gmeRotationsSubscription = this.gmeRotations$?.subscribe(\n      (gmeRotations) => {\n        this.clinicalActivity = [];\n        this.nonClinicalActivity = [];\n        this.conflicts = [];\n\n        if (gmeRotations) {\n          this.calendarFilterOptions = [\n            {\n              label: 'Activity Types',\n              items: [\n                {\n                  label: 'Clinical',\n                  value: { value: 'clinical', field: 'type' },\n                },\n                {\n                  label: 'Non-Clinical',\n                  value: { value: 'non-clinical', field: 'type' },\n                },\n                //{ label: 'Conflicts', value: { value: 'conflict', field: 'type' }, },\n              ],\n            },\n            {\n              label: 'Clinical Levels',\n              items: [],\n            },\n          ];\n\n          // set filter options for grid\n          const clinicalFilterOptions: { value: string; label: string }[] = [];\n          const yearFilterOptions: ICalendarFilter[] = [];\n          gmeRotations.forEach((item) => {\n            //get min start date\n            if (this.minStartDate) {\n              if (new Date(item.startDate) < new Date(this.minStartDate)) {\n                this.minStartDate = new Date(item.startDate);\n              }\n            } else {\n              this.minStartDate = new Date(item.startDate);\n            }\n\n            //get max end date\n            if (this.maxEndDate) {\n              if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n                this.maxEndDate = new Date(item.endDate);\n              }\n            } else {\n              this.maxEndDate = new Date(item.endDate);\n            }\n\n            // build filter options for grid\n            if (\n              !clinicalFilterOptions.some(\n                (x) =>\n                  x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n              )\n            ) {\n              clinicalFilterOptions.push({\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                label: item.clinicalLevel,\n              });\n              this.calendarFilterOptions[1].items.push({\n                label: item.clinicalLevel,\n                value: {\n                  value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                  field: 'clinicalLevel',\n                },\n              });\n            }\n\n            const itemMonth = new Date(item.startDate).getMonth();\n            const itemYear = new Date(item.startDate).getFullYear().toString();\n            let yearFilter = '';\n            // hardcoded to 5 for June\n            if (itemMonth >= 5) {\n              yearFilter = itemYear.concat(\n                ' - ',\n                (parseInt(itemYear) + 1).toString()\n              );\n            } else {\n              yearFilter = (parseInt(itemYear) - 1)\n                .toString()\n                .concat(' - ', itemYear);\n            }\n            if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n              yearFilterOptions.push({\n                label: yearFilter,\n                value: {\n                  value: yearFilter?.replaceAll(' ', '_').trim(),\n                  field: 'year',\n                },\n              });\n            }\n\n            // build calendar items\n            const endDate = new Date(item.endDate);\n            endDate.setDate(endDate.getDate() + 1);\n            const calendarItem = {\n              id: item.id,\n              start: item.startDate,\n              end: endDate,\n              class: '',\n              color: '',\n              highlightColor: '',\n              eventTitle: item.clinicalLevel,\n              programName: item.programName,\n              type: '',\n              year: yearFilter.replaceAll(' ', '_').trim(),\n              clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              allDay: true,\n              rawData: item,\n            };\n\n            if (item.isCredit) {\n              // clinical activity\n              calendarItem.class = 'clinical';\n              calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n              calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n              calendarItem.type = 'clinical';\n              this.clinicalActivity.push(calendarItem);\n            } else {\n              // non clinical activity\n              calendarItem.class = 'non-clinical';\n              calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n              calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n              calendarItem.type = 'non-clinical';\n              this.nonClinicalActivity.push(calendarItem);\n            }\n          });\n\n          clinicalFilterOptions.sort((a, b) => {\n            return a.label > b.label ? 1 : -1;\n          });\n          this.calendarFilterOptions.push({\n            label: 'Years',\n            items: yearFilterOptions,\n          });\n          this.calendarFilterOptions.forEach((filterOption) => {\n            if (filterOption.label !== 'Activity Types') {\n              filterOption.items.sort(\n                (a: ICalendarFilter, b: ICalendarFilter) => {\n                  return a.label > b.label ? 1 : -1;\n                }\n              );\n            }\n          });\n\n          this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n\n          this.itemizedGme$.next(!this.itemizedGme$.getValue());\n        }\n\n        this.applyCalendarFilters();\n      }\n    );\n  }\n\n  initSummaryData() {\n    this.gmeSummarySubscription = this.gmeSummary$?.subscribe((gmeSummary) => {\n      console.log('gmeSummary', gmeSummary);\n      if (gmeSummary) {\n        this.summaryGme$.next(!this.summaryGme$.getValue());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        //this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeSummarySubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    // class: 'conflict',\n    // classNames: ['clickable-event'],\n    // color: 'rgba(139, 4, 10, 0.25)',\n    // highlightColor: 'rgba(139, 4, 10, 1)',\n    // eventTitle: 'Rotation Conflict',\n    // type: 'conflict',\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      //this.getConflicts(filters),\n    ];\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this.selectedGmeRotationId$.next({\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    this.itemizedGme$.next(!this.itemizedGme$.getValue());\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this.selectedGmeRotationId$.next({\n        id: data.id,\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflictList: any[]) {\n    console.log(conflictList);\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ICertificateTypeReadOnlyModel",
            "id": "interface-ICertificateTypeReadOnlyModel-e38332549f5c3575d7922d314b85cc08b75612b2e269fb3846e6393ecca671d612618e367264454abaae134cd029c26bf08da020918d6d864a73e4d888a856b1",
            "file": "src/app/api/models/picklists/certificate-type-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICertificateTypeReadOnlyModel {\n    id: number;\n    name: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ICertificationReadOnlyModel",
            "id": "interface-ICertificationReadOnlyModel-9d1ea736ac0798f88158510a2262c3353f10833a97a7978bd6cf4a8ea7236de343534cadc1e0ab7fc187bfb7446c7a25cb971bbd1cd8e2a62f2c871cc73c1da6",
            "file": "src/app/api/models/surgeons/certification-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICertificationReadOnlyModel {\n    speciality: string;\n    certificateId: string;\n    initialCertificationDate: string;\n    endDateDisplay: string;\n}\n",
            "properties": [
                {
                    "name": "certificateId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "endDateDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "initialCertificationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "speciality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IClinicalActivityReadOnlyModel",
            "id": "interface-IClinicalActivityReadOnlyModel-f54032e222dfaed453848c2d263255570513ecc0d08b8eb3b5b363a343e5defe0b95a07a55dbe0376f2b4102fc80b27310d9bd43fe7fdf18d498e08f91c5ae6b",
            "file": "src/app/api/models/picklists/clinical-activity-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IClinicalActivityReadOnlyModel {\n    id: number;\n    name: string;\n    isCredit: boolean;\n    isEssential: boolean;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isCredit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isEssential",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IClinicalLevelReadOnlyModel",
            "id": "interface-IClinicalLevelReadOnlyModel-543583ca34b073321464e5eb79513bec1f3d23a6bdd0531524e282f94c081700f07033a7b1ee5d61035ef12aa4dfb306f2f7c14d12411292126a5c2142f9a4ac",
            "file": "src/app/api/models/picklists/clinical-level-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IClinicalLevelReadOnlyModel {\n    id: number;\n    name: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IContinuousCertication",
            "id": "interface-IContinuousCertication-cb922742825b146b883c981c0c0e19328695f5f9b86a2b19d27f6a49b3eb82a059869d47d6a37a583ce7a9cbc0b5c391b9786671fcae05bfb94d2ba636f9b0cf",
            "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { OutcomeRegistriesService } from 'src/app/api/services/continuouscertification/outcome-registries.service';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport {\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from './continuous-certification.actions';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport interface IContinuousCertication {\n  outcomeRegistries?: IOutcomeRegistryModel;\n  errors?: IFormErrors | null;\n}\n\nexport const CONTCERT_STATE_TOKEN = new StateToken<IContinuousCertication>(\n  'continuous_certification'\n);\n\n@State<IContinuousCertication>({\n  name: CONTCERT_STATE_TOKEN,\n  defaults: {\n    outcomeRegistries: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuousCertificationState {\n  constructor(private outcomeRegistriesService: OutcomeRegistriesService) {}\n\n  @Action(GetOutcomeRegistries)\n  getOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    payload: { userId: number }\n  ): Observable<IOutcomeRegistryModel | undefined> {\n    if (ctx.getState().outcomeRegistries) {\n      return of(ctx.getState()?.outcomeRegistries);\n    }\n\n    return this.outcomeRegistriesService\n      .retrieveOutcomeRegistry_GetByUserId(payload.userId)\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateOutcomeRegistries)\n  updateOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    { payload }: UpdateOutcomeRegistries\n  ) {\n    ctx.patchState({\n      outcomeRegistries: payload,\n    });\n\n    return this.outcomeRegistriesService\n      .updateOutcomeRegistry(payload.userId, payload)\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | null",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "outcomeRegistries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOutcomeRegistryModel",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ICountryReadOnlyModel",
            "id": "interface-ICountryReadOnlyModel-8352e5a2e2f56e38af758cca91a424e1df4ee834d8868faee36aa39183d29613926f5c2f8f45835f8fb8cca16e098299f9724780f69c00d28e360f5aa04bf743",
            "file": "src/app/api/models/picklists/country-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICountryReadOnlyModel {\n    itemValue: string | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDashboardState",
            "id": "interface-IDashboardState-2992367e96acfa5c4bcc7ebc8f4e56fd586c5d566c4d45a2f8db1874c434dca1eac9e47368f079151b733fff3cc7b5b4eca609de666fd38635ac9ecf6a363bb5",
            "file": "src/app/state/dashboard/dashboard.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IProgramReadOnlyModel } from 'src/app/api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from 'src/app/api/models/surgeons/certification-read-only.model';\nimport { ProgramsService } from 'src/app/api/services/trainees/programs.service';\nimport { CertificationsService } from 'src/app/api/services/surgeons/certifications.service';\nimport {\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n} from './dashboard.actions';\nimport { catchError, of, tap } from 'rxjs';\n\nexport interface IDashboardState {\n  certificates: ICertificationReadOnlyModel[];\n  programs: IProgramReadOnlyModel;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IDashboardState>('dashboard');\n\n@State({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    certificates: [],\n    programs: {\n      programName: '',\n      programDirector: '',\n      programNumber: '',\n      exam: '',\n      clinicalLevel: '',\n      city: '',\n      state: '',\n    },\n  },\n})\n@Injectable()\nexport class DashboardState {\n  constructor(\n    private programsService: ProgramsService,\n    private certificationsService: CertificationsService\n  ) {}\n  @Action(GetDashboardProgramInformation) getDashboardProgramInformation(\n    ctx: StateContext<IDashboardState>,\n    payload: { userId: number }\n  ) {\n    const state = ctx.getState();\n    return this.programsService\n      .retrieveProgramReadOnly_GetByUserId(payload.userId)\n      .pipe(\n        tap((result: IProgramReadOnlyModel) => {\n          const res = result as IProgramReadOnlyModel;\n          ctx.setState({\n            ...state,\n            programs: res,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetDashboardCertificationInformation)\n  getDashboardCertificationInformation(\n    ctx: StateContext<IDashboardState>,\n    payload: { absId: string }\n  ) {\n    const state = ctx.getState();\n    return this.certificationsService\n      .retrieveCertificationReadOnly_GetByAbsId(payload.absId)\n      .pipe(\n        tap((result: ICertificationReadOnlyModel[]) => {\n          const res = result as ICertificationReadOnlyModel[];\n          ctx.setState({\n            ...state,\n            certificates: res,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "certificates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICertificationReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "programs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProgramReadOnlyModel",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDegreeReadOnlyModel",
            "id": "interface-IDegreeReadOnlyModel-a77b87526d6c60c35d2730632073882b374410a43776ebed5837b4d74bb05ed9ef59e75ab5a6fa2e0ea363ac808b3ef51c5e086e93c435b7a3caa7a028510876",
            "file": "src/app/api/models/picklists/degree-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDegreeReadOnlyModel {\n    itemDisplay: string;\n    itemValue: number;\n}\n",
            "properties": [
                {
                    "name": "itemDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDocumentModel",
            "id": "interface-IDocumentModel-0ff00f80cddcf4e01ac91de858980149f6a74d4e8c4d1f49151d7ef72ea5acad39ef57025070f67fd5023b5687cd1974c30c59a203ed3f8dc596270fea486627",
            "file": "src/app/api/models/documents/document.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDocumentModel {\n    id: number;\n    userId: number;\n    streamId: string;\n    documentTypeId: number;\n    documentName: string;\n    documentType: string;\n    internalViewOnly: boolean;\n    createdByUserId: number;\n    uploadedBy: string;\n    uploadedDateUtc: string;\n    createdAtUtc: string;\n    lastUpdatedAtUtc: string;\n    lastUpdatedByUserId: number;\n}\n",
            "properties": [
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "documentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "documentTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "internalViewOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "streamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uploadedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "uploadedDateUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDocumentReadOnlyModel",
            "id": "interface-IDocumentReadOnlyModel-0d00d8ac61ab6ad4c3cf9ebd508d8054e7765ab1d79e561b851c20d63d415309f7f28605a62a0021fb19e08f8be78033bc96ffb111f2b3250754fc6f685cedc3",
            "file": "src/app/api/models/documents/document-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDocumentReadOnlyModel {\n    id: number;\n    userId: number;\n    streamId: string;\n    documentTypeId: number;\n    documentName: string;\n    documentType: string;\n    internalViewOnly: boolean;\n    uploadedBy: string;\n    uploadedDateUtc: string;\n}\n",
            "properties": [
                {
                    "name": "documentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "documentTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "internalViewOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "streamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "uploadedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "uploadedDateUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDocuments",
            "id": "interface-IDocuments-5d0a83e114f3b4650fa75f0e4a8587edd3bc85f68df25598400aea4f50071790b919027a106ce846e87308e63a28f72fa86d1da6c9c68d774a515f6d905a7876",
            "file": "src/app/state/documents/documents.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { IDocumentReadOnlyModel } from 'src/app/api/models/documents/document-read-only.model';\nimport { DocumentService } from 'src/app/api/services/documents/document.service';\nimport { GetAllDocuments } from './documents.actions';\n\nexport interface IDocuments {\n  documents: IDocumentReadOnlyModel[] | undefined;\n  errors?: IFormErrors;\n}\n\nexport const DOCUMENTS_STATE_TOKEN = new StateToken<IDocuments>('documents');\n\n@State<IDocuments>({\n  name: DOCUMENTS_STATE_TOKEN,\n  defaults: {\n    documents: undefined,\n  },\n})\n@Injectable()\nexport class DocumentsState {\n  constructor(private documentService: DocumentService) {}\n\n  @Action(GetAllDocuments)\n  getAllDocuments({\n    patchState,\n  }: StateContext<IDocuments>): Observable<IDocumentReadOnlyModel[]> {\n    return this.documentService.retrieveDocumentReadOnly_GetByUserId().pipe(\n      tap((documents) => {\n        patchState({\n          documents,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDocumentReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDocumentTypeReadOnlyModel",
            "id": "interface-IDocumentTypeReadOnlyModel-0ee8abc93845664e06359d73ab78a54f8f5468ed3f70ce2c5228a2d56e9f2443c5b8c7bb7fa2e84e3e0124b49fc0d3ebee6e1ee452a1c4ef61b353490728a0a8",
            "file": "src/app/api/models/picklists/document-type-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDocumentTypeReadOnlyModel {\n    id: number;\n    name: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IDropdown",
            "id": "interface-IDropdown-fa2c4985f0710b68c9c397a6b3ebe46a8735b3a1105850201c7e965f34a9b81b00c90fa089c06cf3e81aa8e0e988e342d53a09e5819eefa5b3c7b8495d785a5f",
            "file": "src/app/shared/components/grid/grid-options.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGridOptions {\n  showFilter: boolean;\n  filterOn: string;\n  filterType?: string;\n  filterOptions?: IDropdown[];\n  placeholder?: string;\n}\n\nexport interface IDropdown {\n  value: string;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IError",
            "id": "interface-IError-b23b18bd61b7b78364ab925260b86ce4eb30daf5153c6975cfab6ddaee9d3652f78db3e8776886cfa59124ee2574594e91caa7f6ec095e019df71c8395f66ce9",
            "file": "src/app/api/services/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { map, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\nimport { IAuthState } from '../../../state';\nimport { ApiService } from \"ytg-angular\";\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  token: string | undefined;\n  constructor(private apiService: ApiService) {}\n\n  login(payload: IAuthCredentials): Observable<IAuthState | IError> {\n    return this.apiService\n      .post<IAuthState>(`/api/users/authenticate`, {\n        userName: payload.userName,\n        password: payload.password,\n      })\n      .pipe(\n        map((resp) => {\n          sessionStorage.setItem('access_token', <string>resp.access_token);\n          return resp;\n        }),\n        catchError((err: HttpErrorResponse) => {\n          return of(err.error as IError);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "traceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IEthnicityReadOnlyModel",
            "id": "interface-IEthnicityReadOnlyModel-071245dba0004ab0a9e1834864c8458b81eba54b625a968c8a5b0ba446a286aa2674e7b29fca882b6e8e26768e7a73cb290a0fc1ac48fc74d0f64d90657c8aa7",
            "file": "src/app/api/models/picklists/ethnicity-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEthnicityReadOnlyModel {\n    itemValue: string | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IFellowshipModel",
            "id": "interface-IFellowshipModel-afa8ac0a9047641b4f0e2485007780ce86fee808b68f415582bd97fe3798fdfb7a617c5dd66ea4db59b0b0ba84d9d61cc4ab5dcb7fbf1d6e90f870d8d0c6ca2a",
            "file": "src/app/api/models/medicaltraining/fellowship.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFellowshipModel {\n    id?: number;\n    userId?: number;\n    programName?: string;\n    completionYear?: string;\n    programOther?: string;\n    createdByUserId?: number;\n    createdAtUtc?: string;\n    lastUpdatedAtUtc?: string;\n    lastUpdatedByUserId?: number;\n}\n",
            "properties": [
                {
                    "name": "completionYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "programOther",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IFellowshipProgramReadOnlyModel",
            "id": "interface-IFellowshipProgramReadOnlyModel-c59ec32df54d33cd862f40c7543debd92011c18a4426b3b43f8c5ddad6e7676ef6945c97a3aac40342fe3503c37407856b664df4064d29630e6f92ca01911cb2",
            "file": "src/app/api/models/picklists/fellowship-program-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFellowshipProgramReadOnlyModel {\n    programId: number;\n    programName: string;\n}\n",
            "properties": [
                {
                    "name": "programId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IFellowshipReadOnlyModel",
            "id": "interface-IFellowshipReadOnlyModel-73400676cc8064b21ae50b90b370c62a8e84eeb7969fc8c980fac91692039a7038f591263c101c0e3fdd358a0a2f47b4293df3cdde1d298bcf56f0981bfd365f",
            "file": "src/app/api/models/medicaltraining/fellowship-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFellowshipReadOnlyModel {\n    id: number;\n    programName: string;\n    completionYear: string;\n    programOther: string;\n}\n",
            "properties": [
                {
                    "name": "completionYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "programOther",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IFormErrors",
            "id": "interface-IFormErrors-94f368cf035c316ffe3cf0c1422198bf5e2f74f86d548d49ab8b5a5f41f1be3a10ae1b60f072eeae59de0210fe55e5d650928c022f14348ae9f9ae9bc4be5828",
            "file": "src/app/shared/common/interfaces/errors.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFormErrors {\n  [key: string]: string[];\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-94f368cf035c316ffe3cf0c1422198bf5e2f74f86d548d49ab8b5a5f41f1be3a10ae1b60f072eeae59de0210fe55e5d650928c022f14348ae9f9ae9bc4be5828",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string[]",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "IFormFields",
            "id": "interface-IFormFields-f0601516ec8107759864baf200f0fd4f381513ae5b91ab5efe748a72e978e592c42f6849e8064a074843013b7d9aea0014aee94f9ed5b58fdc84703468028a8d",
            "file": "src/app/shared/models/form-fields/form-fields.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFormFields {\n  label: string;\n  subLabel?: string;\n  helpText?: string;\n  value?: string;\n  required: boolean;\n  name: string;\n  placeholder?: string;\n  readonly?: boolean;\n  type: string;\n  size: string;\n  options?: any[];\n  filteredOptions?: any[];\n  validators?: any;\n}\n",
            "properties": [
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "helpText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGenderReadOnlyModel",
            "id": "interface-IGenderReadOnlyModel-e100ff001340e60c4c56c3fbaba8eef62f3f3714d1b5478e5e7c75b85d70b0227b00c2dab131478a1d1b555dc27fc02c34fe6559e6dd089cd41a1b498d0826ed",
            "file": "src/app/api/models/picklists/gender-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGenderReadOnlyModel {\n    itemValue: number | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGmeSummaryReadOnlyModel",
            "id": "interface-IGmeSummaryReadOnlyModel-510c4f2923964644091b876f5db9071b8e3b317f3fcf0b6bbc91775260e547112752317c45b293040002aa8c3982e05ac3fcf3901f48c31fb969d8cb8b55d305",
            "file": "src/app/api/models/graduatemedicaleducation/gme-summary-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGmeSummaryReadOnlyModel {\n    clinicalLevel: string;\n    minStartDate: string;\n    maxStartDate: string;\n    programName: string;\n    clinicalWeeks: number;\n    nonClinicalWeeks: number;\n    essentialsWeeks: number;\n}\n",
            "properties": [
                {
                    "name": "clinicalLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "clinicalWeeks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "essentialsWeeks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "maxStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "minStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "nonClinicalWeeks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGQAdditionalTraining",
            "id": "interface-IGQAdditionalTraining-b84ad446f226b8c598306c5a43d6697433680d4bd71b6abd5ee61b60a21a2e8ccb14b9e7aeaf14011c573122bcb27adeb56ad0b3465c1d5ae8fee0ead1c3fcf7",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { AdditionalTrainingsService } from '../../api';\nimport {\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from './examination-gq-additional-training.actions';\n\nexport interface IGQAdditionalTraining {\n  AdditionalTraining: IAdditionalTrainingReadOnlyModel[];\n  selectedAdditionalTraining: IAdditionalTrainingModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GQ_ADDITIONAL_TRAINING_STATE_TOKEN =\n  new StateToken<IGQAdditionalTraining>('gqAdditionalTraining');\n\n@State<IGQAdditionalTraining>({\n  name: GQ_ADDITIONAL_TRAINING_STATE_TOKEN,\n  defaults: {\n    AdditionalTraining: [],\n    selectedAdditionalTraining: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GQAdditionalTrainingState {\n  constructor(private additionalTrainingsService: AdditionalTrainingsService) {}\n\n  @Action(GetAdditionalTrainingList)\n  getAdditionalTrainingList(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { userId: number }\n  ) {\n    const state = ctx.getState();\n    const userId = payload.userId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTrainingReadOnly_GetAllByUserId(userId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            AdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetAdditionalTrainingDetails)\n  getAdditionalTrainingDetails(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { trainingId: number }\n  ) {\n    const state = ctx.getState();\n    const trainingId = payload.trainingId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTraining_GetByTrainingId(trainingId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            selectedAdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateAdditionalTraining)\n  updateAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: UpdateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .updateAdditionalTraining(payload.trainingId, payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          const additionalTraining = state.AdditionalTraining.map((item) =>\n            item.trainingId === readOnlyResult.trainingId\n              ? readOnlyResult\n              : item\n          );\n          ctx.setState({\n            ...state,\n            AdditionalTraining: additionalTraining,\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateAdditionalTraining)\n  createAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: CreateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .createAdditionalTraining(payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          ctx.setState({\n            ...state,\n            AdditionalTraining: [readOnlyResult, ...state.AdditionalTraining],\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "AdditionalTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdditionalTrainingReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "claims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | null",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedAdditionalTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdditionalTrainingModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGraduateMedicalEducation",
            "id": "interface-IGraduateMedicalEducation-bdd2d484ad85e4ba79baaf3dfe74fedbbe982474a8a30279771b32bb013d9d42746ae663aa56428499eface5b8b7281c1fd3b782071c57e5ec75ff03c9d1058f",
            "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, mergeMap, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { RotationService, GmeSummaryService } from '../../api';\nimport {\n  GetGraduateMedicalEducationList,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  DeleteGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  GetGraduateMedicalEducationSummary,\n} from './gme.actions';\n\nexport interface IGraduateMedicalEducation {\n  gmeRotations: IRotationReadOnlyModel[];\n  gmeSummary: IGmeSummaryReadOnlyModel[];\n  selectedRotation: IRotationModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN =\n  new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation');\n\n@State<IGraduateMedicalEducation>({\n  name: GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN,\n  defaults: {\n    gmeRotations: [],\n    gmeSummary: [],\n    selectedRotation: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GraduateMedicalEducationState {\n  constructor(\n    private rotationService: RotationService,\n    private gmeSummaryService: GmeSummaryService\n  ) {}\n\n  @Action(GetGraduateMedicalEducationSummary)\n  getGraduateMedicalEducationSummary(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.gmeSummaryService.retrieveGmeSummaryReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        const level4AndChief = {\n          clinicalLevel: 'Clinical Level 4 Totals',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(\n            result,\n            'clinicalWeeks',\n            'Clinical Level 4'\n          ),\n          nonClinicalWeeks: this.getTotals(\n            result,\n            'nonClinicalWeeks',\n            'Clinical Level 4'\n          ),\n          essentialsWeeks: this.getTotals(\n            result,\n            'essentialsWeeks',\n            'Clinical Level 4'\n          ),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#335b92',\n            color: '#FFF',\n          },\n        };\n        const level5AndChief = {\n          clinicalLevel: 'Clinical Level 5 Totals',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(\n            result,\n            'clinicalWeeks',\n            'Clinical Level 5'\n          ),\n          nonClinicalWeeks: this.getTotals(\n            result,\n            'nonClinicalWeeks',\n            'Clinical Level 5'\n          ),\n          essentialsWeeks: this.getTotals(\n            result,\n            'essentialsWeeks',\n            'Clinical Level 5'\n          ),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#335b92',\n            color: '#FFF',\n          },\n        };\n\n        const summaryTotals = {\n          clinicalLevel: 'Total Weeks',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(result, 'clinicalWeeks'),\n          nonClinicalWeeks: this.getTotals(result, 'nonClinicalWeeks'),\n          essentialsWeeks: this.getTotals(result, 'essentialsWeeks'),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#1F3758',\n            color: '#FFF',\n          },\n        };\n        const summaryAverages = {\n          clinicalLevel: 'Avg Weeks',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getAverages(result, 'clinicalWeeks'),\n          nonClinicalWeeks: this.getAverages(result, 'nonClinicalWeeks'),\n          essentialsWeeks: this.getAverages(result, 'essentialsWeeks'),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#1F3758',\n            color: '#FFF',\n          },\n        };\n        result.push(level4AndChief);\n        result.push(level5AndChief);\n        result.sort((a: any, b: any) =>\n          a.clinicalLevel > b.clinicalLevel ? 1 : -1\n        );\n        result.push(summaryTotals);\n        result.push(summaryAverages);\n\n        ctx.setState({\n          ...state,\n          gmeSummary: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationList)\n  getGraduateMedicalEducationList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.setState({\n          ...state,\n          gmeRotations: result.sort((a: any, b: any) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationDetails)\n  getGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    payload: { id: number }\n  ) {\n    const state = ctx.getState();\n    const gmeId = payload.id;\n    return this.rotationService.retrieveRotation_GetById(gmeId).pipe(\n      tap((result: any) => {\n        ctx.setState({\n          ...state,\n          selectedRotation: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateGraduateMedicalEducation)\n  updateGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: UpdateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.updateRotation(payload.id, payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        const gmeRotations = state.gmeRotations.map((item) =>\n          item.id === readOnlyResult.id ? readOnlyResult : item\n        );\n        ctx.setState({\n          ...state,\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(CreateGraduateMedicalEducation)\n  createGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: CreateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.createRotation(payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        ctx.setState({\n          ...state,\n          gmeRotations: [readOnlyResult, ...state.gmeRotations].sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(DeleteGraduateMedicalEducation)\n  deleteGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: DeleteGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.deleteRotation(payload).pipe(\n      tap(() => {\n        const gmeRotations = state.gmeRotations.filter(\n          (item) => item.id !== payload\n        );\n        ctx.setState({\n          ...state,\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationErrors)\n  clearGraduateMedicalEducationErrors(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({ errors: null });\n  }\n\n  getTotals(items: any[], prop: string, filter?: string) {\n    return items.reduce((a, b) => {\n      if (filter) {\n        if (b[prop] && b.clinicalLevel.startsWith(filter)) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      } else {\n        if (b[prop]) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      }\n    }, 0);\n  }\n  getAverages(items: any[], prop: string) {\n    const total = this.getTotals(items, prop);\n    const avg = total / items.length;\n    return Math.round(avg * 10) / 10;\n  }\n}\n",
            "properties": [
                {
                    "name": "claims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | null",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "gmeRotations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "gmeSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGmeSummaryReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedRotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGraduateProfileReadOnlyModel",
            "id": "interface-IGraduateProfileReadOnlyModel-bff345e73f133a0a3e92bffdc9bef8d82e03b6b94222e2204766b2d519907a29ece5652bccf5f49d6c7a02c66a1064259deb8d75f3c72ca28d477ce8d891f8da",
            "file": "src/app/api/models/picklists/graduate-profile-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGraduateProfileReadOnlyModel {\n    type: string;\n    description: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGridActions",
            "id": "interface-IGridActions-5cbd8b0dc7fb829407ac27c531417cf9d6faa1f74be570b75ee0e3bc60974b94883b0ebd953435dcc86feaf64b2c70f4c61ff02c395bc1c3ea7729e10ea4af34",
            "file": "src/app/shared/components/grid/abs-grid-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGridActions {\n  data: any;\n  fieldKey: string;\n  onClick: any;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "fieldKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IGridOptions",
            "id": "interface-IGridOptions-fa2c4985f0710b68c9c397a6b3ebe46a8735b3a1105850201c7e965f34a9b81b00c90fa089c06cf3e81aa8e0e988e342d53a09e5819eefa5b3c7b8495d785a5f",
            "file": "src/app/shared/components/grid/grid-options.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGridOptions {\n  showFilter: boolean;\n  filterOn: string;\n  filterType?: string;\n  filterOptions?: IDropdown[];\n  placeholder?: string;\n}\n\nexport interface IDropdown {\n  value: string;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "filterOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "filterOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDropdown[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "filterType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "showFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ILanguageReadOnlyModel",
            "id": "interface-ILanguageReadOnlyModel-228bbef1a6ae86beffb22976c4f242d46cd7495c1c7067937cf47bfe993135b9cf5420c6cc2562c61f47e2928cfa1eb620d6b0802b23fcfd13ce14481e3b663e",
            "file": "src/app/api/models/picklists/language-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILanguageReadOnlyModel {\n    itemValue: number | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IMedicalTraining",
            "id": "interface-IMedicalTraining-6b29cc13c34d49801606f4410251c445736543bd614864fb19591e855e58b41648dbf761fc2e406a7f434dbba2fb1d4a2e09e11cf64cc99e71c3576dab7c5265",
            "file": "src/app/state/medical-training/medical-training.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { MedicalTrainingService } from 'src/app/api/services/medicaltraining/medical-training.service';\nimport {\n  CreateMedicalTraining,\n  GetAdvancedTrainingData,\n  GetMedicalTraining,\n  UpdateMedicalTraining,\n} from './medical-training.actions';\nimport { AdvancedTrainingService } from 'src/app/api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from 'src/app/api/models/medicaltraining/advanced-training-read-only.model';\n\nexport interface IMedicalTraining {\n  medicalTraining: IMedicalTrainingModel | undefined;\n  additionalTraining: IAdvancedTrainingReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport const MEDICALSTATE_STATE_TOKEN = new StateToken<IMedicalTraining>(\n  'medical_training'\n);\n\n@State<IMedicalTraining>({\n  name: MEDICALSTATE_STATE_TOKEN,\n  defaults: {\n    medicalTraining: undefined,\n    additionalTraining: undefined,\n  },\n})\n@Injectable()\nexport class MedicalTrainingState {\n  constructor(\n    private medicalTrainingService: MedicalTrainingService,\n    private advancedTrainingService: AdvancedTrainingService\n  ) {}\n\n  @Action(GetMedicalTraining)\n  getMedicalTraining(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IMedicalTrainingModel | undefined> {\n    if (ctx.getState()?.medicalTraining) {\n      return of(ctx.getState()?.medicalTraining);\n    }\n\n    return this.medicalTrainingService\n      .retrieveMedicalTraining_GetByUserId()\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(CreateMedicalTraining)\n  createMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    return this.medicalTrainingService\n      .createMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(UpdateMedicalTraining)\n  updateMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    return this.medicalTrainingService\n      .updateMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(GetAdvancedTrainingData)\n  getAdvancedTrainingData(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IAdvancedTrainingReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.additionalTraining) {\n      return of(ctx.getState()?.additionalTraining);\n    }\n\n    return this.advancedTrainingService\n      .retrieveAdvancedTrainingReadOnly_GetByUserId()\n      .pipe(\n        tap((additionalTraining: IAdvancedTrainingReadOnlyModel[]) => {\n          ctx.patchState({\n            additionalTraining,\n          });\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "additionalTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdvancedTrainingReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | undefined",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "medicalTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMedicalTrainingModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IMedicalTrainingModel",
            "id": "interface-IMedicalTrainingModel-0c00377d066b69e2f907ea854240e416d56477855b031a731f9cd89d4a48b92542f4dcf2099fcf4daf00468dfff61a6effe687bc7339eaace61502827bd5a94b",
            "file": "src/app/api/models/medicaltraining/medical-training.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMedicalTrainingModel {\n    id: number;\n    userId: number;\n    graduateProfileId: number;\n    graduateProfileDescription: string;\n    medicalSchoolName: string;\n    medicalSchoolCity: string;\n    medicalSchoolStateId: string;\n    medicalSchoolStateName: string;\n    medicalSchoolCountryId: string;\n    medicalSchoolCountryName: string;\n    degreeId: number;\n    degreeName: string;\n    medicalSchoolCompletionYear: string;\n    residencyProgramName: string;\n    residencyCompletionYear: string;\n    residencyProgramOther: string;\n    createdAtUtc: string;\n    createdByUserId: number;\n    lastUpdatedByUserId: number;\n    lastUpdatedAtUtc: string;\n}\n",
            "properties": [
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "degreeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "degreeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "graduateProfileDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "graduateProfileId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "medicalSchoolCity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "medicalSchoolCompletionYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "medicalSchoolCountryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "medicalSchoolCountryName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "medicalSchoolName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "medicalSchoolStateId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "medicalSchoolStateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "residencyCompletionYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "residencyProgramName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "residencyProgramOther",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IMenuItem",
            "id": "interface-IMenuItem-ef3a401f5e9be980e47728cbfeff2c46931d24817ca630e9e197af30cc7e05c0eb1e7a89291a5842f89e429d89144634e0fef20fd337512ff30865c4284cc492",
            "file": "src/web-components/menuItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\n  display: string;\n  action: string;\n  icon?: string;\n  children?: Array<IMenuItem>;\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IMenuItem>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IOutcomeRegistryModel",
            "id": "interface-IOutcomeRegistryModel-7b9ee8358264fb331fc4b980d002515b2b45d39a083b14f59851d7a6f0ce362894763e13ab5f879359207c2f46f3024602c78161e69b00c252d6e80183744d22",
            "file": "src/app/api/models/continuouscertification/outcome-registry.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IOutcomeRegistryModel {\n    surgeonSpecificRegistry: boolean;\n    registryComments: string;\n    registeredWithACHQC: boolean;\n    registeredWithCESQIP: boolean;\n    registeredWithMBSAQIP: boolean;\n    registeredWithABA: boolean;\n    registeredWithASBS: boolean;\n    registeredWithStatewideCollaboratives: boolean;\n    registeredWithABMS: boolean;\n    registeredWithNCDB: boolean;\n    registeredWithRQRS: boolean;\n    registeredWithNSQIP: boolean;\n    registeredWithNTDB: boolean;\n    registeredWithSTS: boolean;\n    registeredWithTQIP: boolean;\n    registeredWithUNOS: boolean;\n    registeredWithNCDR: boolean;\n    registeredWithSVS: boolean;\n    registeredWithELSO: boolean;\n    userConfirmed: boolean;\n    userConfirmedDateUtc: string;\n    userId: number;\n}\n",
            "properties": [
                {
                    "name": "registeredWithABA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "registeredWithABMS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "registeredWithACHQC",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "registeredWithASBS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "registeredWithCESQIP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "registeredWithELSO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "registeredWithMBSAQIP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "registeredWithNCDB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "registeredWithNCDR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "registeredWithNSQIP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "registeredWithNTDB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "registeredWithRQRS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "registeredWithStatewideCollaboratives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "registeredWithSTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "registeredWithSVS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registeredWithTQIP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registeredWithUNOS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "registryComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "surgeonSpecificRegistry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userConfirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userConfirmedDateUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IPicklist",
            "id": "interface-IPicklist-5803ff6d6ff1beb075b93834f33599fc2daf1f33ecbc0915b7f3ac6c900520f56bd55459c4604ecc3accff4fe8e9bbeb9b93e404deceadd99d29567da6bbe29e",
            "file": "src/app/state/picklists/picklists.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipPrograms) {\n      return of(ctx.getState()?.fellowshipPrograms);\n    }\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll()\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getFellowshipPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "accreditedInstitutions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccreditedProgramInstitutionReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "clinicalActivities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IClinicalActivityReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "clinicalLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IClinicalLevelReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICountryReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "defaultStates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "degrees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDegreeReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | undefined",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "ethnicities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEthnicityReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "fellowshipPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFellowshipProgramReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "genders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "graduateProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGraduateProfileReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "races",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRaceReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "residencyPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IResidencyProgramReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "statesMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "trainingTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITrainingTypeReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IPickListItem",
            "id": "interface-IPickListItem-5803ff6d6ff1beb075b93834f33599fc2daf1f33ecbc0915b7f3ac6c900520f56bd55459c4604ecc3accff4fe8e9bbeb9b93e404deceadd99d29567da6bbe29e",
            "file": "src/app/state/picklists/picklists.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipPrograms) {\n      return of(ctx.getState()?.fellowshipPrograms);\n    }\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll()\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getFellowshipPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "isCredit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "isEssential",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "modifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IPicklistUserValues",
            "id": "interface-IPicklistUserValues-5803ff6d6ff1beb075b93834f33599fc2daf1f33ecbc0915b7f3ac6c900520f56bd55459c4604ecc3accff4fe8e9bbeb9b93e404deceadd99d29567da6bbe29e",
            "file": "src/app/state/picklists/picklists.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipPrograms) {\n      return of(ctx.getState()?.fellowshipPrograms);\n    }\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll()\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getFellowshipPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "accreditedInstitutions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccreditedProgramInstitutionReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICountryReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "defaultStates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "degrees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDegreeReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "ethnicities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEthnicityReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "fellowshipPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFellowshipProgramReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "genders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "graduateProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGraduateProfileReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "races",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRaceReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "residencyPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IResidencyProgramReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "statesMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "trainingTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITrainingTypeReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IProgramReadOnlyModel",
            "id": "interface-IProgramReadOnlyModel-cf65439e601109504c2b0225c8162ee5738af49a89f2f4fb05338d8dab42787d7db09f194f26a03ff1446175e506e371bd49d2451c73bb4438626b72e75e6d40",
            "file": "src/app/api/models/trainees/program-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IProgramReadOnlyModel {\n    programName: string;\n    programDirector: string;\n    programNumber: string;\n    exam: string;\n    clinicalLevel: string;\n    city: string;\n    state: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "clinicalLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "exam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "programDirector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "programNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IRaceReadOnlyModel",
            "id": "interface-IRaceReadOnlyModel-60293f7ec588e4115f8fdee018460e021acd1d6b5af4385ec3ec970ff2151ce45c64246221f4375cd0777fc32fb1a5b374c341b54404f75359a3991de8745f3c",
            "file": "src/app/api/models/picklists/race-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRaceReadOnlyModel {\n    itemValue: string | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IResidencyProgramReadOnlyModel",
            "id": "interface-IResidencyProgramReadOnlyModel-b5f7f577de6c73f037a19c213bf5d6f4727d470ddfe6974b97a78632e1775cd309b088fed6df275db1a40ee6fc7f6db9abe289757f4d71fb4fcfe86a2b282a7a",
            "file": "src/app/api/models/picklists/residency-program-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IResidencyProgramReadOnlyModel {\n    programId: number;\n    programName: string;\n}\n",
            "properties": [
                {
                    "name": "programId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IRotationModel",
            "id": "interface-IRotationModel-95ffc0f25ef2f16357228ff48eea10e62491ccc4a25f1e10737f22ed903ab79e8d694c12e29763395c690c887e7b84327c96442d2c9eb0bb6fb3bf6876f8745b",
            "file": "src/app/api/models/graduatemedicaleducation/rotation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRotationModel {\n    id: number;\n    userId: number;\n    startDate: string;\n    endDate: string;\n    clinicalLevelId: number;\n    clinicalLevel: string;\n    clinicalActivityId: number;\n    programName: string;\n    nonSurgicalActivity: string;\n    alternateInstitutionName: string;\n    isInternationalRotation: boolean;\n    isEssential: boolean;\n    isCredit: boolean;\n    other: string;\n    createdByUserId: number;\n    createdAtUtc: string;\n    lastUpdatedAtUtc: string;\n    lastUpdatedByUserId: number;\n    clinicalActivity: string;\n}\n",
            "properties": [
                {
                    "name": "alternateInstitutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "clinicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "clinicalActivityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "clinicalLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "clinicalLevelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isCredit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isEssential",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isInternationalRotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "nonSurgicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IRotationReadOnlyModel",
            "id": "interface-IRotationReadOnlyModel-8b20b926bb07b83a82e78002e88ab118b8f5d41acd87d8c91d4b1b706e6e05bb0c614a2d88424a60493ccbe2b229a59456783127998b1e8b36794cc9888c62c2",
            "file": "src/app/api/models/graduatemedicaleducation/rotation-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRotationReadOnlyModel {\n    id: number;\n    startDate: string;\n    endDate: string;\n    programName: string;\n    alternateInstitutionName: string;\n    clinicalLevelId: number;\n    clinicalLevel: string;\n    isEssential: boolean;\n    isCredit: boolean;\n    other: string;\n    nonSurgicalActivity: string;\n    isInternationalRotation: boolean;\n    clinicalActivity: string;\n}\n",
            "properties": [
                {
                    "name": "alternateInstitutionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clinicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "clinicalLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "clinicalLevelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isCredit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isEssential",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isInternationalRotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nonSurgicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "other",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "programName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IStateReadOnlyModel",
            "id": "interface-IStateReadOnlyModel-4d21e1b904d7c13e5f44613aabe800961f843d86aed319ac5dfc24a90aea9b18b5dc21a5315637a5c938966d7fe62c0ff28478ee3ab282ce88358f94939cb28b",
            "file": "src/app/api/models/picklists/state-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStateReadOnlyModel {\n    country: string | null;\n    itemValue: string | null;\n    itemDescription: string | null;\n}\n",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "itemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "itemValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ITrainingTypeReadOnlyModel",
            "id": "interface-ITrainingTypeReadOnlyModel-f12cb1109d49f6e632bf26300db7666cbb02aa58bd544f349b4fdd3e70de240f0961984e464a9592efd5868879074466d3e45e0228a7876a7352f4040e7b1daa",
            "file": "src/app/api/models/picklists/training-type-read-only.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITrainingTypeReadOnlyModel {\n    id: number;\n    trainingType: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "trainingType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IUserCredential",
            "id": "interface-IUserCredential-5707bbc9ec85ce5f8133020da4cfd154fc1ef11d6de0266c2405ee9bc9a7651c55c8aaa06e650d06a84b62f71f3d1ea768ed1d3d9d7756ae702f86b5fa385510",
            "file": "src/app/state/my-account/my-account.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { of, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { SaveMyAccountChanges, ClearErrors } from './my-account.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredentialModel } from '../../api';\nimport { UserCredentialsService } from '../../api';\nimport { Logout } from '../auth';\n\nexport interface IUserCredential extends IUserCredentialModel {\n  errors?: IFormErrors | null;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IUserCredential>('userAccount');\n@State<IUserCredential>({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    emailAddress: null,\n    password: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MyAccountState {\n  constructor(\n    private authStore: Store,\n    private userCredentialsService: UserCredentialsService\n  ) {}\n\n  @Action(SaveMyAccountChanges)\n  saveMyAccountChanges(\n    ctx: StateContext<IUserCredential>,\n    { payload }: SaveMyAccountChanges\n  ) {\n    return this.userCredentialsService.updateUserCredential(payload).pipe(\n      tap((result: IUserCredentialModel) => {\n        // Succeeded in changing the user's credentials so logout\n        ctx.setState({\n          emailAddress: null,\n          password: null,\n          errors: null,\n        });\n        this.authStore.dispatch(new Logout());\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearErrors)\n  clearErrors(ctx: StateContext<IUserCredential>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | null",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "IUserCredentialModel"
        },
        {
            "name": "IUserCredentialModel",
            "id": "interface-IUserCredentialModel-edb44fb4dede8baf66f2b6de3c6dd33b788572fafa02fc5b380279101ede71d9e111ab42553ef8b905b93ff7f74734ae0090746837b42aeb708803a5c6e46e82",
            "file": "src/app/api/models/users/user-credential.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUserCredentialModel {\n    emailAddress: string | null;\n    password: string | null;\n}\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IUserLoginModel",
            "id": "interface-IUserLoginModel-804312bb3301f1926fe53ca67b18dbad386868cfe75e8e2299aa8314fcfb4e979ad19c6063202a18fe27bf6e7bb72d9ad1851608e32a9c530b3361b4abf6c255",
            "file": "src/app/api/models/users/user-login.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUserLoginModel {\n  userName: string;\n  emailAddress: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IUserProfile",
            "id": "interface-IUserProfile-bced101cf1c3c906252209692aab69034ede6c50d969fe0934654c8d44915e71e301ad935a2195217f26830c926aaf0043d9fc8af071fe11194b0bef2b6385ee",
            "file": "src/app/state/user-profile/user-profile.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IUserProfileModel } from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { UserProfilesService } from '../../api';\nimport { GetUserProfile, UpdateUserProfile } from './user-profile.actions';\nimport { GetPicklists, GetStateList } from '../picklists';\n\nexport interface IUserProfile {\n  userProfileId: number;\n  userId: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  suffix: string;\n  displayName: string;\n  officePhoneNumber: string;\n  mobilePhoneNumber: string;\n  birthCity: string;\n  birthState: string;\n  birthCountry: string;\n  countryCitizenship: string;\n  absId: string;\n  certificationStatus: string;\n  nPI: string;\n  genderId: string; // Need to cast as number on saves\n  birthDate: string;\n  race: string;\n  ethnicity: string;\n  firstLanguageId: string; // Need to cast as number on saves\n  bestLanguageId: string; // Need to cast as number on saves\n  receiveComms: boolean;\n  userConfirmed: boolean;\n  userConfirmedDate: string;\n  createdByUserId: number;\n  createdAtUtc: string;\n  lastUpdatedAtUtc: string;\n  lastLoginDateUtc: string;\n  lastUpdatedByUserId: number;\n  street1: string;\n  street2: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  emailAddress: string;\n  fullName: string;\n  profilePicture: string;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const USER_PROFILE_STATE_TOKEN = new StateToken<IUserProfile>(\n  'userProfile'\n);\n\n@State<IUserProfile>({\n  name: USER_PROFILE_STATE_TOKEN,\n  defaults: {\n    userProfileId: 0,\n    userId: 0,\n    firstName: '',\n    middleName: '',\n    lastName: '',\n    suffix: '',\n    displayName: '',\n    officePhoneNumber: '',\n    mobilePhoneNumber: '',\n    birthCity: '',\n    birthState: '',\n    birthCountry: '',\n    countryCitizenship: '',\n    absId: '',\n    certificationStatus: '',\n    nPI: '',\n    genderId: '',\n    birthDate: '',\n    race: '',\n    ethnicity: '',\n    firstLanguageId: '',\n    bestLanguageId: '',\n    receiveComms: false,\n    userConfirmed: false,\n    userConfirmedDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastLoginDateUtc: '',\n    lastUpdatedByUserId: 0,\n    street1: '',\n    street2: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: '',\n    emailAddress: '',\n    fullName: '',\n    profilePicture: '',\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class UserProfileState {\n  constructor(\n    private store: Store,\n    private userProfilesService: UserProfilesService\n  ) {}\n\n  @Action(GetUserProfile)\n  getUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { loginUser, claims }: GetUserProfile\n  ) {\n    const state = ctx.getState();\n    const userId = loginUser?.userId;\n    return this.userProfilesService\n      .retrieveUserProfile_GetByUserId(userId)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const res = result as unknown as IUserProfile;\n          res.birthDate = res.birthDate?.split('T')[0];\n          res.firstLanguageId = res.firstLanguageId?.toString();\n          res.bestLanguageId = res.bestLanguageId?.toString();\n          res.genderId = res.genderId?.toString();\n          ctx.setState({\n            ...state,\n            ...loginUser,\n            ...res,\n            userConfirmed: false,\n            claims,\n            profilePicture:\n              'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n            errors: null,\n          });\n          this.store.dispatch(new GetStateList(ctx.getState().birthCountry));\n          this.store.dispatch(new GetPicklists(ctx.getState().country));\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfile)\n  updateUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { payload }: UpdateUserProfile\n  ) {\n    const model = {} as unknown as IUserProfileModel;\n\n    ctx.setState({\n      ...ctx.getState(),\n      ...payload,\n    });\n\n    Object.assign(model, ctx.getState());\n    const userProfile: IUserProfileModel =\n      model as unknown as IUserProfileModel;\n    userProfile.userConfirmedDate = new Date().toISOString();\n    userProfile.userConfirmed = true;\n    userProfile.genderId = +userProfile.genderId;\n    userProfile.firstLanguageId = +userProfile.firstLanguageId;\n    userProfile.bestLanguageId = +userProfile.bestLanguageId;\n    userProfile.lastUpdatedByUserId = ctx.getState().userId;\n\n    return this.userProfilesService\n      .updateUserProfile(ctx.getState().userId, userProfile)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const userProfile = result as unknown as IUserProfile;\n          userProfile.genderId = userProfile.genderId.toString();\n          userProfile.firstLanguageId = userProfile.firstLanguageId.toString();\n          userProfile.bestLanguageId = userProfile.bestLanguageId.toString();\n          ctx.setState({\n            ...userProfile,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "absId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "bestLanguageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "birthCity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "birthCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "birthState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "certificationStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "claims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "countryCitizenship",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormErrors | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "ethnicity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "firstLanguageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "genderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "lastLoginDateUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "middleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mobilePhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "nPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "officePhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "profilePicture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "race",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "receiveComms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "street1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "street2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userConfirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userConfirmedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "userProfileId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "zipCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IUserProfileModel",
            "id": "interface-IUserProfileModel-63f9bba29ad9e63f55fad5ff0bd73bf6b2ff13bf48b9df42ba1389af88c233ae367b31f6edbcf7f9fa4fb5cbf1556dd356e2fc97f6b4e09f80ef74e295064d7e",
            "file": "src/app/api/models/users/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUserProfileModel {\n    userProfileId: number;\n    userId: number;\n    firstName: string;\n    middleName: string;\n    lastName: string;\n    suffix: string;\n    displayName: string;\n    officePhoneNumber: string;\n    mobilePhoneNumber: string;\n    birthCity: string;\n    birthState: string;\n    birthCountry: string;\n    countryCitizenship: string;\n    absId: string;\n    certificationStatus: string;\n    nPI: string;\n    genderId: number;\n    birthDate: string;\n    race: string;\n    ethnicity: string;\n    firstLanguageId: number;\n    bestLanguageId: number;\n    receiveComms: boolean;\n    userConfirmed: boolean;\n    userConfirmedDate: string;\n    createdByUserId: number;\n    createdAtUtc: string;\n    lastUpdatedAtUtc: string;\n    lastUpdatedByUserId: number;\n    street1: string;\n    street2: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n}\n",
            "properties": [
                {
                    "name": "absId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bestLanguageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "birthCity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "birthCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "birthState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "certificationStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "countryCitizenship",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "createdByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "ethnicity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "firstLanguageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "genderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastUpdatedAtUtc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "lastUpdatedByUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "middleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mobilePhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "nPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "officePhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "race",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "receiveComms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "street1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "street2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userConfirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "userConfirmedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userProfileId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "zipCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "MedicalTrainingActions",
            "id": "interface-MedicalTrainingActions-815f9807be898d2845690096e249510eea09b6a0aa560da125c00717a763243ab86c3cffdb759c4633ec9daaacf48a070ef7e29fb39dcbb2fd454951a02789dd",
            "file": "src/app/medical-training/medical-training-models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicalTrainingActions {\n  [key: string]: {\n    [key: string]: () => void;\n  };\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-815f9807be898d2845690096e249510eea09b6a0aa560da125c00717a763243ab86c3cffdb759c4633ec9daaacf48a070ef7e29fb39dcbb2fd454951a02789dd",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "MedicalTrainingData",
            "id": "interface-MedicalTrainingData-c793697eb3c1c53a88bcf1b30f075308c8a728bc4489006a0c1afa681ccfead69db2b58e5f98489d270093dc4492873b6ab13c6a08174bd45822362587888b46",
            "file": "src/app/registration-requirements/training-modal/training-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { FileUploadButtonComponent } from 'src/app/shared/components/file-upload-button/file-upload-button.component';\nimport { ModalComponent } from 'src/app/shared/components/modal/modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../../shared/gridDefinitions/medical-training-cols';\nimport { BASIC_DOCUMENT_COLS } from '../../shared/gridDefinitions/basic-document-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport {\n  UserProfileSelectors,\n  GQAdditionalTrainingSelectors,\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { RadioButtonModule } from 'primeng/radiobutton';\n\ninterface MedicalTrainingData {\n  medicalSchool: any;\n  residency: any;\n  additionalDocuments: any;\n}\n\n@Component({\n  selector: 'abs-training-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    FileUploadButtonComponent,\n    ModalComponent,\n    InputTextModule,\n    InputTextareaModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioButtonModule,\n  ],\n  templateUrl: './training-modal.component.html',\n  styleUrls: ['./training-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.additionalTrainingList)\n  additionalTrainingList$:\n    | Observable<IAdditionalTrainingReadOnlyModel[]>\n    | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails)\n  selectedTraining$: Observable<IAdditionalTrainingModel> | undefined;\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ];\n\n  userSubscription: Subscription | undefined;\n  selectedTrainingSubscription: Subscription | undefined;\n\n  trainingCols = MEDICAL_TRAINING_COLS;\n  documentCols = BASIC_DOCUMENT_COLS;\n  showTrainingAddEdit = false;\n  trainingAddEditTitle: string | undefined;\n  emptyTraining: IAdvancedTrainingModel = {\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  };\n  tempTraining$: BehaviorSubject<IAdvancedTrainingModel> = new BehaviorSubject(\n    this.emptyTraining\n  );\n  panels = [\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ];\n  activePanel = 0;\n\n  medicalTraining: MedicalTrainingData = {\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  };\n  userId: number | undefined;\n\n  constructor(private _store: Store) {\n    this.initTrainingData();\n  }\n  ngOnDestroy(): void {\n    this.userSubscription?.unsubscribe();\n    this.selectedTrainingSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.getMedicalTraining();\n  }\n\n  initTrainingData() {\n    this.userSubscription = this.userId$?.subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId > -1) {\n        this._store.dispatch(new GetAdditionalTrainingList(this.userId));\n      }\n    });\n\n    this.selectedTrainingSubscription = this.selectedTraining$?.subscribe(\n      (selectedTraining) => {\n        if (selectedTraining?.trainingId > -1) {\n          this.tempTraining$.next(selectedTraining);\n        }\n      }\n    );\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining.medicalSchool = {\n      statement: 'USA',\n      name: 'Johns Hopkins University',\n      city: 'Baltimore',\n      state: 'MD',\n      country: 'USA',\n      degree: 'MD',\n      yearGraduated: '2010',\n    };\n    this.medicalTraining.residency = {\n      programName: 'General Surgery',\n      yearOfCompletion: '2015',\n      programNotListed: 'an explanation goes here',\n      completedInCanada: null,\n      postResidencyPlans: null,\n      postFellowshipPlans: null,\n      vascularTraining: null,\n      vascularFellowship: null,\n      thoracicTraining: null,\n      thoracicFellowship: null,\n    };\n    this.medicalTraining.additionalDocuments = {\n      multiplePrograms: null,\n      completionDocuments: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n      recievedABSApprovalLetter: null,\n      approvalLetters: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#trainingTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n\n  uploadFile(event: any, fileList: any[]) {\n    if (event.file) {\n      fileList.push(event.file);\n    }\n  }\n\n  showTrainingModal(trainingId?: number | undefined) {\n    if (trainingId) {\n      this._store.dispatch(new GetAdditionalTrainingDetails(trainingId));\n      const selectedTraining = this._store.selectSnapshot<any>(\n        GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails\n      );\n\n      this.trainingAddEditTitle = 'Edit Additional / Advanced Training';\n    } else {\n      this.tempTraining$.next(this.emptyTraining);\n      this.trainingAddEditTitle = 'Add Additional / Advanced Training';\n    }\n    this.showTrainingAddEdit = true;\n  }\n  saveTraining($event: any) {\n    $event.trainingRecord.institutionId = parseInt(\n      $event.trainingRecord.institutionId\n    );\n    if ($event.trainingRecord.dateEnded) {\n      $event.trainingRecord.dateEnded = new Date(\n        $event.trainingRecord.dateEnded\n      );\n    }\n    if ($event.trainingRecord.dateStarted) {\n      $event.trainingRecord.dateStarted = new Date(\n        $event.trainingRecord.dateStarted\n      );\n    }\n    console.log('save training', $event);\n    // TODO: [Joe] show the universal success/error message\n    if ($event.trainingRecord.trainingId > -1) {\n      this._store.dispatch(new UpdateAdditionalTraining($event.trainingRecord));\n    } else {\n      this._store.dispatch(new CreateAdditionalTraining($event.trainingRecord));\n    }\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n\n  handleGridAction($event: any, fileList?: any[] | undefined) {\n    if ($event.fieldKey === 'edit') {\n      this.showTrainingModal($event.data.trainingId);\n    } else if ($event.fieldKey === 'delete') {\n      // TODO: [Joe] once we have the ngx-store implemented see if this can be done cleaner without passing in the fileList\n      if (fileList) {\n        const index = fileList.indexOf($event.data);\n        if (index > -1) {\n          fileList.splice(index, 1);\n        }\n      } else {\n        console.log('handle delete', $event);\n      }\n    } else if ($event.fieldKey === 'download') {\n      const link = document.createElement('a');\n      link.setAttribute('href', URL.createObjectURL($event.data.file));\n      link.setAttribute('download', $event.data.fileName);\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "additionalDocuments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "medicalSchool",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "residency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-26c8362700e148edf5a3a2903e1a61f143b6bd56bf30c86708a40eaced552a24ffad018bb787d5cb23e4a4ffb2dde5bd38b9bffc8c8894748005c9a68b8f7ca8-1",
            "file": "src/web-components/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  fullName: string;\n  role: string;\n  avatar?: string;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AdditionalTrainingsService",
            "id": "injectable-AdditionalTrainingsService-4507d3c56732c8ef14a599113d72fd9fc22f2f375c670e549279df019b504699f1235ee4531d9c79602fdd395c45249be7af48c71699206699315c92110f5e4d",
            "file": "src/app/api/services/examinations/gq/additional-trainings.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/examinations/gq/additional-trainings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAdditionalTraining",
                    "args": [
                        {
                            "name": "model",
                            "type": "IAdditionalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdditionalTrainingModel>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IAdditionalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveAdditionalTraining_GetByTrainingId",
                    "args": [
                        {
                            "name": "trainingId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdditionalTrainingModel>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "trainingId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveAdditionalTrainingReadOnly_GetAllByUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdditionalTrainingReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAdditionalTraining",
                    "args": [
                        {
                            "name": "trainingId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IAdditionalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdditionalTrainingModel>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "trainingId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IAdditionalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IAdditionalTrainingModel } from '../../../models/examinations/gq/additional-training.model';\nimport { IAdditionalTrainingReadOnlyModel } from '../../../models/examinations/gq/additional-training-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdditionalTrainingsService {\n    private readonly baseEndpoint = 'api/examinations/gq/additional-trainings';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveAdditionalTraining_GetByTrainingId(trainingId: number,\n        apiVersion = '1.0'): Observable<IAdditionalTrainingModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * trainingId:Number\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_additionaltraining_bytrainingid]\n            */\n            \n            \n            return this.apiService.get<IAdditionalTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}&trainingId=${trainingId}`);\n        }\n\n        public createAdditionalTraining(model: IAdditionalTrainingModel,\n            apiVersion = '1.0'): Observable<IAdditionalTrainingModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * dateEnded:String\n            * dateStarted:String\n            * other:String\n            * institutionId:Number\n            * city:String\n            * stateId:String\n            * typeOfTraining:String\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [ins_additionaltraining_bytrainingid]\n            */\n            \n            \n            return this.apiService.post<IAdditionalTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n\n        public updateAdditionalTraining(trainingId: number,\n        model: IAdditionalTrainingModel,\n        apiVersion = '1.0') : Observable<IAdditionalTrainingModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * trainingId:Number\n            * dateEnded:String\n            * dateStarted:String\n            * other:String\n            * institutionId:Number\n            * city:String\n            * stateId:String\n            * typeOfTraining:String\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [update_additionaltraining_bytrainingid]\n            */\n            \n            \n            \n            return this.apiService.put<IAdditionalTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}&trainingId=${trainingId}`,\n            model);\n        }\n\n        public retrieveAdditionalTrainingReadOnly_GetAllByUserId(userId: number,\n        apiVersion = '1.0'): Observable<IAdditionalTrainingReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * userId:Number\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_additionaltrainingreadonly_allbyuserid]\n            */\n            \n            \n            return this.apiService.get<IAdditionalTrainingReadOnlyModel[]>(`${this.baseEndpoint}/all?api-version=${apiVersion}&userId=${userId}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AdvancedTrainingService",
            "id": "injectable-AdvancedTrainingService-4ecf8b2440f19235b032983b338b93d423512c1727ccfc5d8c9463ef2577ec86b88c4fc9e346bd8a7f316cd908b6400c26b6cc331b2fbad557d087112b876e47",
            "file": "src/app/api/services/medicaltraining/advanced-training.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/advanced-training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAdvancedTraining",
                    "args": [
                        {
                            "name": "model",
                            "type": "IAdvancedTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdvancedTrainingModel>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IAdvancedTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveAdvancedTraining_GetByTrainingId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdvancedTrainingModel>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveAdvancedTrainingReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdvancedTrainingReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAdvancedTraining",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IAdvancedTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAdvancedTrainingModel>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IAdvancedTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IAdvancedTrainingModel } from '../../models/medicaltraining/advanced-training.model';\nimport { IAdvancedTrainingReadOnlyModel } from '../../models/medicaltraining/advanced-training-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdvancedTrainingService {\n    private readonly baseEndpoint = 'api/advanced-training';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveAdvancedTraining_GetByTrainingId(id: number,\n        apiVersion = '1.0'): Observable<IAdvancedTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: UserId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: TrainingTypeId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: StartDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: EndDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_advanced_training_by_trainingid]\n            */\n            \n            \n            return this.apiService.get<IAdvancedTrainingModel>(`${this.baseEndpoint}/by-trainingid?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public createAdvancedTraining(model: IAdvancedTrainingModel, \n            apiVersion = '1.0'): Observable<IAdvancedTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: UserId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: TrainingTypeId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: StartDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: EndDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * userId:Number\n            * trainingTypeId:Number\n            * programId:Number\n            * other:String\n            * startDate:String\n            * endDate:String\n            * createdByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [ins_advanced_training]\n            */\n            \n            \n            return this.apiService.post<IAdvancedTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n \n        public updateAdvancedTraining(id: number,\n        model: IAdvancedTrainingModel,\n        apiVersion = '1.0') : Observable<IAdvancedTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: UserId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: TrainingTypeId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: StartDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: EndDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * userId:Number\n            * trainingTypeId:Number\n            * programId:Number\n            * other:String\n            * startDate:String\n            * endDate:String\n            * lastUpdatedByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [update_advanced_training]\n            */\n            \n            \n            \n            return this.apiService.put<IAdvancedTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`,\n            model);\n        }\n \n        public retrieveAdvancedTrainingReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IAdvancedTrainingReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_advanced_training_by_userid]\n            */\n            \n            \n            return this.apiService.get<IAdvancedTrainingReadOnlyModel[]>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AnalyticsService",
            "id": "injectable-AnalyticsService-52cbba615ad682c7454a46d9d6b43cc64757a35d7d90e71ab716dea910b489e002107098ae2ae7bd9e2f9fa3efde9ff4fc6542e149145046dd1ac799f28dd83a",
            "file": "src/app/shared/services/analytics.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "registerClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class AnalyticsService {\n  registerClick() {\n    console.log('Clicked!');\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b23b18bd61b7b78364ab925260b86ce4eb30daf5153c6975cfab6ddaee9d3652f78db3e8776886cfa59124ee2574594e91caa7f6ec095e019df71c8395f66ce9",
            "file": "src/app/api/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthState | IError>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IAuthCredentials",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { map, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\nimport { IAuthState } from '../../../state';\nimport { ApiService } from \"ytg-angular\";\n\nexport interface IAuthCredentials {\n  userName: string;\n  password: string;\n}\n\nexport interface IError {\n  type: string | null;\n  title: string | null;\n  status: number | null;\n  traceId: string | null;\n  errors: object | null;\n}\n\nexport interface AuthStateModel {\n  access_token: string | null;\n  refresh_token: string | null;\n  token_type: string | null;\n  userName: string | null;\n  expiration: string | null;\n  expires_in_minutes: number | null;\n  user: IAppUserReadOnlyModel | null;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  token: string | undefined;\n  constructor(private apiService: ApiService) {}\n\n  login(payload: IAuthCredentials): Observable<IAuthState | IError> {\n    return this.apiService\n      .post<IAuthState>(`/api/users/authenticate`, {\n        userName: payload.userName,\n        password: payload.password,\n      })\n      .pipe(\n        map((resp) => {\n          sessionStorage.setItem('access_token', <string>resp.access_token);\n          return resp;\n        }),\n        catchError((err: HttpErrorResponse) => {\n          return of(err.error as IError);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthState",
            "id": "injectable-AuthState-c9b9aa9c2af9e01d3c733e06904860e9927e54c56abdbbf4105a00f7932683e82ba76100f3bcdf8b1c3f83d60f12be26418503ef3565f228b37bd362988d7ea8",
            "file": "src/app/state/auth/auth.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearErrors",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ClearAuthErrors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Login"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Logout"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IAuthState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseJwt",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { Login, Logout, ClearAuthErrors } from './auth.actions';\nimport {\n  AuthStateModel,\n  AuthService,\n  IError,\n  IAppUserReadOnlyModel,\n} from '../../api';\n\nexport interface IAuthState extends AuthStateModel {\n  claims: string[] | null;\n  errors: IError | null;\n}\n\nexport const AUTH_STATE_TOKEN = new StateToken<IAuthState>('auth');\n\n@State<IAuthState>({\n  name: AUTH_STATE_TOKEN,\n  defaults: {\n    access_token: null,\n    refresh_token: null,\n    token_type: null,\n    userName: null,\n    expiration: null,\n    expires_in_minutes: null,\n    user: null,\n    claims: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class AuthState {\n  constructor(private authService: AuthService, private store: Store) {}\n\n  @Action(Login)\n  login(ctx: StateContext<IAuthState>, action: Login) {\n    return this.authService.login(action.payload).pipe(\n      tap((result: AuthStateModel | IError) => {\n        if (typeof result === 'string' && result === 'Login failed') {\n          ctx.setState({\n            access_token: '',\n            refresh_token: '',\n            token_type: '',\n            userName: '',\n            expiration: '',\n            expires_in_minutes: 0,\n            user: {} as IAppUserReadOnlyModel,\n            claims: [],\n            errors: {\n              type: 'Login failed',\n              title: 'Login failed',\n              status: 400,\n              traceId: '',\n              errors: null,\n            },\n          });\n        }\n        // eslint-disable-next-line no-prototype-builtins\n        else if (result.hasOwnProperty('status')) {\n          ctx.setState({\n            access_token: '',\n            refresh_token: '',\n            token_type: '',\n            userName: '',\n            expiration: '',\n            expires_in_minutes: 0,\n            user: {} as IAppUserReadOnlyModel,\n            claims: [],\n            errors: <IError>result,\n          });\n        } else {\n          const state = ctx.getState();\n          const res = result as AuthStateModel;\n          ctx.setState({\n            ...state,\n            ...result,\n            claims: AuthState.parseJwt(<string>res.access_token).claims,\n            errors: null,\n          });\n        }\n      })\n    );\n  }\n\n  @Action(Logout)\n  logout(ctx: StateContext<IAuthState>) {\n    sessionStorage.clear();\n    this.store.reset({});\n    ctx.setState({\n      access_token: '',\n      refresh_token: '',\n      token_type: '',\n      userName: '',\n      expiration: '',\n      expires_in_minutes: 0,\n      user: {} as IAppUserReadOnlyModel,\n      claims: [],\n      errors: null,\n    });\n  }\n\n  static parseJwt(token: string): { claims: string[] } {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      window\n        .atob(base64)\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join('')\n    );\n\n    const returnObj = JSON.parse(jsonPayload);\n    returnObj.claims =\n      returnObj['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n\n    return returnObj;\n  }\n\n  @Action(ClearAuthErrors)\n  clearErrors(ctx: StateContext<IAuthState>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CertificationsService",
            "id": "injectable-CertificationsService-f63fcdef859228e0fff53ba9711b32a7258e1921242e33e17599107a1528064aa980ae6816110c27cdc0ac0992c01184ba235354c12ce465e8df2131e9ce13eb",
            "file": "src/app/api/services/surgeons/certifications.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/surgeons/certifications'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveCertificationReadOnly_GetByAbsId",
                    "args": [
                        {
                            "name": "absId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICertificationReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "absId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICertificationReadOnlyModel } from '../../models/surgeons/certification-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CertificationsService {\n  private readonly baseEndpoint = 'api/surgeons/certifications';\n\n  constructor(private apiService: ApiService) {}\n\n \n        public retrieveCertificationReadOnly_GetByAbsId(absId: string,\n        apiVersion = '1.0'): Observable<ICertificationReadOnlyModel[]> {\n    /**\n     * Claims\n     */\n\n    /**\n     * Business Rules\n     * No business rules exist for this model\n     */\n\n    /**\n     * Required Parameters\n     * absId:String\n     * apiVersion\n     */\n\n    /**\n     * Calls Sp(s)\n     * [get_user_certifications]\n     */\n\n            \n            return this.apiService.get<ICertificationReadOnlyModel[]>(`${this.baseEndpoint}?api-version=${apiVersion}&absId=${absId}`);\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContinuousCertificationState",
            "id": "injectable-ContinuousCertificationState-cb922742825b146b883c981c0c0e19328695f5f9b86a2b19d27f6a49b3eb82a059869d47d6a37a583ce7a9cbc0b5c391b9786671fcae05bfb94d2ba636f9b0cf",
            "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOutcomeRegistries",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IContinuousCertication>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOutcomeRegistryModel | undefined>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetOutcomeRegistries"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IContinuousCertication>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOutcomeRegistries",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IContinuousCertication>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateOutcomeRegistries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateOutcomeRegistries"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IContinuousCertication>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateOutcomeRegistries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { OutcomeRegistriesService } from 'src/app/api/services/continuouscertification/outcome-registries.service';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport {\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from './continuous-certification.actions';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport interface IContinuousCertication {\n  outcomeRegistries?: IOutcomeRegistryModel;\n  errors?: IFormErrors | null;\n}\n\nexport const CONTCERT_STATE_TOKEN = new StateToken<IContinuousCertication>(\n  'continuous_certification'\n);\n\n@State<IContinuousCertication>({\n  name: CONTCERT_STATE_TOKEN,\n  defaults: {\n    outcomeRegistries: undefined,\n    errors: null,\n  },\n})\n@Injectable()\nexport class ContinuousCertificationState {\n  constructor(private outcomeRegistriesService: OutcomeRegistriesService) {}\n\n  @Action(GetOutcomeRegistries)\n  getOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    payload: { userId: number }\n  ): Observable<IOutcomeRegistryModel | undefined> {\n    if (ctx.getState().outcomeRegistries) {\n      return of(ctx.getState()?.outcomeRegistries);\n    }\n\n    return this.outcomeRegistriesService\n      .retrieveOutcomeRegistry_GetByUserId(payload.userId)\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateOutcomeRegistries)\n  updateOutcomeRegistries(\n    ctx: StateContext<IContinuousCertication>,\n    { payload }: UpdateOutcomeRegistries\n  ) {\n    ctx.patchState({\n      outcomeRegistries: payload,\n    });\n\n    return this.outcomeRegistriesService\n      .updateOutcomeRegistry(payload.userId, payload)\n      .pipe(\n        tap((outcomeRegistries: IOutcomeRegistryModel) => {\n          ctx.patchState({\n            outcomeRegistries,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "outcomeRegistriesService",
                        "type": "OutcomeRegistriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "outcomeRegistriesService",
                        "type": "OutcomeRegistriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DashboardState",
            "id": "injectable-DashboardState-2992367e96acfa5c4bcc7ebc8f4e56fd586c5d566c4d45a2f8db1874c434dca1eac9e47368f079151b733fff3cc7b5b4eca609de666fd38635ac9ecf6a363bb5",
            "file": "src/app/state/dashboard/dashboard.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getDashboardCertificationInformation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetDashboardCertificationInformation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDashboardProgramInformation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetDashboardProgramInformation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IDashboardState>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IProgramReadOnlyModel } from 'src/app/api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from 'src/app/api/models/surgeons/certification-read-only.model';\nimport { ProgramsService } from 'src/app/api/services/trainees/programs.service';\nimport { CertificationsService } from 'src/app/api/services/surgeons/certifications.service';\nimport {\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n} from './dashboard.actions';\nimport { catchError, of, tap } from 'rxjs';\n\nexport interface IDashboardState {\n  certificates: ICertificationReadOnlyModel[];\n  programs: IProgramReadOnlyModel;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IDashboardState>('dashboard');\n\n@State({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    certificates: [],\n    programs: {\n      programName: '',\n      programDirector: '',\n      programNumber: '',\n      exam: '',\n      clinicalLevel: '',\n      city: '',\n      state: '',\n    },\n  },\n})\n@Injectable()\nexport class DashboardState {\n  constructor(\n    private programsService: ProgramsService,\n    private certificationsService: CertificationsService\n  ) {}\n  @Action(GetDashboardProgramInformation) getDashboardProgramInformation(\n    ctx: StateContext<IDashboardState>,\n    payload: { userId: number }\n  ) {\n    const state = ctx.getState();\n    return this.programsService\n      .retrieveProgramReadOnly_GetByUserId(payload.userId)\n      .pipe(\n        tap((result: IProgramReadOnlyModel) => {\n          const res = result as IProgramReadOnlyModel;\n          ctx.setState({\n            ...state,\n            programs: res,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetDashboardCertificationInformation)\n  getDashboardCertificationInformation(\n    ctx: StateContext<IDashboardState>,\n    payload: { absId: string }\n  ) {\n    const state = ctx.getState();\n    return this.certificationsService\n      .retrieveCertificationReadOnly_GetByAbsId(payload.absId)\n      .pipe(\n        tap((result: ICertificationReadOnlyModel[]) => {\n          const res = result as ICertificationReadOnlyModel[];\n          ctx.setState({\n            ...state,\n            certificates: res,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "programsService",
                        "type": "ProgramsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "certificationsService",
                        "type": "CertificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "programsService",
                        "type": "ProgramsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "certificationsService",
                        "type": "CertificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DocumentService",
            "id": "injectable-DocumentService-5506687a76f61f4c6d0a03649020ab464b03c8aaabe6fdf0116caf122ebb13510c35e5f64aedf1819d207160ec2ffc41ad09982d364dc1aab5bb73f82381b08a",
            "file": "src/app/api/services/documents/document.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/documents'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDocument",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveDocument_GetById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDocumentModel>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveDocumentReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDocumentReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDocumentModel } from '../../models/documents/document.model';\nimport { IDocumentReadOnlyModel } from '../../models/documents/document-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n    private readonly baseEndpoint = 'api/documents';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public deleteDocument(id: number,\n        apiVersion = '1.0'): Observable<any> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: Id\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: UserId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: DocumentTypeId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [delete_userdocument_byid]\n            */\n            \n            \n            return this.apiService.delete<IDocumentModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public retrieveDocument_GetById(id: number,\n        apiVersion = '1.0'): Observable<IDocumentModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: Id\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: UserId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: DocumentTypeId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_document_byid]\n            */\n            \n            \n            return this.apiService.get<IDocumentModel>(`${this.baseEndpoint}/by-id?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public retrieveDocumentReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IDocumentReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_documents_byuserid]\n            */\n            \n            \n            return this.apiService.get<IDocumentReadOnlyModel[]>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DocumentsState",
            "id": "injectable-DocumentsState-5d0a83e114f3b4650fa75f0e4a8587edd3bc85f68df25598400aea4f50071790b919027a106ce846e87308e63a28f72fa86d1da6c9c68d774a515f6d905a7876",
            "file": "src/app/state/documents/documents.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllDocuments",
                    "args": [
                        {
                            "type": "StateContext<IDocuments>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDocumentReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetAllDocuments"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<IDocuments>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { IDocumentReadOnlyModel } from 'src/app/api/models/documents/document-read-only.model';\nimport { DocumentService } from 'src/app/api/services/documents/document.service';\nimport { GetAllDocuments } from './documents.actions';\n\nexport interface IDocuments {\n  documents: IDocumentReadOnlyModel[] | undefined;\n  errors?: IFormErrors;\n}\n\nexport const DOCUMENTS_STATE_TOKEN = new StateToken<IDocuments>('documents');\n\n@State<IDocuments>({\n  name: DOCUMENTS_STATE_TOKEN,\n  defaults: {\n    documents: undefined,\n  },\n})\n@Injectable()\nexport class DocumentsState {\n  constructor(private documentService: DocumentService) {}\n\n  @Action(GetAllDocuments)\n  getAllDocuments({\n    patchState,\n  }: StateContext<IDocuments>): Observable<IDocumentReadOnlyModel[]> {\n    return this.documentService.retrieveDocumentReadOnly_GetByUserId().pipe(\n      tap((documents) => {\n        patchState({\n          documents,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Documents Store', error);\n        console.error(error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "documentService",
                        "type": "DocumentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "documentService",
                        "type": "DocumentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FellowshipService",
            "id": "injectable-FellowshipService-8e933170c17a6f546b72ed3f2430be1f0e9a6cb9bcb88a4bc8ac4861d34fc5b4a1204a3fa4e26ceccdf4ba49d09d8deebfeb3410a78a0d37b37611ddd716368b",
            "file": "src/app/api/services/medicaltraining/fellowship.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/fellowships'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createFellowship",
                    "args": [
                        {
                            "name": "model",
                            "type": "IFellowshipModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFellowshipModel>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IFellowshipModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFellowship",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveFellowship_GetById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFellowshipModel>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveFellowshipReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFellowshipReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFellowship",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IFellowshipModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFellowshipModel>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IFellowshipModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IFellowshipModel } from '../../models/medicaltraining/fellowship.model';\nimport { IFellowshipReadOnlyModel } from '../../models/medicaltraining/fellowship-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FellowshipService {\n    private readonly baseEndpoint = 'api/fellowships';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public deleteFellowship(id: number,\n        apiVersion = '1.0'): Observable<any> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [delete_userfellowships]\n            */\n            \n            \n            return this.apiService.delete<IFellowshipModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public retrieveFellowship_GetById(id: number,\n        apiVersion = '1.0'): Observable<IFellowshipModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_userfellowships_byid]\n            */\n            \n            \n            return this.apiService.get<IFellowshipModel>(`${this.baseEndpoint}/by-id?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public createFellowship(model: IFellowshipModel, \n            apiVersion = '1.0'): Observable<IFellowshipModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * programName:String\n            * completionYear:String\n            * programOther:String\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [ins_userfellowships]\n            */\n            \n            \n            return this.apiService.post<IFellowshipModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n \n        public updateFellowship(id: number,\n        model: IFellowshipModel,\n        apiVersion = '1.0') : Observable<IFellowshipModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * programName:String\n            * completionYear:String\n            * programOther:String\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [update_userfellowships]\n            */\n            \n            \n            \n            return this.apiService.put<IFellowshipModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`,\n            model);\n        }\n \n        public retrieveFellowshipReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IFellowshipReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_userfellowships_byuserid]\n            */\n            \n            \n            return this.apiService.get<IFellowshipReadOnlyModel[]>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalDialogService",
            "id": "injectable-GlobalDialogService-8d052bc8855bbf28f95bda0a4d8761eeb2817f089b352d0412a5d4d59f353716845e6a73046cba7ea4ba5830267c781ad54e7c852c2ad384feb4687e43696639",
            "file": "src/app/shared/services/global-dialog.service.ts",
            "properties": [
                {
                    "name": "_componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeOpenDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showComponentModal",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "status",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "saveButtonText",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "cancelButtonText",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "saveCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": []
                        },
                        {
                            "name": "cancelCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saveButtonText",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cancelButtonText",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saveCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cancelCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showConfirmation",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccessError",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isSuccess",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSuccess",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ComponentRef,\n  Injectable,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobalDialogService {\n  private _dialog!: any;\n  private _componentRef!: ComponentRef<any>;\n\n  public viewContainerRef?: ViewContainerRef;\n\n  // setter used by other components to pass in a ViewContainerRef\n  // TODO: [Joe] I'd love to make this purely standalone if possible\n  set setViewContainerRef(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  constructor() {\n    // create initial dialog element\n    this._dialog = document.createElement('sl-dialog');\n    // set an id attribute so that we can get at the dialog from outside of the service if needed\n    this._dialog.setAttribute('id', 'global-dialog');\n    // set the aria-modal attribute to better support screen readers\n    this._dialog.setAttribute('aria-modal', 'true');\n\n    // set any event listeners that should be universal (and not type specific) here\n    // this._dialog.addEventListener('sl-initial-focus', () => {\n    //   console.log('sl-initial-focus');\n    // });\n  }\n\n  // handle the Success/Error dialog\n  showSuccessError(title: string, message: string, isSuccess: boolean) {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create button text and icon based on success or error\n    const buttonText = isSuccess ? 'Continue' : 'Okay';\n    const icon = isSuccess ? 'fa-circle-check' : 'fa-circle-xmark';\n    const iconClass = isSuccess ? 'success-icon' : 'error-icon';\n\n    // create the dialog content\n    this._dialog.innerHTML = `<div class=\"global-dialog flex flex-column justify-content-center align-items-center\">\n      <i class=\"fa-regular ${icon} ${iconClass}\"></i>\n      <h2 class=\"font-normal mt-3 mb-1\">${title}</h2>\n      <p class=\"font-bold mt-0 mb-1\" *ngIf=\"message\">${message}</p>\n      <sl-button\n        slot=\"footer\"\n        class=\"mt-5\"\n        style=\"width: 337px\"\n        variant=\"primary\"\n        >${buttonText}</sl-button\n      >\n    </div>`;\n\n    // add the click event listener to the button and set initial focus\n    const button = this._dialog.querySelector('sl-button');\n    button.setAttribute('autofocus', '');\n    button.addEventListener('click', () => {\n      this.hide();\n    });\n\n    // add click event listener to the dialog overlay so that the close cleans up the DOM\n    this._dialog.addEventListener('sl-request-close', () => {\n      this.hide();\n    });\n\n    // set modal specific attributes (this can be done with param options)\n    this._dialog.setAttribute('style', '--width: unset');\n    this._dialog.setAttribute('no-header', 'true');\n\n    // add the dialog to the DOM and show\n    document.body.appendChild(this._dialog);\n    this._dialog.show();\n  }\n\n  // handle the Confirmation dialog\n  showConfirmation(title: string, message: string): Promise<boolean> {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // create dialog content inside of a promise so that click events can use a .then() after the promise resolves\n    return new Promise((resolve) => {\n      // create the dialog content\n      this._dialog.innerHTML = `<div class=\"global-dialog flex flex-column justify-content-center align-items-center\">\n        <i class=\"fa-solid fa-triangle-exclamation confirmation-icon\"></i>\n        <h2 class=\"font-normal mt-3 mb-1\">${title}</h2>\n        <p class=\"font-bold mt-0 mb-1\" *ngIf=\"message\">${message}</p>\n        <div class=\"mt-5\" slot=\"footer\">\n        <sl-button id=\"declineButton\" variant=\"default\" outline style=\"width: 200px\">\n        <i slot=\"prefix\" class=\"fa-solid fa-xmark\"></i>\n        No\n        </sl-button>\n        <sl-button id=\"confirmButton\" variant=\"primary\" style=\"width: 200px\">\n        <i slot=\"prefix\" class=\"fa-solid fa-check\"></i>\n        Yes\n        </sl-button>\n        </div>\n      </div>`;\n\n      // add the click event listener to the decline button and set initial focus\n      const declineButton = this._dialog.querySelector('#declineButton');\n      declineButton.setAttribute('autofocus', '');\n      declineButton.addEventListener('click', () => {\n        this.hide();\n        resolve(false);\n      });\n\n      // add the click event listener to the confirm button\n      const confirmButton = this._dialog.querySelector('#confirmButton');\n      confirmButton.addEventListener('click', () => {\n        this.hide();\n        resolve(true);\n      });\n\n      // add click event listener to the dialog overlay to prevent default close\n      this._dialog.addEventListener('sl-request-close', (event: any) => {\n        event.preventDefault();\n      });\n\n      // set modal specific attributes (this can be done with param options)\n      this._dialog.setAttribute('style', '--width: unset');\n      this._dialog.setAttribute('no-header', 'true');\n\n      // add the dialog to the DOM and show\n      document.body.appendChild(this._dialog);\n      this._dialog.show();\n    });\n  }\n\n  // this is a proof of concept, if this works it should be broken out into specific modal types\n  // currently replicating surgeon profile dialog from registration requirements page\n  showComponentModal(\n    component: Type<any>,\n    title?: string | undefined,\n    status?: string | undefined,\n    saveButtonText?: string | undefined,\n    cancelButtonText?: string | undefined,\n    saveCallback?: () => void,\n    cancelCallback?: () => void\n  ) {\n    // If another global dialog is open, close it\n    if (document.body.contains(this._dialog)) {\n      this.hide();\n    }\n\n    // if a ViewContainerRef was set by the component that is calling this service, create the component\n    if (this.viewContainerRef) {\n      this._componentRef = this.viewContainerRef.createComponent(component);\n    }\n\n    // initialize the dialog label content as empty\n    let dialogLabel = ``;\n\n    // if there is a title create the dialog label content\n    if (title) {\n      // if there is a status add it to the dialog label content\n      if (status) {\n        dialogLabel = `<div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n        <span class=\"text-2xl\">${title}</span>\n        <span class=\"text-base\">\n          Status:\n          <span class=\"status ${status}\">\n            ${status.replace('-', ' ')}\n          </span></span></div>`;\n      }\n      // else just add the title to the dialog label content\n      else {\n        dialogLabel = `<div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n        <span class=\"text-2xl\">${title}</span></div>`;\n      }\n    }\n\n    // initialize the dialog footer content as empty\n    let dialogFooter = ``;\n    // if there are any footer buttons create the dialog footer content\n    if (saveButtonText || cancelButtonText) {\n      dialogFooter = `<div class=\"flex justify-content-end\" slot=\"footer\">`;\n      // if there is a cancel button, add it\n      if (cancelButtonText) {\n        dialogFooter =\n          dialogFooter +\n          `<sl-button id=\"cancelButton\" variant=\"text\">${cancelButtonText}</sl-button>`;\n      }\n      // if there is a save button, add it\n      if (saveButtonText) {\n        dialogFooter =\n          dialogFooter +\n          `<sl-button id=\"saveButton\" variant=\"primary\" style=\"width: 337px\">\n          ${saveButtonText}\n          </sl-button>`;\n      }\n      dialogFooter = dialogFooter + `</div>`;\n    }\n\n    // create the dialog content\n    // TODO: [Joe] should alternate content be shown if no ViewContainerRef was set?\n    this._dialog.innerHTML = `${dialogLabel}\n      <div class=\"global-dialog component-dialog\">\n      <ng-container></ng-container></div>\n      ${dialogFooter}`;\n\n    // if there is a cancel button\n    const cancelButton = this._dialog.querySelector('#cancelButton');\n    if (cancelButton) {\n      // add the click event listener to the cancel button and set initial focus\n      cancelButton.setAttribute('autofocus', '');\n      cancelButton.addEventListener('click', () => {\n        this.hide();\n        // if there is a cancel callback, call it\n        if (cancelCallback) {\n          cancelCallback();\n        }\n      });\n    }\n\n    // if there is a save button\n    const saveButton = this._dialog.querySelector('#saveButton');\n    if (saveButton) {\n      // if there is no other button, set initial focus\n      if (!cancelButton) {\n        saveButton.setAttribute('autofocus', '');\n      }\n      // add the click event listener to the save button\n      saveButton.addEventListener('click', () => {\n        this.hide();\n        // if there is a save callback, call it\n        if (saveCallback) {\n          saveCallback();\n        }\n      });\n    }\n\n    // TODO: [Joe] need to handle the case where no component was created (no ViewContainerRef was set)\n    if (this._componentRef) {\n      const ngContainer = this._dialog.querySelector('ng-container');\n      ngContainer.appendChild(this._componentRef.location.nativeElement);\n    }\n\n    // add click event listener to the dialog overlay to prevent default close\n    this._dialog.addEventListener('sl-request-close', (event: any) => {\n      event.preventDefault();\n    });\n\n    // set modal specific attributes (this can be done with param options)\n    this._dialog.removeAttribute('no-header');\n    this._dialog.setAttribute('class', 'status-header-dialog hide-close');\n    this._dialog.setAttribute('style', '--width: 70%');\n\n    // add the dialog to the DOM and show\n    document.body.appendChild(this._dialog);\n    this._dialog.show();\n  }\n\n  // can be used to trigger a close from outside of dialog service\n  closeOpenDialog() {\n    this.hide();\n  }\n\n  private hide() {\n    // if there is a component, destroy it\n    if (this._componentRef) {\n      this._componentRef.destroy();\n    }\n\n    // hide and remove the dialog\n    this._dialog.hide();\n    document.body.removeChild(this._dialog);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "accessors": {
                "setViewContainerRef": {
                    "name": "setViewContainerRef",
                    "setSignature": {
                        "name": "setViewContainerRef",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "vcr",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "vcr",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "GlobalToastService",
            "id": "injectable-GlobalToastService-23d3d64a8fdb2725a47e1f53f3e3cd9dddae5816007e38798c94b8bf43e0cbcb79fa7f88d08f58eca5cadc07e4fd8d820159c1fb03b24a48ffcbc7f85f5e70a6",
            "file": "src/app/shared/services/global-toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "showCustom",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'#toast-container'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobalToastService {\n  private showToast(\n    message: string,\n    type: string,\n    duration: number,\n    containerId: string\n  ) {\n    const container = document.querySelector(containerId);\n    let toastIcon = 'info-circle';\n    let toastType = 'primary';\n    if (type === 'success') {\n      toastIcon = 'check2-circle';\n      toastType = 'success';\n    } else if (type === 'warning') {\n      toastIcon = 'exclamation-triangle';\n      toastType = 'warning';\n    } else if (type === 'error') {\n      toastIcon = 'exclamation-octagon';\n      toastType = 'danger';\n    }\n    const toast = document.createElement('sl-alert');\n    toast.setAttribute('variant', toastType);\n    if (duration > 0) {\n      toast.setAttribute('duration', duration.toString());\n    }\n    toast.setAttribute('open', 'true');\n    toast.setAttribute('closable', 'true');\n\n    toast.innerHTML = `<sl-icon slot=\"icon\" name=\"${toastIcon}\"></sl-icon>\n        <p class=\"toast__title\">${type}</p>\n        <p class=\"toast__message\">${message}</p>`;\n\n    if (container) {\n      container.appendChild(toast);\n    } else {\n      document.body.appendChild(toast);\n    }\n  }\n\n  showInfo(message: string, duration = 5000, containerId = '#toast-container') {\n    this.showToast(message, 'info', duration, containerId);\n  }\n\n  showSuccess(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'success', duration, containerId);\n  }\n\n  showWarning(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'warning', duration, containerId);\n  }\n\n  showError(\n    message: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, 'error', duration, containerId);\n  }\n\n  showCustom(\n    message: string,\n    type: string,\n    duration = 5000,\n    containerId = '#toast-container'\n  ) {\n    this.showToast(message, type, duration, containerId);\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "GmeSummaryService",
            "id": "injectable-GmeSummaryService-1b69da7e5ea716fd71bf976df600e9510515491acbae7e1805f282a5e0d379e527e4b7d71d4b24756c75034af7e3b66e0e1694011b18bc7f90cb57c516211ba3",
            "file": "src/app/api/services/graduatemedicaleducation/gme-summary.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/gme-summary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveGmeSummaryReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IGmeSummaryReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IGmeSummaryReadOnlyModel } from '../../models/graduatemedicaleducation/gme-summary-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GmeSummaryService {\n    private readonly baseEndpoint = 'api/gme-summary';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveGmeSummaryReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IGmeSummaryReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_gmesummary_byuserid]\n            */\n            \n            \n            return this.apiService.get<IGmeSummaryReadOnlyModel[]>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GQAdditionalTrainingState",
            "id": "injectable-GQAdditionalTrainingState-b84ad446f226b8c598306c5a43d6697433680d4bd71b6abd5ee61b60a21a2e8ccb14b9e7aeaf14011c573122bcb27adeb56ad0b3465c1d5ae8fee0ead1c3fcf7",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAdditionalTraining",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "CreateAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreateAdditionalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "CreateAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdditionalTrainingDetails",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetAdditionalTrainingDetails"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdditionalTrainingList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetAdditionalTrainingList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAdditionalTraining",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateAdditionalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGQAdditionalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { AdditionalTrainingsService } from '../../api';\nimport {\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from './examination-gq-additional-training.actions';\n\nexport interface IGQAdditionalTraining {\n  AdditionalTraining: IAdditionalTrainingReadOnlyModel[];\n  selectedAdditionalTraining: IAdditionalTrainingModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GQ_ADDITIONAL_TRAINING_STATE_TOKEN =\n  new StateToken<IGQAdditionalTraining>('gqAdditionalTraining');\n\n@State<IGQAdditionalTraining>({\n  name: GQ_ADDITIONAL_TRAINING_STATE_TOKEN,\n  defaults: {\n    AdditionalTraining: [],\n    selectedAdditionalTraining: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GQAdditionalTrainingState {\n  constructor(private additionalTrainingsService: AdditionalTrainingsService) {}\n\n  @Action(GetAdditionalTrainingList)\n  getAdditionalTrainingList(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { userId: number }\n  ) {\n    const state = ctx.getState();\n    const userId = payload.userId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTrainingReadOnly_GetAllByUserId(userId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            AdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(GetAdditionalTrainingDetails)\n  getAdditionalTrainingDetails(\n    ctx: StateContext<IGQAdditionalTraining>,\n    payload: { trainingId: number }\n  ) {\n    const state = ctx.getState();\n    const trainingId = payload.trainingId;\n    return this.additionalTrainingsService\n      .retrieveAdditionalTraining_GetByTrainingId(trainingId)\n      .pipe(\n        tap((result: any) => {\n          ctx.setState({\n            ...state,\n            selectedAdditionalTraining: result,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateAdditionalTraining)\n  updateAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: UpdateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .updateAdditionalTraining(payload.trainingId, payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          const additionalTraining = state.AdditionalTraining.map((item) =>\n            item.trainingId === readOnlyResult.trainingId\n              ? readOnlyResult\n              : item\n          );\n          ctx.setState({\n            ...state,\n            AdditionalTraining: additionalTraining,\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(CreateAdditionalTraining)\n  createAdditionalTraining(\n    ctx: StateContext<IGQAdditionalTraining>,\n    { payload }: CreateAdditionalTraining\n  ) {\n    const state = ctx.getState();\n    return this.additionalTrainingsService\n      .createAdditionalTraining(payload)\n      .pipe(\n        tap((result: IAdditionalTrainingModel) => {\n          const readOnlyResult = {\n            trainingId: result.trainingId,\n            typeOfTraining: result.typeOfTraining,\n            state: result.state,\n            city: result.city,\n            institutionName: result.institutionName,\n            other: result.other,\n            dateStarted: result.dateStarted,\n            dateEnded: result.dateEnded,\n          };\n          ctx.setState({\n            ...state,\n            AdditionalTraining: [readOnlyResult, ...state.AdditionalTraining],\n            selectedAdditionalTraining: undefined,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "additionalTrainingsService",
                        "type": "AdditionalTrainingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "additionalTrainingsService",
                        "type": "AdditionalTrainingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GraduateMedicalEducationState",
            "id": "injectable-GraduateMedicalEducationState-bdd2d484ad85e4ba79baaf3dfe74fedbbe982474a8a30279771b32bb013d9d42746ae663aa56428499eface5b8b7281c1fd3b782071c57e5ec75ff03c9d1058f",
            "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearGraduateMedicalEducationErrors",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ClearGraduateMedicalEducationErrors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createGraduateMedicalEducation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "CreateGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreateGraduateMedicalEducation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "CreateGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteGraduateMedicalEducation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "DeleteGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DeleteGraduateMedicalEducation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "DeleteGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAverages",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGraduateMedicalEducationDetails",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetGraduateMedicalEducationDetails"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGraduateMedicalEducationList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetGraduateMedicalEducationList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGraduateMedicalEducationSummary",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetGraduateMedicalEducationSummary"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotals",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGraduateMedicalEducation",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateGraduateMedicalEducation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IGraduateMedicalEducation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, mergeMap, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n} from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { RotationService, GmeSummaryService } from '../../api';\nimport {\n  GetGraduateMedicalEducationList,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  DeleteGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n  GetGraduateMedicalEducationSummary,\n} from './gme.actions';\n\nexport interface IGraduateMedicalEducation {\n  gmeRotations: IRotationReadOnlyModel[];\n  gmeSummary: IGmeSummaryReadOnlyModel[];\n  selectedRotation: IRotationModel | undefined;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN =\n  new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation');\n\n@State<IGraduateMedicalEducation>({\n  name: GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN,\n  defaults: {\n    gmeRotations: [],\n    gmeSummary: [],\n    selectedRotation: undefined,\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class GraduateMedicalEducationState {\n  constructor(\n    private rotationService: RotationService,\n    private gmeSummaryService: GmeSummaryService\n  ) {}\n\n  @Action(GetGraduateMedicalEducationSummary)\n  getGraduateMedicalEducationSummary(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.gmeSummaryService.retrieveGmeSummaryReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        const level4AndChief = {\n          clinicalLevel: 'Clinical Level 4 Totals',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(\n            result,\n            'clinicalWeeks',\n            'Clinical Level 4'\n          ),\n          nonClinicalWeeks: this.getTotals(\n            result,\n            'nonClinicalWeeks',\n            'Clinical Level 4'\n          ),\n          essentialsWeeks: this.getTotals(\n            result,\n            'essentialsWeeks',\n            'Clinical Level 4'\n          ),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#335b92',\n            color: '#FFF',\n          },\n        };\n        const level5AndChief = {\n          clinicalLevel: 'Clinical Level 5 Totals',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(\n            result,\n            'clinicalWeeks',\n            'Clinical Level 5'\n          ),\n          nonClinicalWeeks: this.getTotals(\n            result,\n            'nonClinicalWeeks',\n            'Clinical Level 5'\n          ),\n          essentialsWeeks: this.getTotals(\n            result,\n            'essentialsWeeks',\n            'Clinical Level 5'\n          ),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#335b92',\n            color: '#FFF',\n          },\n        };\n\n        const summaryTotals = {\n          clinicalLevel: 'Total Weeks',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getTotals(result, 'clinicalWeeks'),\n          nonClinicalWeeks: this.getTotals(result, 'nonClinicalWeeks'),\n          essentialsWeeks: this.getTotals(result, 'essentialsWeeks'),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#1F3758',\n            color: '#FFF',\n          },\n        };\n        const summaryAverages = {\n          clinicalLevel: 'Avg Weeks',\n          minStartDate: '',\n          maxStartDate: '',\n          programName: '',\n          clinicalWeeks: this.getAverages(result, 'clinicalWeeks'),\n          nonClinicalWeeks: this.getAverages(result, 'nonClinicalWeeks'),\n          essentialsWeeks: this.getAverages(result, 'essentialsWeeks'),\n          rowStyle: {\n            'font-weight': 'bold',\n            'background-color': '#1F3758',\n            color: '#FFF',\n          },\n        };\n        result.push(level4AndChief);\n        result.push(level5AndChief);\n        result.sort((a: any, b: any) =>\n          a.clinicalLevel > b.clinicalLevel ? 1 : -1\n        );\n        result.push(summaryTotals);\n        result.push(summaryAverages);\n\n        ctx.setState({\n          ...state,\n          gmeSummary: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationList)\n  getGraduateMedicalEducationList(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.retrieveRotationReadOnly_GetByUserId().pipe(\n      tap((result: any) => {\n        ctx.setState({\n          ...state,\n          gmeRotations: result.sort((a: any, b: any) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(GetGraduateMedicalEducationDetails)\n  getGraduateMedicalEducationDetails(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    payload: { id: number }\n  ) {\n    const state = ctx.getState();\n    const gmeId = payload.id;\n    return this.rotationService.retrieveRotation_GetById(gmeId).pipe(\n      tap((result: any) => {\n        ctx.setState({\n          ...state,\n          selectedRotation: result,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(UpdateGraduateMedicalEducation)\n  updateGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: UpdateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.updateRotation(payload.id, payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        const gmeRotations = state.gmeRotations.map((item) =>\n          item.id === readOnlyResult.id ? readOnlyResult : item\n        );\n        ctx.setState({\n          ...state,\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(CreateGraduateMedicalEducation)\n  createGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: CreateGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.createRotation(payload).pipe(\n      tap((result: IRotationModel) => {\n        const readOnlyResult = {\n          id: result.id,\n          startDate: result.startDate,\n          endDate: result.endDate,\n          programName: result.programName,\n          alternateInstitutionName: result.alternateInstitutionName,\n          clinicalLevel: result.clinicalLevel,\n          clinicalLevelId: result.clinicalLevelId,\n          clinicalActivity: result.clinicalActivity,\n          other: result.other,\n          nonSurgicalActivity: result.nonSurgicalActivity,\n          isInternationalRotation: result.isInternationalRotation,\n          isCredit: result.isCredit,\n          isEssential: result.isEssential,\n        };\n        ctx.setState({\n          ...state,\n          gmeRotations: [readOnlyResult, ...state.gmeRotations].sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(DeleteGraduateMedicalEducation)\n  deleteGraduateMedicalEducation(\n    ctx: StateContext<IGraduateMedicalEducation>,\n    { payload }: DeleteGraduateMedicalEducation\n  ) {\n    const state = ctx.getState();\n    return this.rotationService.deleteRotation(payload).pipe(\n      tap(() => {\n        const gmeRotations = state.gmeRotations.filter(\n          (item) => item.id !== payload\n        );\n        ctx.setState({\n          ...state,\n          gmeRotations: gmeRotations.sort((a, b) =>\n            a.startDate > b.startDate ? 1 : -1\n          ),\n          selectedRotation: undefined,\n          errors: null,\n        });\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.setState({\n          ...ctx.getState(),\n          errors,\n        });\n        return of(errors);\n      }),\n      mergeMap(() => ctx.dispatch(new GetGraduateMedicalEducationSummary()))\n    );\n  }\n\n  @Action(ClearGraduateMedicalEducationErrors)\n  clearGraduateMedicalEducationErrors(\n    ctx: StateContext<IGraduateMedicalEducation>\n  ) {\n    ctx.patchState({ errors: null });\n  }\n\n  getTotals(items: any[], prop: string, filter?: string) {\n    return items.reduce((a, b) => {\n      if (filter) {\n        if (b[prop] && b.clinicalLevel.startsWith(filter)) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      } else {\n        if (b[prop]) {\n          return a + parseInt(b[prop]);\n        }\n        return a;\n      }\n    }, 0);\n  }\n  getAverages(items: any[], prop: string) {\n    const total = this.getTotals(items, prop);\n    const avg = total / items.length;\n    return Math.round(avg * 10) / 10;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rotationService",
                        "type": "RotationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gmeSummaryService",
                        "type": "GmeSummaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "rotationService",
                        "type": "RotationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gmeSummaryService",
                        "type": "GmeSummaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MedicalTrainingService",
            "id": "injectable-MedicalTrainingService-b3d5612abac223ac256850a57cbf358cf855ee121529aa7769c170af5310b00296ab149f6378a321d343fe75b065c7174edb63cc5eebbdf115d601c1653399ad",
            "file": "src/app/api/services/medicaltraining/medical-training.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/medical-training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createMedicalTraining",
                    "args": [
                        {
                            "name": "model",
                            "type": "IMedicalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IMedicalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveMedicalTraining_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMedicalTraining",
                    "args": [
                        {
                            "name": "model",
                            "type": "IMedicalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IMedicalTrainingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IMedicalTrainingModel } from '../../models/medicaltraining/medical-training.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MedicalTrainingService {\n    private readonly baseEndpoint = 'api/medical-training';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveMedicalTraining_GetByUserId(apiVersion = '1.0'): Observable<IMedicalTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: MedicalSchoolCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ResidencyCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_medical_training_byuserid]\n            */\n            \n            \n            return this.apiService.get<IMedicalTrainingModel>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n \n        public createMedicalTraining(model: IMedicalTrainingModel, \n            apiVersion = '1.0'): Observable<IMedicalTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: MedicalSchoolCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ResidencyCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * userId:Number\n            * graduateProfileId:Number\n            * medicalSchoolName:String\n            * medicalSchoolCity:String\n            * medicalSchoolStateId:String\n            * medicalSchoolCountryId:String\n            * degreeId:Number\n            * medicalSchoolCompletionYear:String\n            * residencyProgramName:String\n            * residencyCompletionYear:String\n            * residencyProgramOther:String\n            * createdByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [ins_medical_training]\n            */\n            \n            \n            return this.apiService.post<IMedicalTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n \n        public updateMedicalTraining(model: IMedicalTrainingModel,\n        apiVersion = '1.0') : Observable<IMedicalTrainingModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: MedicalSchoolCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ResidencyCompletionYear\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * userId:Number\n            * graduateProfileId:Number\n            * medicalSchoolName:String\n            * medicalSchoolCity:String\n            * medicalSchoolStateId:String\n            * medicalSchoolCountryId:String\n            * degreeId:Number\n            * medicalSchoolCompletionYear:String\n            * residencyProgramName:String\n            * residencyCompletionYear:String\n            * residencyProgramOther:String\n            * lastUpdatedByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [update_medical_training]\n            */\n            \n            \n            \n            return this.apiService.put<IMedicalTrainingModel>(`${this.baseEndpoint}?api-version=${apiVersion}`,\n            model);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MedicalTrainingState",
            "id": "injectable-MedicalTrainingState-6b29cc13c34d49801606f4410251c445736543bd614864fb19591e855e58b41648dbf761fc2e406a7f434dbba2fb1d4a2e09e11cf64cc99e71c3576dab7c5265",
            "file": "src/app/state/medical-training/medical-training.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createMedicalTraining",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "CreateMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel | undefined>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "CreateMedicalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "CreateMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdvancedTrainingData",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetAdvancedTrainingData"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMedicalTraining",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel | undefined>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetMedicalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMedicalTraining",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "CreateMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMedicalTrainingModel | undefined>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateMedicalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IMedicalTraining>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "CreateMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken } from '@ngxs/store';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\nimport { IFormErrors } from 'src/app/shared/common';\nimport { MedicalTrainingService } from 'src/app/api/services/medicaltraining/medical-training.service';\nimport {\n  CreateMedicalTraining,\n  GetAdvancedTrainingData,\n  GetMedicalTraining,\n  UpdateMedicalTraining,\n} from './medical-training.actions';\nimport { AdvancedTrainingService } from 'src/app/api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from 'src/app/api/models/medicaltraining/advanced-training-read-only.model';\n\nexport interface IMedicalTraining {\n  medicalTraining: IMedicalTrainingModel | undefined;\n  additionalTraining: IAdvancedTrainingReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport const MEDICALSTATE_STATE_TOKEN = new StateToken<IMedicalTraining>(\n  'medical_training'\n);\n\n@State<IMedicalTraining>({\n  name: MEDICALSTATE_STATE_TOKEN,\n  defaults: {\n    medicalTraining: undefined,\n    additionalTraining: undefined,\n  },\n})\n@Injectable()\nexport class MedicalTrainingState {\n  constructor(\n    private medicalTrainingService: MedicalTrainingService,\n    private advancedTrainingService: AdvancedTrainingService\n  ) {}\n\n  @Action(GetMedicalTraining)\n  getMedicalTraining(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IMedicalTrainingModel | undefined> {\n    if (ctx.getState()?.medicalTraining) {\n      return of(ctx.getState()?.medicalTraining);\n    }\n\n    return this.medicalTrainingService\n      .retrieveMedicalTraining_GetByUserId()\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(CreateMedicalTraining)\n  createMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    return this.medicalTrainingService\n      .createMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(UpdateMedicalTraining)\n  updateMedicalTraining(\n    ctx: StateContext<IMedicalTraining>,\n    action: CreateMedicalTraining\n  ): Observable<IMedicalTrainingModel | undefined> {\n    return this.medicalTrainingService\n      .updateMedicalTraining(action.payload)\n      .pipe(\n        tap((medicalTraining: IMedicalTrainingModel) => {\n          ctx.patchState({\n            medicalTraining,\n          });\n        })\n      );\n  }\n\n  @Action(GetAdvancedTrainingData)\n  getAdvancedTrainingData(\n    ctx: StateContext<IMedicalTraining>\n  ): Observable<IAdvancedTrainingReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.additionalTraining) {\n      return of(ctx.getState()?.additionalTraining);\n    }\n\n    return this.advancedTrainingService\n      .retrieveAdvancedTrainingReadOnly_GetByUserId()\n      .pipe(\n        tap((additionalTraining: IAdvancedTrainingReadOnlyModel[]) => {\n          ctx.patchState({\n            additionalTraining,\n          });\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicalTrainingService",
                        "type": "MedicalTrainingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "advancedTrainingService",
                        "type": "AdvancedTrainingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "medicalTrainingService",
                        "type": "MedicalTrainingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "advancedTrainingService",
                        "type": "AdvancedTrainingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyAccountState",
            "id": "injectable-MyAccountState-5707bbc9ec85ce5f8133020da4cfd154fc1ef11d6de0266c2405ee9bc9a7651c55c8aaa06e650d06a84b62f71f3d1ea768ed1d3d9d7756ae702f86b5fa385510",
            "file": "src/app/state/my-account/my-account.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearErrors",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserCredential>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ClearErrors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserCredential>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveMyAccountChanges",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserCredential>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SaveMyAccountChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SaveMyAccountChanges"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserCredential>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SaveMyAccountChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { of, tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { SaveMyAccountChanges, ClearErrors } from './my-account.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredentialModel } from '../../api';\nimport { UserCredentialsService } from '../../api';\nimport { Logout } from '../auth';\n\nexport interface IUserCredential extends IUserCredentialModel {\n  errors?: IFormErrors | null;\n}\n\nconst USER_ACCOUNT_STATE_TOKEN = new StateToken<IUserCredential>('userAccount');\n@State<IUserCredential>({\n  name: USER_ACCOUNT_STATE_TOKEN,\n  defaults: {\n    emailAddress: null,\n    password: null,\n    errors: null,\n  },\n})\n@Injectable()\nexport class MyAccountState {\n  constructor(\n    private authStore: Store,\n    private userCredentialsService: UserCredentialsService\n  ) {}\n\n  @Action(SaveMyAccountChanges)\n  saveMyAccountChanges(\n    ctx: StateContext<IUserCredential>,\n    { payload }: SaveMyAccountChanges\n  ) {\n    return this.userCredentialsService.updateUserCredential(payload).pipe(\n      tap((result: IUserCredentialModel) => {\n        // Succeeded in changing the user's credentials so logout\n        ctx.setState({\n          emailAddress: null,\n          password: null,\n          errors: null,\n        });\n        this.authStore.dispatch(new Logout());\n      }),\n      catchError((httpError: HttpErrorResponse) => {\n        const errors = httpError.error;\n        ctx.patchState({ errors });\n        return of(errors);\n      })\n    );\n  }\n\n  @Action(ClearErrors)\n  clearErrors(ctx: StateContext<IUserCredential>) {\n    ctx.patchState({ errors: null });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCredentialsService",
                        "type": "UserCredentialsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "authStore",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCredentialsService",
                        "type": "UserCredentialsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OutcomeRegistriesService",
            "id": "injectable-OutcomeRegistriesService-3fd5d3f9fd9cd9eede6830eff5156110207c3058aa57e0c9cd1c7ee65a13e608926f8b493f9930c8d2249a715c7988ff8875271dab8c5109ea0cc49d7efc034f",
            "file": "src/app/api/services/continuouscertification/outcome-registries.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/continuous-certification/outcome-registries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createOutcomeRegistry",
                    "args": [
                        {
                            "name": "model",
                            "type": "IOutcomeRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOutcomeRegistryModel>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IOutcomeRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveOutcomeRegistry_GetByUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOutcomeRegistryModel>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOutcomeRegistry",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IOutcomeRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOutcomeRegistryModel>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IOutcomeRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IOutcomeRegistryModel } from '../../models/continuouscertification/outcome-registry.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutcomeRegistriesService {\n    private readonly baseEndpoint = 'api/continuous-certification/outcome-registries';\n\n  constructor(private apiService: ApiService) {}\n\n \n        public retrieveOutcomeRegistry_GetByUserId(userId: number,\n        apiVersion = '1.0'): Observable<IOutcomeRegistryModel> {\n    /**\n     * Claims\n     */\n\n    /**\n     * Business Rules\n     * No business rules exist for this model\n     */\n\n    /**\n     * Required Parameters\n     * userId:Number\n     * apiVersion\n     */\n\n    /**\n     * Calls Sp(s)\n     * [get_outcomeregistry_getbyuserid]\n     */\n\n            \n            return this.apiService.get<IOutcomeRegistryModel>(`${this.baseEndpoint}?api-version=${apiVersion}&userId=${userId}`);\n  }\n\n        public createOutcomeRegistry(model: IOutcomeRegistryModel, \n            apiVersion = '1.0'): Observable<IOutcomeRegistryModel> {\n    /**\n     * Claims\n     */\n\n    /**\n     * Business Rules\n     * No business rules exist for this model\n     */\n\n    /**\n     * Required Parameters\n     * userId:Number\n     * surgeonSpecificRegistry:Boolean\n     * registryComments:String\n     * registeredWithACHQC:Boolean\n     * registeredWithCESQIP:Boolean\n     * registeredWithMBSAQIP:Boolean\n     * registeredWithABA:Boolean\n     * registeredWithASBS:Boolean\n     * registeredWithStatewideCollaboratives:Boolean\n     * registeredWithABMS:Boolean\n     * registeredWithNCDB:Boolean\n     * registeredWithRQRS:Boolean\n     * registeredWithNSQIP:Boolean\n     * registeredWithNTDB:Boolean\n     * registeredWithSTS:Boolean\n     * registeredWithTQIP:Boolean\n     * registeredWithUNOS:Boolean\n     * registeredWithNCDR:Boolean\n     * registeredWithSVS:Boolean\n     * registeredWithELSO:Boolean\n     * userConfirmed:Boolean\n     * userConfirmedDateUtc:String\n     * apiVersion\n     */\n\n    /**\n     * Calls Sp(s)\n     * [ins_outcomeregistry_getbyuserid]\n     */\n\n            \n            return this.apiService.post<IOutcomeRegistryModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n  }\n\n        public updateOutcomeRegistry(userId: number,\n    model: IOutcomeRegistryModel,\n        apiVersion = '1.0') : Observable<IOutcomeRegistryModel> {\n    /**\n     * Claims\n     */\n\n    /**\n     * Business Rules\n     * No business rules exist for this model\n     */\n\n    /**\n     * Required Parameters\n     * surgeonSpecificRegistry:Boolean\n     * registryComments:String\n     * registeredWithACHQC:Boolean\n     * registeredWithCESQIP:Boolean\n     * registeredWithMBSAQIP:Boolean\n     * registeredWithABA:Boolean\n     * registeredWithASBS:Boolean\n     * registeredWithStatewideCollaboratives:Boolean\n     * registeredWithABMS:Boolean\n     * registeredWithNCDB:Boolean\n     * registeredWithRQRS:Boolean\n     * registeredWithNSQIP:Boolean\n     * registeredWithNTDB:Boolean\n     * registeredWithSTS:Boolean\n     * registeredWithTQIP:Boolean\n     * registeredWithUNOS:Boolean\n     * registeredWithNCDR:Boolean\n     * registeredWithSVS:Boolean\n     * registeredWithELSO:Boolean\n     * userConfirmed:Boolean\n     * userConfirmedDateUtc:String\n     * userId:Number\n     * apiVersion\n     */\n\n    /**\n     * Calls Sp(s)\n     * [update_outcomeregistry_getbyuserid]\n     */\n\n            \n            \n            return this.apiService.put<IOutcomeRegistryModel>(`${this.baseEndpoint}?api-version=${apiVersion}&userId=${userId}`,\n            model);\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PicklistsService",
            "id": "injectable-PicklistsService-ffd4c5ff60a52aa01decb2977dcbd6f74b8c4307cf389883bdb4dcfacda1d69158164990cc446fc7572e9c4382b68381fea7fb93a3a86b280b421499432ef3d8",
            "file": "src/app/api/services/picklists/picklists.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/picklists'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveAccreditedProgramInstitutionReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveCertificateTypeReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICertificateTypeReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveClinicalActivityReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IClinicalActivityReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveClinicalLevelReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IClinicalLevelReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveCountryReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICountryReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveDegreeReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDegreeReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveDocumentTypeReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDocumentTypeReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveEthnicityReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IEthnicityReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveFellowshipProgramReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IFellowshipProgramReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveGenderReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IGenderReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveGraduateProfileReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IGraduateProfileReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveLanguageReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ILanguageReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveRaceReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IRaceReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveResidencyProgramReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResidencyProgramReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveStateReadOnly_GetByCountry",
                    "args": [
                        {
                            "name": "countryCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IStateReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "countryCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveTrainingTypeReadOnly_GetAll",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITrainingTypeReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from '../../models/picklists/accredited-program-institution-read-only.model';\nimport { ICertificateTypeReadOnlyModel } from '../../models/picklists/certificate-type-read-only.model';\nimport { IClinicalActivityReadOnlyModel } from '../../models/picklists/clinical-activity-read-only.model';\nimport { IClinicalLevelReadOnlyModel } from '../../models/picklists/clinical-level-read-only.model';\nimport { ICountryReadOnlyModel } from '../../models/picklists/country-read-only.model';\nimport { IDegreeReadOnlyModel } from '../../models/picklists/degree-read-only.model';\nimport { IDocumentTypeReadOnlyModel } from '../../models/picklists/document-type-read-only.model';\nimport { IEthnicityReadOnlyModel } from '../../models/picklists/ethnicity-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from '../../models/picklists/fellowship-program-read-only.model';\nimport { IGenderReadOnlyModel } from '../../models/picklists/gender-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from '../../models/picklists/graduate-profile-read-only.model';\nimport { ILanguageReadOnlyModel } from '../../models/picklists/language-read-only.model';\nimport { IRaceReadOnlyModel } from '../../models/picklists/race-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from '../../models/picklists/residency-program-read-only.model';\nimport { IStateReadOnlyModel } from '../../models/picklists/state-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from '../../models/picklists/training-type-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PicklistsService {\n    private readonly baseEndpoint = 'api/picklists';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveAccreditedProgramInstitutionReadOnly_GetAll(apiVersion = '1.0'): Observable<IAccreditedProgramInstitutionReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_accredited_program_institutions]\n            */\n            \n            \n            return this.apiService.get<IAccreditedProgramInstitutionReadOnlyModel[]>(`${this.baseEndpoint}/accredited-program-institutions?api-version=${apiVersion}`);\n        }\n \n        public retrieveCertificateTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<ICertificateTypeReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_certificate_types]\n            */\n            \n            \n            return this.apiService.get<ICertificateTypeReadOnlyModel[]>(`${this.baseEndpoint}/certificate-types?api-version=${apiVersion}`);\n        }\n \n        public retrieveClinicalActivityReadOnly_GetAll(apiVersion = '1.0'): Observable<IClinicalActivityReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_clinicalactivity]\n            */\n            \n            \n            return this.apiService.get<IClinicalActivityReadOnlyModel[]>(`${this.baseEndpoint}/clinical-activities?api-version=${apiVersion}`);\n        }\n \n        public retrieveClinicalLevelReadOnly_GetAll(apiVersion = '1.0'): Observable<IClinicalLevelReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_clinicallevel]\n            */\n            \n            \n            return this.apiService.get<IClinicalLevelReadOnlyModel[]>(`${this.baseEndpoint}/clinical-levels?api-version=${apiVersion}`);\n        }\n \n        public retrieveCountryReadOnly_GetAll(apiVersion = '1.0'): Observable<ICountryReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklist_country_all]\n            */\n            \n            \n            return this.apiService.get<ICountryReadOnlyModel[]>(`${this.baseEndpoint}/countries?api-version=${apiVersion}`);\n        }\n\n        public retrieveDegreeReadOnly_GetAll(apiVersion = '1.0'): Observable<IDegreeReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_degree]\n            */\n            \n            \n            return this.apiService.get<IDegreeReadOnlyModel[]>(`${this.baseEndpoint}/degrees?api-version=${apiVersion}`);\n        }\n \n        public retrieveDocumentTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<IDocumentTypeReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_document_types]\n            */\n            \n            \n            return this.apiService.get<IDocumentTypeReadOnlyModel[]>(`${this.baseEndpoint}/document-types?api-version=${apiVersion}`);\n        }\n \n        public retrieveEthnicityReadOnly_GetAll(apiVersion = '1.0'): Observable<IEthnicityReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklists_ethnicities_all]\n            */\n            \n            \n            return this.apiService.get<IEthnicityReadOnlyModel[]>(`${this.baseEndpoint}/ethnicities?api-version=${apiVersion}`);\n        }\n\n        public retrieveFellowshipProgramReadOnly_GetAll(apiVersion = '1.0'): Observable<IFellowshipProgramReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_fellowship_program]\n            */\n            \n            \n            return this.apiService.get<IFellowshipProgramReadOnlyModel[]>(`${this.baseEndpoint}/fellowship-programs?api-version=${apiVersion}`);\n        }\n \n        public retrieveGenderReadOnly_GetAll(apiVersion = '1.0'): Observable<IGenderReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklist_genders_all]\n            */\n            \n            \n            return this.apiService.get<IGenderReadOnlyModel[]>(`${this.baseEndpoint}/genders?api-version=${apiVersion}`);\n        }\n \n        public retrieveGraduateProfileReadOnly_GetAll(apiVersion = '1.0'): Observable<IGraduateProfileReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_graduate_profile]\n            */\n            \n            \n            return this.apiService.get<IGraduateProfileReadOnlyModel[]>(`${this.baseEndpoint}/graduate-profile?api-version=${apiVersion}`);\n        }\n\n        public retrieveLanguageReadOnly_GetAll(apiVersion = '1.0'): Observable<ILanguageReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklist_languages_all]\n            */\n            \n            \n            return this.apiService.get<ILanguageReadOnlyModel[]>(`${this.baseEndpoint}/languages?api-version=${apiVersion}`);\n        }\n\n        public retrieveRaceReadOnly_GetAll(apiVersion = '1.0'): Observable<IRaceReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklist_races_all]\n            */\n            \n            \n            return this.apiService.get<IRaceReadOnlyModel[]>(`${this.baseEndpoint}/races?api-version=${apiVersion}`);\n        }\n\n        public retrieveResidencyProgramReadOnly_GetAll(apiVersion = '1.0'): Observable<IResidencyProgramReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_residency_program]\n            */\n            \n            \n            return this.apiService.get<IResidencyProgramReadOnlyModel[]>(`${this.baseEndpoint}/residency-programs?api-version=${apiVersion}`);\n        }\n \n        public retrieveStateReadOnly_GetByCountry(countryCode: string,\n        apiVersion = '1.0'): Observable<IStateReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * countryCode:String\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_picklist_states_bycountry]\n            */\n\n\n            return this.apiService.get<IStateReadOnlyModel[]>(`${this.baseEndpoint}/states?api-version=${apiVersion}&countryCode=${countryCode}`);\n        }\n \n        public retrieveTrainingTypeReadOnly_GetAll(apiVersion = '1.0'): Observable<ITrainingTypeReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_training_type]\n            */\n            \n            \n            return this.apiService.get<ITrainingTypeReadOnlyModel[]>(`${this.baseEndpoint}/training-types?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PicklistsState",
            "id": "injectable-PicklistsState-5803ff6d6ff1beb075b93834f33599fc2daf1f33ecbc0915b7f3ac6c900520f56bd55459c4604ecc3accff4fe8e9bbeb9b93e404deceadd99d29567da6bbe29e",
            "file": "src/app/state/picklists/picklists.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccreditedProgramInstitutionsList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetAccreditedProgramInstitutionsList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClinicalActivityList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetClinicalActivityList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClinicalLevelList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetClinicalLevelList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCountryList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetCountryList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDegrees",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetDegrees"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEthnicityList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetEthnicityList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFellowshipPrograms",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetFellowshipPrograms"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenderList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetGenderList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGraduateProfiles",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetGraduateProfiles"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLanguageList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetLanguageList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPicklists",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPicklist>",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetPicklists"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRaceList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetRaceList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getResidencyPrograms",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetResidencyPrograms"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStateList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetStateList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTrainingTypeList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[] | undefined>",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetTrainingTypeList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IPicklist>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { catchError, share, tap } from 'rxjs/operators';\nimport { forkJoin, map, Observable, of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\n\nimport {\n  ICountryReadOnlyModel,\n  IEthnicityReadOnlyModel,\n  IGenderReadOnlyModel,\n  ILanguageReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n  PicklistsService,\n} from '../../api';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetCountryList,\n  GetDegrees,\n  GetEthnicityList,\n  GetFellowshipPrograms,\n  GetGenderList,\n  GetGraduateProfiles,\n  GetLanguageList,\n  GetPicklists,\n  GetRaceList,\n  GetResidencyPrograms,\n  GetStateList,\n  GetTrainingTypeList,\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n} from './picklists.actions';\nimport { IFormErrors } from '../../shared/common';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IGraduateProfileReadOnlyModel } from 'src/app/api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from 'src/app/api/models/picklists/degree-read-only.model';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\nimport { IResidencyProgramReadOnlyModel } from 'src/app/api/models/picklists/residency-program-read-only.model';\nexport interface IPicklist {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] };\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n  clinicalLevels: IClinicalLevelReadOnlyModel[] | undefined;\n  clinicalActivities: IClinicalActivityReadOnlyModel[] | undefined;\n  errors?: IFormErrors | undefined;\n}\n\nexport interface IPickListItem {\n  itemValue: string | null | undefined;\n  itemDescription: string | null | undefined;\n  modifier?: string | null | undefined;\n  isCredit?: boolean | null | undefined;\n  isEssential?: boolean | null | undefined;\n}\n\nexport interface IPicklistUserValues {\n  countries: ICountryReadOnlyModel[] | undefined;\n  ethnicities: IEthnicityReadOnlyModel[] | undefined;\n  genders: IPickListItem[] | undefined;\n  languages: IPickListItem[] | undefined;\n  races: IRaceReadOnlyModel[] | undefined;\n  states: IStateReadOnlyModel[] | undefined;\n  statesMap: { [key: string]: IStateReadOnlyModel[] } | undefined;\n  defaultStates: IStateReadOnlyModel[] | undefined;\n  accreditedInstitutions:\n    | IAccreditedProgramInstitutionReadOnlyModel[]\n    | undefined;\n  trainingTypes: ITrainingTypeReadOnlyModel[] | undefined;\n  graduateProfiles: IGraduateProfileReadOnlyModel[] | undefined;\n  degrees: IDegreeReadOnlyModel[] | undefined;\n  fellowshipPrograms: IFellowshipProgramReadOnlyModel[] | undefined;\n  residencyPrograms: IResidencyProgramReadOnlyModel[] | undefined;\n}\n\nexport const PICKLISTS_STATE_TOKEN = new StateToken<IPicklist>('picklists');\n\n@State<IPicklist>({\n  name: PICKLISTS_STATE_TOKEN,\n  defaults: {\n    countries: undefined,\n    ethnicities: undefined,\n    genders: undefined,\n    languages: undefined,\n    races: undefined,\n    states: [],\n    statesMap: {},\n    defaultStates: undefined,\n    accreditedInstitutions: undefined,\n    trainingTypes: undefined,\n    graduateProfiles: undefined,\n    degrees: undefined,\n    fellowshipPrograms: undefined,\n    residencyPrograms: undefined,\n    clinicalLevels: undefined,\n    clinicalActivities: undefined,\n  },\n})\n@Injectable()\nexport class PicklistsState {\n  constructor(\n    private _store: Store,\n    private picklistsService: PicklistsService\n  ) {}\n\n  @Action(GetCountryList)\n  getCountryList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ICountryReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.countries) {\n      return of(ctx.getState()?.countries);\n    }\n    return this.picklistsService.retrieveCountryReadOnly_GetAll().pipe(\n      tap((countries: ICountryReadOnlyModel[]) => {\n        ctx.patchState({\n          countries,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetEthnicityList)\n  getEthnicityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IEthnicityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.ethnicities) {\n      return of(ctx.getState()?.ethnicities);\n    }\n    return this.picklistsService.retrieveEthnicityReadOnly_GetAll().pipe(\n      tap((ethnicities: IEthnicityReadOnlyModel[]) => {\n        ctx.patchState({\n          ethnicities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Ethnicities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGenderList)\n  getGenderList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.genders) {\n      return of(ctx.getState()?.genders);\n    }\n    return this.picklistsService.retrieveGenderReadOnly_GetAll().pipe(\n      tap((genders: IGenderReadOnlyModel[]) => {\n        const transGenders = [] as IPickListItem[];\n        genders.forEach((gender) => {\n          transGenders.push({\n            itemValue: gender.itemValue?.toString(),\n            itemDescription: gender.itemDescription,\n          });\n        });\n\n        ctx.patchState({\n          genders: transGenders,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Genders', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetLanguageList)\n  getLanguageList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IPickListItem[] | undefined> {\n    if (ctx.getState()?.languages) {\n      return of(ctx.getState()?.languages);\n    }\n    return this.picklistsService.retrieveLanguageReadOnly_GetAll().pipe(\n      tap((languages: ILanguageReadOnlyModel[]) => {\n        const transLanguages = [] as IPickListItem[];\n        languages.forEach((language) => {\n          transLanguages.push({\n            itemValue: language.itemValue?.toString(),\n            itemDescription: language.itemDescription,\n          });\n        });\n        ctx.patchState({\n          languages: transLanguages,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Languages', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetRaceList)\n  getRaceList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IRaceReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.races) {\n      return of(ctx.getState()?.races);\n    }\n    return this.picklistsService.retrieveRaceReadOnly_GetAll().pipe(\n      tap((races: IRaceReadOnlyModel[]) => {\n        ctx.patchState({\n          races,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Races', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetStateList)\n  getStateList(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IStateReadOnlyModel[] | undefined> {\n    const statesMap = ctx.getState()?.statesMap\n      ? ctx.getState()?.statesMap\n      : {};\n    if (payload?.countryCode && statesMap[payload.countryCode]) {\n      const states: IStateReadOnlyModel[] | undefined =\n        statesMap[payload.countryCode];\n      ctx.patchState({\n        states,\n      });\n      return of(ctx.getState().states);\n    }\n    if (payload?.countryCode) {\n      return this.picklistsService\n        .retrieveStateReadOnly_GetByCountry(payload.countryCode)\n        .pipe(\n          tap((states: IStateReadOnlyModel[]) => {\n            const newStatesMap = { ...statesMap };\n            newStatesMap[payload.countryCode] = states;\n            ctx.patchState({\n              states,\n              statesMap: newStatesMap,\n            });\n          }),\n          catchError((error) => {\n            console.error('------- In Picklists Store: States', error);\n            return of(error);\n          })\n        );\n    } else {\n      ctx.patchState({\n        states: [],\n      });\n      return of(ctx.getState().states);\n    }\n  }\n\n  @Action(GetAccreditedProgramInstitutionsList)\n  getAccreditedProgramInstitutionsList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IAccreditedProgramInstitutionReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.accreditedInstitutions) {\n      return of(ctx.getState()?.accreditedInstitutions);\n    }\n    return this.picklistsService\n      .retrieveAccreditedProgramInstitutionReadOnly_GetAll()\n      .pipe(\n        tap((insitutions: IAccreditedProgramInstitutionReadOnlyModel[]) => {\n          ctx.patchState({\n            accreditedInstitutions: insitutions,\n          });\n        }),\n        catchError((error) => {\n          console.error(\n            '------- In Picklists Store: Accredited Institutions',\n            error\n          );\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetTrainingTypeList)\n  getTrainingTypeList(\n    ctx: StateContext<IPicklist>\n  ): Observable<ITrainingTypeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.trainingTypes) {\n      return of(ctx.getState()?.trainingTypes);\n    }\n    return this.picklistsService.retrieveTrainingTypeReadOnly_GetAll().pipe(\n      tap((trainingTypes: ITrainingTypeReadOnlyModel[]) => {\n        ctx.patchState({\n          trainingTypes,\n        });\n      }),\n      catchError((error) => {\n        console.error(\n          '------- In Picklists Store: Accredited Institutions',\n          error\n        );\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetGraduateProfiles)\n  getGraduateProfiles(\n    ctx: StateContext<IPicklist>\n  ): Observable<IGraduateProfileReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.graduateProfiles) {\n      return of(ctx.getState()?.graduateProfiles);\n    }\n    return this.picklistsService.retrieveGraduateProfileReadOnly_GetAll().pipe(\n      tap((graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        ctx.patchState({\n          graduateProfiles,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalLevelList)\n  getClinicalLevelList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalLevelReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalLevels) {\n      return of(ctx.getState()?.clinicalLevels);\n    }\n    return this.picklistsService.retrieveClinicalLevelReadOnly_GetAll().pipe(\n      tap((clinicalLevels: IClinicalLevelReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalLevels,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Levels', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetDegrees)\n  getDegrees(\n    ctx: StateContext<IPicklist>\n  ): Observable<IDegreeReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.degrees) {\n      return of(ctx.getState()?.degrees);\n    }\n    return this.picklistsService.retrieveDegreeReadOnly_GetAll().pipe(\n      tap((degrees: IDegreeReadOnlyModel[]) => {\n        ctx.patchState({\n          degrees,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetFellowshipPrograms)\n  getFellowshipPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IFellowshipProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.fellowshipPrograms) {\n      return of(ctx.getState()?.fellowshipPrograms);\n    }\n    return this.picklistsService\n      .retrieveFellowshipProgramReadOnly_GetAll()\n      .pipe(\n        tap((fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n          ctx.patchState({\n            fellowshipPrograms,\n          });\n        }),\n        catchError((error) => {\n          console.error('------- In Picklists Store: States', error);\n          return of(error);\n        })\n      );\n  }\n\n  @Action(GetResidencyPrograms)\n  getResidencyPrograms(\n    ctx: StateContext<IPicklist>\n  ): Observable<IResidencyProgramReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.residencyPrograms) {\n      return of(ctx.getState()?.residencyPrograms);\n    }\n    return this.picklistsService.retrieveResidencyProgramReadOnly_GetAll().pipe(\n      tap((residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        ctx.patchState({\n          residencyPrograms,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: States', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetClinicalActivityList)\n  getClinicalActivityList(\n    ctx: StateContext<IPicklist>\n  ): Observable<IClinicalActivityReadOnlyModel[] | undefined> {\n    if (ctx.getState()?.clinicalActivities) {\n      return of(ctx.getState()?.clinicalActivities);\n    }\n    return this.picklistsService.retrieveClinicalActivityReadOnly_GetAll().pipe(\n      tap((clinicalActivities: IClinicalActivityReadOnlyModel[]) => {\n        ctx.patchState({\n          clinicalActivities,\n        });\n      }),\n      catchError((error) => {\n        console.error('------- In Picklists Store: Clinical Activities', error);\n        return of(error);\n      })\n    );\n  }\n\n  @Action(GetPicklists)\n  getPicklists(\n    ctx: StateContext<IPicklist>,\n    payload?: { countryCode: string }\n  ): Observable<IPicklist> {\n    const joins = [\n      this.getCountryList(ctx).pipe(catchError((error) => of(error))),\n      this.getEthnicityList(ctx).pipe(catchError((error) => of(error))),\n      this.getGenderList(ctx).pipe(catchError((error) => of(error))),\n      this.getLanguageList(ctx).pipe(catchError((error) => of(error))),\n      this.getRaceList(ctx).pipe(catchError((error) => of(error))),\n      this.getAccreditedProgramInstitutionsList(ctx).pipe(\n        catchError((error) => of(error))\n      ),\n      this.getDegrees(ctx).pipe(catchError((error) => of(error))),\n      this.getTrainingTypeList(ctx).pipe(catchError((error) => of(error))),\n      this.getFellowshipPrograms(ctx).pipe(catchError((error) => of(error))),\n      this.getResidencyPrograms(ctx).pipe(catchError((error) => of(error))),\n    ];\n\n    if (payload?.countryCode) {\n      joins.push(\n        this.getStateList(ctx, { countryCode: payload.countryCode }).pipe(\n          catchError((error) => of(error))\n        )\n      );\n    }\n\n    return forkJoin(joins).pipe(\n      map((picklists: IPicklist[]) => {\n        return of(ctx.getState());\n      }),\n      share(),\n      catchError((error) => {\n        console.error('------- In Picklists Store', error);\n        return of(error);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "picklistsService",
                        "type": "PicklistsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 114,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "picklistsService",
                        "type": "PicklistsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProgramsService",
            "id": "injectable-ProgramsService-7f79ce8fc027c029f44a93fe1ecb87edcd8039d030b6215580975e9b049b63b19b2a480193d535224188efbe19a9992b85e152609fffc96b61fa25c6f8b8481a",
            "file": "src/app/api/services/trainees/programs.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/trainees/programs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveProgramReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProgramReadOnlyModel>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IProgramReadOnlyModel } from '../../models/trainees/program-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProgramsService {\n    private readonly baseEndpoint = 'api/trainees/programs';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveProgramReadOnly_GetByUserId(userId: number,\n        apiVersion = '1.0'): Observable<IProgramReadOnlyModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n\n            /**\n            * Required Parameters\n            * userId:Number\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_user_programs]\n            */\n            \n            \n            return this.apiService.get<IProgramReadOnlyModel>(`${this.baseEndpoint}?api-version=${apiVersion}&userId=${userId}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RotationService",
            "id": "injectable-RotationService-7584e1a49ad711ad114516a1ba9f770f6606ce2453b8c5a974f9766e030f4bb3d1c368751c23007773cd47d9b985855c2182bae8e2a1a345a62fc207c8729226",
            "file": "src/app/api/services/graduatemedicaleducation/rotation.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/graduate-medical-education'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createRotation",
                    "args": [
                        {
                            "name": "model",
                            "type": "IRotationModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IRotationModel>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IRotationModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRotation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveRotation_GetById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IRotationModel>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveRotationReadOnly_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IRotationReadOnlyModel[]>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRotation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IRotationModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IRotationModel>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IRotationModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IRotationModel } from '../../models/graduatemedicaleducation/rotation.model';\nimport { IRotationReadOnlyModel } from '../../models/graduatemedicaleducation/rotation-read-only.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RotationService {\n    private readonly baseEndpoint = 'api/graduate-medical-education';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public deleteRotation(id: number,\n        apiVersion = '1.0'): Observable<any> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [delete_gmerotations_byid]\n            */\n            \n            \n            return this.apiService.delete<IRotationModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public retrieveRotation_GetById(id: number,\n        apiVersion = '1.0'): Observable<IRotationModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_gmerotations_byid]\n            */\n            \n            \n            return this.apiService.get<IRotationModel>(`${this.baseEndpoint}/by-id?api-version=${apiVersion}&id=${id}`);\n        }\n \n        public createRotation(model: IRotationModel, \n            apiVersion = '1.0'): Observable<IRotationModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * userId:Number\n            * startDate:String\n            * endDate:String\n            * clinicalLevelId:Number\n            * clinicalActivityId:Number\n            * programName:String\n            * nonSurgicalActivity:String\n            * alternateInstitutionName:String\n            * isInternationalRotation:Boolean\n            * other:String\n            * createdByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [ins_gmerotations]\n            */\n            \n            \n            return this.apiService.post<IRotationModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n \n        public updateRotation(id: number,\n        model: IRotationModel,\n        apiVersion = '1.0') : Observable<IRotationModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * id:Number\n            * userId:Number\n            * startDate:String\n            * endDate:String\n            * clinicalLevelId:Number\n            * clinicalActivityId:Number\n            * programName:String\n            * nonSurgicalActivity:String\n            * alternateInstitutionName:String\n            * isInternationalRotation:Boolean\n            * other:String\n            * lastUpdatedByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [update_gmerotations]\n            */\n            \n            \n            \n            return this.apiService.put<IRotationModel>(`${this.baseEndpoint}?api-version=${apiVersion}&id=${id}`,\n            model);\n        }\n \n        public retrieveRotationReadOnly_GetByUserId(apiVersion = '1.0'): Observable<IRotationReadOnlyModel[]> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * No business rules exist for this model\n            */\n            \n            /**\n            * Required Parameters\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_gmerotations_byuserid]\n            */\n            \n            \n            return this.apiService.get<IRotationReadOnlyModel[]>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserCredentialsService",
            "id": "injectable-UserCredentialsService-932d64a2d6a8707eba388e722b3fac99a7acbf2bdd8d7d8ad7f778f1fcaaf1cdc9ba86ee9590ef161f2ac40a43f999e7a39ba3682333ff43ea653e8d972bc541",
            "file": "src/app/api/services/users/user-credentials.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/users/credentials'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveUserCredential_GetByUserId",
                    "args": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserCredentialModel>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserCredential",
                    "args": [
                        {
                            "name": "model",
                            "type": "IUserCredentialModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserCredentialModel>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IUserCredentialModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IUserCredentialModel } from '../../models/users/user-credential.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserCredentialsService {\n    private readonly baseEndpoint = 'api/users/credentials';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveUserCredential_GetByUserId(apiVersion = '1.0'): Observable<IUserCredentialModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * Business rules for property: EmailAddress\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Password\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n\n            /**\n            * Required Parameters\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [get_user_account]\n            */\n            \n            \n            return this.apiService.get<IUserCredentialModel>(`${this.baseEndpoint}/by-userid?api-version=${apiVersion}`);\n        }\n\n        public updateUserCredential(model: IUserCredentialModel,\n        apiVersion = '1.0') : Observable<IUserCredentialModel> {\n            /**\n            * Claims\n            */\n\n            /**\n            * Business Rules\n            * Business rules for property: EmailAddress\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Password\n            *   Rule Name: RegEx\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n\n            /**\n            * Required Parameters\n            * emailAddress:String\n            * password:String\n            * apiVersion\n            */\n\n            /**\n            * Calls Sp(s)\n            * [upd_user_account]\n            */\n            \n            \n            \n            return this.apiService.put<IUserCredentialModel>(`${this.baseEndpoint}?api-version=${apiVersion}`,\n            model);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserProfilesService",
            "id": "injectable-UserProfilesService-54b4a3b5637e8526ffd56b9627588ec80a417fe7fc26788427d1315df9bf8c6c7bf838f1b2ecd30642956670117ddd73f1595496aed4566085ddcc3ca8fada9b",
            "file": "src/app/api/services/users/user-profiles.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'api/users/profiles'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createUserProfile",
                    "args": [
                        {
                            "name": "model",
                            "type": "IUserProfileModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserProfileModel>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "IUserProfileModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveUserProfile_GetByUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserProfileModel>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserProfile",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "IUserProfileModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserProfileModel>",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "model",
                            "type": "IUserProfileModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IUserProfileModel } from '../../models/users/user-profile.model';\nimport { ApiService } from 'ytg-angular';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserProfilesService {\n    private readonly baseEndpoint = 'api/users/profiles';\n\n    constructor(private apiService: ApiService) {}\n\n \n        public retrieveUserProfile_GetByUserId(userId: number,\n        apiVersion = '1.0'): Observable<IUserProfileModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: FirstName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: LastName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: DisplayName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: OfficePhoneNumber\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthState\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCountry\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: CountryCitizenship\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: GenderId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Race\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Ethnicity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: FirstLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BestLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ReceiveComms\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Street1\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: City\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: State\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ZipCode\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Country\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * userId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [get_user_profile_byuserid]\n            */\n            \n            \n            return this.apiService.get<IUserProfileModel>(`${this.baseEndpoint}/by-userId?api-version=${apiVersion}&userId=${userId}`);\n        }\n \n        public createUserProfile(model: IUserProfileModel, \n            apiVersion = '1.0'): Observable<IUserProfileModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: FirstName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: LastName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: DisplayName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: OfficePhoneNumber\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthState\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCountry\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: CountryCitizenship\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: GenderId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Race\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Ethnicity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: FirstLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BestLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ReceiveComms\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Street1\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: City\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: State\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ZipCode\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Country\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * userId:Number\n            * firstName:String\n            * middleName:String\n            * lastName:String\n            * suffix:String\n            * displayName:String\n            * officePhoneNumber:String\n            * mobilePhoneNumber:String\n            * birthCity:String\n            * birthState:String\n            * birthCountry:String\n            * countryCitizenship:String\n            * absId:String\n            * nPI:String\n            * genderId:Number\n            * birthDate:String\n            * race:String\n            * ethnicity:String\n            * firstLanguageId:Number\n            * bestLanguageId:Number\n            * receiveComms:Boolean\n            * userConfirmed:Boolean\n            * userConfirmedDate:String\n            * street1:String\n            * street2:String\n            * city:String\n            * state:String\n            * zipCode:String\n            * country:String\n            * createdByUserId:Number\n            * createdAtUtc:String\n            * lastUpdatedAtUtc:String\n            * lastUpdatedByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [insert_user_profile]\n            */\n            \n            \n            return this.apiService.post<IUserProfileModel>(`${this.baseEndpoint}?api-version=${apiVersion}`, \n                model);\n        }\n \n        public updateUserProfile(userId: number,\n        model: IUserProfileModel,\n        apiVersion = '1.0') : Observable<IUserProfileModel> {\n            /**\n            * Claims\n            */\n            \n            /**\n            * Business Rules\n            * Business rules for property: FirstName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: LastName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: DisplayName\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: OfficePhoneNumber\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthState\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthCountry\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: CountryCitizenship\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: GenderId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BirthDate\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Race\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Ethnicity\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: FirstLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: BestLanguageId\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ReceiveComms\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Street1\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: City\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: State\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: ZipCode\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            * Business rules for property: Country\n            *   Rule Name: Required\n            *   Rule Value: YtgIm.Library.Rules.RuleOptions\n            */\n            \n            /**\n            * Required Parameters\n            * userProfileId:Number\n            * userId:Number\n            * firstName:String\n            * middleName:String\n            * lastName:String\n            * suffix:String\n            * displayName:String\n            * officePhoneNumber:String\n            * mobilePhoneNumber:String\n            * birthCity:String\n            * birthState:String\n            * birthCountry:String\n            * countryCitizenship:String\n            * absId:String\n            * nPI:String\n            * genderId:Number\n            * birthDate:String\n            * race:String\n            * ethnicity:String\n            * firstLanguageId:Number\n            * bestLanguageId:Number\n            * receiveComms:Boolean\n            * userConfirmed:Boolean\n            * userConfirmedDate:String\n            * street1:String\n            * street2:String\n            * city:String\n            * state:String\n            * zipCode:String\n            * country:String\n            * createdByUserId:Number\n            * createdAtUtc:String\n            * lastUpdatedAtUtc:String\n            * lastUpdatedByUserId:Number\n            * apiVersion\n            */\n            \n            /**\n            * Calls Sp(s)\n            * [update_user_profile]\n            */\n            \n            \n            \n            return this.apiService.put<IUserProfileModel>(`${this.baseEndpoint}?api-version=${apiVersion}&userId=${userId}`,\n            model);\n        }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserProfileState",
            "id": "injectable-UserProfileState-bced101cf1c3c906252209692aab69034ede6c50d969fe0934654c8d44915e71e301ad935a2195217f26830c926aaf0043d9fc8af071fe11194b0bef2b6385ee",
            "file": "src/app/state/user-profile/user-profile.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getUserProfile",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserProfile>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "GetUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetUserProfile"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserProfile>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "GetUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserProfile",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserProfile>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateUserProfile"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<IUserProfile>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Action, State, StateContext, StateToken, Store } from '@ngxs/store';\nimport { IUserProfileModel } from '../../api';\nimport { IFormErrors } from '../../shared/common';\nimport { UserProfilesService } from '../../api';\nimport { GetUserProfile, UpdateUserProfile } from './user-profile.actions';\nimport { GetPicklists, GetStateList } from '../picklists';\n\nexport interface IUserProfile {\n  userProfileId: number;\n  userId: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  suffix: string;\n  displayName: string;\n  officePhoneNumber: string;\n  mobilePhoneNumber: string;\n  birthCity: string;\n  birthState: string;\n  birthCountry: string;\n  countryCitizenship: string;\n  absId: string;\n  certificationStatus: string;\n  nPI: string;\n  genderId: string; // Need to cast as number on saves\n  birthDate: string;\n  race: string;\n  ethnicity: string;\n  firstLanguageId: string; // Need to cast as number on saves\n  bestLanguageId: string; // Need to cast as number on saves\n  receiveComms: boolean;\n  userConfirmed: boolean;\n  userConfirmedDate: string;\n  createdByUserId: number;\n  createdAtUtc: string;\n  lastUpdatedAtUtc: string;\n  lastLoginDateUtc: string;\n  lastUpdatedByUserId: number;\n  street1: string;\n  street2: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  emailAddress: string;\n  fullName: string;\n  profilePicture: string;\n  claims: string[];\n  errors?: IFormErrors | null;\n}\n\nexport const USER_PROFILE_STATE_TOKEN = new StateToken<IUserProfile>(\n  'userProfile'\n);\n\n@State<IUserProfile>({\n  name: USER_PROFILE_STATE_TOKEN,\n  defaults: {\n    userProfileId: 0,\n    userId: 0,\n    firstName: '',\n    middleName: '',\n    lastName: '',\n    suffix: '',\n    displayName: '',\n    officePhoneNumber: '',\n    mobilePhoneNumber: '',\n    birthCity: '',\n    birthState: '',\n    birthCountry: '',\n    countryCitizenship: '',\n    absId: '',\n    certificationStatus: '',\n    nPI: '',\n    genderId: '',\n    birthDate: '',\n    race: '',\n    ethnicity: '',\n    firstLanguageId: '',\n    bestLanguageId: '',\n    receiveComms: false,\n    userConfirmed: false,\n    userConfirmedDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastLoginDateUtc: '',\n    lastUpdatedByUserId: 0,\n    street1: '',\n    street2: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: '',\n    emailAddress: '',\n    fullName: '',\n    profilePicture: '',\n    claims: [],\n    errors: null,\n  },\n})\n@Injectable()\nexport class UserProfileState {\n  constructor(\n    private store: Store,\n    private userProfilesService: UserProfilesService\n  ) {}\n\n  @Action(GetUserProfile)\n  getUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { loginUser, claims }: GetUserProfile\n  ) {\n    const state = ctx.getState();\n    const userId = loginUser?.userId;\n    return this.userProfilesService\n      .retrieveUserProfile_GetByUserId(userId)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const res = result as unknown as IUserProfile;\n          res.birthDate = res.birthDate?.split('T')[0];\n          res.firstLanguageId = res.firstLanguageId?.toString();\n          res.bestLanguageId = res.bestLanguageId?.toString();\n          res.genderId = res.genderId?.toString();\n          ctx.setState({\n            ...state,\n            ...loginUser,\n            ...res,\n            userConfirmed: false,\n            claims,\n            profilePicture:\n              'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n            errors: null,\n          });\n          this.store.dispatch(new GetStateList(ctx.getState().birthCountry));\n          this.store.dispatch(new GetPicklists(ctx.getState().country));\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.patchState({ errors });\n          return of(errors);\n        })\n      );\n  }\n\n  @Action(UpdateUserProfile)\n  updateUserProfile(\n    ctx: StateContext<IUserProfile>,\n    { payload }: UpdateUserProfile\n  ) {\n    const model = {} as unknown as IUserProfileModel;\n\n    ctx.setState({\n      ...ctx.getState(),\n      ...payload,\n    });\n\n    Object.assign(model, ctx.getState());\n    const userProfile: IUserProfileModel =\n      model as unknown as IUserProfileModel;\n    userProfile.userConfirmedDate = new Date().toISOString();\n    userProfile.userConfirmed = true;\n    userProfile.genderId = +userProfile.genderId;\n    userProfile.firstLanguageId = +userProfile.firstLanguageId;\n    userProfile.bestLanguageId = +userProfile.bestLanguageId;\n    userProfile.lastUpdatedByUserId = ctx.getState().userId;\n\n    return this.userProfilesService\n      .updateUserProfile(ctx.getState().userId, userProfile)\n      .pipe(\n        tap((result: IUserProfileModel) => {\n          const userProfile = result as unknown as IUserProfile;\n          userProfile.genderId = userProfile.genderId.toString();\n          userProfile.firstLanguageId = userProfile.firstLanguageId.toString();\n          userProfile.bestLanguageId = userProfile.bestLanguageId.toString();\n          ctx.setState({\n            ...userProfile,\n            errors: null,\n          });\n        }),\n        catchError((httpError: HttpErrorResponse) => {\n          const errors = httpError.error;\n          ctx.setState({\n            ...ctx.getState(),\n            errors,\n          });\n          return of(errors);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userProfilesService",
                        "type": "UserProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 107,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userProfilesService",
                        "type": "UserProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UsersApiService",
            "id": "injectable-UsersApiService-4b8df11369b8efdea3203fe2593cd18bd24f35b0db26b5e4a0e315eb780beba2208e79535d88df56852647a1c0b4b7fc0872b31f13aa5ecd0ef49667adf3fc11",
            "file": "src/app/api/services/users/users.service.ts",
            "properties": [
                {
                    "name": "baseEndpoint",
                    "defaultValue": "'users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "retrieveAppUserReadOnly_GetByCredentials",
                    "args": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAppUserReadOnlyModel>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apiVersion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1.0'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -</p>\n<p>All client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file</p>\n<p>############################################################################</p>\n",
            "rawdescription": "\n\n#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -\n\nAll client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file\n\n############################################################################\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from 'ytg-angular';\n\nimport { IAppUserReadOnlyModel } from '../../models/users/app-user-read-only.model';\n\n/**\n#############################################################################\nWARNING GENERATED CODE DO NOT MODIFY -\n\nAll client side API services are generated by the server side API\ndeveloper when the API is created. Please do not make changes to this file\n\n############################################################################\n**/\n\n@Injectable()\nexport class UsersApiService {\n  private readonly baseEndpoint = 'users';\n\n  constructor(private apiService: ApiService) {}\n\n  public retrieveAppUserReadOnly_GetByCredentials(\n    emailAddress: string,\n    password: string,\n    apiVersion = '1.0'\n  ): Observable<IAppUserReadOnlyModel> {\n    /**\n     * Claims\n     */\n\n    /**\n     * Business Rules\n     * No business rules exist for this model\n     */\n\n    /**\n     * Required Parameters\n     * emailAddress:String\n     * password:String\n     * apiVersion:String\n     */\n\n    /**\n     * Calls Sp(s)\n     * [get_userlogin]\n     */\n\n    return this.apiService.post<IAppUserReadOnlyModel>(\n      `${this.baseEndpoint}/authenticate`,\n      {\n        emailAddress,\n        password,\n        apiVersion,\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-f0031407feffa01828b578de6857412740cc9745307f53fdaadb71c8c391456fa6d866abd9147d7f58fd6c335de977d168f173ace753dc6a38f2dc31b12e9925",
            "file": "src/app/state/auth/auth.guard.ts",
            "properties": [
                {
                    "name": "$isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "AuthSelectors.isAuthenticated"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { AuthSelectors } from './auth.selectors';\n\ninterface CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  @Select(AuthSelectors.isAuthenticated) $isAuthenticated:\n    | Observable<boolean>\n    | undefined;\n  constructor(private store: Store) {}\n\n  // TODO: Explore using an async way to validate routes\n  async test() {\n    return 1;\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    // TODO: Check claims for the route and implement role-based authorization\n    // TODO: Route to the correct route after login\n    // Route and state will be used once we have user roles\n    return this.store.selectSnapshot(AuthSelectors.isAuthenticated);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-d9482fa49687a244aa71153f10604ea5234350e11ed576b3f16e91b2a8fb12cd1c6369de25667ab83ddf250e1af179d0ddff0d52a5ed9583c9ef9a1280300e54",
            "file": "src/app/shared/common/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAuthorizationToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AuthService } from '../../../api/services/auth/auth.service';\nimport {\n  HttpErrorResponse,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Store } from '@ngxs/store';\nimport { Logout } from '../../../state/auth/auth.actions';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService, private store: Store) {}\n\n  getAuthorizationToken(): string | undefined {\n    const accessToken = sessionStorage.getItem('access_token');\n    if (accessToken) {\n      return `Bearer ${accessToken}`;\n    }\n    sessionStorage.clear();\n    return;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    // Get the auth token from the service.\n    const authToken = this.getAuthorizationToken();\n\n    // Clone the request and replace the original headers with\n    // cloned headers, updated with the authorization.\n    if (!authToken) {\n      return next.handle(req).pipe(\n        tap(() => {\n          console.info('AuthInterceptor: No auth token found');\n        })\n      );\n    }\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken),\n    });\n\n    // send cloned request with header to the next handler.\n    return next.handle(authReq).pipe(\n      catchError((err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            this.store.dispatch(new Logout());\n          }\n        }\n        throw err;\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-e471e11743c34950862f7e3abda6a76538355ebadfe6895c8ac9c67c94edc3ee6fccd372d942a72223a13c6029695c928d6a2f0c81f04e721ded9743fb006ead",
            "file": "src/app/shared/common/interceptors/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpErrorResponse,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\n\nimport { GlobalToastService } from '../../services/global-toast.service';\n\nimport { Store } from '@ngxs/store';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private store: Store,\n    private globalToastService: GlobalToastService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const errorReq = req.clone();\n\n    // send cloned request with header to the next handler.\n    return next.handle(errorReq).pipe(\n      catchError((err) => {\n        if (err instanceof HttpErrorResponse) {\n          // do not handle 401 errors here, they will be handled in the auth interceptor\n          if (\n            !err.error ||\n            (typeof err.error === 'string' && err.error !== 'Login failed')\n          ) {\n            if (err.status !== 401) {\n              // TODO: [Joe] - add error specific messages here\n\n              const message = `${err.status} Error: ${err.statusText}`;\n              // if (err.error) {\n              //   message = err.error;\n              // }\n              this.globalToastService.showError(message);\n            }\n          }\n          // log error to console for debugging\n          console.log(err);\n          console.log(`Error Code: ${err.status}\\nMessage: ${err.message}`);\n          throw err;\n        }\n        throw err;\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalToastService",
                        "type": "GlobalToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalToastService",
                        "type": "GlobalToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AbsSelect",
            "id": "class-AbsSelect-b7afd8935c3e7465313538a562370fddc8ceabf22983a24c48b051bc0dfcb8c838050912faa141f5b557956d40fed5cdfcbd8cc92dab46cafa2ad4d3b3edcaad",
            "file": "src/web-components/form-elements/abs-select/abs-select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { User } from '../../user';\n\n@customElement('abs-select')\nexport class AbsSelect extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `;\n\n  @property({ type: Object }) user?: User = {\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  };\n\n  // override createRenderRoot() {\n  //   return this;\n  // }\n\n  override render() {\n    // if (this.user === undefined) {\n    //   return '';\n    // }\n\n    // return html`\n    //   <div class=\"card\">\n    //     <img\n    //       width=\"160px\"\n    //       src=${this.user.avatar\n    //         ? this.user.avatar\n    //         : 'assets/images/avatar.png'}\n    //     />\n    //     <div class=\"card-content\">\n    //       <h4>${this.user.fullName}</h4>\n    //       <p>${this.user.role}</p>\n    //       <sl-button @click=${this.handleEdit}>Edit</sl-button>\n    //     </div>\n    //   </div>\n    // `;\n    return html` <sl-select><slot></slot></sl-select> `;\n  }\n\n  private handleEdit() {\n    this.dispatchEvent(\n      new CustomEvent<User>('edit', {\n        detail: this.user,\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "styles",
                    "defaultValue": "css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124,
                        161
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": "{type: Object}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "handleEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        161
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement"
        },
        {
            "name": "AbsSelectNon",
            "id": "class-AbsSelectNon-a1663789b5111edf87f26d13a4242ab878d69a87556898f8d65357d0dd57c8bc79a3361bcce2fccfe2f5b1f058cc5030deaed50992becc4974cb92bcc4f38982",
            "file": "src/web-components/form-elements/abs-select/abs-select-non.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AbsSelectNon extends HTMLElement {\n  constructor() {\n    super();\n    // this.shadow = this.attachShadow({ mode: 'open' });\n    this.attachShadow({ mode: 'open' });\n    if (this.shadowRoot) {\n      this.shadowRoot.innerHTML = `<div>TEST</div><sl-select><slot></slot></sl-select>`;\n    }\n  }\n}\n\ncustomElements.define('abs-select-non', AbsSelectNon);\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 1
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "HTMLElement",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthSelectors",
            "id": "class-AuthSelectors-28179599ffd6c0d7cf8d03ccfdd6f2d61955273fe66213e5ad8e0e380c1039cfd649c57a29f0b90a0c03f51e91b8482f167fce28912c3590ceaa38c22b40d8ee",
            "file": "src/app/state/auth/auth.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport { IAppUserReadOnlyModel, IError } from '../../api';\nimport { AuthState, IAuthState } from './auth.state';\n\nexport class AuthSelectors {\n  @Selector([AuthState])\n  static accessToken(state: IAuthState): string | undefined {\n    if (state?.access_token && state?.access_token?.length > 0) {\n      return state.access_token;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static refreshToken(state: IAuthState): string | undefined {\n    if (state?.refresh_token && state?.refresh_token?.length > 0) {\n      return state.refresh_token;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static claims(state: IAuthState): string[] | undefined {\n    if (state?.claims && state?.claims?.length > 0) {\n      return state.claims;\n    }\n    return undefined;\n  }\n\n  @Selector([AuthState])\n  static loginUser(state: IAuthState): IAppUserReadOnlyModel | undefined {\n    return state.user as IAppUserReadOnlyModel;\n  }\n\n  @Selector([AuthState])\n  static getErrors(state: IAuthState): IError | null {\n    return state.errors as IError;\n  }\n\n  @Selector([AuthState])\n  static isAuthenticated(state: IAuthState): boolean {\n    return !!state.access_token;\n  }\n\n  @Selector([AuthState])\n  static getUserId(state: IAuthState): number | undefined {\n    return state.user?.userId;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "accessToken",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "claims",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrors",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IError | null",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginUser",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IAppUserReadOnlyModel | undefined",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['AuthState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IAuthState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardUser",
            "id": "class-CardUser-060dbf609c8ff851ea3024716c4e0dfb0099a839d79d3e6bd866a023f7f180e3aae2dabe7ec7f8b67e9d2a121e9684a25b9ae1f5c70a1544a8ef06e556d9f9ca",
            "file": "src/web-components/card-user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { User } from './user';\n\n@customElement('card-user')\nexport class CardUser extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `;\n\n  @property({ type: Object }) user?: User = {\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  };\n\n  override render() {\n    if (this.user === undefined) {\n      return '';\n    }\n\n    return html`\n      <div class=\"card\">\n        <img\n          width=\"160px\"\n          src=${this.user.avatar\n            ? this.user.avatar\n            : 'assets/images/avatar.png'}\n        />\n        <div class=\"card-content\">\n          <h4>${this.user.fullName}</h4>\n          <p>${this.user.role}</p>\n          <sl-button @click=${this.handleEdit}>Edit</sl-button>\n        </div>\n      </div>\n    `;\n  }\n\n  private handleEdit() {\n    this.dispatchEvent(\n      new CustomEvent<User>('edit', {\n        detail: this.user,\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "styles",
                    "defaultValue": "css`\n    :host {\n      display: block;\n    }\n    .card {\n      box-shadow: 0 10px 10px 0 rgba(0, 0, 0, 0.5);\n      max-width: 160px;\n    }\n    .card-content {\n      padding: 10px;\n    }\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124,
                        161
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    id: 0,\n    fullName: 'Full Name',\n    role: 'Title',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": "{type: Object}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "handleEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        161
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement"
        },
        {
            "name": "ClearAuthErrors",
            "id": "class-ClearAuthErrors-9dab1f5ab2c6dde778308a5332a43dffa7a974aeaf3e35839d0c318f63ecc4649c8eac5fe50f561c9d142c8ea73a26bba082c869ba848d509c6578e6e740cb3b",
            "file": "src/app/state/auth/auth.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAuthCredentials } from '../../api';\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Auth] Clear Erros'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClearErrors",
            "id": "class-ClearErrors-00339ed6f5246358ea693325e2c637d7181fd90e184d0ab90aa370065b559dfa205764021c59d8246b961fc77029efdd25b5a0de1974e8f3be84133c37ce5376",
            "file": "src/app/state/my-account/my-account.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUserCredential } from './my-account.state';\n\nexport class SaveMyAccountChanges {\n  static readonly type = '[MyAccount] Save My Account Changes';\n  constructor(public payload: IUserCredential) {}\n}\n\nexport class ClearErrors {\n  static readonly type = '[MyAccount] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[MyAccount] Clear Erros'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClearGraduateMedicalEducationErrors",
            "id": "class-ClearGraduateMedicalEducationErrors-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[GME] Clear Erros'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContinuousCertificationSelectors",
            "id": "class-ContinuousCertificationSelectors-b6d92a6972f9b20c60e2eaa94c9f847a51b4a5350a10fa45ad5dbc1eb8de33701690b758d8e040d9d4bf0287a73d4f4e2a8935759a0b2599cb50a2d044be7cfb",
            "file": "src/app/state/continuous-certification/continuous-certification.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport {\n  ContinuousCertificationState,\n  IContinuousCertication,\n} from './continuous-certification.state';\n\nexport class ContinuousCertificationSelectors {\n  static slices = createPropertySelectors<IContinuousCertication>(\n    ContinuousCertificationState\n  );\n\n  @Selector([ContinuousCertificationState])\n  static GetOutcomeRegistries(\n    state: IContinuousCertication\n  ): IContinuousCertication | undefined {\n    if (state) {\n      return {\n        outcomeRegistries: state.outcomeRegistries,\n      };\n    }\n    return;\n  }\n}\n",
            "properties": [
                {
                    "name": "slices",
                    "defaultValue": "createPropertySelectors<IContinuousCertication>(\n    ContinuousCertificationState\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "GetOutcomeRegistries",
                    "args": [
                        {
                            "name": "state",
                            "type": "IContinuousCertication",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IContinuousCertication | undefined",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['ContinuousCertificationState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IContinuousCertication",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateAdditionalTraining",
            "id": "class-CreateAdditionalTraining-a1ecf3e2f148b180c646459ac47406c678b74aad988fe72d382e5a86b4b873f4487ea2024ee0cff3846df10a3e64ed3a19d41fbe92da5ce0f4a1f97d0ed6d662",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n\n  constructor(public userId: number) {}\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IAdditionalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IAdditionalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdditionalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GQAdditionalTraining] Create an additional training record'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateGraduateMedicalEducation",
            "id": "class-CreateGraduateMedicalEducation-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IRotationModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IRotationModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationModel",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GME] Create a gme rotation record'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateMedicalTraining",
            "id": "class-CreateMedicalTraining-cde84906ea37fd1b4f16c79edb940a33017f36c5fa230c5da8ed737c0e43fe45ef74f4333ecf05fc5c5ee57cb399fdf82002ac7894beb6c6872df6f87a338466",
            "file": "src/app/state/medical-training/medical-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IMedicalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IMedicalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMedicalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Medical Training] Create medical school data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DashboardSelectors",
            "id": "class-DashboardSelectors-046b1e98e1f7b702f1337237c169d8a20c5aabbbb055f7b374e6cc51536f217e51a3a204e6eceb052c9d5688157c1f2ba60636941fade8d4b08d7b0732637133",
            "file": "src/app/state/dashboard/dashboard.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport { DashboardState, IDashboardState } from './dashboard.state';\n\nexport class DashboardSelectors {\n  @Selector([DashboardState])\n  static dashboardProgramInformation(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.programs) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([DashboardState])\n  static dashboardCertificateInformation(\n    state: IDashboardState\n  ): IDashboardState | undefined {\n    if (state.certificates) {\n      return state;\n    }\n    return;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "dashboardCertificateInformation",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDashboardState | undefined",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['DashboardState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dashboardProgramInformation",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDashboardState | undefined",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['DashboardState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDashboardState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteGraduateMedicalEducation",
            "id": "class-DeleteGraduateMedicalEducation-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GME] Delete a gme rotation record'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DocumentSelectors",
            "id": "class-DocumentSelectors-43ead4ffd63d4c179f5812a724d472803b785a063b99f329df727e2fc4862dcc150123661c10895f1abb62b14f957967e5c7f1af69acaab1b06af042672f2a81",
            "file": "src/app/state/documents/documents.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport { DocumentsState, IDocuments } from './documents.state';\n\nexport class DocumentSelectors {\n  static slices = createPropertySelectors<IDocuments>(DocumentsState);\n\n  @Selector([DocumentsState])\n  static documents(state: IDocuments): IDocuments | undefined {\n    if (state) {\n      return {\n        documents: state.documents,\n      } as IDocuments;\n    }\n    return;\n  }\n}\n",
            "properties": [
                {
                    "name": "slices",
                    "defaultValue": "createPropertySelectors<IDocuments>(DocumentsState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "documents",
                    "args": [
                        {
                            "name": "state",
                            "type": "IDocuments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDocuments | undefined",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['DocumentsState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IDocuments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAccreditedProgramInstitutionsList",
            "id": "class-GetAccreditedProgramInstitutionsList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the accredited program insitutions list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAdditionalTrainingDetails",
            "id": "class-GetAdditionalTrainingDetails-a1ecf3e2f148b180c646459ac47406c678b74aad988fe72d382e5a86b4b873f4487ea2024ee0cff3846df10a3e64ed3a19d41fbe92da5ce0f4a1f97d0ed6d662",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n\n  constructor(public userId: number) {}\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "trainingId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "trainingId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "trainingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GQAdditionalTraining] get details of additional training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAdditionalTrainingList",
            "id": "class-GetAdditionalTrainingList-a1ecf3e2f148b180c646459ac47406c678b74aad988fe72d382e5a86b4b873f4487ea2024ee0cff3846df10a3e64ed3a19d41fbe92da5ce0f4a1f97d0ed6d662",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n\n  constructor(public userId: number) {}\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[GQAdditionalTraining] get list of additional training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124,
                        146
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAdvancedTrainingData",
            "id": "class-GetAdvancedTrainingData-cde84906ea37fd1b4f16c79edb940a33017f36c5fa230c5da8ed737c0e43fe45ef74f4333ecf05fc5c5ee57cb399fdf82002ac7894beb6c6872df6f87a338466",
            "file": "src/app/state/medical-training/medical-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Medical Training] Get advanced training data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAllDocuments",
            "id": "class-GetAllDocuments-37a83903bbc7c913793e5caa63b7566e71079a63e874e16a3705f488d2383dc4bcfec426df64db91d3c3446a3f3c9f4373278516f3e875a89718c8b9be6b5fe3",
            "file": "src/app/state/documents/documents.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetAllDocuments {\n  static readonly type = '[Documents] Get all documents';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Documents] Get all documents'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetClinicalActivityList",
            "id": "class-GetClinicalActivityList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the Clinical Activity list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetClinicalLevelList",
            "id": "class-GetClinicalLevelList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the Clinical Level list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetCountryList",
            "id": "class-GetCountryList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the country list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetDashboardCertificationInformation",
            "id": "class-GetDashboardCertificationInformation-2daadcc8a153b380c459e5a5d669e94c5f9f051ce0b9697651c2d8f639d8fdc5aa8700bb177a1eaf563edb27f4b727efeba76c729cf97908fe56b2f1b5869751",
            "file": "src/app/state/dashboard/dashboard.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n\n  constructor(public userId: number) {}\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n\n  constructor(public absId: string) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "absId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "absId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "absId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Dashboard] Get the dashboard certificate information'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetDashboardProgramInformation",
            "id": "class-GetDashboardProgramInformation-2daadcc8a153b380c459e5a5d669e94c5f9f051ce0b9697651c2d8f639d8fdc5aa8700bb177a1eaf563edb27f4b727efeba76c729cf97908fe56b2f1b5869751",
            "file": "src/app/state/dashboard/dashboard.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetDashboardProgramInformation {\n  static readonly type = '[Dashboard] Get the dashboard program information';\n\n  constructor(public userId: number) {}\n}\n\nexport class GetDashboardCertificationInformation {\n  static readonly type =\n    '[Dashboard] Get the dashboard certificate information';\n\n  constructor(public absId: string) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dashboard] Get the dashboard program information'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124,
                        146
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetDegrees",
            "id": "class-GetDegrees-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get all degrees'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetEthnicityList",
            "id": "class-GetEthnicityList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the ethnicity list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetFellowshipPrograms",
            "id": "class-GetFellowshipPrograms-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get all Fellowship Programs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetGenderList",
            "id": "class-GetGenderList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the genders list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetGraduateMedicalEducationDetails",
            "id": "class-GetGraduateMedicalEducationDetails-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GME] get details of gme rotation'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetGraduateMedicalEducationList",
            "id": "class-GetGraduateMedicalEducationList-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[GME] get list of gme rotations'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetGraduateMedicalEducationSummary",
            "id": "class-GetGraduateMedicalEducationSummary-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[GME] get list of gme summary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetGraduateProfiles",
            "id": "class-GetGraduateProfiles-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get all graduate profiles'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetLanguageList",
            "id": "class-GetLanguageList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the languages list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetMedicalTraining",
            "id": "class-GetMedicalTraining-cde84906ea37fd1b4f16c79edb940a33017f36c5fa230c5da8ed737c0e43fe45ef74f4333ecf05fc5c5ee57cb399fdf82002ac7894beb6c6872df6f87a338466",
            "file": "src/app/state/medical-training/medical-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Medical Training] Get medical school data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetOutcomeRegistries",
            "id": "class-GetOutcomeRegistries-023cf04876954072bdd63eed9391ca6e3afcf17f2dcee74f06888f9fab6c326688c562c8b68d18c8b0cf77f97d4c68a5a57f09ceb4c77356baea0a7b778fe06f",
            "file": "src/app/state/continuous-certification/continuous-certification.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\n\nexport class GetOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Get Outcome Registries';\n\n  constructor(public userId: number) {}\n}\n\nexport class UpdateOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Update Outcome Registries';\n\n  constructor(public payload: IOutcomeRegistryModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Continuous Certification] Get Outcome Registries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124,
                        146
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPicklists",
            "id": "class-GetPicklists-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "countryCode",
                        "type": "string | null | undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "countryCode",
                        "type": "string | null | undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get all picklists'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetRaceList",
            "id": "class-GetRaceList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the Races list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetResidencyPrograms",
            "id": "class-GetResidencyPrograms-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get all Fellowship Programs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetStateList",
            "id": "class-GetStateList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "countryCode",
                        "type": "string | undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "countryCode",
                        "type": "string | undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the states list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetTrainingTypeList",
            "id": "class-GetTrainingTypeList-c20dab3446eb59ccd7a82763065fe059a63cacb53d7013de343936d9e0f7e777be686b780357c9bb329b639c502156fa89eedb0c0e296ca959b3166cf394038c",
            "file": "src/app/state/picklists/picklists.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetCountryList {\n  static readonly type = '[Picklists] Get the country list';\n}\n\nexport class GetEthnicityList {\n  static readonly type = '[Picklists] Get the ethnicity list';\n}\n\nexport class GetGenderList {\n  static readonly type = '[Picklists] Get the genders list';\n}\n\nexport class GetLanguageList {\n  static readonly type = '[Picklists] Get the languages list';\n}\n\nexport class GetRaceList {\n  static readonly type = '[Picklists] Get the Races list';\n}\n\nexport class GetStateList {\n  static readonly type = '[Picklists] Get the states list';\n  constructor(public countryCode?: string | undefined) {}\n}\n\nexport class GetAccreditedProgramInstitutionsList {\n  static readonly type =\n    '[Picklists] Get the accredited program insitutions list';\n}\n\nexport class GetTrainingTypeList {\n  static readonly type = '[Picklists] Get the Training Type list';\n}\n\nexport class GetGraduateProfiles {\n  static readonly type = '[Picklists] Get all graduate profiles';\n}\n\nexport class GetDegrees {\n  static readonly type = '[Picklists] Get all degrees';\n}\n\nexport class GetFellowshipPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetResidencyPrograms {\n  static readonly type = '[Picklists] Get all Fellowship Programs';\n}\n\nexport class GetPicklists {\n  static readonly type = '[Picklists] Get all picklists';\n\n  constructor(public countryCode?: string | null | undefined) {}\n}\n\nexport class GetClinicalLevelList {\n  static readonly type = '[Picklists] Get the Clinical Level list';\n}\n\nexport class GetClinicalActivityList {\n  static readonly type = '[Picklists] Get the Clinical Activity list';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Picklists] Get the Training Type list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetUserProfile",
            "id": "class-GetUserProfile-7f264d81eced62e8a18a7cb1d801b9e8413328c2e4c6f57a3546311d698c19223e12f4e2936f03697d5b8f5e8f054e1e1142087e4c93afa9c23e1de746cb9857",
            "file": "src/app/state/user-profile/user-profile.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginUser",
                        "type": "IAppUserReadOnlyModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "claims",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "loginUser",
                        "type": "IAppUserReadOnlyModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "claims",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "claims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppUserReadOnlyModel",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[UserProfile] Get the user profile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GQAdditionalTrainingSelectors",
            "id": "class-GQAdditionalTrainingSelectors-cdf7a80ded32a0406c25ff70eccd03d9af118884a47a3d47324e1728a849f9833c446c235f62e546b8308c07048212ca33742833aafea79829ae644f0b663c8f",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport {\n  IGQAdditionalTraining,\n  GQAdditionalTrainingState,\n} from './examination-gq-additional-training.state';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\n\nexport class GQAdditionalTrainingSelectors {\n  @Selector([GQAdditionalTrainingState])\n  static additionalTrainingList(\n    state: IGQAdditionalTraining\n  ): IAdditionalTrainingReadOnlyModel[] | undefined {\n    if (state?.AdditionalTraining?.length > 0) {\n      return state.AdditionalTraining;\n    }\n    return;\n  }\n\n  @Selector([GQAdditionalTrainingState])\n  static selectedAdditionalTrainingDetails(\n    state: IGQAdditionalTraining\n  ): IAdditionalTrainingModel | undefined {\n    if (state?.selectedAdditionalTraining) {\n      return state.selectedAdditionalTraining;\n    }\n    return;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "additionalTrainingList",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGQAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GQAdditionalTrainingState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGQAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedAdditionalTrainingDetails",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGQAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IAdditionalTrainingModel | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GQAdditionalTrainingState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGQAdditionalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GraduateMedicalEducationSelectors",
            "id": "class-GraduateMedicalEducationSelectors-aea11776a8e4e4f25db02d314dbb2a09bcf11fa6d088e91d13b5667373c291cec8c90cc2a5f9a0dc7ca80cbf7176efa4c48e9c674f47fe21085b627712b52e5f",
            "file": "src/app/state/graduatemedicaleducation/gme.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport {\n  IGraduateMedicalEducation,\n  GraduateMedicalEducationState,\n} from './gme.state';\nimport {\n  IRotationModel,\n  IRotationReadOnlyModel,\n  IGmeSummaryReadOnlyModel,\n} from 'src/app/api';\nimport { IFormErrors } from 'src/app/shared/common';\n\nexport class GraduateMedicalEducationSelectors {\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationList(\n    state: IGraduateMedicalEducation\n  ): IRotationReadOnlyModel[] | undefined {\n    if (state?.gmeRotations?.length > 0) {\n      return state.gmeRotations;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationSummary(\n    state: IGraduateMedicalEducation\n  ): IGmeSummaryReadOnlyModel[] | undefined {\n    if (state?.gmeSummary?.length > 0) {\n      return state.gmeSummary;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static graduateMedicalEducationDetails(\n    state: IGraduateMedicalEducation\n  ): IRotationModel | undefined {\n    if (state?.selectedRotation) {\n      return state.selectedRotation;\n    }\n    return;\n  }\n\n  @Selector([GraduateMedicalEducationState])\n  static errors(state: IGraduateMedicalEducation): IFormErrors | null {\n    return <IFormErrors>state.errors;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "errors",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFormErrors | null",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GraduateMedicalEducationState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graduateMedicalEducationDetails",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IRotationModel | undefined",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GraduateMedicalEducationState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graduateMedicalEducationList",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GraduateMedicalEducationState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graduateMedicalEducationSummary",
                    "args": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['GraduateMedicalEducationState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IGraduateMedicalEducation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkUserData",
            "id": "class-LinkUserData-7f264d81eced62e8a18a7cb1d801b9e8413328c2e4c6f57a3546311d698c19223e12f4e2936f03697d5b8f5e8f054e1e1142087e4c93afa9c23e1de746cb9857",
            "file": "src/app/state/user-profile/user-profile.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[UserProfile] Get the user profile values'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Login",
            "id": "class-Login-9dab1f5ab2c6dde778308a5332a43dffa7a974aeaf3e35839d0c318f63ecc4649c8eac5fe50f561c9d142c8ea73a26bba082c869ba848d509c6578e6e740cb3b",
            "file": "src/app/state/auth/auth.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAuthCredentials } from '../../api';\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IAuthCredentials",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IAuthCredentials",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAuthCredentials",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Auth] Login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Logout",
            "id": "class-Logout-9dab1f5ab2c6dde778308a5332a43dffa7a974aeaf3e35839d0c318f63ecc4649c8eac5fe50f561c9d142c8ea73a26bba082c869ba848d509c6578e6e740cb3b",
            "file": "src/app/state/auth/auth.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAuthCredentials } from '../../api';\nexport class Login {\n  static readonly type = '[Auth] Login';\n  constructor(public payload: IAuthCredentials) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n\nexport class ClearAuthErrors {\n  static readonly type = '[Auth] Clear Erros';\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Auth] Logout'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicalTrainingSelectors",
            "id": "class-MedicalTrainingSelectors-81943d29457106920366b379aa9c0122eccee0238f37b1290b4dcfbc64070baf9461cbfea3fce96118def4908f097593df0dc0122b80dbc683a31d6c9e5da52c",
            "file": "src/app/state/medical-training/medical-training.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\nimport {\n  IMedicalTraining,\n  MedicalTrainingState,\n} from './medical-training.state';\n\nexport class MedicalTrainingSelectors {\n  static slices =\n    createPropertySelectors<IMedicalTraining>(MedicalTrainingState);\n\n  @Selector([MedicalTrainingState])\n  static medicalTrainingValues(\n    state: IMedicalTraining\n  ): IMedicalTraining | undefined {\n    if (state) {\n      return {\n        medicalTraining: state.medicalTraining,\n        additionalTraining: state.additionalTraining,\n      };\n    }\n\n    return;\n  }\n}\n",
            "properties": [
                {
                    "name": "slices",
                    "defaultValue": "createPropertySelectors<IMedicalTraining>(MedicalTrainingState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "medicalTrainingValues",
                    "args": [
                        {
                            "name": "state",
                            "type": "IMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMedicalTraining | undefined",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['MedicalTrainingState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IMedicalTraining",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MyAccountSelectors",
            "id": "class-MyAccountSelectors-21798471fce66ff23a32446f9edbf2055572f4b19ef153bb16af28c329156246b7a01e8c5ae0801b9713e49f078c39cd90c0086520ef5537fbd119f0eadc0b72",
            "file": "src/app/state/my-account/my-account.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport { IFormErrors } from '../../shared/common';\nimport { IUserCredential, MyAccountState } from './my-account.state';\n\nexport class MyAccountSelectors {\n  @Selector([MyAccountState])\n  static user(state: IUserCredential): IUserCredential {\n    return state;\n  }\n\n  @Selector([MyAccountState])\n  static errors(state: IUserCredential): IFormErrors | null {\n    return <IFormErrors>state.errors;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "errors",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserCredential",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFormErrors | null",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['MyAccountState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserCredential",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "user",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserCredential",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IUserCredential",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['MyAccountState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserCredential",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PicklistsSelectors",
            "id": "class-PicklistsSelectors-a79468a40a69b88ec5b6b46cf2f65a7497fb058f2ba4fef3198427e9ec2b08b7152a19c990f696b9141d9fcba4ed6b76f8dcd591f7f178e60fc2f67675b70022",
            "file": "src/app/state/picklists/picklists.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { createPropertySelectors, Selector } from '@ngxs/store';\n\nimport {\n  IPicklist,\n  IPicklistUserValues,\n  PicklistsState,\n} from './picklists.state';\n\nexport class PicklistsSelectors {\n  static slices = createPropertySelectors<IPicklist>(PicklistsState);\n\n  @Selector([PicklistsState])\n  static userPicklistValues(state: IPicklist): IPicklistUserValues | undefined {\n    if (state) {\n      return {\n        countries: state.countries,\n        ethnicities: state.ethnicities,\n        genders: state.genders,\n        languages: state.languages,\n        races: state.races,\n        states: state.states,\n        statesMap: state.statesMap,\n        accreditedInstitutions: state.accreditedInstitutions,\n        trainingTypes: state.trainingTypes,\n        graduateProfiles: state.graduateProfiles,\n        degrees: state.degrees,\n        fellowshipPrograms: state.fellowshipPrograms,\n        residencyPrograms: state.residencyPrograms,\n      } as IPicklistUserValues;\n    }\n    return;\n  }\n}\n",
            "properties": [
                {
                    "name": "slices",
                    "defaultValue": "createPropertySelectors<IPicklist>(PicklistsState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "userPicklistValues",
                    "args": [
                        {
                            "name": "state",
                            "type": "IPicklist",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPicklistUserValues | undefined",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['PicklistsState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IPicklist",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SaveMyAccountChanges",
            "id": "class-SaveMyAccountChanges-00339ed6f5246358ea693325e2c637d7181fd90e184d0ab90aa370065b559dfa205764021c59d8246b961fc77029efdd25b5a0de1974e8f3be84133c37ce5376",
            "file": "src/app/state/my-account/my-account.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUserCredential } from './my-account.state';\n\nexport class SaveMyAccountChanges {\n  static readonly type = '[MyAccount] Save My Account Changes';\n  constructor(public payload: IUserCredential) {}\n}\n\nexport class ClearErrors {\n  static readonly type = '[MyAccount] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IUserCredential",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IUserCredential",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserCredential",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[MyAccount] Save My Account Changes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateAdditionalTraining",
            "id": "class-UpdateAdditionalTraining-a1ecf3e2f148b180c646459ac47406c678b74aad988fe72d382e5a86b4b873f4487ea2024ee0cff3846df10a3e64ed3a19d41fbe92da5ce0f4a1f97d0ed6d662",
            "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdditionalTrainingModel } from '../../api';\n\nexport class GetAdditionalTrainingList {\n  static readonly type =\n    '[GQAdditionalTraining] get list of additional training';\n\n  constructor(public userId: number) {}\n}\nexport class GetAdditionalTrainingDetails {\n  static readonly type =\n    '[GQAdditionalTraining] get details of additional training';\n\n  constructor(public trainingId: number) {}\n}\n\nexport class UpdateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Update an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n\nexport class CreateAdditionalTraining {\n  static readonly type =\n    '[GQAdditionalTraining] Create an additional training record';\n\n  constructor(public payload: IAdditionalTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IAdditionalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IAdditionalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdditionalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GQAdditionalTraining] Update an additional training record'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateAdvancedTrainingData",
            "id": "class-UpdateAdvancedTrainingData-cde84906ea37fd1b4f16c79edb940a33017f36c5fa230c5da8ed737c0e43fe45ef74f4333ecf05fc5c5ee57cb399fdf82002ac7894beb6c6872df6f87a338466",
            "file": "src/app/state/medical-training/medical-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IAdvancedTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IAdvancedTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdvancedTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Medical Training] Update advanced training Data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateGraduateMedicalEducation",
            "id": "class-UpdateGraduateMedicalEducation-3b802c3f318217a0e13c4cdfe758184f829ce0cd0f572906f352da68c1740768b28178e029dbb3089cc1e27290f1e1104131c8d4e5f66b3add35b32d5863a949",
            "file": "src/app/state/graduatemedicaleducation/gme.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IRotationModel } from '../../api';\n\nexport class GetGraduateMedicalEducationSummary {\n  static readonly type = '[GME] get list of gme summary';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationList {\n  static readonly type = '[GME] get list of gme rotations';\n\n  //constructor() {}\n}\nexport class GetGraduateMedicalEducationDetails {\n  static readonly type = '[GME] get details of gme rotation';\n\n  constructor(public id: number) {}\n}\n\nexport class UpdateGraduateMedicalEducation {\n  static readonly type = '[GME] Update a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class CreateGraduateMedicalEducation {\n  static readonly type = '[GME] Create a gme rotation record';\n\n  constructor(public payload: IRotationModel) {}\n}\n\nexport class DeleteGraduateMedicalEducation {\n  static readonly type = '[GME] Delete a gme rotation record';\n  constructor(public payload: number) {}\n}\n\nexport class ClearGraduateMedicalEducationErrors {\n  static readonly type = '[GME] Clear Erros';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IRotationModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IRotationModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationModel",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[GME] Update a gme rotation record'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateMedicalTraining",
            "id": "class-UpdateMedicalTraining-cde84906ea37fd1b4f16c79edb940a33017f36c5fa230c5da8ed737c0e43fe45ef74f4333ecf05fc5c5ee57cb399fdf82002ac7894beb6c6872df6f87a338466",
            "file": "src/app/state/medical-training/medical-training.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { IMedicalTrainingModel } from 'src/app/api/models/medicaltraining/medical-training.model';\n\nexport class GetMedicalTraining {\n  static readonly type = '[Medical Training] Get medical school data';\n}\n\nexport class CreateMedicalTraining {\n  static readonly type = '[Medical Training] Create medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class UpdateMedicalTraining {\n  static readonly type = '[Medical Training] Update medical school data';\n  constructor(public payload: IMedicalTrainingModel) {}\n}\n\nexport class GetAdvancedTrainingData {\n  static readonly type = '[Medical Training] Get advanced training data';\n}\n\nexport class UpdateAdvancedTrainingData {\n  static readonly type = '[Medical Training] Update advanced training Data';\n\n  constructor(public payload: IAdvancedTrainingModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IMedicalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IMedicalTrainingModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMedicalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Medical Training] Update medical school data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateOutcomeRegistries",
            "id": "class-UpdateOutcomeRegistries-023cf04876954072bdd63eed9391ca6e3afcf17f2dcee74f06888f9fab6c326688c562c8b68d18c8b0cf77f97d4c68a5a57f09ceb4c77356baea0a7b778fe06f",
            "file": "src/app/state/continuous-certification/continuous-certification.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\n\nexport class GetOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Get Outcome Registries';\n\n  constructor(public userId: number) {}\n}\n\nexport class UpdateOutcomeRegistries {\n  static readonly type = '[Continuous Certification] Update Outcome Registries';\n\n  constructor(public payload: IOutcomeRegistryModel) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IOutcomeRegistryModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IOutcomeRegistryModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOutcomeRegistryModel",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Continuous Certification] Update Outcome Registries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateUserProfile",
            "id": "class-UpdateUserProfile-7f264d81eced62e8a18a7cb1d801b9e8413328c2e4c6f57a3546311d698c19223e12f4e2936f03697d5b8f5e8f054e1e1142087e4c93afa9c23e1de746cb9857",
            "file": "src/app/state/user-profile/user-profile.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IUserProfile } from './user-profile.state';\nimport { IAppUserReadOnlyModel } from '../../api';\n\nexport class GetUserProfile {\n  static readonly type = '[UserProfile] Get the user profile';\n\n  constructor(\n    public loginUser: IAppUserReadOnlyModel,\n    public claims: string[]\n  ) {}\n}\n\nexport class UpdateUserProfile {\n  static readonly type = '[UserProfile] Update the user profile';\n\n  constructor(public payload: IUserProfile) {}\n}\n\nexport class LinkUserData {\n  static readonly type = '[UserProfile] Get the user profile values';\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IUserProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IUserProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[UserProfile] Update the user profile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserProfileSelectors",
            "id": "class-UserProfileSelectors-fbc682a350c9c32ffbe9fd3d97eb7f2d11a0a7be121a22d8ed41752aabac8258e841456fe5ac3a7bf9425da7f1d2ee5af0110da719e2dbaa02695c5e9b0ea23b",
            "file": "src/app/state/user-profile/user-profile.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector, createPropertySelectors } from '@ngxs/store';\nimport { IUserProfile, UserProfileState } from './user-profile.state';\n\nexport class UserProfileSelectors {\n  static slices = createPropertySelectors<IUserProfile>(UserProfileState);\n\n  @Selector([UserProfileState])\n  static user(state: IUserProfile): IUserProfile | undefined {\n    if (state?.userId) {\n      return state;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static isUserProfileLoaded(state: IUserProfile): boolean {\n    return !!state?.userId;\n  }\n\n  @Selector([UserProfileState])\n  static userDisplayName(state: IUserProfile): string | undefined {\n    if (state?.displayName?.length) {\n      return state.displayName;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static userId(state: IUserProfile): number | undefined {\n    if (state?.userId) {\n      return state.userId;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static userClaims(state: IUserProfile): string[] | undefined {\n    if (state?.claims.length) {\n      return state.claims;\n    }\n    return;\n  }\n\n  @Selector([UserProfileState])\n  static profilePicture(state: IUserProfile): string | undefined {\n    console.log('profilePicture', state?.profilePicture);\n    if (state?.profilePicture?.length) {\n      return state.profilePicture;\n    }\n    return;\n  }\n}\n",
            "properties": [
                {
                    "name": "slices",
                    "defaultValue": "createPropertySelectors<IUserProfile>(UserProfileState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isUserProfileLoaded",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profilePicture",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "user",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IUserProfile | undefined",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userClaims",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userDisplayName",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userId",
                    "args": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['UserProfileState']"
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IUserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-fe90db6311a74c13317e7137be8121568678f65ddfba987fabe29aaca1bf8062d7781a41f1912b12980eefb07bb677ae24782f52a3690bb831cc9b91c94d686b",
            "file": "src/app/shared/directives/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[absHighlight]',\n})\nexport class HighlightDirective {\n  constructor(private element: ElementRef) {\n    this.element.nativeElement.style.backgroundColor = '#5f5aee';\n    this.element.nativeElement.style.color = 'black';\n    this.element.nativeElement.style.padding = '0.5rem';\n  }\n}\n",
            "selector": "[absHighlight]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AcgmeExperienceModalComponent",
            "id": "component-AcgmeExperienceModalComponent-5c53344b66ad233811a8b04379fe794f123b0461b25d495202f338bc5f48d4f39a3da0b51da9908aa5571eb07b015425d8c5171d9da4356fa0934030dfe40e7c",
            "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-acgme-experience-modal",
            "styleUrls": [
                "./acgme-experience-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./acgme-experience-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "AcgmeGridCols",
                    "defaultValue": "ACGME_EXPERIENCE_GRID_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "AcgmeGridData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAcgmeGridData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "girdAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ACGME_EXPERIENCE_GRID_COLS } from './acgme-experience-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\n\n@Component({\n  selector: 'abs-acgme-experience-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent],\n  templateUrl: './acgme-experience-modal.component.html',\n  styleUrls: ['./acgme-experience-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AcgmeExperienceModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  AcgmeGridCols = ACGME_EXPERIENCE_GRID_COLS;\n  AcgmeGridData!: any;\n\n  ngOnInit() {\n    this.getAcgmeGridData();\n  }\n\n  getAcgmeGridData() {\n    this.AcgmeGridData = [\n      {\n        fileName: 'ACGME-Report_11-4-22_FINAL.pdf',\n        uploadDate: new Date('09/22/19'),\n      },\n    ];\n  }\n\n  girdAction($event: any) {\n    console.log($event);\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'ACGMEExperienceModal' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./acgme-experience-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mb-5\">\n  <p><strong>Please update the information below as needed. </strong></p>\n  <p>\n    A full and unrestricted medical license is not required for the Qualifying\n    Examination. A full and unrestricted medical license will be waived to\n    register for the Certifying Examination (CE). A full and unrestricted\n    medical license will be required before you will be considered certified by\n    the ABS\n  </p>\n</div>\n<sl-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add ACGME Report</span>\n</sl-button>\n<abs-grid\n  [columns]=\"AcgmeGridCols\"\n  [data]=\"AcgmeGridData\"\n  (action)=\"girdAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button type=\"button\" style=\"width: 337px\" variant=\"primary\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "ActionCardComponent",
            "id": "component-ActionCardComponent-7eed03090a24e3360144a73578514c8953caefcec1589bb5f4d863a32b0664eb855973de6d170b0f38b013cfbbd1df7202d2cd24348a17cb758ad0d4b39f5453",
            "file": "src/app/shared/components/action-card/action-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-action-card",
            "styleUrls": [
                "./action-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "recievedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cardAction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleCardAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\n\n@Component({\n  selector: 'abs-action-card',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './action-card.component.html',\n  styleUrls: ['./action-card.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ActionCardComponent {\n  @Input() actionCard!: any;\n  @Input() status!: string;\n  @Input() recievedOn!: Date;\n  @Output() cardAction: EventEmitter<any> = new EventEmitter();\n\n  constructor(private _router: Router) {}\n\n  handleCardAction(action: string) {\n    this.cardAction.emit(action);\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".action-card {\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0px 0px 6px #24365526;\n  padding: 1.5rem;\n  height: 100%;\n  min-height: 16rem;\n  transition: 150ms ease-in-out;\n  position: relative;\n  width: 100%;\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  &:hover {\n    box-shadow: none;\n  }\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    margin-bottom: 2rem;\n    span {\n      font-size: 2rem;\n      margin-right: 0.75rem;\n    }\n  }\n  .icon {\n    color: var(--global-warning);\n  }\n  .description {\n    margin-bottom: 3rem;\n  }\n  .action-display {\n    position: absolute;\n    bottom: 1rem;\n    color: var(--global-success);\n    font-weight: bold;\n    width: 100%;\n    left: 0;\n    padding: 0 2rem;\n  }\n  &.completed {\n    border-right: 10px solid var(--global-success);\n    .icon {\n      color: var(--global-success);\n    }\n  }\n  &.in-progress {\n    border-right: 10px solid var(--global-warning);\n    .icon {\n      color: var(--global-warning);\n    }\n  }\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .description {\n      color: var(--global-danger);\n    }\n    .action-display {\n      color: var(--global-danger);\n    }\n    .icon {\n      color: var(--global-danger);\n    }\n  }\n  &.contingent {\n    border-right: 10px solid var(--global-gray);\n    .icon {\n      color: var(--global-gray);\n    }\n  }\n  &.disabled {\n    cursor: not-allowed;\n    background-color: #f4f4f4;\n    .icon {\n      color: var(--global-gray);\n    }\n    .action-display {\n      color: var(--global-gray);\n    }\n    &:hover {\n      box-shadow: 0px 0px 6px #24365526;\n    }\n  }\n  &.status-card {\n    min-height: 12rem;\n    .title {\n      margin-bottom: 1rem;\n    }\n    .status {\n      margin-bottom: 1rem;\n    }\n    .description {\n      margin-bottom: 2.5rem;\n    }\n  }\n}\n\n.status {\n  font-weight: bold;\n  font-size: 1.25rem;\n  position: relative;\n  margin: 1rem 0 2rem 0;\n  text-align: right;\n  span {\n    text-transform: capitalize;\n    white-space: nowrap;\n    &.completed {\n      color: var(--global-success);\n    }\n    &.in-progress {\n      color: var(--global-warning);\n    }\n    &.alert {\n      color: var(--global-danger);\n    }\n    &.contingent {\n      color: var(--global-gray);\n    }\n  }\n  .date {\n    font-size: 14px;\n  }\n}\n",
                    "styleUrl": "./action-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "router": {
                    "name": "router",
                    "getSignature": {
                        "name": "router",
                        "type": "",
                        "returnType": "Router",
                        "line": 31
                    }
                }
            },
            "templateData": "<div\n  class=\"action-card {{ actionCard?.status }} {{\n    actionCard?.disabled ? 'disabled' : ''\n  }} {{ status ? 'status-card' : '' }}\"\n>\n  <a\n    *ngIf=\"!actionCard?.disabled && actionCard?.action?.type === 'component'\"\n    [routerLink]=\"actionCard?.action?.action\"\n    class=\"hotspot\"\n  ></a>\n  <button\n    *ngIf=\"!actionCard?.disabled && actionCard?.action?.type === 'dialog'\"\n    class=\"hotspot\"\n    (click)=\"handleCardAction(actionCard?.action?.action)\"\n  ></button>\n  <div class=\"card-content flex flex-wrap\" [class]=\"actionCard?.status\">\n    <div class=\"col-12 {{ status ? 'md:col-8' : '' }}\">\n      <h5 class=\"title\">\n        <span class=\"icon\"><i [class]=\"actionCard?.icon\"></i></span\n        >{{ actionCard?.title }}\n      </h5>\n      <div class=\"description\">{{ actionCard?.description }}</div>\n      <div class=\"action-display\">\n        <div *ngIf=\"actionCard?.action?.style !== 2; else fullButton\">\n          {{ actionCard?.actionDisplay }}\n        </div>\n        <ng-template #fullButton>\n          <sl-button\n            [variant]=\"!actionCard?.disabled ? 'primary' : 'neutral'\"\n            [disabled]=\"actionCard?.disabled\"\n            style=\"width: 100%\"\n            >{{ actionCard?.actionDisplay }}</sl-button\n          >\n        </ng-template>\n      </div>\n    </div>\n    <div class=\"status col-12 md:col-4\" *ngIf=\"status\">\n      Status:\n      <span [class]=\"status\"> {{ status.replace('-', ' ') }}</span>\n      <div class=\"date\" *ngIf=\"recievedOn\">\n        Received on {{ recievedOn | date : 'MM/dd/yyyy' }}\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AddRecordModalComponent",
            "id": "component-AddRecordModalComponent-063467fc560cd9dd0db49c9c0b02d750a8116c1145b18df0539947d91f72ecfbe1b6767c118f9b1074b6d23574cf03196e5f8fe849110eca16a0866e555389a7",
            "file": "src/app/gme-history/add-record-modal/add-record-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-add-record-modal",
            "styleUrls": [
                "./add-record-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-record-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isEdit$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "slectedGmeRotationId$",
                    "defaultValue": "new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accreditedInstitutions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.accreditedInstitutions"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "accreditedInstitutionsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "addEditRecordFields",
                    "defaultValue": "ADD_EDIT_RECORD_FIELDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormFields[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "addEditRecordsForm",
                    "defaultValue": "new FormGroup(\n    {\n      endDate: new FormControl('', [Validators.required]),\n      startDate: new FormControl('', [Validators.required]),\n      weeks: new FormControl(''),\n      programName: new FormControl('', [Validators.required]),\n      alternateInstitutionName: new FormControl('', [Validators.required]),\n      clinicalLevelId: new FormControl(null, [Validators.required]),\n      clinicalActivityId: new FormControl(null, [Validators.required]),\n      other: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      isInternationalRotation: new FormControl(false, [Validators.required]),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "clearErrors",
                    "defaultValue": "new ClearGraduateMedicalEducationErrors()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "clinicalActivities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IClinicalActivityReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.clinicalActivities"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "clinicalActivitiesSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "clinicalLevels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IClinicalLevelReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.clinicalLevels"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "clinicalLevelsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "createActionSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "errors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GraduateMedicalEducationSelectors.errors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isEditLocal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "nonClinicalActivities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IClinicalActivityReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "rotationToEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "selectedRotation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IRotationModel> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationDetails"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "selectedRotationSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "updateActionSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 104
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchDropdownData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formField",
                            "type": "IFormFields",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formField",
                            "type": "IFormFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 416,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputSelectComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                },
                {
                    "name": "RadioButtonModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "AutoCompleteModule",
                    "type": "module"
                },
                {
                    "name": "FormErrorsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { InputSelectComponent } from 'src/app/shared/components/base-input/input-select.component';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CalendarModule } from 'primeng/calendar';\nimport { IFormFields } from 'src/app/shared/models/form-fields/form-fields';\nimport { ADD_EDIT_RECORD_FIELDS } from './add-record-form-fields';\nimport { FormErrorsComponent } from '../../shared/components/form-errors/form-errors.component';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationDetails,\n  UpdateGraduateMedicalEducation,\n  CreateGraduateMedicalEducation,\n  ClearGraduateMedicalEducationErrors,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationModel } from 'src/app/api';\nimport {\n  GetClinicalLevelList,\n  GetClinicalActivityList,\n  PicklistsSelectors,\n  GetAccreditedProgramInstitutionsList,\n} from '../../state/picklists';\nimport {\n  IClinicalLevelReadOnlyModel,\n  IClinicalActivityReadOnlyModel,\n} from '../../api';\nimport { validateStartAndEndDates } from 'src/app/shared/validators/validators';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\n\n@Component({\n  selector: 'abs-add-record-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n    CalendarModule,\n    AutoCompleteModule,\n    FormErrorsComponent,\n  ],\n  templateUrl: './add-record-modal.component.html',\n  styleUrls: ['./add-record-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AddRecordModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Input() isEdit$ = new BehaviorSubject<boolean>(false);\n  @Input() slectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined);\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationDetails)\n  selectedRotation$: Observable<IRotationModel> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.errors) errors$:\n    | Observable<any>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.clinicalLevels) clinicalLevels$:\n    | Observable<IClinicalLevelReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.clinicalActivities) clinicalActivities$:\n    | Observable<IClinicalActivityReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.accreditedInstitutions)\n  accreditedInstitutions$:\n    | Observable<IAccreditedProgramInstitutionReadOnlyModel[]>\n    | undefined;\n\n  clearErrors = new ClearGraduateMedicalEducationErrors();\n\n  selectedRotationSubscription: Subscription | undefined;\n  clinicalLevelsSubscription: Subscription | undefined;\n  clinicalActivitiesSubscription: Subscription | undefined;\n  accreditedInstitutionsSubscription: Subscription | undefined;\n\n  updateActionSubscription: Subscription | undefined;\n  createActionSubscription: Subscription | undefined;\n\n  nonClinicalActivities: IClinicalActivityReadOnlyModel[] = [];\n\n  addEditRecordFields: IFormFields[] = ADD_EDIT_RECORD_FIELDS;\n  isEditLocal = false;\n\n  rotationToEdit: IRotationModel | undefined;\n\n  addEditRecordsForm = new FormGroup(\n    {\n      endDate: new FormControl('', [Validators.required]),\n      startDate: new FormControl('', [Validators.required]),\n      weeks: new FormControl(''),\n      programName: new FormControl('', [Validators.required]),\n      alternateInstitutionName: new FormControl('', [Validators.required]),\n      clinicalLevelId: new FormControl(null, [Validators.required]),\n      clinicalActivityId: new FormControl(null, [Validators.required]),\n      other: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      nonSurgicalActivity: new FormControl({ value: '', disabled: true }, [\n        Validators.required,\n      ]),\n      isInternationalRotation: new FormControl(false, [Validators.required]),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  );\n\n  constructor(private _store: Store) {}\n  ngOnDestroy(): void {\n    this.selectedRotationSubscription?.unsubscribe();\n    this.clinicalLevelsSubscription?.unsubscribe();\n    this.clinicalActivitiesSubscription?.unsubscribe();\n    this.accreditedInstitutionsSubscription?.unsubscribe();\n\n    this.updateActionSubscription?.unsubscribe();\n    this.createActionSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.fetchDropdownData();\n    this.fetchFormData();\n  }\n\n  fetchDropdownData() {\n    this._store.dispatch(new GetClinicalLevelList());\n    this._store.dispatch(new GetClinicalActivityList());\n    this._store.dispatch(new GetAccreditedProgramInstitutionsList());\n\n    this.accreditedInstitutionsSubscription =\n      this.accreditedInstitutions$?.subscribe((accreditedInstitutions) => {\n        if (accreditedInstitutions) {\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'programName') {\n              field.options = accreditedInstitutions.map(\n                (institution) => institution.institutionName\n              );\n            }\n          });\n        }\n      });\n\n    this.clinicalLevelsSubscription = this.clinicalLevels$?.subscribe(\n      (clinicalLevels) => {\n        if (clinicalLevels) {\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'clinicalLevelId') {\n              field.options = clinicalLevels.map((level) => {\n                return {\n                  label: level.name,\n                  value: level.id,\n                };\n              });\n            }\n          });\n        }\n      }\n    );\n    this.clinicalActivitiesSubscription = this.clinicalActivities$?.subscribe(\n      (clinicalActivities) => {\n        if (clinicalActivities) {\n          this.nonClinicalActivities = clinicalActivities.filter((activity) => {\n            if (activity.name.includes('Non-Clinical')) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n          const essentialActivities = clinicalActivities.filter((activity) => {\n            return activity.isEssential;\n          });\n          const otherActivities = clinicalActivities.filter((activity) => {\n            return !activity.isEssential;\n          });\n\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'clinicalActivityId') {\n              field.options = [\n                {\n                  label: 'Essential Activities',\n                  items: essentialActivities.map((activity) => {\n                    return {\n                      label: activity.name,\n                      value: activity.id,\n                    };\n                  }),\n                },\n                {\n                  label: 'Other Activities',\n                  items: otherActivities.map((activity) => {\n                    return {\n                      label: activity.name,\n                      value: activity.id,\n                    };\n                  }),\n                },\n              ];\n            }\n          });\n        }\n      }\n    );\n  }\n\n  fetchFormData() {\n    this.selectedRotation$?.subscribe((rotation) => {\n      if (rotation) {\n        this.rotationToEdit = rotation;\n        for (const [key, value] of Object.entries(rotation)) {\n          let newValue = value;\n          if (key === 'startDate' || key === 'endDate') {\n            newValue = new Date(value).toLocaleDateString();\n          }\n          this.addEditRecordsForm.get(key)?.setValue(newValue);\n        }\n        this.onChanges();\n      } else {\n        //handle if no data is returned or if there was an error\n        this.addEditRecordsForm.reset();\n        this.addEditRecordsForm.get('isInternationalRotation')?.setValue(false);\n        this.onChanges();\n      }\n    });\n\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEditLocal = isEdit;\n      this.slectedGmeRotationId$.subscribe((value) => {\n        if (value?.id) {\n          this._store.dispatch(\n            new GetGraduateMedicalEducationDetails(value.id)\n          );\n        }\n        if (value?.nextStart) {\n          const startDate = new Date(value.nextStart);\n          startDate.setDate(startDate.getDate() + 1);\n\n          this.addEditRecordsForm\n            .get('startDate')\n            ?.setValue(startDate.toLocaleDateString());\n        }\n      });\n      if (!isEdit) {\n        this.addEditRecordsForm.reset();\n        this.addEditRecordsForm.get('isInternationalRotation')?.setValue(false);\n        this.onChanges();\n      }\n    });\n  }\n\n  onChanges() {\n    const calculateWeeks = () => {\n      const startDate = this.addEditRecordsForm.get('endDate')?.value\n        ? new Date(this.addEditRecordsForm.get('endDate')?.value as string)\n        : undefined;\n\n      const endDate = this.addEditRecordsForm.get('startDate')?.value\n        ? new Date(this.addEditRecordsForm.get('startDate')?.value as string)\n        : undefined;\n\n      if (startDate && endDate) {\n        const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        const weeks = diffDays / 7;\n        let weeksValue: string | undefined;\n        if (weeks >= 1) {\n          weeksValue = Math.round(weeks).toString();\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'weeks') {\n              field.label = 'Week(s)';\n            }\n          });\n        } else {\n          this.addEditRecordFields.filter((field) => {\n            if (field.name === 'weeks') {\n              field.label = 'Day(s)';\n            }\n          });\n          weeksValue = diffDays.toString();\n        }\n\n        this.addEditRecordsForm.get('weeks')?.setValue(weeksValue.toString());\n      }\n    };\n\n    this.addEditRecordsForm.get('endDate')?.valueChanges.subscribe(() => {\n      calculateWeeks();\n    });\n\n    this.addEditRecordsForm.get('startDate')?.valueChanges.subscribe(() => {\n      calculateWeeks();\n    });\n\n    this.addEditRecordsForm\n      .get('clinicalLevelId')\n      ?.valueChanges.subscribe((val) => {\n        if (val && val === 9) {\n          this.addEditRecordsForm.get('other')?.enable();\n          this.addEditRecordsForm\n            .get('other')\n            ?.setValidators([Validators.required]);\n        } else {\n          this.addEditRecordsForm.get('other')?.setValue('');\n          this.addEditRecordsForm.get('other')?.disable();\n          this.addEditRecordsForm.get('other')?.setValidators([]);\n        }\n      });\n\n    this.addEditRecordsForm\n      .get('clinicalActivityId')\n      ?.valueChanges.subscribe((val) => {\n        if (val) {\n          const activity = this.nonClinicalActivities.find(\n            (activity) => activity.id === val\n          );\n          if (activity) {\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.enable();\n            this.addEditRecordsForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([Validators.required]);\n          } else {\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.setValue('');\n            this.addEditRecordsForm.get('nonSurgicalActivity')?.disable();\n            this.addEditRecordsForm\n              .get('nonSurgicalActivity')\n              ?.setValidators([]);\n          }\n        }\n      });\n\n    this.addEditRecordsForm.get('startDate')?.valueChanges.subscribe((val) => {\n      this.addEditRecordFields.filter((field) => {\n        if (field.name === 'endDate') {\n          if (val) {\n            field.validators.minDate = new Date(val);\n          } else {\n            field.validators.minDate = null;\n          }\n        }\n      });\n    });\n    this.addEditRecordsForm.get('endDate')?.valueChanges.subscribe((val) => {\n      this.addEditRecordFields.filter((field) => {\n        if (field.name === 'startDate') {\n          if (val) {\n            field.validators.maxDate = new Date(val);\n          } else {\n            field.validators.maxDate = null;\n          }\n        }\n      });\n    });\n\n    this.addEditRecordsForm\n      .get('programName')\n      ?.valueChanges.subscribe((val) => {\n        if (val) {\n          this.addEditRecordsForm.get('alternateInstitutionName')?.setValue('');\n          this.addEditRecordsForm.get('alternateInstitutionName')?.disable();\n          this.addEditRecordsForm\n            .get('alternateInstitutionName')\n            ?.setValidators([]);\n        } else {\n          this.addEditRecordsForm.get('alternateInstitutionName')?.enable();\n          this.addEditRecordsForm\n            .get('alternateInstitutionName')\n            ?.setValidators([Validators.required]);\n        }\n      });\n    this.addEditRecordsForm\n      .get('alternateInstitutionName')\n      ?.valueChanges.subscribe((val) => {\n        if (val) {\n          this.addEditRecordsForm.get('programName')?.setValidators([]);\n        } else {\n          this.addEditRecordsForm\n            .get('programName')\n            ?.setValidators([Validators.required]);\n        }\n      });\n  }\n\n  filterItems($event: any, formField: IFormFields) {\n    const value = $event.query;\n    formField.filteredOptions = formField.options?.filter((i) => {\n      return i?.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  onSubmit() {\n    const formValues = this.addEditRecordsForm.getRawValue();\n    let startDate = '';\n    let endDate = '';\n    if (formValues.startDate) {\n      startDate = new Date(formValues.startDate).toISOString();\n    }\n    if (formValues.endDate) {\n      endDate = new Date(formValues.endDate).toISOString();\n    }\n\n    const newRotation = {\n      id: this.rotationToEdit?.id || 0,\n      startDate: startDate,\n      endDate: endDate,\n      clinicalLevelId: formValues.clinicalLevelId ?? 0,\n      clinicalActivityId: formValues.clinicalActivityId || 0,\n      programName: formValues.programName ?? '',\n      nonSurgicalActivity: formValues.nonSurgicalActivity ?? '',\n      alternateInstitutionName: formValues.alternateInstitutionName ?? '',\n      isInternationalRotation: formValues.isInternationalRotation ?? false,\n      other: formValues.other ?? '',\n    } as unknown as IRotationModel;\n\n    if (this.isEditLocal) {\n      this.updateActionSubscription = this._store\n        .dispatch(new UpdateGraduateMedicalEducation(newRotation))\n        .subscribe((res) => {\n          if (!res.graduateMedicalEducation?.errors) {\n            this.close();\n          }\n        });\n    } else {\n      this.createActionSubscription = this._store\n        .dispatch(new CreateGraduateMedicalEducation(newRotation))\n        .subscribe((res) => {\n          if (!res.graduateMedicalEducation?.errors) {\n            this.close();\n          }\n        });\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-record-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 134,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n  dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n  amet tortor at, condimentum tempor erat.\n</p>\n<ng-container>\n  <div class=\"mb-3\">\n    <abs-form-errors\n      *ngIf=\"errors$ | async as error\"\n      [errors]=\"error\"\n      [clearErrors]=\"clearErrors\"\n    ></abs-form-errors>\n  </div>\n</ng-container>\n<form [formGroup]=\"addEditRecordsForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of addEditRecordFields\"\n      class=\"col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\"\n        >{{ formField.label }}{{ formField.required ? '*' : '' }}</label\n      >\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n        pInputText\n      />\n      <p-calendar\n        *ngIf=\"formField.type === 'date'\"\n        [formControlName]=\"formField.name\"\n        [showIcon]=\"true\"\n        [inputId]=\"formField.name\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [required]=\"formField.required\"\n        [minDate]=\"formField.validators.minDate\"\n        [maxDate]=\"formField.validators.maxDate\"\n        ngDefaultControl\n        appendTo=\"body\"\n      ></p-calendar>\n      <p-autoComplete\n        *ngIf=\"formField.type === 'autocomplete'\"\n        [inputId]=\"formField.name\"\n        [formControlName]=\"formField.name\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [suggestions]=\"formField.filteredOptions ?? []\"\n        (completeMethod)=\"filterItems($event, formField)\"\n        [forceSelection]=\"true\"\n        appendTo=\"body\"\n      ></p-autoComplete>\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [inputId]=\"formField.name\"\n        [editable]=\"false\"\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n        appendTo=\"body\"\n        optionLabel=\"label\"\n        optionValue=\"value\"\n      ></p-dropdown>\n      <p-dropdown\n        *ngIf=\"formField.type === 'grouped-select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [group]=\"true\"\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n        appendTo=\"body\"\n      >\n        <ng-template let-group pTemplate=\"group\">\n          <strong>{{ group.label }}</strong>\n        </ng-template>\n      </p-dropdown>\n      <div\n        class=\"flex flex-wrap gap-3\"\n        *ngIf=\"formField.type === 'radio-group'\"\n      >\n        <div\n          class=\"flex align-items-center\"\n          *ngFor=\"let option of formField.options\"\n        >\n          <p-radioButton\n            [name]=\"formField.name\"\n            [value]=\"option.value\"\n            [formControlName]=\"formField.name\"\n            [inputId]=\"formField.name + formField.value\"\n          ></p-radioButton>\n          <label [for]=\"formField.name + formField.value\" class=\"ml-2\">{{\n            option.label\n          }}</label>\n        </div>\n      </div>\n      <div *ngIf=\"formField.type === 'textarea'\">\n        <textarea\n          pInputTextarea\n          [id]=\"formField.name\"\n          [name]=\"formField.name\"\n          [formControlName]=\"formField.name\"\n          ngDefaultControl\n        ></textarea>\n      </div>\n      <small class=\"form-helper-text text-muted\" *ngIf=\"formField.helpText\">{{\n        formField.helpText\n      }}</small>\n    </div>\n  </div>\n  <div class=\"grid\">\n    <div class=\"col-12 mt-5 flex justify-content-end btn-container\">\n      <sl-button variant=\"default\" size=\"large\" (click)=\"close()\">\n        Cancel\n      </sl-button>\n      <sl-button\n        class=\"wide\"\n        size=\"large\"\n        variant=\"warning\"\n        type=\"submit\"\n        [disabled]=\"addEditRecordsForm.invalid\"\n        >Save</sl-button\n      >\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-6b37c716b7f1957724ce3a1dbb9c9b55076c8c695e0393eeaf57c7a9ab8e839141966d21f23aa5de484ee16880ec75b9460cdc6fea1f9379408a466e74e70705",
            "file": "src/app/shared/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fontSize",
                    "defaultValue": "1.25",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-alert',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AlertComponent {\n  @Input() alertType!: string;\n  @Input() hideIcon = false;\n  @Input() fontSize = 1.25;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert {\n  padding: 10px 20px;\n  font-weight: bold;\n  font-size: 20px;\n  border-radius: 6px;\n  &.danger {\n    color: white;\n    background-color: var(--global-danger);\n  }\n  &.warning {\n    color: white;\n    background-color: var(--global-warning);\n  }\n  &.success {\n    color: white;\n    background-color: var(--global-success);\n  }\n  &.info {\n    color: white;\n    background-color: var(--global-primary);\n  }\n  .icon {\n    margin-right: 10px;\n    font-size: 24px;\n  }\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\n  class=\"alert flex align-items-center\"\n  [style]=\"{ 'font-size': fontSize + 'rem' }\"\n  [class]=\"alertType\"\n>\n  <div\n    class=\"icon\"\n    [style]=\"{ 'font-size': fontSize + 0.25 + 'rem' }\"\n    *ngIf=\"!hideIcon\"\n  >\n    <i\n      class=\"fa-solid fa-circle-exclamation\"\n      *ngIf=\"alertType === 'danger'\"\n    ></i>\n    <i\n      class=\"fa-solid fa-triangle-exclamation\"\n      *ngIf=\"alertType === 'warning'\"\n    ></i>\n    <i class=\"fa-solid fa-circle-info\" *ngIf=\"alertType === 'info'\"></i>\n    <i class=\"fa-solid fa-circle-check\" *ngIf=\"alertType === 'success'\"></i>\n  </div>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b5d6a56b91d10861213eb55c0af7d56f68e86141cd37901290b021bd5b6adf1a4e8c01062a18cd69f45c82d9c20146ccfd58e8bb2a2bca8a301b341b3b68d79d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isAuthenticated$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "AuthSelectors.isAuthenticated"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isSideNavOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isSurgeon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IUserProfile> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.user"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSideNavToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgxsModule",
                    "type": "module"
                },
                {
                    "name": "SideNavigationComponent",
                    "type": "component"
                },
                {
                    "name": "DashboardHeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { CommonModule } from '@angular/common';\nimport { Observable, Subscription } from 'rxjs';\nimport { NgxsModule, Select, Store } from '@ngxs/store';\n\nimport {\n  AuthSelectors,\n  GetUserProfile,\n  IUserProfile,\n  UserProfileSelectors,\n} from './state';\nimport { SideNavigationComponent } from './side-navigation/side-navigation.component';\nimport { DashboardHeaderComponent } from './shared/components/dashboard-header/dashboard-header.component';\nimport { UserClaims } from './side-navigation/user-status.enum';\n\n@Component({\n  selector: 'abs-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    LoginComponent,\n    CommonModule,\n    NgxsModule,\n    SideNavigationComponent,\n    DashboardHeaderComponent,\n  ],\n})\nexport class AppComponent implements OnDestroy {\n  // TODO: MOve this logic into the auth guard\n  @Select(AuthSelectors.isAuthenticated) isAuthenticated$:\n    | Observable<boolean>\n    | undefined;\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  authSub: Subscription | undefined;\n  userSub: Subscription | undefined;\n\n  isSurgeon = false;\n  isSideNavOpen = false;\n\n  constructor(private _store: Store) {\n    this.authSub = this.isAuthenticated$?.subscribe((isAuthed) => {\n      const loginUser = this._store.selectSnapshot(AuthSelectors.loginUser);\n      const claims = this._store.selectSnapshot(AuthSelectors.claims);\n      if (isAuthed && loginUser && claims) {\n        if (claims.includes(UserClaims.surgeon)) {\n          this.isSurgeon = true;\n        }\n        if (claims.includes(UserClaims.trainee)) {\n          this.isSurgeon = false;\n        }\n        this._store.dispatch(new GetUserProfile(loginUser, claims));\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.authSub?.unsubscribe();\n    this.userSub?.unsubscribe();\n  }\n\n  handleSideNavToggle() {\n    this.isSideNavOpen = !this.isSideNavOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  aside {\n    position: fixed;\n    left: -100%;\n    overflow: hidden;\n    box-shadow: 0px 3px 6px #00000022;\n    width: 100%;\n    height: 100%;\n    background-color: white;\n    transition: 350ms ease-in-out;\n    &.toggled {\n      left: 0;\n      z-index: 1;\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  :host {\n    aside {\n      left: 0;\n      display: block;\n      width: 100%;\n      max-width: 26rem;\n    }\n    main {\n      margin-left: 26rem;\n    }\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div id=\"toast-container\" class=\"toast-bottom-right\"></div>\n\n<div\n  class=\"login-content\"\n  *ngIf=\"(isAuthenticated$ | async) === false; else site\"\n>\n  <abs-login></abs-login>\n</div>\n\n<ng-template #site>\n  <div class=\"app-content\" *ngIf=\"user$ | async as user\">\n    <aside [ngClass]=\"isSideNavOpen ? 'toggled' : ''\">\n      <abs-side-navigation\n        [isSurgeon]=\"isSurgeon\"\n        (handleSideNavToggle)=\"handleSideNavToggle()\"\n      ></abs-side-navigation>\n    </aside>\n    <main>\n      <div class=\"app-container-fluid flex flex-column\">\n        <abs-dashboard-header\n          (handleSideNavToggle)=\"handleSideNavToggle()\"\n        ></abs-dashboard-header>\n        <router-outlet></router-outlet>\n        <div class=\"text-center mt-auto\">\n          <p class=\"footer-text mb-1\">\n            @2022 All Rights Reserved. The American Board of Surgery\n          </p>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AppointmentsAddEditModalComponent",
            "id": "component-AppointmentsAddEditModalComponent-51f1ced0756eccce264dbd46029b93a8642668cf64e85fb164eaaa613da7c71155fb8e99977b6347fbe76e4e3ae18c593fe26ba68f223652d37b9fd9e11c8488",
            "file": "src/app/professional-standing/appointments-add-edit-modal/appointments-add-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-appointments-add-edit-modal",
            "styleUrls": [
                "./appointments-add-edit-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./appointments-add-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appointment",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Subject<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fakeOptions",
                    "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "localAppointment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDefaultClose",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\n\n@Component({\n  selector: 'abs-appointments-add-edit-modal',\n  standalone: true,\n  imports: [CommonModule, FormsModule, InputTextModule, DropdownModule],\n  templateUrl: './appointments-add-edit-modal.component.html',\n  styleUrls: ['./appointments-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AppointmentsAddEditModalComponent implements OnInit {\n  // TODO: [Joe] this should be strongly typed once models are created\n  @Input() appointment: Subject<any> = new Subject();\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ];\n\n  localAppointment: any;\n\n  ngOnInit() {\n    this.appointment.subscribe((value) => {\n      this.localAppointment = value;\n    });\n  }\n\n  handleDefaultClose(event: any) {\n    event.preventDefault();\n  }\n\n  cancel() {\n    this.cancelDialog.emit({ show: false });\n  }\n\n  save() {\n    this.saveDialog.emit({ show: false, appointment: this.localAppointment });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-dialog::part(close-button) {\n  display: none;\n}\n",
                    "styleUrl": "./appointments-add-edit-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<form id=\"appointmentAddEdit\" *ngIf=\"localAppointment\">\n  <div class=\"grid\">\n    <div class=\"col-12\">\n      <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"practiceType\">Practice Type</label>\n      <p-dropdown\n        inputId=\"practiceType\"\n        [options]=\"fakeOptions\"\n        name=\"practiceType\"\n        [(ngModel)]=\"localAppointment.practiceType\"\n        placeholder=\"Select Practice Type\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"appointmentType\">Appointment Type</label>\n      <p-dropdown\n        inputId=\"appointmentType\"\n        [options]=\"fakeOptions\"\n        name=\"appointmentType\"\n        [(ngModel)]=\"localAppointment.appointmentType\"\n        placeholder=\"Select Appointment Type\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"organizationType\">Organization Type</label>\n      <p-dropdown\n        inputId=\"organizationType\"\n        [options]=\"fakeOptions\"\n        name=\"organizationType\"\n        [(ngModel)]=\"localAppointment.organizationType\"\n        placeholder=\"Select Organization Type\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"state\">State</label>\n      <p-dropdown\n        inputId=\"state\"\n        [options]=\"fakeOptions\"\n        name=\"state\"\n        [(ngModel)]=\"localAppointment.state\"\n        placeholder=\"Select State\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"institution\">Institution</label>\n      <p-dropdown\n        inputId=\"institution\"\n        [options]=\"fakeOptions\"\n        name=\"institution\"\n        [(ngModel)]=\"localAppointment.institution\"\n        placeholder=\"Select Institution\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"other\">Other</label>\n      <input\n        id=\"other\"\n        pInputText\n        type=\"text\"\n        name=\"other\"\n        [(ngModel)]=\"localAppointment.other\"\n      />\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"official\">Official</label>\n      <p-dropdown\n        inputId=\"official\"\n        [options]=\"fakeOptions\"\n        name=\"official\"\n        [(ngModel)]=\"localAppointment.official\"\n        placeholder=\"Select Official\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n  </div>\n</form>\n<div class=\"flex justify-content-end\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"cancel()\">Cancel</sl-button>\n  <sl-button\n    type=\"button\"\n    style=\"width: 337px\"\n    variant=\"primary\"\n    (click)=\"save()\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "AttestationModalComponent",
            "id": "component-AttestationModalComponent-d50fbeba2a952f4057e0699dd8dbe1edd2dc1171c9aff3358d2121ba409d8d99e639c257c7c2fdd592917553bc15bc4e7a168b42575468fbcb8aabe1e7a1beb6",
            "file": "src/app/continuous-certification/attestation-modal/attestation-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-attestation-modal",
            "styleUrls": [
                "./attestation-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./attestation-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "attestationFormFields",
                    "defaultValue": "[\n    {\n      label:\n        'I hereby authorize any hospital or medical staff where I now have,have had, or have applied for medical staff privileges, and anymedical organization of which I am a member or to which I have applied for membership, and any person who may have information (including medical records, patient records, and reports of committees) which is deemed by ABS to be material to its evaluation of this application, to provide such information to representatives of the ABS. I agree that communications of any nature made to the ABS regarding this application may be made in confidence and shall not be made available to me under any circumstances. I hereby release from liability any hospital. medical staff, medical organization or person, and ABS and its representatives, for acts performed in connection with this application.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation1',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n    {\n      label:\n        'I understand that the certificate I will be issued upon successful completion of the biennial Continuous Certification Assessment will be contingent upon my on-going active participation in the Continuous Certification Program as a whole. I recognize that 10-year certificates are no longer offered by the ABS, and that the biennial Continuous Certification Assessment is replacing the traditional 10-vear recertification examination.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation2',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "userData",
                    "defaultValue": "{\n    name: 'John Doe',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@Component({\n  selector: 'abs-attestation-modal',\n  standalone: true,\n  imports: [CommonModule, FormsModule, CheckboxModule],\n  templateUrl: './attestation-modal.component.html',\n  styleUrls: ['./attestation-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class AttestationModalComponent {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  userData = {\n    name: 'John Doe',\n  };\n\n  attestationFormFields = [\n    {\n      label:\n        'I hereby authorize any hospital or medical staff where I now have,have had, or have applied for medical staff privileges, and anymedical organization of which I am a member or to which I have applied for membership, and any person who may have information (including medical records, patient records, and reports of committees) which is deemed by ABS to be material to its evaluation of this application, to provide such information to representatives of the ABS. I agree that communications of any nature made to the ABS regarding this application may be made in confidence and shall not be made available to me under any circumstances. I hereby release from liability any hospital. medical staff, medical organization or person, and ABS and its representatives, for acts performed in connection with this application.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation1',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n    {\n      label:\n        'I understand that the certificate I will be issued upon successful completion of the biennial Continuous Certification Assessment will be contingent upon my on-going active participation in the Continuous Certification Program as a whole. I recognize that 10-year certificates are no longer offered by the ABS, and that the biennial Continuous Certification Assessment is replacing the traditional 10-vear recertification examination.',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'attestation2',\n      placeholder: '',\n      type: 'checkbox',\n      size: 'col-12',\n    },\n  ];\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./attestation-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<form action=\"\">\n  <div class=\"form-description\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat. All fields are required.\n  </div>\n  <h6>{{ userData.name }}</h6>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of attestationFormFields\"\n      class=\"flex align-items-center gap-2 {{ formField.size }}\"\n    >\n      <p-checkbox\n        [value]=\"formField.value\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n      ></p-checkbox>\n      <label [for]=\"formField.name\">{{ formField.label }}</label>\n    </div>\n    <div class=\"col-12 flex justify-content-end btn-container mt-3\">\n      <sl-button variant=\"default\" size=\"large\" (click)=\"close()\"\n        >Cancel</sl-button\n      >\n      <sl-button class=\"wide\" size=\"large\" variant=\"warning\">Save</sl-button>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-21b6f57f3f8da479e9827982e8be58ed63b8c39a8731c078ccdcb6e5884de512a23c41f2d478686a492b0c7dd336f0fd95a5fd4b50fe3a4060785bf8501412f6",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "CmeRepositoryComponent",
            "id": "component-CmeRepositoryComponent-058233342d4a83af0d09892073f0299fbf169b410fe479dd810bb2a5efc040482c38fcef1b534667e3d19d1ce5ef7f6267f3d6d11296f977d88ef3044604a139",
            "file": "src/app/cme-repository/cme-repository.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-cme-repository",
            "styleUrls": [
                "./cme-repository.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cme-repository.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmeCreditsChartData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "cmeCreditsChartOptions",
                    "defaultValue": "{\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            size: 15,\n            color: 'black',\n            weight: 700,\n          },\n        },\n        grid: {\n          display: false,\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: 15,\n            color: 'black',\n            weight: 700,\n          },\n        },\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "itemizedCmeCols",
                    "defaultValue": "ITEMIZED_CME_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "itemizedCmeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "requirementsAndAdjustmentsCols",
                    "defaultValue": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "requirementsAndAdjustmentsData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemizedCmeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRequirementsAndAdjustmentsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initbarGraph",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CollapsePanelComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "ChartModule",
                    "type": "module"
                },
                {
                    "name": "ProgressBarComponent",
                    "type": "component"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ITEMIZED_CME_COLS } from './itemized-cme-cols';\nimport { REQIUREMENTS_AND_ADJUSTMENTS_COLS } from './requirments-and-adjustments-cols';\nimport { ChartModule } from 'primeng/chart';\nimport { ProgressBarComponent } from '../shared/components/progress-bar/progress-bar.component';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\n\n@Component({\n  selector: 'abs-cme-repository',\n  templateUrl: './cme-repository.component.html',\n  styleUrls: ['./cme-repository.component.scss'],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    GridComponent,\n    ChartModule,\n    ProgressBarComponent,\n    TooltipModule,\n    AlertComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n})\nexport class CmeRepositoryComponent implements OnInit {\n  requirementsAndAdjustmentsCols = REQIUREMENTS_AND_ADJUSTMENTS_COLS;\n  requirementsAndAdjustmentsData!: Array<any>;\n\n  itemizedCmeCols = ITEMIZED_CME_COLS;\n  itemizedCmeData!: Array<any>;\n\n  cmeCreditsChartData!: any;\n\n  cmeCreditsChartOptions = {\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            size: 15,\n            color: 'black',\n            weight: 700,\n          },\n        },\n        grid: {\n          display: false,\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: 15,\n            color: 'black',\n            weight: 700,\n          },\n        },\n      },\n    },\n  };\n\n  ngOnInit(): void {\n    this.getRequirementsAndAdjustmentsData();\n    this.getItemizedCmeData();\n    this.initbarGraph();\n  }\n\n  getRequirementsAndAdjustmentsData() {\n    this.requirementsAndAdjustmentsData = [\n      {\n        date: new Date('10/27/2022'),\n        description: 'Waiver',\n        category1: '8',\n        saCredits: '8',\n        issuedBy: 'ABS',\n      },\n      {\n        date: new Date('10/27/2022'),\n        description: 'Waiver',\n        category1: '10',\n        saCredits: '10',\n        issuedBy: 'ABS',\n      },\n    ];\n  }\n\n  getItemizedCmeData() {\n    this.itemizedCmeData = [\n      {\n        date: new Date('10/27/2022'),\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n        credits: '24',\n        cmeDirect: 'XXXXX',\n      },\n      {\n        date: new Date('10/25/2022'),\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n        credits: '36',\n        cmeDirect: 'XXXXX',\n      },\n      {\n        date: new Date('9/10/2022'),\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n        credits: '12',\n        cmeDirect: 'XXXXX',\n      },\n      {\n        date: new Date('8/17/2022'),\n        description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n        credits: '78',\n        cmeDirect: 'XXXXX',\n      },\n    ];\n  }\n\n  initbarGraph() {\n    this.cmeCreditsChartData = {\n      labels: ['2018', '2019', '2020', '2021', '2022'],\n\n      datasets: [\n        {\n          label: 'Category 1 Credits',\n          backgroundColor: '#dbad6a',\n          data: [40, 20, 30, 40, 20],\n        },\n        {\n          label: 'Self Assessment Credits',\n          backgroundColor: '#1c827d',\n          data: [5, 15, 10, 5, 15],\n        },\n      ],\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\n  margin-top: 2rem;\n}\n\nhr {\n  border: none;\n  height: 1px;\n  background-color: var(--global-gray-light);\n}\n",
                    "styleUrl": "./cme-repository.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h1>CME Repository</h1>\n</header>\n\n<section>\n  <div class=\"grid\">\n    <sl-card class=\"col-12\">\n      <div class=\"grid flex flex-wrap\">\n        <div class=\"col-12\">\n          <h5 class=\"mt-0 mb-2\" panel-header>My CME Credits</h5>\n          <hr />\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <abs-progress-bar\n            [currentNumber]=\"124\"\n            [totalNumber]=\"150\"\n            [barColor]=\"'#DBAD6A'\"\n            [statusLabel]=\"'Category 1 Credits'\"\n            [toolTipText]=\"'this is a tooltip that is longer'\"\n          ></abs-progress-bar>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <abs-progress-bar\n            [currentNumber]=\"23\"\n            [totalNumber]=\"50\"\n            [barColor]=\"'#1C827D'\"\n            [statusLabel]=\"'Self Assessment Credits'\"\n          ></abs-progress-bar>\n        </div>\n        <div class=\"grid-container col-12\">\n          <p-chart\n            type=\"bar\"\n            [data]=\"cmeCreditsChartData\"\n            [options]=\"cmeCreditsChartOptions\"\n          ></p-chart>\n        </div>\n        <div class=\"col-12\">\n          <abs-alert alertType=\"danger\"\n            >You have a total of 28 credits expiring on 2023-01-01, 20 of which\n            are self assessment credits</abs-alert\n          >\n        </div>\n      </div>\n    </sl-card>\n\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n        <h5 class=\"mt-0 mb-2\" panel-header>Itemized CME</h5>\n        <abs-grid [columns]=\"itemizedCmeCols\" [data]=\"itemizedCmeData\">\n        </abs-grid>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"3\" [startExpanded]=\"true\">\n        <h5 class=\"mt-0 mb-2\" panel-header>Requirements and Adjustments</h5>\n        <p class=\"text-xl mt-0\">\n          For Completing certain tasks will result in a lower amount of required\n          credits. Your waivers of required credit reduction are listed below.\n        </p>\n        <abs-grid\n          [columns]=\"requirementsAndAdjustmentsCols\"\n          [data]=\"requirementsAndAdjustmentsData\"\n        >\n        </abs-grid>\n      </abs-collapse-panel>\n    </sl-card>\n  </div>\n</section>\n"
        },
        {
            "name": "CollapsePanelComponent",
            "id": "component-CollapsePanelComponent-e20621d16c79576c5b92cc1648b2e0894b0983e46fe3ed563d8fab5138b5c3b1927ac4293c66b8f75d288b963ec92cf6cf031d4705a1bd96ab018fe4bb90bdb7",
            "file": "src/app/shared/components/collapse-panel/collapse-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-collapse-panel",
            "styleUrls": [
                "./collapse-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./collapse-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "editToggle",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Subject<boolean>",
                    "decorators": []
                },
                {
                    "name": "panelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "startExpanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'abs-collapse-panel',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './collapse-panel.component.html',\n  styleUrls: ['./collapse-panel.component.scss'],\n})\nexport class CollapsePanelComponent implements OnInit {\n  @Input() panelId!: number;\n  @Input() startExpanded = false;\n  @Input() editToggle: Subject<boolean> = new Subject();\n\n  ngOnInit() {\n    this.editToggle.subscribe(() => {\n      this.resetHeight();\n    });\n    if (this.startExpanded) {\n      // setTimeout is needed to wait for the DOM to be ready\n      setTimeout(() => this.togglePanel(), 0);\n    }\n  }\n\n  togglePanel() {\n    const panel = document.querySelector<HTMLElement>('#panel-' + this.panelId);\n    const panelBody = document.querySelector<HTMLElement>(\n      '#panel-body-' + this.panelId\n    );\n\n    panel?.classList.toggle('active');\n    if (panelBody!.style.maxHeight && panelBody!.style.maxHeight !== '0px') {\n      panelBody!.style.maxHeight = '0px';\n    } else {\n      panelBody!.style.maxHeight = panelBody!.scrollHeight + 200 + 'px';\n    }\n  }\n\n  resetHeight() {\n    const panelBody = document.querySelector<HTMLElement>(\n      '#panel-body-' + this.panelId\n    );\n    if (panelBody?.style.maxHeight && panelBody?.style.maxHeight !== '0px') {\n      // setTimeout is needed to wait for the DOM to update with new content\n      setTimeout(() => {\n        panelBody!.style.maxHeight = panelBody!.scrollHeight + 200 + 'px';\n      }, 0);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel {\n  overflow: hidden;\n  .panel-header {\n    border-bottom: 1px solid var(--global-gray-light);\n    padding: 0.25rem 0.5rem;\n    align-items: center;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    .panel-icons {\n      position: relative;\n      height: 1.5rem;\n      width: 1.5rem;\n      font-size: 1.5rem;\n      transition: color 0.2s ease-out;\n      .panel-icon-1,\n      .panel-icon-2 {\n        position: absolute;\n        transition: transform 0.2s ease-out;\n      }\n      .panel-icon-1 {\n        margin-left: -1.5px;\n      }\n    }\n    &:hover {\n      .panel-icons {\n        color: var(--global-warning);\n      }\n    }\n  }\n\n  .panel-body {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.5s ease-out;\n    .content {\n      padding: 0.75rem 0.5rem;\n    }\n  }\n\n  &.active {\n    .panel-header {\n      .panel-icon-1 {\n        transform: rotate(0deg);\n        margin: 0 !important;\n      }\n      .panel-icon-2 {\n        transform: rotate(180deg);\n      }\n    }\n    .panel-body {\n      overflow: visible;\n    }\n  }\n}\n",
                    "styleUrl": "./collapse-panel.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [id]=\"'panel-' + panelId\" class=\"panel\">\n  <div class=\"panel-header\" (click)=\"togglePanel()\">\n    <ng-content select=\"[panel-header]\"></ng-content>\n    <div class=\"panel-icons\">\n      <i class=\"fa-solid fa-minus fa-rotate-90 panel-icon-1\"></i>\n      <i class=\"fa-solid fa-minus panel-icon-2\"></i>\n    </div>\n  </div>\n  <div [id]=\"'panel-body-' + panelId\" class=\"panel-body\">\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CommitteesComponent",
            "id": "component-CommitteesComponent-5b479145b8d3096d6fb51e7cce78f8dbd8fa51013ce2eb1237daf0eab35d78c87377774725abc2163e4e42a424e1f7898fbd3cfb692a6f30600452ea48e7f7a0",
            "file": "src/app/committees/committees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-committees",
            "styleUrls": [
                "./committees.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./committees.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@Component({\n  selector: 'abs-committees',\n  templateUrl: './committees.component.html',\n  styleUrls: ['./committees.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n})\nexport class CommitteesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./committees.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Committees</h1>\n<sl-card>\n  <div slot=\"header\">Committee Information</div>\n\n  <div>\n    <p style=\"margin-bottom: 40vh\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n  </div>\n</sl-card>\n"
        },
        {
            "name": "ConflictResolutionModalComponent",
            "id": "component-ConflictResolutionModalComponent-d2dfa975b3e1e010cab9c508025bdc0165d59f3f8396833e85e23055bd894004529f1e9a596959a3821d05e8c1856e40d5451923c7b84d6aa8c63d6af58be7ce",
            "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-conflict-resolution-modal",
            "styleUrls": [
                "./conflict-resolution-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./conflict-resolution-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "conflictResolutionCols",
                    "defaultValue": "CONFLICT_RESOLUTION_GRID_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "conflictResolutionData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getConflicts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "girdAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { CONFLICT_RESOLUTION_GRID_COLS } from './conflict-resolution-cols';\n\n@Component({\n  selector: 'abs-conflict-resolution-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent],\n  templateUrl: './conflict-resolution-modal.component.html',\n  styleUrls: ['./conflict-resolution-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ConflictResolutionModalComponent {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  conflictResolutionCols = CONFLICT_RESOLUTION_GRID_COLS;\n  conflictResolutionData!: any[];\n\n  ngOnInit() {\n    this.getConflicts();\n  }\n\n  getConflicts() {\n    this.conflictResolutionData = [\n      {\n        from: '01/01/2021',\n        to: '01/07/2021',\n        weeks: '1',\n        programName: 'Program Name',\n        affiliatedInstitute: 'Affiliated Institute',\n        clinicalLevel: 'Clinical Level',\n        explain: 'Explain',\n        descriptionNonSurgicalOnly: 'Description (Non-Surgical Only)',\n        internationalRotation: 'International Rotation',\n        edit: 'Edit',\n        delete: 'Delete',\n      },\n    ];\n  }\n\n  girdAction($event: any) {\n    console.log($event);\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'ACGMEExperienceModal' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./conflict-resolution-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"mb-5\">\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n  <abs-grid\n    [columns]=\"conflictResolutionCols\"\n    [data]=\"conflictResolutionData\"\n    (action)=\"girdAction($event)\"\n  >\n  </abs-grid>\n  <div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n    <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n    <sl-button\n      type=\"button\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      (click)=\"close()\"\n      >Save\n    </sl-button>\n  </div>\n</div>\n"
        },
        {
            "name": "ContinuousCertificationComponent",
            "id": "component-ContinuousCertificationComponent-d6a3296e6a24b3bb4fe1ae8eaf1a82a22b9726fde0b580d7822cd439dbd7145b71a9001650671f4aeb0b71911618e1dfee56b49c19258f7ba105ad0e3571fea3",
            "file": "src/app/continuous-certification/continuous-certification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-continuous-certification",
            "styleUrls": [
                "./continuous-certification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./continuous-certification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionMap",
                    "defaultValue": "{\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionMap",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "attestationModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "continousCertificationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "outcomeRegistriesModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "payFeeCols",
                    "defaultValue": "PAY_FEE_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "payFeeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "payFeeModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "paymentGridData",
                    "defaultValue": "[\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "referenceFormsModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "getContinuousCertificationData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPayFeeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleCardAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ActionCardComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "PayFeeComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "OutcomeRegistriesModalComponent",
                    "type": "component"
                },
                {
                    "name": "AttestationModalComponent",
                    "type": "component"
                },
                {
                    "name": "ReferenceFormModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { PAY_FEE_COLS } from '../shared/components/pay-fee/pay-fee-cols';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { OutcomeRegistriesModalComponent } from './outcome-registries-modal/outcome-registries-modal.component';\nimport { AttestationModalComponent } from './attestation-modal/attestation-modal.component';\nimport { ReferenceFormModalComponent } from './reference-form-modal/reference-form-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { IUserProfile, UserProfileSelectors } from '../state';\nimport { Observable } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport { GetStateList } from '../state/picklists';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-continuous-certification',\n  templateUrl: './continuous-certification.component.html',\n  styleUrls: ['./continuous-certification.component.scss'],\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    GridComponent,\n    FormsModule,\n    PayFeeComponent,\n    ModalComponent,\n    OutcomeRegistriesModalComponent,\n    AttestationModalComponent,\n    ReferenceFormModalComponent,\n  ],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ContinuousCertificationComponent implements OnInit {\n  userData!: any;\n  continousCertificationData!: any;\n  outcomeRegistriesModal = false;\n  attestationModal = false;\n  referenceFormsModal = false;\n  payFeeModal = false;\n  payFeeCols = PAY_FEE_COLS;\n  payFeeData!: any;\n\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  private actionMap: ActionMap = {\n    outcomeRegistriesModal: () => {\n      this.outcomeRegistriesModal = !this.outcomeRegistriesModal;\n    },\n    attestationModal: () => {\n      this.attestationModal = !this.attestationModal;\n    },\n    referenceFormsModal: () => {\n      this.referenceFormsModal = !this.referenceFormsModal;\n    },\n    payFeeModal: () => {\n      this.payFeeModal = !this.payFeeModal;\n    },\n  };\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n  }\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getContinuousCertificationData();\n    this.getPayFeeData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe, M.D',\n    };\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  getContinuousCertificationData() {\n    this.continousCertificationData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/personal-profile',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Outcomes Registries / Quality Assessment Programs',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'outcomeRegistriesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/medical-training',\n        },\n        actionDisplay: 'View / Update my training',\n        icon: 'fa-solid fa-language',\n        status: Status.Completed,\n      },\n      {\n        title: 'Professional Standing',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/professional-standing',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-certificate',\n        status: Status.InProgress,\n      },\n      {\n        title: 'CME Repository',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/cme-repository',\n        },\n        actionDisplay: 'View CMEs',\n        icon: 'fa-solid fa-id-card-clip',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Pay Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'payFeeModal',\n        },\n        actionDisplay: 'View / Pay Fee',\n        icon: 'fa-solid fa-language',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Reference Forms',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'referenceFormsModal',\n        },\n        actionDisplay: 'View / Update my activities',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'attestationModal',\n        },\n        disabled: false,\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Apply for an Exam',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          style: 2,\n        },\n        disabled: true,\n        actionDisplay: 'Apply Now',\n        icon: 'fa-solid fa-language',\n      },\n    ];\n  }\n\n  handleCardAction(action: string) {\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\n  margin-bottom: 0;\n}\n\nh4 {\n  margin: 0;\n}\n\n.grid {\n  margin: 1.5rem 0;\n}\n\nsl-dialog::part(panel) {\n  min-width: 75%;\n}\n\n.legend {\n  margin-top: 1.5rem;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.completed {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.in-progress {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.contingent {\n      color: var(--global-gray);\n      .i {\n        background-color: vvar(--global-gray);\n      }\n    }\n  }\n}\n\nsl-radio-group,\nsl-textarea {\n  margin-bottom: 2rem;\n}\n\nsl-radio-group::part(form-control-label) {\n  font-weight: medium;\n}\n\nspan {\n  display: block;\n  font-size: 0.875rem;\n  font-style: italic;\n  margin: 0 0 0.875rem 0;\n  position: relative;\n  // min-height: 21px;\n}\n\nsl-radio {\n  margin-right: 1.25rem;\n}\n\n.align-right {\n  text-align: right;\n}\n\n.btn-container {\n  margin-top: 2rem;\n}\n\n.margin-bottom-2 {\n  display: block;\n  margin-bottom: 2rem;\n}\n\n.danger {\n  color: var(--global-danger);\n}\n",
                    "styleUrl": "./continuous-certification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex justify-content-between align-items-end flex-wrap col-12\">\n  <div>\n    <h1>Continuous Certification</h1>\n    <h4 class=\"thin\">For {{ userData.name }}.</h4>\n  </div>\n  <div class=\"legend flex flex-wrap\">\n    <div class=\"l flex align-items-center completed\">\n      <div class=\"i\"></div>\n      Completed\n    </div>\n    <div class=\"l flex align-items-center in-progress\">\n      <div class=\"i\"></div>\n      In Progress\n    </div>\n    <div class=\"l flex align-items-center contingent\">\n      <div class=\"i\"></div>\n      Contingent\n    </div>\n  </div>\n</div>\n\n<div class=\"grid\">\n  <abs-action-card\n    class=\"col-12 md:col-6 lg:col-4\"\n    *ngFor=\"let actionCard of continousCertificationData\"\n    [actionCard]=\"actionCard\"\n    (cardAction)=\"handleCardAction(actionCard.action.action)\"\n  ></abs-action-card>\n</div>\n\n<!-- Outcome Registries / Quality Assessment Programs -->\n<abs-modal\n  [open]=\"outcomeRegistriesModal\"\n  (closeDialog)=\"handleCardAction('outcomeRegistriesModal')\"\n  title=\"Outcomes Registries / Quality Assessment Programs\"\n  modalName=\"outcomeRegistriesModal\"\n>\n  <abs-outcome-registries-modal\n    (closeDialog)=\"handleCardAction('outcomeRegistriesModal')\"\n  >\n  </abs-outcome-registries-modal>\n</abs-modal>\n\n<!-- Attestation -->\n<abs-modal\n  [open]=\"attestationModal\"\n  (closeDialog)=\"handleCardAction('attestationModal')\"\n  title=\"Attestation\"\n  modalName=\"attestationModal\"\n>\n  <abs-attestation-modal\n    (closeDialog)=\"handleCardAction('attestationModal')\"\n  ></abs-attestation-modal>\n</abs-modal>\n\n<!-- Reference Forms -->\n<abs-modal\n  [open]=\"referenceFormsModal\"\n  (closeDialog)=\"handleCardAction('referenceFormModal')\"\n  title=\"Reference Form\"\n  modalName=\"referenceFormModal\"\n>\n  <abs-reference-form-modal\n    (closeDialog)=\"handleCardAction('referenceFormsModal')\"\n  ></abs-reference-form-modal>\n</abs-modal>\n\n<!-- Pay Fee -->\n<abs-modal\n  [open]=\"payFeeModal\"\n  (closeDialog)=\"handleCardAction('payFeeModal')\"\n  title=\"Pay Fee\"\n  modalName=\"payFeeModal\"\n>\n  <abs-pay-fee\n    [payFeeData]=\"payFeeData\"\n    [paymentGridData]=\"paymentGridData\"\n    (cancelAction)=\"handleCardAction('payFeeModal')\"\n  >\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </abs-pay-fee>\n</abs-modal>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-3331dadbc5dc15f2f3cdbded3357ead79b2c52a2e8c86a6b19c6c6016d3ac0975ce0243bf788aecb25ad9bc9495aa922face9bde8feddefbc6adf593ae83c649",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertsAndNotices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | undefined",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "certificateInformation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDashboardState> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "DashboardSelectors.dashboardCertificateInformation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isSurgeon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "programInformation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDashboardState> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "DashboardSelectors.dashboardProgramInformation"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IUserProfile> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.user"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userActionCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActionCardReadOnlyModel[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "userClaims$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.userClaims"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "userInformation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProgramReadOnlyModel | ICertificationReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchAlertsAndNoticesByUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initDashboardData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setActionCardsByUserClaims",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ActionCardComponent",
                    "type": "component"
                },
                {
                    "name": "UserInformationCardComponent",
                    "type": "component"
                },
                {
                    "name": "HighlightCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { HighlightCardComponent } from '../shared/components/highlight-card/highlight-card.component';\nimport { UserInformationCardComponent } from '../shared/components/user-information-card/user-information-card.component';\nimport {\n  IUserProfile,\n  UserProfileSelectors,\n  DashboardSelectors,\n  GetDashboardCertificationInformation,\n  GetDashboardProgramInformation,\n  IDashboardState,\n} from '../state';\nimport { UserClaims } from '../side-navigation/user-status.enum';\nimport { IActionCardReadOnlyModel } from '../shared/components/action-card/action-card-read-only.model';\nimport {\n  CERTIFIED_ACTION_CARDS,\n  TRAINEE_ACTION_CARDS,\n} from './user-action-cards';\nimport { IProgramReadOnlyModel } from '../api/models/trainees/program-read-only.model';\nimport { ICertificationReadOnlyModel } from '../api/models/surgeons/certification-read-only.model';\nimport { GetStateList } from '../state/picklists';\n\n@Component({\n  selector: 'abs-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    UserInformationCardComponent,\n    HighlightCardComponent,\n  ],\n})\nexport class DashboardComponent implements OnInit {\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n\n  @Select(UserProfileSelectors.userClaims) userClaims$:\n    | Observable<string[]>\n    | undefined;\n\n  @Select(DashboardSelectors.dashboardProgramInformation) programInformation$:\n    | Observable<IDashboardState>\n    | undefined;\n\n  @Select(DashboardSelectors.dashboardCertificateInformation)\n  certificateInformation$: Observable<IDashboardState> | undefined;\n  userData: IUserProfile | undefined;\n  userActionCards: IActionCardReadOnlyModel[] | undefined;\n  isSurgeon: boolean | undefined;\n  userInformation!: IProgramReadOnlyModel | ICertificationReadOnlyModel[];\n\n  alertsAndNotices: any | undefined;\n\n  constructor(private _store: Store) {\n    this.initDashboardData();\n  }\n\n  ngOnInit(): void {\n    this.fetchUserData();\n    this.setActionCardsByUserClaims();\n    this.fetchAlertsAndNoticesByUserId();\n  }\n\n  initDashboardData() {\n    this.userClaims$?.subscribe((userClaims) => {\n      this.isSurgeon = userClaims?.includes(UserClaims.surgeon);\n    });\n\n    this.user$?.subscribe((user) => {\n      if (this.isSurgeon) {\n        if (user?.absId) {\n          this._store.dispatch(\n            new GetDashboardCertificationInformation(user.absId.toString())\n          );\n        }\n      } else {\n        if (user?.userId) {\n          this._store.dispatch(new GetDashboardProgramInformation(user.userId));\n        }\n      }\n    });\n  }\n\n  fetchUserData() {\n    if (this.isSurgeon) {\n      this.certificateInformation$?.subscribe((userInformation) => {\n        if (userInformation?.certificates?.length > 0) {\n          this.userInformation = userInformation.certificates;\n        }\n      });\n    } else {\n      this.programInformation$?.subscribe((userInformation) => {\n        if (userInformation?.programs?.programName.length > 0) {\n          this.userInformation = userInformation.programs;\n        }\n      });\n    }\n  }\n\n  fetchAlertsAndNoticesByUserId() {\n    const alertsAndNoticesTrainee = [\n      {\n        title: 'Next General Surgery QE - 7/2024',\n        content:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer egestas maximus turpis id pulvinar.',\n        alert: true,\n        image:\n          'https://images.pexels.com/photos/6098057/pexels-photo-6098057.jpeg',\n      },\n      {\n        title: 'Documents',\n        content:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer egestas maximus turpis id pulvinar.',\n        action: 'documents',\n        alert: false,\n        image:\n          'https://images.pexels.com/photos/4021775/pexels-photo-4021775.jpeg',\n      },\n    ];\n\n    const alertsAndNoticesCertfiied = [\n      {\n        title: 'Issues with your GME',\n        content:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer egestas maximus turpis id pulvinar.',\n        alert: true,\n        image:\n          'https://images.pexels.com/photos/6098057/pexels-photo-6098057.jpeg',\n      },\n      {\n        title: 'Documents',\n        content:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer egestas maximus turpis id pulvinar.',\n        action: '/documents',\n        alert: false,\n        image:\n          'https://images.pexels.com/photos/4021775/pexels-photo-4021775.jpeg',\n      },\n    ];\n\n    this.alertsAndNotices = this.isSurgeon\n      ? alertsAndNoticesCertfiied\n      : alertsAndNoticesTrainee;\n  }\n\n  setActionCardsByUserClaims() {\n    this.userActionCards = this.isSurgeon\n      ? CERTIFIED_ACTION_CARDS\n      : TRAINEE_ACTION_CARDS;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\n  margin-bottom: 0;\n}\n\nh4 {\n  margin: 0;\n}\n\n.grid {\n  margin-top: 1.5rem;\n}\n\nbutton {\n  width: 100%;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app\" *ngIf=\"user$ | async as user\">\n  <div class=\"flex justify-content-between align-items-end\">\n    <div>\n      <h1>Dashboard</h1>\n      <h4 class=\"thin\">Hello, {{ user.displayName }}!</h4>\n    </div>\n    <div class=\"last-login\">\n      <strong>Last Login:</strong>\n      {{ user.lastLoginDateUtc | date }}\n    </div>\n  </div>\n\n  <div class=\"grid\">\n    <abs-user-information-card\n      class=\"col-12\"\n      [userInformation]=\"userInformation\"\n      [currentStatus]=\"user.certificationStatus\"\n      [isSurgeon]=\"isSurgeon\"\n    ></abs-user-information-card>\n\n    <abs-highlight-card\n      class=\"col-12 md:col-6\"\n      *ngFor=\"let alert of alertsAndNotices\"\n      [alert]=\"alert\"\n    ></abs-highlight-card>\n\n    <abs-action-card\n      class=\"grid-item col-12  {{\n        isSurgeon ? 'md:col-6 lg:col-4' : 'md:col-6'\n      }} \"\n      *ngFor=\"let actionCard of userActionCards\"\n      [actionCard]=\"actionCard\"\n    ></abs-action-card>\n  </div>\n</div>\n"
        },
        {
            "name": "DashboardHeaderComponent",
            "id": "component-DashboardHeaderComponent-5288c12e257a2d7a0ff0e396b33dcda3a08830bf3679eca967cbe81a8c6e9305559812b91b57c0e8757cc1b9ca595c796b2bc3203d71eb495ae808da3fbe982c",
            "file": "src/app/shared/components/dashboard-header/dashboard-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-dashboard-header",
            "styleUrls": [
                "./dashboard-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "handleSideNavToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "headerLinks",
                    "defaultValue": "[\n    {\n      display: 'News',\n      action: 'https://www.absurgery.org/default.jsp?news_home_mb',\n    },\n    {\n      display: 'EPAs',\n      action: 'https://www.absurgery.org/default.jsp?epahome',\n    },\n    {\n      display: 'About',\n      action: 'https://www.absurgery.org/default.jsp?aboutcontact',\n    },\n    {\n      display: 'Contact',\n      action: 'https://www.absurgery.org/default.jsp?abouthome',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "searchText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'abs-dashboard-header',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive, FormsModule],\n  templateUrl: './dashboard-header.component.html',\n  styleUrls: ['./dashboard-header.component.scss'],\n})\nexport class DashboardHeaderComponent {\n  @Output() handleSideNavToggle: EventEmitter<any> = new EventEmitter();\n\n  searchText: string | undefined;\n  headerLinks = [\n    {\n      display: 'News',\n      action: 'https://www.absurgery.org/default.jsp?news_home_mb',\n    },\n    {\n      display: 'EPAs',\n      action: 'https://www.absurgery.org/default.jsp?epahome',\n    },\n    {\n      display: 'About',\n      action: 'https://www.absurgery.org/default.jsp?aboutcontact',\n    },\n    {\n      display: 'Contact',\n      action: 'https://www.absurgery.org/default.jsp?abouthome',\n    },\n  ];\n\n  constructor(private _router: Router) {}\n\n  handleSearch() {\n    // search handler\n  }\n\n  onKey(event: any) {\n    this.searchText = event.target.value;\n  }\n\n  toggleSideNav() {\n    this.handleSideNavToggle.emit();\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dashboard-header {\n  margin-top: 3rem;\n  .nav-toggle {\n    display: block;\n  }\n  nav {\n    ul {\n      list-style: none;\n      display: flex;\n      flex-wrap: wrap;\n      margin: 0;\n      padding: 0;\n      align-items: center;\n      justify-content: flex-end;\n      li {\n        position: relative;\n        margin: 0 2rem 2rem 0;\n        &:last-child {\n          margin-right: 0;\n        }\n        a {\n          text-decoration: none;\n          color: var(--primary);\n          font-size: 1rem;\n          transition: 250ms ease-in-out;\n          &:hover,\n          &:focus,\n          &.active {\n            color: var(--global-warning);\n          }\n        }\n      }\n    }\n    input[type='text'] {\n      padding: 0 3rem 0 1.5rem;\n      width: 204px;\n      height: 45px;\n      background: #fff;\n      border-radius: 32px;\n      font-size: 1rem;\n      outline: none;\n      border: none;\n      &:focus {\n        border-color: var(--global-warning);\n      }\n    }\n    button {\n      background: none;\n      border: none;\n      position: absolute;\n      right: 10px;\n      top: 10px;\n    }\n    i {\n      color: var(--global-warning);\n      font-size: 1.5rem;\n      cursor: pointer;\n    }\n  }\n}\n\n.nav-toggle {\n  display: flex;\n  align-items: center;\n  margin: 0 1rem 2rem 0;\n}\n\n.hamburger {\n  border: none;\n  cursor: pointer;\n  span {\n    position: relative;\n    display: block;\n    height: 5px;\n    width: 3rem;\n    background-color: var(--global-primary);\n    transition: 250ms ease-in-out;\n    margin-bottom: 5px;\n  }\n  &:hover {\n    span {\n      background-color: var(--global-warning);\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  .dashboard-header {\n    justify-content: flex-end;\n    .nav-toggle {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "./dashboard-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "router": {
                    "name": "router",
                    "getSignature": {
                        "name": "router",
                        "type": "",
                        "returnType": "Router",
                        "line": 50
                    }
                }
            },
            "templateData": "<div class=\"dashboard-header flex justify-content-between\">\n  <div class=\"nav-control\">\n    <div class=\"nav-toggle\">\n      <button class=\"hamburger\" (click)=\"toggleSideNav()\">\n        <span></span>\n        <span></span>\n        <span></span>\n      </button>\n    </div>\n  </div>\n  <nav>\n    <ul>\n      <li *ngFor=\"let link of headerLinks\">\n        <a [href]=\"link.action\" target=\"_blank\" rel=\"noreferrer\">{{\n          link.display\n        }}</a>\n      </li>\n      <li>\n        <input\n          type=\"text\"\n          id=\"site-search\"\n          placeholder=\"Search\"\n          (keyup)=\"onKey($event)\"\n        />\n        <button (click)=\"handleSearch()\">\n          <i class=\"fa-solid fa-magnifying-glass\"></i>\n        </button>\n      </li>\n    </ul>\n  </nav>\n</div>\n"
        },
        {
            "name": "DocumentsComponent",
            "id": "component-DocumentsComponent-6b87f75b3f2ef8b489894c77330489685a1ab5068a8132c1c121f935f40984b5388c4de667da8e3aaa151986712f512e81aa7bdaf61dce56974959662ecf8464",
            "file": "src/app/documents/documents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-documents",
            "styleUrls": [
                "./documents.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./documents.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "documents$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDocumentReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.documents"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "documentsCols",
                    "defaultValue": "DOCUMENTS_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "documentsData$",
                    "defaultValue": "new BehaviorSubject<IDocumentReadOnlyModel[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IDocumentReadOnlyModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "fileUploadedName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "gridOptions",
                    "defaultValue": "{\n    showFilter: true,\n    filterOn: 'documentName',\n    filterType: AbsFilterType.Text,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGridOptions",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectOptions",
                    "defaultValue": "[\n    {\n      label: 'Medical License',\n      value: 'Medical_License',\n    },\n    {\n      label: 'Invoice',\n      value: 'Invoice',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "uploadedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "getDocuments",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleFileOnChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { DOCUMENTS_COLS } from './documents-col';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { Select, Store } from '@ngxs/store';\nimport { DocumentSelectors, GetAllDocuments } from '../state/documents';\nimport { IDocumentReadOnlyModel } from '../api/models/documents/document-read-only.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Component({\n  selector: 'abs-documents',\n  templateUrl: './documents.component.html',\n  styleUrls: ['./documents.component.scss'],\n  standalone: true,\n  imports: [CommonModule, GridComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DocumentsComponent implements OnInit {\n  @Select(DocumentSelectors.slices.documents) documents$:\n    | Observable<IDocumentReadOnlyModel[]>\n    | undefined;\n\n  documentsData$: BehaviorSubject<IDocumentReadOnlyModel[]> =\n    new BehaviorSubject<IDocumentReadOnlyModel[]>([]);\n\n  documentsCols = DOCUMENTS_COLS;\n  gridOptions: IGridOptions = {\n    showFilter: true,\n    filterOn: 'documentName',\n    filterType: AbsFilterType.Text,\n  };\n  fileUploadedName: string | undefined;\n  uploadedFile: File | undefined;\n  documentType!: string;\n  canUpload = false;\n  selectOptions = [\n    {\n      label: 'Medical License',\n      value: 'Medical_License',\n    },\n    {\n      label: 'Invoice',\n      value: 'Invoice',\n    },\n  ];\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetAllDocuments());\n  }\n\n  ngOnInit() {\n    this.getDocuments();\n  }\n\n  getDocuments() {\n    this.documents$?.subscribe((documentsData) => {\n      if (documentsData.length > 0) {\n        this.documentsData$.next(documentsData);\n      }\n    });\n  }\n\n  handleGridAction($event: any) {\n    console.log($event);\n  }\n\n  handleFileOnChange($event: any) {\n    this.fileUploadedName = $event.target.files[0].name;\n    this.uploadedFile = $event.target.files;\n  }\n\n  onDocumentUpload() {\n    console.log('document upload', this.uploadedFile);\n    console.log('document Name', this.fileUploadedName);\n    console.log('document Type', this.documentType);\n  }\n\n  resetData() {\n    this.fileUploadedName = undefined;\n    this.uploadedFile = undefined;\n    this.documentType = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-card {\n  min-width: 100%;\n  position: relative;\n}\n\ninput[type='file'] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n\n.input-file {\n  label {\n    position: relative;\n    top: 8px;\n    padding: 6px 40px;\n    border: 1px solid #595959;\n    border-radius: 6px;\n    opacity: 1;\n    color: #595959;\n    font-weight: 500;\n    transition: 250ms ease-in-out;\n    cursor: pointer;\n    i {\n      color: var(--global-warning);\n      margin-left: 20px;\n    }\n    &:hover &:focus-visible {\n      border: 1px solid var(--global-warning);\n    }\n  }\n}\n\n.upload-controls {\n  position: absolute;\n}\n",
                    "styleUrl": "./documents.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Documents</h1>\n<sl-card>\n  <div slot=\"header\">All Documents</div>\n\n  <div style=\"margin: 2rem 0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </div>\n  <div class=\"flex upload-controls\" *ngIf=\"canUpload\">\n    <sl-select\n      style=\"margin-right: 1rem\"\n      placeholder=\"Select a document type\"\n      ngDefaultControl\n    >\n      <sl-option *ngFor=\"let option of selectOptions\" [value]=\"option.value\">{{\n        option.label\n      }}</sl-option>\n    </sl-select>\n    <div class=\"input-file\">\n      <label>\n        <input type=\"file\" (change)=\"handleFileOnChange($event)\" />\n        <span\n          >{{ fileUploadedName ?? 'Upload a File' }}\n          <i class=\"fa-solid fa-upload\"></i\n        ></span>\n      </label>\n    </div>\n    <sl-button\n      (click)=\"onDocumentUpload()\"\n      [disabled]=\"!uploadedFile && !documentType\"\n      class=\"btn-add\"\n    >\n      <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n      <span>UPLOAD DOCUMENT</span>\n    </sl-button>\n  </div>\n  <abs-grid\n    [columns]=\"documentsCols\"\n    [data]=\"documentsData$\"\n    (action)=\"handleGridAction($event)\"\n    [gridOptions]=\"gridOptions\"\n    [pagination]=\"true\"\n    [itemsPerPage]=\"3\"\n    stlye=\"margin: 0 0 2rem 0\"\n  >\n  </abs-grid>\n</sl-card>\n"
        },
        {
            "name": "ExaminationHistoryComponent",
            "id": "component-ExaminationHistoryComponent-6e216a5ed8217384f5b8256712b980692fbb2eba3b997bb915bf02922fd6561da1eca4c96fa0a834282253ab75b051ecdd375db5a90157ef560318eab4aa6537",
            "file": "src/app/examination-history/examination-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-examination-history",
            "styleUrls": [
                "./examination-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./examination-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeExams",
                    "defaultValue": "[\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "examHistory",
                    "defaultValue": "[\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: true,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Failed', // should this be a boolean or are there more than 2 statuses?\n      expanded: true,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n    {\n      id: 3,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: false,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n    {\n      id: 4,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: false,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "examHistoryCols",
                    "defaultValue": "EXAM_HISTORY_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tableHeightChanged$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    displayName: 'John Doe, M.D.',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CollapsePanelComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { EXAM_HISTORY_COLS } from './exam-history-cols';\n\n@Component({\n  selector: 'abs-examination-history',\n  templateUrl: './examination-history.component.html',\n  styleUrls: ['./examination-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [CommonModule, CollapsePanelComponent, GridComponent],\n})\nexport class ExaminationHistoryComponent {\n  // this just serves as a bit flip to trigger the height reset on the collapse panel\n  tableHeightChanged$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  examHistoryCols = EXAM_HISTORY_COLS;\n  // TODO: [Joe] dummy data, replace with real data\n  user = {\n    displayName: 'John Doe, M.D.',\n  };\n  // TODO: [Joe] dummy data, replace with real data\n  activeExams = [\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      startDate: new Date('3/30/22'),\n      endDate: new Date('4/2/22'),\n      status: 'Approved',\n      updates: [\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Packet Received',\n        },\n        {\n          updateDate: new Date('5/2/22'),\n          updateText: 'Application Received',\n        },\n      ],\n    },\n  ];\n  // TODO: [Joe] dummy data, replace with real data\n  examHistory = [\n    {\n      id: 1,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: true,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n      ],\n    },\n    {\n      id: 2,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Failed', // should this be a boolean or are there more than 2 statuses?\n      expanded: true,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n    {\n      id: 3,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: false,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n    {\n      id: 4,\n      examTitle: 'Metabolic Bariatric Surgery Examination',\n      date: new Date('5/2/22'),\n      status: 'Completed',\n      result: 'Passed', // should this be a boolean or are there more than 2 statuses?\n      expanded: false,\n      updates: [\n        {\n          updateDate: new Date('7/19/92'),\n          updateText: 'Initial Certification',\n        },\n        {\n          updateDate: new Date('7/15/02'),\n          updateText: 'Recertification',\n        },\n      ],\n    },\n  ];\n\n  constructor(private _router: Router) {}\n\n  handleGridAction($event: any) {\n    if ($event.fieldKey === 'expanded') {\n      this.tableHeightChanged$.next(!this.tableHeightChanged$.getValue());\n    }\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".active-exam__container {\n  .active-exam__details {\n    padding-top: 1rem;\n  }\n  .active-exam__details + .active-exam__details {\n    border-top: 1px solid var(--global-gray-light);\n  }\n}\n\nsl-button.exam-link::part(base) {\n  height: 2rem;\n}\nsl-button.exam-link::part(label) {\n  padding: 0;\n  color: var(--global-success);\n  font-weight: 700;\n  font-size: 1rem;\n}\nsl-button.exam-link::part(label):hover {\n  color: var(--global-success-darken-20);\n}\n",
                    "styleUrl": "./examination-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 133,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "router": {
                    "name": "router",
                    "getSignature": {
                        "name": "router",
                        "type": "",
                        "returnType": "Router",
                        "line": 143
                    }
                }
            },
            "templateData": "<header>\n  <h1 class=\"mb-1\">Examination History</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <p class=\"text-2xl mt-0\">For {{ user.displayName }}</p>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel [panelId]=\"1\" [startExpanded]=\"true\">\n          <h5 class=\"mt-0 mb-2\" panel-header>Active Examinations</h5>\n          <div class=\"grid\">\n            <div class=\"col-12 active-exam__container\">\n              <p *ngIf=\"activeExams.length > 0\">\n                Click on a link below to register for an active examination\n              </p>\n              <!-- TODO: [Joe] update the 'no examinations' text to include any relevant information or action items -->\n              <p *ngIf=\"activeExams.length === 0\">\n                There are no active examinations at this time. Please check back\n                later.\n              </p>\n              <div\n                class=\"grid active-exam__details\"\n                *ngFor=\"let exam of activeExams\"\n              >\n                <div class=\"col-7\">\n                  <sl-button\n                    class=\"exam-link m-0\"\n                    variant=\"text\"\n                    (click)=\"\n                      router.navigateByUrl('exam-registration/' + exam.id)\n                    \"\n                  >\n                    {{ exam.examTitle }}\n                  </sl-button>\n                  <p class=\"m-0\">\n                    ({{ exam.startDate | date : 'shortDate' }} through\n                    {{ exam.endDate | date : 'shortDate' }})\n                  </p>\n                  <p>\n                    Status: <span class=\"font-bold\">{{ exam.status }}</span>\n                  </p>\n                </div>\n                <div class=\"col-5\">\n                  <div class=\"grid\">\n                    <div class=\"col-8\">\n                      <p class=\"font-bold m-0\">Update</p>\n                    </div>\n                    <div class=\"col-4\">\n                      <p class=\"font-bold m-0\">Date</p>\n                    </div>\n                  </div>\n                  <div class=\"grid\" *ngIf=\"exam.updates.length === 0\">\n                    <div class=\"col-8\">\n                      <p class=\"m-0\">No updates at this time.</p>\n                    </div>\n                  </div>\n                  <div class=\"grid\" *ngFor=\"let update of exam.updates\">\n                    <div class=\"col-8\">\n                      <p class=\"m-0\">{{ update.updateText }}</p>\n                    </div>\n                    <div class=\"col-4\">\n                      <p class=\"m-0\">\n                        {{ update.updateDate | date : 'shortDate' }}\n                      </p>\n                    </div>\n                  </div>\n                  <div class=\"grid\">\n                    <div class=\"col-12\">\n                      <p class=\"text-sm\">\n                        Note: Once your application has been approved, you will\n                        be mailed a letter with instructions on how to register\n                        for the exam.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel\n          [panelId]=\"2\"\n          [startExpanded]=\"true\"\n          [heightToggle]=\"tableHeightChanged$\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>Examination History</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p class=\"mb-0\">\n                Below is a history of all of the examinations that you've\n                participated in\n              </p>\n              <!-- TODO: [Joe] create expanded row toggle button -->\n              <abs-grid\n                [columns]=\"examHistoryCols\"\n                [data]=\"examHistory\"\n                class=\"margin-bottom-2\"\n                [expandTemplate]=\"expandedRow\"\n                (action)=\"handleGridAction($event)\"\n              ></abs-grid>\n              <ng-template #expandedRow let-r>\n                <div class=\"pl-4\">\n                  <div class=\"grid\">\n                    <div class=\"col-5 md:col-4\">\n                      <p class=\"font-bold m-0\">Update</p>\n                    </div>\n                    <div class=\"col-5 md:col-4\">\n                      <p class=\"font-bold m-0\">Date</p>\n                    </div>\n                  </div>\n                  <div class=\"grid\" *ngFor=\"let update of r?.updates\">\n                    <div class=\"col-5 md:col-4\">\n                      <p class=\"m-0\">{{ update.updateText }}</p>\n                    </div>\n                    <div class=\"col-5 md:col-4\">\n                      <p class=\"m-0\">\n                        {{ update.updateDate | date : 'shortDate' }}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </ng-template>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading examination history...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ExamProcessComponent",
            "id": "component-ExamProcessComponent-f55289728b8c4c64d1acb63375508ea18ca927a957322c44662dcf810dd763755ee4dc08d22c7938664a19bdac8d527cad236436b124a4a50fa50ee39872d41a",
            "file": "src/app/exam-process/exam-process.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-exam-process",
            "styleUrls": [
                "./exam-process.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./exam-process.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableApplications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getApplications",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'abs-exam-process',\n  templateUrl: './exam-process.component.html',\n  styleUrls: ['./exam-process.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [CommonModule, RouterLink],\n})\nexport class ExamProcessComponent implements OnInit {\n  availableApplications: any[] = [];\n\n  ngOnInit(): void {\n    this.getApplications();\n  }\n\n  getApplications() {\n    this.availableApplications = [\n      {\n        name: 'Pediatric Surgery Qualifying Exam',\n        progress: 'not started',\n        continuousCertNeeded: true,\n        status: 'not-started',\n        deadline: new Date('5/10/2022'),\n      },\n      {\n        name: 'General Surgery Qualifying Exam',\n        progress: '0/10 completed',\n        continuousCertNeeded: false,\n        status: 'in-progress',\n        deadline: new Date('5/10/2022'),\n      },\n    ];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "hr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\na {\n  font-weight: 700;\n  color: var(--global-success);\n  cursor: pointer;\n}\na:hover {\n  color: var(--global-success-darken-20);\n}\nul {\n  li::marker {\n    color: var(--global-warning);\n  }\n}\n\nsl-card::part(base) {\n  height: 100%;\n}\n\n.application-container {\n  background-color: var(--global-table-background);\n  padding: 1rem 1.5rem;\n  &.available-applications {\n    background-color: var(--global-card-highlight);\n  }\n}\n\n.application-progress {\n  font-size: 0.875rem;\n}\n.application-progress,\n.application-status {\n  text-transform: capitalize;\n  &.not-started {\n    color: var(--global-danger);\n  }\n  &.in-progress {\n    color: var(--global-warning);\n  }\n  &.completed {\n    color: var(--global-success);\n  }\n}\n\n.btn-link {\n  margin-top: 1rem;\n  text-decoration: none;\n}\n",
                    "styleUrl": "./exam-process.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h1>Exam Applications</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <h5 class=\"mt-0 mb-2\" panel-header>Applications for 2021-2023</h5>\n        <hr />\n        <p>\n          Applications for ABS examinations are restricted to eligible\n          candidates only. Below is a list of exams for which the ABS currently\n          recognizes you as eligible to apply. Click the link to apply where\n          appropriate.\n        </p>\n        <div class=\"mt-2 grid\">\n          <div\n            [ngClass]=\"{\n              'col-12': true,\n              'application-container': true,\n              'available-applications': availableApplications.length > 0\n            }\"\n          >\n            <p class=\"text-lg font-bold m-0\">\n              {{\n                availableApplications.length > 0\n                  ? 'Available Applications'\n                  : 'No applications are currently available, check back later.'\n              }}\n            </p>\n            <div class=\"mt-2 grid\" *ngIf=\"availableApplications.length > 0\">\n              <sl-card\n                class=\"col-12 md:col-6 application-card\"\n                *ngFor=\"let application of availableApplications\"\n              >\n                <p\n                  class=\"font-bold mt-0 flex justify-content-between align-items-center\"\n                >\n                  {{ application.name }}\n                  <span\n                    [class]=\"'application-progress ' + application.status\"\n                    >{{ application.progress }}</span\n                  >\n                </p>\n                <div class=\"mt-2 mb-3\">\n                  <p class=\"font-bold m-0\">\n                    Application Status:\n                    <span [class]=\"'application-status ' + application.status\">\n                      {{\n                        application.continuousCertNeeded\n                          ? 'Continuous Certification needed'\n                          : application.status.replace('-', ' ')\n                      }}\n                    </span>\n                  </p>\n                  <p class=\"font-bold m-0\">\n                    2022 Deadline:\n                    <span class=\"font-normal\">{{\n                      application.deadline | date : 'longDate'\n                    }}</span>\n                  </p>\n                </div>\n                <a\n                  class=\"btn-link\"\n                  [routerLink]=\"'/continuous-certification'\"\n                  *ngIf=\"application.continuousCertNeeded\"\n                >\n                  Go to your Continuous Certification\n                  <i class=\"fa-solid fa-arrow-right ml-2\"></i>\n                </a>\n              </sl-card>\n            </div>\n          </div>\n          <div class=\"col-12\" *ngIf=\"availableApplications.length > 0\">\n            <p class=\"font-italic\">\n              If you do not see the examination listed for which you would like\n              to apply,\n              <a class=\"underline\">please contact the exam coordinator.</a>\n            </p>\n            <hr />\n          </div>\n        </div>\n        <div class=\"grid\">\n          <div class=\"col-12\">\n            <p class=\"font-bold\">\n              Reasons you may not see an exam listed include:\n            </p>\n            <ul>\n              <li>\n                The application may not vet be posted for the current year.\n              </li>\n              <li>The application period for the current year has expired.</li>\n              <li>\n                The application may already be approved.\n                <a class=\"underline\">Check Exam Records and Results</a> for more\n                information.\n              </li>\n              <li>\n                You may not have been registered by an accredited program as\n                having completed a residency or fellowship.\n              </li>\n              <li>\n                You are a graduate of an accredited Canadian program, in which\n                case you must <a class=\"underline\">send an email</a> to the exam\n                coordinator to gain access.\n              </li>\n              <li>\n                You must be certified in general surgery before applying for\n                certain surgical specialties.\n              </li>\n              <li>\n                There is no examination in the academic year for your specialty\n                and thus no application.\n              </li>\n            </ul>\n          </div>\n        </div>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading exam applications...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ExamRegistrationComponent",
            "id": "component-ExamRegistrationComponent-42482a52c6a23527c58683dee3b76b029847b983579f5203b5adcab70322f26475bc66e64e68d4151bd9ee50862faa2b23b7682cb191427c79dd944f0e95d87a",
            "file": "src/app/exam-registration/exam-registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-exam-registration",
            "styleUrls": [
                "./exam-registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./exam-registration.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "payFeeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "paymentGridData",
                    "defaultValue": "[\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "siteSelectionFormData",
                    "defaultValue": "[\n    {\n      label: '',\n      value: '',\n      required: false,\n      name: 'siteSelection',\n      type: 'radio',\n      size: 'col-12',\n      options: [\n        {\n          label: 'November 9 - 11, 2022',\n          value: '11/09/2022-11/11/2022',\n        },\n        {\n          label: 'November 16 - 18, 2022',\n          value: '11/16/2022-11/18/2022',\n        },\n        {\n          label: 'November 29 - 30, 2022',\n          value: '11/29/2022-11/30/2022',\n        },\n        {\n          label: 'December 2 - 4, 2022',\n          value: '12/02/2022-12/04/2022',\n        },\n        {\n          label: 'December 15, 2022',\n          value: '12/15/2022',\n        },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getPayFeeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDigitalSignatureChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDownloadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSiteSelectionSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSiteSelectionChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CollapsePanelComponent",
                    "type": "component"
                },
                {
                    "name": "PayFeeComponent",
                    "type": "component"
                },
                {
                    "name": "RadioButtonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { PayFeeComponent } from '../shared/components/pay-fee/pay-fee.component';\n\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@Component({\n  selector: 'abs-exam-registration',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    CollapsePanelComponent,\n    PayFeeComponent,\n    RadioButtonModule,\n    CheckboxModule,\n  ],\n  templateUrl: './exam-registration.component.html',\n  styleUrls: ['./exam-registration.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ExamRegistrationComponent implements OnInit {\n  siteSelectionFormData = [\n    {\n      label: '',\n      value: '',\n      required: false,\n      name: 'siteSelection',\n      type: 'radio',\n      size: 'col-12',\n      options: [\n        {\n          label: 'November 9 - 11, 2022',\n          value: '11/09/2022-11/11/2022',\n        },\n        {\n          label: 'November 16 - 18, 2022',\n          value: '11/16/2022-11/18/2022',\n        },\n        {\n          label: 'November 29 - 30, 2022',\n          value: '11/29/2022-11/30/2022',\n        },\n        {\n          label: 'December 2 - 4, 2022',\n          value: '12/02/2022-12/04/2022',\n        },\n        {\n          label: 'December 15, 2022',\n          value: '12/15/2022',\n        },\n      ],\n    },\n  ];\n  payFeeData: any;\n  paymentGridData = [\n    {\n      paymentDate: new Date('09/18/2015'),\n      paymentAmount: '$100',\n      balanceRemaining: '$285.00',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.getPayFeeData();\n  }\n\n  onSiteSelectionChange(event: any) {\n    console.log(event);\n    this.siteSelectionFormData\n      .filter((item) => item.name === event.target.name)\n      .map((item) => {\n        item.value = event.target.value;\n      });\n  }\n\n  getPayFeeData() {\n    this.payFeeData = {\n      totalAmountOfFee: '$285.00',\n      totalAmountPaidDate: new Date('11/5/2022'),\n      totalAmountPaid: '$0.00',\n      remainingBalance: '$285.00',\n    };\n  }\n\n  handleSiteSelectionSubmit() {\n    console.log(this.siteSelectionFormData);\n  }\n  handleDigitalSignatureChange($event: any) {\n    console.log($event);\n  }\n\n  handleDownloadForm() {\n    console.log('Download Form');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-radio-group {\n  margin-top: 15px;\n}\n\nsl-radio::part(label) {\n  font-weight: 700;\n}\n\nsl-radio {\n  font-weight: 700;\n  margin-bottom: 15px;\n}\n\n.align-right {\n  text-align: right;\n}\n\na {\n  color: var(--global-success);\n  text-decoration: none;\n  border-bottom: 1px solid transparent;\n  transition: 250ms ease-in-out;\n  &:hover {\n    border-color: var(--global-success);\n  }\n}\n\n.panel-header {\n  width: 100%;\n}\n.status {\n  margin-right: 1rem;\n  line-height: 2rem;\n  &.completed {\n    color: var(--global-success);\n  }\n  &.alert {\n    color: var(--global-danger);\n  }\n}\n",
                    "styleUrl": "./exam-registration.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n  <div>\n    <h1>General Surgery Exam Registration</h1>\n    <p>\n      This year, the exam will be completely virtual via Zoom. The registration\n      deadline is September 1st. Dates are filed on a first-come, first-served\n      basis.\n    </p>\n    <p>\n      <strong>\n        Failure to select a CE date for the academic year is considered a lost\n        exam opportunity.</strong\n      >\n      A final assignment means you have a guaranteed spot, but it is irrevocable\n      and unchangeable one given. Once you have received a final assignment,\n      exam fees will not be refunded if you subsequently change your mind or\n      fail to show up.\n    </p>\n    <p>\n      Please allow 5-10 business days for your registration to be processed.\n      Once processed, your exam date will be posted on your Exam Records and\n      Results page under Active Examinations.\n    </p>\n  </div>\n</div>\n\n<section>\n  <div class=\"grid\">\n    <!-- Site Selection -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"1\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Site Selection</h5>\n          <div class=\"status completed\">\n            Nov 16 - Nov 18, 2022, General Surgery Certifying Exam (Virtual)\n            Assigned\n          </div>\n        </div>\n        <div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n          <form action=\"\">\n            <div class=\"form-description\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat. All\n              fields are required.\n            </div>\n            <div class=\"grid\">\n              <div\n                *ngFor=\"let formField of siteSelectionFormData\"\n                class=\"col-12 md:{{ formField.size }}\"\n              >\n                <label\n                  class=\"block\"\n                  [for]=\"formField.name\"\n                  *ngIf=\"formField.label && formField.label.length > 0\"\n                  >{{ formField.label }}</label\n                >\n                <div class=\"flex flex-column gap-3\">\n                  <p-radioButton\n                    *ngFor=\"let option of formField.options\"\n                    [name]=\"formField.name\"\n                    [value]=\"option.value\"\n                    [label]=\"option.label\"\n                    [(ngModel)]=\"formField.value\"\n                  ></p-radioButton>\n                </div>\n              </div>\n              <div class=\"col-12 align-right\">\n                <sl-button variant=\"default\" size=\"large\">Cancel</sl-button>\n                <sl-button\n                  class=\"wide\"\n                  size=\"large\"\n                  variant=\"warning\"\n                  (click)=\"handleSiteSelectionSubmit()\"\n                  >Save</sl-button\n                >\n              </div>\n            </div>\n          </form>\n        </div>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Registration Form -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"2\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Site Selection</h5>\n          <div class=\"status completed\">Received 07/28/2022</div>\n        </div>\n\n        <div class=\"form-description mb-5\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat. All fields\n          are required.\n        </div>\n        <sl-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Form</span>\n        </sl-button>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Registration Fee -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"3\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Exam Registration Fee</h5>\n          <div class=\"status alert\">Amount Owed: $1500.00</div>\n        </div>\n\n        <abs-pay-fee\n          [payFeeData]=\"payFeeData\"\n          [paymentGridData]=\"paymentGridData\"\n        >\n          <strong\n            >To avoid additional fees, all items must be received by deadline.\n            See also <a href=\"#\">Dates & Fees</a>.</strong\n          >\n        </abs-pay-fee>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Digital Signature-->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"4\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">Digital Signature</h5>\n          <div class=\"status completed\">Completed</div>\n        </div>\n\n        <ul>\n          <li>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\n            sodales condimentum orci, id malesuada ante faucibus eu. Sed ut\n            perspiciatis unde omnis iste natus error sit voluptatem accusantium\n            doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo\n            inventore veritatis et quasi architecto beatae vitae dicta sunt\n            explicabo.\n          </li>\n          <li>\n            Maecenas eros arcu, mattis ut urna id, convallis eleifend purus.\n            Phasellus sodales condimentum orci, id malesuada ante faucibus eu.\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas\n            eros arcu, mattis ut urna id, convallis eleifend purus.\n          </li>\n          <li>\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut\n            fugit, sed quia consequuntur magni dolores eos qui ratione\n            voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem\n            ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non\n            numquam eius modi tempora incidunt ut labore et dolore magnam\n            aliquam quaerat voluptatem.\n          </li>\n          <li>\n            Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?\n          </li>\n          <li>\n            Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse\n            quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat\n            quo voluptas nulla pariatur?\n          </li>\n        </ul>\n        <div class=\"col-12 flex align-items-center gap-2\">\n          <p-checkbox\n            inputId=\"acknowlegement\"\n            name=\"acknowlegement\"\n            (change)=\"handleDigitalSignatureChange($event)\"\n            [binary]=\"true\"\n          ></p-checkbox>\n          <label for=\"userConfirmed\"\n            >I agree to the following statements above to the fullest of my\n            knowledge</label\n          >\n        </div>\n\n        <sl-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Form</span>\n        </sl-button>\n      </abs-collapse-panel>\n    </sl-card>\n\n    <!-- Exam Admission Card / Authorization Letter Status -->\n    <sl-card class=\"col-12\">\n      <abs-collapse-panel [panelId]=\"6\" [startExpanded]=\"true\">\n        <div class=\"flex justify-content-between panel-header\" panel-header>\n          <h5 class=\"mt-0 mb-2\">\n            Exam Admission Card / Authorization Letter Status\n          </h5>\n          <div class=\"status completed\">Posted 10/20/2022</div>\n        </div>\n\n        <div class=\"form-description mb-5\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat. All fields\n          are required.\n        </div>\n        <sl-button (click)=\"handleDownloadForm()\" class=\"btn-add\">\n          <i slot=\"prefix\" class=\"fa-solid fa-download\"></i>\n          <span>Download Exam Admission Card</span>\n        </sl-button>\n      </abs-collapse-panel>\n    </sl-card>\n  </div>\n</section>\n"
        },
        {
            "name": "FellowshipAddEditModalComponent",
            "id": "component-FellowshipAddEditModalComponent-aaf34fd2e1873db4ce2b2e3dcb28e79b702460102ebcd28fff43124fa4d66213021a6f7d4569843f70e749880dbf038d9cf39b6e1cc2d2fdd8b6d18115d930fa",
            "file": "src/app/medical-training/fellowship-add-edit-modal/fellowship-add-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-fellowship-add-edit-modal",
            "styleUrls": [
                "./fellowship-add-edit-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fellowship-add-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fellowship$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Subject<IFellowshipReadOnlyModel>",
                    "decorators": []
                },
                {
                    "name": "isEdit$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "Subject<boolean>",
                    "decorators": []
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fellowshipForm",
                    "defaultValue": "new FormGroup({\n    programName: new FormControl('', Validators.required),\n    programOther: new FormControl(''),\n    completionYear: new FormControl('', Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "fellowshipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "fellowshipPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFellowshipProgramReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "fellowshipPrograms$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IFellowshipProgramReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.fellowshipPrograms"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "maxYear",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPicklistData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToRowData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputSelectComponent",
                    "type": "component"
                },
                {
                    "name": "AutoCompleteModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { InputSelectComponent } from 'src/app/shared/components/base-input/input-select.component';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CalendarModule } from 'primeng/calendar';\nimport { Observable, Subject } from 'rxjs';\nimport { IFellowshipReadOnlyModel } from 'src/app/api/models/medicaltraining/fellowship-read-only.model';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  GetFellowshipPrograms,\n  PicklistsSelectors,\n} from 'src/app/state/picklists';\nimport { IFellowshipProgramReadOnlyModel } from 'src/app/api/models/picklists/fellowship-program-read-only.model';\n\n@Component({\n  selector: 'abs-fellowship-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    AutoCompleteModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n  ],\n  templateUrl: './fellowship-add-edit-modal.component.html',\n  styleUrls: ['./fellowship-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FellowshipAddEditModalComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.fellowshipPrograms) fellowshipPrograms$:\n    | Observable<IFellowshipProgramReadOnlyModel[]>\n    | undefined;\n\n  @Input() userId!: number;\n  @Input() isEdit$: Subject<boolean> = new Subject();\n  @Input() fellowship$: Subject<IFellowshipReadOnlyModel> = new Subject();\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  fellowshipPrograms!: IFellowshipProgramReadOnlyModel[];\n\n  year = new Date().getFullYear();\n  maxYear: Date = new Date();\n  fellowshipId!: number;\n  isEdit = false;\n\n  fellowshipForm = new FormGroup({\n    programName: new FormControl('', Validators.required),\n    programOther: new FormControl(''),\n    completionYear: new FormControl('', Validators.required),\n  });\n\n  constructor(private _store: Store) {}\n\n  ngOnInit(): void {\n    this.maxYear.setFullYear(this.year);\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEdit = isEdit;\n    });\n    this.setPicklistData();\n    this.subscribeToRowData();\n  }\n\n  subscribeToRowData() {\n    this.fellowship$.subscribe((formData) => {\n      if (Object.keys(formData).length > 0) {\n        this.fellowshipId = formData.id;\n        this.fellowshipForm.patchValue({\n          programName: formData.programName,\n          programOther: formData.programOther,\n          completionYear: formData.completionYear.toString(),\n        });\n      } else {\n        this.fellowshipForm.reset();\n      }\n    });\n  }\n\n  setPicklistData() {\n    this.fellowshipPrograms$?.subscribe(\n      (fellowshipPrograms: IFellowshipProgramReadOnlyModel[]) => {\n        this.fellowshipPrograms = fellowshipPrograms;\n      }\n    );\n  }\n\n  cancel() {\n    this.cancelDialog.emit({ show: false });\n  }\n\n  save() {\n    this.saveDialog.emit({\n      edit: this.isEdit,\n      show: false,\n      fellowshipForm: this.fellowshipForm.value,\n      fellowshipId: this.fellowshipId,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./fellowship-add-edit-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\n  name=\"personProfileForm\"\n  [formGroup]=\"fellowshipForm\"\n  (ngSubmit)=\"save()\"\n  *ngIf=\"fellowshipForm\"\n>\n  <div class=\"grid\">\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"trainingType\">Program Name</label>\n      <p-dropdown\n        [options]=\"fellowshipPrograms\"\n        [disabled]=\"fellowshipForm.get('programOther')?.value ? true : false\"\n        [showClear]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"programName\"\n        optionValue=\"programName\"\n        formControlName=\"programName\"\n        placeholder=\"Choose a Training Type\"\n      ></p-dropdown>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Other</label>\n      <input\n        [attr.disabled]=\"fellowshipForm.get('programName')?.value\"\n        pInputText\n        id=\"other\"\n        placeholder=\"If you do not see your Program in the list, type it in here...\"\n        formControlName=\"programOther\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Year of Completion *</label>\n      <p-calendar\n        [required]=\"true\"\n        [maxDate]=\"maxYear\"\n        view=\"year\"\n        dateFormat=\"yy\"\n        inputId=\"yearpicker\"\n        formControlName=\"completionYear\"\n        placeholder=\"YYYY\"\n        appendTo=\"body\"\n      ></p-calendar>\n      <small\n        *ngIf=\"\n          fellowshipForm.get('completionYear')?.errors &&\n          fellowshipForm.get('completionYear')?.dirty\n        \"\n        id=\"trainingType-help\"\n        class=\"form-error-text\"\n      >\n        This is required\n      </small>\n    </div>\n  </div>\n  <div class=\"flex justify-content-end mt-4\" slot=\"footer\">\n    <sl-button type=\"button\" variant=\"text\" (click)=\"cancel()\"\n      >Cancel</sl-button\n    >\n    <sl-button\n      type=\"submit\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      [disabled]=\"fellowshipForm.invalid\"\n      >Save\n    </sl-button>\n  </div>\n</form>\n"
        },
        {
            "name": "FileNotFoundComponent",
            "id": "component-FileNotFoundComponent-54b3e7d4b6e7d7ec855b0c368a5a8250eba44baca1697d726a70e9c85bedc607cde2a5a83f44a63992578753c483623fcc4d536deaf2d80a8a7b4179bda98e1a",
            "file": "src/app/file-not-found/file-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-file-not-found",
            "styleUrls": [
                "./file-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'abs-file-not-found',\n  templateUrl: './file-not-found.component.html',\n  styleUrls: ['./file-not-found.component.scss'],\n  standalone: true,\n})\nexport class FileNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>file-not-found works!</p>\n"
        },
        {
            "name": "FileUploadButtonComponent",
            "id": "component-FileUploadButtonComponent-ab27c3cc8c3ae5cc01138294b65df0ea256ec1e05b7ed2de5f7115083f8e673d22a8ab46b8ab627f4fe94f1e646e823822b135a3cfbffd70045e1f70782e22ca",
            "file": "src/app/shared/components/file-upload-button/file-upload-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-file-upload-button",
            "styleUrls": [
                "./file-upload-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileUploaded",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "covertMimeToIcon",
                    "args": [
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"pdf\" | \"image\" | \"audio\" | \"video\" | \"word\" | \"lines\"",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerFileUpload",
                    "args": [
                        {
                            "name": "inputId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-file-upload-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './file-upload-button.component.html',\n  styleUrls: ['./file-upload-button.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FileUploadButtonComponent {\n  @Input() inputId!: string;\n  @Input() inputName!: string;\n  @Input() buttonText!: string;\n\n  @Output() fileUploaded: EventEmitter<any> = new EventEmitter();\n\n  triggerFileUpload(inputId: string) {\n    const fileInput: any | null = document.querySelector('#' + inputId);\n    fileInput?.click();\n  }\n  uploadFile(event: any) {\n    const file: File = event.target.files[0];\n    const uploadFile = {\n      file: file,\n      fileName: file.name,\n      fileType: this.covertMimeToIcon(file.type),\n      uploadDate: new Date(),\n    };\n\n    this.fileUploaded.emit({ file: uploadFile, fileInput: this.inputId });\n  }\n\n  // TODO: [Joe] add more supported file types (or refine to a list of specifically allowed file types)\n  // TODO: [Joe] consider moving out of the upload button component so that it can be used where file icons are being displayed\n  covertMimeToIcon(mimeType: string) {\n    switch (mimeType) {\n      case 'application/pdf':\n        return 'pdf';\n      case 'image/jpeg':\n      case 'image/png':\n      case 'image/gif':\n        return 'image';\n      case 'audio/mpeg':\n      case 'audio/mp3':\n      case 'audio/wav':\n        return 'audio';\n      case 'video/mp4':\n      case 'video/webm':\n      case 'video/ogg':\n        return 'video';\n      case 'application/msword':\n        return 'word';\n      default:\n        return 'lines';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".file-upload__input {\n  display: none;\n}\n",
                    "styleUrl": "./file-upload-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container>\n  <sl-button\n    variant=\"default\"\n    class=\"btn-add mt-2 mb-2\"\n    (click)=\"triggerFileUpload(inputId)\"\n  >\n    <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n    {{ buttonText }}\n  </sl-button>\n  <input\n    type=\"file\"\n    [name]=\"inputName\"\n    [id]=\"inputId\"\n    class=\"file-upload__input\"\n    (change)=\"uploadFile($event)\"\n  />\n</ng-container>\n"
        },
        {
            "name": "FormErrorsComponent",
            "id": "component-FormErrorsComponent-cd821e37c624ad06d4e80e987a982e441c390f4f4d995b7e0f7b33e311f3b71f0b6c258a16fe2b827886aec618ddf4c839a65e8ddd1a17ba5218736d9ad28b9b",
            "file": "src/app/shared/components/form-errors/form-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-form-errors",
            "styleUrls": [
                "./form-errors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-errors.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clearErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any | undefined",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IFormErrors",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clearFormErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IFormErrors } from '../../common';\nimport { Store } from '@ngxs/store';\n\n@Component({\n  selector: 'abs-form-errors',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './form-errors.component.html',\n  styleUrls: ['./form-errors.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class FormErrorsComponent implements OnDestroy {\n  @Input() errors!: IFormErrors;\n  @Input() clearErrors: any | undefined;\n  @Input() closable = false;\n\n  constructor(private store: Store) {}\n\n  focusElement(element: string) {\n    const camelCaseElement = element.charAt(0).toLowerCase() + element.slice(1);\n    const el: any = document.querySelector('[id=\"' + camelCaseElement + '\"]');\n    if (el) {\n      el.focus();\n    }\n  }\n\n  clearFormErrors() {\n    if (this.clearErrors) {\n      this.store.dispatch(this.clearErrors);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearFormErrors();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error-message {\n  color: var(--global-danger-darken-60);\n  cursor: pointer;\n  transition: color 0.2s ease;\n  margin: 0;\n  &:hover {\n    color: var(--global-danger-darken-20);\n  }\n\n  + .error-message {\n    margin-top: 0.15rem;\n  }\n}\n",
                    "styleUrl": "./form-errors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div>\n  <sl-alert\n    variant=\"danger\"\n    open\n    [closable]=\"closable\"\n    (sl-hide)=\"clearFormErrors()\"\n  >\n    <sl-icon slot=\"icon\" name=\"exclamation-octagon\"></sl-icon>\n    <p\n      class=\"font-bold error-message\"\n      *ngFor=\"let error of errors | keyvalue\"\n      (click)=\"focusElement(error.key)\"\n      title=\"focus related field\"\n    >\n      {{ error.value.join(', ') }}\n    </p>\n  </sl-alert>\n</div>\n"
        },
        {
            "name": "GmeHistoryComponent",
            "id": "component-GmeHistoryComponent-66ae4951fcd80539da5a8a0cb0a53867064fa2747106087e8b58492c8bf52b3a7fc2e90458600d735ec418b95ff999ba4fa514d590bcaa24cb8bbc72166d9805",
            "file": "src/app/gme-history/gme-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-gme-history",
            "styleUrls": [
                "./gme-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gme-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FullCalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendar'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "calendarFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICalendarFilterValue | undefined",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "calendarFilterOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICalendarFilterOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "calendarOptions",
                    "defaultValue": "{\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }\n          <br>${info.event.extendedProps['programName']}\n          <br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflicts: any[] = [];\n        this.viewConflictsToResolve(conflicts);\n      }\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "calendarReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "clinicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "conflicts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "gmeRotations$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IRotationReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "gmeRotationsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "gmeSummary$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IGmeSummaryReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GraduateMedicalEducationSelectors.graduateMedicalEducationSummary"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "gmeSummaryCols",
                    "defaultValue": "GME_SUMMARY_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "gmeSummaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "gmeSummarySubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "isEditGmeRotation$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "itemizedGme$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "itemizedGmeCols",
                    "defaultValue": "ITEMIZED_GME_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "itemizedGmeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRotationReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "itemizedGridOptions",
                    "defaultValue": "{\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGridOptions",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "maxEndDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "minStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "nonClinicalActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "selectedGmeRotationId$",
                    "defaultValue": "new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "showAddEditGmeRotation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "showConflictResolutionModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "summaryGme$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 169
                }
            ],
            "methodsClass": [
                {
                    "name": "applyCalendarFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteGmeRotation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClinicalActivity",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{ events: any; }",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConflicts",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{ events: any; }",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEventSources",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNonClinicalActivity",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{ events: any; }",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ICalendarFilterValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAddEditGmeRotation",
                    "args": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCalendarFilterChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 433,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initRotationsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initSummaryData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleConflictResolutionModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "viewConflictsToResolve",
                    "args": [
                        {
                            "name": "conflictList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "conflictList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FullCalendarModule",
                    "type": "module"
                },
                {
                    "name": "CollapsePanelComponent",
                    "type": "component"
                },
                {
                    "name": "InputSelectComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "ConflictResolutionModalComponent",
                    "type": "component"
                },
                {
                    "name": "AddRecordModalComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport multiMonthPlugin from '@fullcalendar/multimonth';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { InputSelectComponent } from '../shared/components/base-input/input-select.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { ITEMIZED_GME_COLS } from './itemized-gme-cols';\nimport { GME_SUMMARY_COLS } from './gme-summary-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { ConflictResolutionModalComponent } from './conflict-resolution-modal/conflict-resolution-modal.component';\nimport { IGridOptions } from '../shared/components/grid/grid-options.model';\nimport { AbsFilterType } from '../shared/components/grid/abs-grid.enum';\nimport { AddRecordModalComponent } from './add-record-modal/add-record-modal.component';\nimport { DropdownModule } from 'primeng/dropdown';\n\nimport { FullCalendarComponent } from '@fullcalendar/angular';\n\nimport {\n  GraduateMedicalEducationSelectors,\n  GetGraduateMedicalEducationList,\n  DeleteGraduateMedicalEducation,\n} from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { IRotationReadOnlyModel, IGmeSummaryReadOnlyModel } from 'src/app/api';\n\nexport interface ICalendarFilterValue {\n  value: string;\n  field: string;\n}\nexport interface ICalendarFilter {\n  label: string;\n  value: ICalendarFilterValue;\n}\nexport interface ICalendarFilterOptions {\n  label: string;\n  items: ICalendarFilter[];\n}\n\n@Component({\n  selector: 'abs-gme-history',\n  templateUrl: './gme-history.component.html',\n  styleUrls: ['./gme-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    FormsModule,\n    CommonModule,\n    FullCalendarModule,\n    CollapsePanelComponent,\n    InputSelectComponent,\n    AlertComponent,\n    GridComponent,\n    ModalComponent,\n    ConflictResolutionModalComponent,\n    AddRecordModalComponent,\n    ModalComponent,\n    DropdownModule,\n  ],\n})\nexport class GmeHistoryComponent implements OnInit, OnDestroy {\n  @ViewChild('calendar') calendarComponent!: FullCalendarComponent;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationList)\n  gmeRotations$: Observable<IRotationReadOnlyModel[]> | undefined;\n\n  @Select(GraduateMedicalEducationSelectors.graduateMedicalEducationSummary)\n  gmeSummary$: Observable<IGmeSummaryReadOnlyModel[]> | undefined;\n\n  gmeRotationsSubscription: Subscription | undefined;\n  gmeSummarySubscription: Subscription | undefined;\n\n  calendarReady = false;\n  calendarFilterOptions: ICalendarFilterOptions[] = [];\n  calendarFilter: ICalendarFilterValue | undefined;\n\n  clinicalActivity!: any[];\n  nonClinicalActivity!: any[];\n  conflicts!: any[];\n\n  showConflictResolutionModal = false;\n\n  calendarOptions: CalendarOptions = {\n    height: 'auto',\n    headerToolbar: {\n      start: 'prev',\n      center: '',\n      end: 'next',\n    },\n    eventDisplay: 'background',\n    plugins: [multiMonthPlugin],\n    initialView: 'multiMonthThreeMonth',\n    views: {\n      multiMonthThreeMonth: {\n        type: 'multiMonth',\n        duration: { months: 3 },\n        multiMonthMinWidth: 100,\n        multiMonthTitleFormat: { year: 'numeric', month: 'long' },\n        showNonCurrentDates: false,\n      },\n    },\n    eventContent(info) {\n      let content;\n      let realEnd;\n      if (info.event.end !== null) {\n        realEnd = new Date(info.event.end?.getTime());\n        realEnd.setDate(realEnd.getDate() - 1);\n      }\n      if (info.event.display !== 'list-item') {\n        content = document.createElement('sl-tooltip');\n        let innerContent = `<div slot=\"content\">${info.event.start?.toLocaleDateString()}${\n          info.event.end ? ' - ' + realEnd?.toLocaleDateString() : ''\n        }\n          <br>${info.event.extendedProps['programName']}\n          <br>${info.event.extendedProps['eventTitle']}</div>\n          <div style=\"width: 100%; height: 100%;display:flex;\">`;\n\n        if (info.isStart) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          }\">${info.event.start?.getDate()}</div>`;\n        }\n        if (info.isEnd && info.event.end !== null) {\n          innerContent += `<div class=\"gme-calendar-highlight ${\n            info.event.extendedProps['class']\n          } ml-auto\">${realEnd?.getDate()}</div>`;\n        }\n        innerContent += `</div>`;\n        content.innerHTML = innerContent;\n        const domNodes = [content];\n        return { domNodes: domNodes };\n      } else {\n        content = `<div class=\"fc-daygrid-event-dot\" style=\"border-color: rgb(139, 4, 10);\"></div><div class=\"fc-event-title\">${info.event.title}</div>`;\n        return { html: content };\n      }\n    },\n    eventClick: (info) => {\n      if (info.event.extendedProps['class'] === 'conflict') {\n        const conflicts: any[] = [];\n        this.viewConflictsToResolve(conflicts);\n      }\n    },\n  };\n\n  itemizedGridOptions: IGridOptions = {\n    showFilter: true,\n    filterType: AbsFilterType.Dropdown,\n    placeholder: 'All Clinical Levels',\n    filterOn: 'clinicalLevel',\n    filterOptions: [],\n  };\n  itemizedGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  itemizedGmeCols = ITEMIZED_GME_COLS;\n  itemizedGmeData!: IRotationReadOnlyModel[];\n\n  gmeSummaryCols = GME_SUMMARY_COLS;\n  summaryGme$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n  gmeSummaryData!: any[];\n\n  showAddEditGmeRotation = false;\n  isEditGmeRotation$ = new BehaviorSubject(false);\n  selectedGmeRotationId$ = new BehaviorSubject<\n    { id?: number; nextStart: string } | undefined\n  >(undefined);\n\n  minStartDate: Date | undefined;\n  maxEndDate: Date | undefined;\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService\n  ) {\n    this.initRotationsData();\n    this.initSummaryData();\n  }\n\n  initRotationsData() {\n    this._store.dispatch(new GetGraduateMedicalEducationList());\n\n    this.gmeRotationsSubscription = this.gmeRotations$?.subscribe(\n      (gmeRotations) => {\n        this.clinicalActivity = [];\n        this.nonClinicalActivity = [];\n        this.conflicts = [];\n\n        if (gmeRotations) {\n          this.calendarFilterOptions = [\n            {\n              label: 'Activity Types',\n              items: [\n                {\n                  label: 'Clinical',\n                  value: { value: 'clinical', field: 'type' },\n                },\n                {\n                  label: 'Non-Clinical',\n                  value: { value: 'non-clinical', field: 'type' },\n                },\n                //{ label: 'Conflicts', value: { value: 'conflict', field: 'type' }, },\n              ],\n            },\n            {\n              label: 'Clinical Levels',\n              items: [],\n            },\n          ];\n\n          // set filter options for grid\n          const clinicalFilterOptions: { value: string; label: string }[] = [];\n          const yearFilterOptions: ICalendarFilter[] = [];\n          gmeRotations.forEach((item) => {\n            //get min start date\n            if (this.minStartDate) {\n              if (new Date(item.startDate) < new Date(this.minStartDate)) {\n                this.minStartDate = new Date(item.startDate);\n              }\n            } else {\n              this.minStartDate = new Date(item.startDate);\n            }\n\n            //get max end date\n            if (this.maxEndDate) {\n              if (new Date(item.endDate) > new Date(this.maxEndDate)) {\n                this.maxEndDate = new Date(item.endDate);\n              }\n            } else {\n              this.maxEndDate = new Date(item.endDate);\n            }\n\n            // build filter options for grid\n            if (\n              !clinicalFilterOptions.some(\n                (x) =>\n                  x.value === item.clinicalLevel?.replaceAll(' ', '_').trim()\n              )\n            ) {\n              clinicalFilterOptions.push({\n                value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                label: item.clinicalLevel,\n              });\n              this.calendarFilterOptions[1].items.push({\n                label: item.clinicalLevel,\n                value: {\n                  value: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n                  field: 'clinicalLevel',\n                },\n              });\n            }\n\n            const itemMonth = new Date(item.startDate).getMonth();\n            const itemYear = new Date(item.startDate).getFullYear().toString();\n            let yearFilter = '';\n            // hardcoded to 5 for June\n            if (itemMonth >= 5) {\n              yearFilter = itemYear.concat(\n                ' - ',\n                (parseInt(itemYear) + 1).toString()\n              );\n            } else {\n              yearFilter = (parseInt(itemYear) - 1)\n                .toString()\n                .concat(' - ', itemYear);\n            }\n            if (!yearFilterOptions.some((x) => x.label === yearFilter)) {\n              yearFilterOptions.push({\n                label: yearFilter,\n                value: {\n                  value: yearFilter?.replaceAll(' ', '_').trim(),\n                  field: 'year',\n                },\n              });\n            }\n\n            // build calendar items\n            const endDate = new Date(item.endDate);\n            endDate.setDate(endDate.getDate() + 1);\n            const calendarItem = {\n              id: item.id,\n              start: item.startDate,\n              end: endDate,\n              class: '',\n              color: '',\n              highlightColor: '',\n              eventTitle: item.clinicalLevel,\n              programName: item.programName,\n              type: '',\n              year: yearFilter.replaceAll(' ', '_').trim(),\n              clinicalLevel: item.clinicalLevel?.replaceAll(' ', '_').trim(),\n              allDay: true,\n              rawData: item,\n            };\n\n            if (item.isCredit) {\n              // clinical activity\n              calendarItem.class = 'clinical';\n              calendarItem.color = 'rgba(28, 130, 125, 0.25)';\n              calendarItem.highlightColor = 'rgba(28, 130, 125, 1)';\n              calendarItem.type = 'clinical';\n              this.clinicalActivity.push(calendarItem);\n            } else {\n              // non clinical activity\n              calendarItem.class = 'non-clinical';\n              calendarItem.color = 'rgba(219, 173, 106, 0.25)';\n              calendarItem.highlightColor = 'rgba(219, 173, 106, 1)';\n              calendarItem.type = 'non-clinical';\n              this.nonClinicalActivity.push(calendarItem);\n            }\n          });\n\n          clinicalFilterOptions.sort((a, b) => {\n            return a.label > b.label ? 1 : -1;\n          });\n          this.calendarFilterOptions.push({\n            label: 'Years',\n            items: yearFilterOptions,\n          });\n          this.calendarFilterOptions.forEach((filterOption) => {\n            if (filterOption.label !== 'Activity Types') {\n              filterOption.items.sort(\n                (a: ICalendarFilter, b: ICalendarFilter) => {\n                  return a.label > b.label ? 1 : -1;\n                }\n              );\n            }\n          });\n\n          this.itemizedGridOptions.filterOptions = clinicalFilterOptions;\n\n          this.itemizedGme$.next(!this.itemizedGme$.getValue());\n        }\n\n        this.applyCalendarFilters();\n      }\n    );\n  }\n\n  initSummaryData() {\n    this.gmeSummarySubscription = this.gmeSummary$?.subscribe((gmeSummary) => {\n      console.log('gmeSummary', gmeSummary);\n      if (gmeSummary) {\n        this.summaryGme$.next(!this.summaryGme$.getValue());\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.calendarFilter = undefined;\n    setTimeout(() => {\n      this.calendarOptions.eventSources = [\n        this.getClinicalActivity(),\n        this.getNonClinicalActivity(),\n        //this.getConflicts(),\n      ];\n      this.calendarReady = true;\n    }, 0);\n  }\n  ngOnDestroy(): void {\n    this.gmeRotationsSubscription?.unsubscribe();\n    this.gmeSummarySubscription?.unsubscribe();\n  }\n\n  getClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.clinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getNonClinicalActivity(filters?: ICalendarFilterValue) {\n    return {\n      events: this.nonClinicalActivity.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getConflicts(filters?: ICalendarFilterValue) {\n    // class: 'conflict',\n    // classNames: ['clickable-event'],\n    // color: 'rgba(139, 4, 10, 0.25)',\n    // highlightColor: 'rgba(139, 4, 10, 1)',\n    // eventTitle: 'Rotation Conflict',\n    // type: 'conflict',\n    return {\n      events: this.conflicts.filter((event) => {\n        if (filters) {\n          return filters.value === event[filters.field];\n        } else {\n          return true;\n        }\n      }),\n    };\n  }\n  getEventSources(filters?: ICalendarFilterValue) {\n    return [\n      this.getClinicalActivity(filters),\n      this.getNonClinicalActivity(filters),\n      //this.getConflicts(filters),\n    ];\n  }\n\n  handleAddEditGmeRotation(isEdit = false) {\n    if (!isEdit) {\n      this.isEditGmeRotation$.next(false);\n      this.selectedGmeRotationId$.next({\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n    }\n\n    this.showAddEditGmeRotation = !this.showAddEditGmeRotation;\n    this.itemizedGme$.next(!this.itemizedGme$.getValue());\n  }\n\n  handleGridAction($event: any) {\n    const { data } = $event;\n    if ($event.fieldKey === 'edit') {\n      this.isEditGmeRotation$.next(true);\n      this.selectedGmeRotationId$.next({\n        id: data.id,\n        nextStart: this.maxEndDate?.toISOString() ?? '',\n      });\n      this.handleAddEditGmeRotation(true);\n    } else if ($event.fieldKey === 'delete') {\n      this.globalDialogService\n        .showConfirmation(\n          'Confirm Delete',\n          'Are you sure you want to delete this record?'\n        )\n        .then((result) => {\n          if (result) {\n            this.deleteGmeRotation(data.id);\n          }\n        });\n    }\n  }\n\n  deleteGmeRotation(id: number) {\n    this._store.dispatch(new DeleteGraduateMedicalEducation(id));\n  }\n\n  handleCalendarFilterChange($event: any) {\n    if ($event.value) {\n      this.calendarFilter = $event.value;\n    } else {\n      this.calendarFilter = undefined;\n    }\n\n    this.applyCalendarFilters();\n  }\n\n  applyCalendarFilters() {\n    if (this.calendarComponent) {\n      const calendarApi = this.calendarComponent.getApi();\n      // clear calendar of events\n      calendarApi.getEventSources().forEach((eventSource) => {\n        eventSource.remove();\n      });\n      // refetch all calendar events from sources using new filter value\n      const sources = this.getEventSources(this.calendarFilter);\n      sources.forEach((source) => {\n        calendarApi.addEventSource(source);\n      });\n\n      let firstDate: Date | string | null = null;\n      calendarApi.getEvents().forEach((event) => {\n        if (!firstDate) {\n          firstDate = event.start;\n        } else {\n          if (event.start && event.start < firstDate) {\n            firstDate = event.start;\n          }\n        }\n      });\n      if (firstDate && this.calendarFilter) {\n        calendarApi.gotoDate(firstDate);\n      } else {\n        calendarApi.today();\n      }\n    }\n  }\n\n  viewConflictsToResolve(conflictList: any[]) {\n    console.log(conflictList);\n    this.toggleConflictResolutionModal();\n  }\n  toggleConflictResolutionModal() {\n    this.showConflictResolutionModal = !this.showConflictResolutionModal;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-button[variant='text'].btn-link::part(label) {\n  text-transform: unset !important;\n  text-decoration: underline;\n  padding: 0 0.5rem;\n}\n\n.grid {\n  position: relative;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.legend {\n  position: relative;\n  right: 0;\n  margin-left: auto;\n  text-align: right;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.clinical {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.non-clinical {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.conflict {\n      color: var(--global-danger);\n      .i {\n        background-color: var(--global-danger);\n      }\n    }\n  }\n}\n\n.table-sm {\n  font-size: 0.9rem;\n}\n\n.calendar-filter-container {\n  width: 200px;\n}\n",
                    "styleUrl": "./gme-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 179,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<header>\n  <h1>Graduate Medical Education (GME)</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <div slot=\"header\">\n          My GME rotations\n          <span class=\"block font-normal text-base\"\n            >Date Range Covered:\n            {{ minStartDate | date : 'yyyy-MM-dd' }} through\n            {{ maxEndDate | date : 'yyyy-MM-dd' }}</span\n          >\n        </div>\n        <div class=\"grid\">\n          <div class=\"col-12 flex align-items-center\">\n            <div class=\"calendar-filter-container\">\n              <p-dropdown\n                placeholder=\"View All Rotations\"\n                [options]=\"calendarFilterOptions\"\n                id=\"calendarFilter\"\n                [group]=\"true\"\n                (onChange)=\"handleCalendarFilterChange($event)\"\n                [showClear]=\"true\"\n                appendTo=\"body\"\n              >\n                <ng-template let-group pTemplate=\"group\">\n                  <strong>{{ group.label }}</strong>\n                </ng-template>\n              </p-dropdown>\n            </div>\n\n            <sl-button\n              variant=\"default\"\n              class=\"btn-add mt-2 mb-2\"\n              (click)=\"handleAddEditGmeRotation()\"\n            >\n              <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n              add a record\n            </sl-button>\n\n            <div class=\"legend inline-flex justify-content-end flex-wrap\">\n              <div class=\"l flex align-items-center clinical\">\n                <div class=\"i\"></div>\n                Clinical Activity\n              </div>\n              <div class=\"l flex align-items-center non-clinical\">\n                <div class=\"i\"></div>\n                Non-Clinical Activity\n              </div>\n              <!-- conflicts legend key -->\n              <!-- <div class=\"l flex align-items-center conflict\">\n                <div class=\"i\"></div>\n                Conflict\n              </div> -->\n            </div>\n          </div>\n\n          <div class=\"col-12\" *ngIf=\"calendarReady\">\n            <full-calendar\n              #calendar\n              class=\"gme-rotations-calendar\"\n              [options]=\"calendarOptions\"\n            ></full-calendar>\n          </div>\n\n          <!-- conflict alert banner -->\n          <!-- <div class=\"col-12\">\n            <abs-alert alertType=\"danger\" [fontSize]=\"1\">\n              <span class=\"font-normal\"\n                >You have a conflict - two of your rotates conflict with each\n                other. Lorem ipsum dolor iset!</span\n              >\n              <sl-button\n                class=\"btn-link\"\n                variant=\"text\"\n                (click)=\"viewConflictsToResolve(conflicts)\"\n                >View Details</sl-button\n              >\n            </abs-alert>\n          </div> -->\n        </div>\n      </sl-card>\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel\n          [panelId]=\"2\"\n          [startExpanded]=\"true\"\n          [editToggle]=\"summaryGme$\"\n          class=\"table-sm\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>GME Summary</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p>\n                The table below is a summary, by residency level, of your\n                clinical experience based on the dates you entered in the table\n                above. Columns 2 through 4 summarize the number of weeks of\n                clinical experience during each year of residency. Column 5 is a\n                total of weeks per residency year, of rotations devoted to the\n                content areas of surgery. Column 6 summarizes chief resident\n                year rotations also devoted to the content areas of surgery.\n              </p>\n              <abs-grid\n                class=\"margin-bottom-2\"\n                [columns]=\"gmeSummaryCols\"\n                [data]=\"gmeSummary$\"\n                [showGridLines]=\"false\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n\n      <sl-card class=\"col-12\">\n        <abs-collapse-panel\n          [panelId]=\"1\"\n          [startExpanded]=\"true\"\n          [editToggle]=\"itemizedGme$\"\n          class=\"table-sm\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>Itemized GME</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <p>\n                Document all GME rotations completely, without any gaps\n                throughout your training years. Your program director must\n                attest to the accuracy of your rotations, and you will be able\n                to request an attestation from your PD upon completion of this\n                section.\n              </p>\n              <sl-button\n                variant=\"default\"\n                class=\"btn-add mb-5 absolute\"\n                (click)=\"handleAddEditGmeRotation()\"\n              >\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD A RECORD\n              </sl-button>\n              <abs-grid\n                class=\"margin-bottom-2\"\n                [columns]=\"itemizedGmeCols\"\n                [data]=\"gmeRotations$\"\n                [gridOptions]=\"itemizedGridOptions\"\n                (action)=\"handleGridAction($event)\"\n                [pagination]=\"true\"\n                [itemsPerPage]=\"5\"\n              ></abs-grid>\n              <abs-modal\n                [open]=\"showAddEditGmeRotation\"\n                title=\"{{\n                  (isEditGmeRotation$ | async) ? 'Edit' : 'Add'\n                }} Graduate Medical Education Record\"\n                modalName=\"addGmeRotation\"\n                (closeDialog)=\"handleAddEditGmeRotation()\"\n                [hideClose]=\"true\"\n                [preventOverlayClose]=\"true\"\n              >\n                <abs-add-record-modal\n                  [isEdit$]=\"isEditGmeRotation$\"\n                  [slectedGmeRotationId$]=\"selectedGmeRotationId$\"\n                  (closeDialog)=\"handleAddEditGmeRotation()\"\n                ></abs-add-record-modal>\n              </abs-modal>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n    </div>\n\n    <abs-modal\n      [open]=\"showConflictResolutionModal\"\n      (closeDialog)=\"toggleConflictResolutionModal()\"\n      title=\"Resolve Conflicts\"\n      modalName=\"conflictResolutionModal\"\n      [hideClose]=\"true\"\n      [preventOverlayClose]=\"true\"\n      [width]=\"80\"\n    >\n      <abs-conflict-resolution-modal\n        (closeDialog)=\"toggleConflictResolutionModal()\"\n      >\n      </abs-conflict-resolution-modal>\n    </abs-modal>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading gme rotations...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "GraduateMedicalEducationModalComponent",
            "id": "component-GraduateMedicalEducationModalComponent-79b773fa8f433868b5ad8d46d9bdb313087d8998913d3a4439ddb327de699b9c6edc963675e4f9fbd31f180dd1b02be9f5461e965b5f622323b70672c0af84a6",
            "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-graduate-medical-education-modal",
            "styleUrls": [
                "./graduate-medical-education-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./graduate-medical-education-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "graduateMedicalEducationCols",
                    "defaultValue": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "graduateMedicalEducationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGraduateMedicalEducationData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { GRADUATE_MEDICAL_EDUCATION_GRID_COLS } from './graduate-medical-education-cols';\n\n@Component({\n  selector: 'abs-graduate-medical-education-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent],\n  templateUrl: './graduate-medical-education-modal.component.html',\n  styleUrls: ['./graduate-medical-education-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GraduateMedicalEducationModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  graduateMedicalEducationCols = GRADUATE_MEDICAL_EDUCATION_GRID_COLS;\n  graduateMedicalEducationData!: any;\n\n  ngOnInit(): void {\n    this.getGraduateMedicalEducationData();\n  }\n\n  getGraduateMedicalEducationData() {\n    this.graduateMedicalEducationData = [\n      {\n        from: new Date('09/29/15'),\n        to: new Date('10/29/16'),\n        weeks: 4,\n        programName: 'AZ - University of Arizona [0017]',\n        affiliatedInstitute: '',\n        clinicalLevel: 'Clinical Level 1',\n        internationalRotation: 'No',\n      },\n    ];\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'graduateMedicalEducationModal' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./graduate-medical-education-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mb-5\">\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n</div>\n<sl-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add a Record</span>\n</sl-button>\n<abs-grid\n  [columns]=\"graduateMedicalEducationCols\"\n  [data]=\"graduateMedicalEducationData\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button type=\"button\" style=\"width: 337px\" variant=\"primary\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-ef202065cb263a75285fd7e2ba37cc923535b50b4487ba857653ce101184cb38abcd4c0381237ce4e8c216c3dfd05cece63ac9e82bd8b5615523c80921696271",
            "file": "src/app/shared/components/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-grid",
            "styleUrls": [
                "./grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "expandTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "gridOptions",
                    "defaultValue": "{\n    showFilter: false,\n    filterOn: '',\n    filterType: AbsFilterType.Text,\n    filterOptions: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "IGridOptions",
                    "decorators": []
                },
                {
                    "name": "itemsPerPage",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pagination",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showGridLines",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "AbsGridCellRendererType",
                    "defaultValue": "AbsGridCellRendererType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "filteredData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "firstPageDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "lastPageDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "localData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "nextPageDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "previousPageDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "searchText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPagedData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "GridAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "GridAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleExpand",
                    "args": [
                        {
                            "name": "action",
                            "type": "GridAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "GridAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPagintion",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGridFilterChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumnSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPaginationActions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortColumn",
                    "args": [
                        {
                            "name": "a",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "1 | 0 | -1",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbsFilterType, AbsGridCellRendererType } from './abs-grid.enum';\nimport { IGridOptions } from './grid-options.model';\nimport { isObservable } from 'rxjs';\n\ninterface GridAction {\n  data: any;\n  fieldKey: string;\n  onClick: (data: unknown) => void;\n}\n\n@Component({\n  selector: 'abs-grid',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class GridComponent implements OnInit {\n  @Input() data!: any;\n  @Input() columns!: any;\n  @Input() actions!: any;\n  @Input() title!: string;\n  @Input() subTitle!: string;\n  @Input() gridOptions: IGridOptions = {\n    showFilter: false,\n    filterOn: '',\n    filterType: AbsFilterType.Text,\n    filterOptions: [],\n  };\n  @Input() pagination = false;\n  @Input() expandTemplate!: any;\n  @Input() currentPage = 1;\n  @Input() itemsPerPage = 5;\n  @Input() showGridLines = true;\n\n  @Output() action: EventEmitter<unknown> = new EventEmitter();\n\n  pages: number[] = [];\n  AbsGridCellRendererType = AbsGridCellRendererType;\n  searchText!: string;\n  localData: Array<any> = [];\n  filteredData: Array<any> = [];\n\n  previousPageDisabled!: boolean;\n  firstPageDisabled!: boolean;\n  nextPageDisabled!: boolean;\n  lastPageDisabled!: boolean;\n\n  ngOnInit() {\n    if (isObservable(this.data)) {\n      this.data.subscribe((data: any) => {\n        this.localData = data ?? [];\n        this.filteredData = data ?? [];\n        this.initPagintion(this.localData);\n      });\n    } else {\n      this.localData = this.data;\n      this.filteredData = this.data;\n      this.initPagintion(this.data);\n    }\n  }\n\n  initPagintion(data: any[]) {\n    if (this.pagination) {\n      const total = data?.length ?? 0;\n      const pagesCount = Math.ceil(total / this.itemsPerPage);\n      this.pages = [...Array(pagesCount).keys()].map((i) => i + 1);\n\n      this.setPaginationActions();\n    }\n  }\n\n  setPaginationActions() {\n    this.previousPageDisabled = this.currentPage === 1;\n    this.firstPageDisabled =\n      this.previousPageDisabled ||\n      this.pages.length <= 2 ||\n      this.currentPage <= 2;\n\n    this.nextPageDisabled = this.currentPage === this.pages.length;\n    this.lastPageDisabled = this.nextPageDisabled;\n  }\n\n  changePage(page: number) {\n    this.currentPage = page;\n\n    this.setPaginationActions();\n  }\n\n  getPagedData(data: any[]) {\n    let sortedData = data;\n    if (data?.length > 0) {\n      sortedData = [...data];\n      sortedData.sort(this.sortColumn.bind(this));\n    }\n    if (this.pagination) {\n      return sortedData.slice(\n        (this.currentPage - 1) * this.itemsPerPage,\n        this.currentPage * this.itemsPerPage\n      );\n    } else {\n      return sortedData;\n    }\n  }\n\n  handleAction(action: GridAction, data: unknown) {\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  handleExpand(action: GridAction, data: any) {\n    data.expanded = !data.expanded;\n    action['data'] = data;\n    this.action.emit(action);\n  }\n\n  setColumnSort(column: any) {\n    this.columns.forEach((col: any) => {\n      if (col.field === column.field) {\n        col.sort =\n          column.sort === 'asc'\n            ? 'desc'\n            : column.sort === 'desc'\n            ? null\n            : 'asc';\n      } else {\n        col.sort = null;\n      }\n    });\n  }\n\n  sortColumn(a: any, b: any) {\n    const sortColumn = this.columns?.find((col: any) => col.sort);\n    if (sortColumn) {\n      if (sortColumn.sort === 'asc') {\n        return a[sortColumn.field] > b[sortColumn.field] ? 1 : -1;\n      } else {\n        return a[sortColumn.field] < b[sortColumn.field] ? 1 : -1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  onGridFilterChange($event: any) {\n    const value =\n      this.gridOptions.filterType === AbsFilterType.Text\n        ? $event?.target.value\n        : $event?.target.displayLabel;\n\n    this.filteredData = this.localData.filter((item: any) =>\n      item[this.gridOptions.filterOn]\n        .toLowerCase()\n        .includes(value.toLowerCase())\n    );\n\n    if (this.pagination) {\n      this.initPagintion(this.filteredData);\n      this.changePage(1);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid {\n  margin-top: 2rem;\n}\n.abs-grid-container {\n  overflow-x: auto;\n  padding: 0 0.5rem;\n  margin-top: 1.5rem;\n  background-color: var(--global-table-background);\n\n  &::-webkit-scrollbar {\n    height: 0.65rem;\n  }\n  &::-webkit-scrollbar-track {\n    background: var(--global-warning-lighten-60);\n  }\n  &::-webkit-scrollbar-thumb {\n    background: var(--global-warning);\n    &:hover {\n      background: var(--global-warning-darken-20);\n    }\n  }\n}\n\n.bg-gray {\n  overflow-x: auto;\n}\n\n.pagination,\n.bg-gray,\ntable {\n  background-color: var(--global-table-background);\n}\n\n.pagination {\n  padding: 1.5rem 0.5rem 0.75rem;\n  .active {\n    color: var(--global-warning);\n    font-weight: bold;\n    cursor: unset;\n  }\n  button:disabled {\n    color: var(--global-gray);\n    cursor: initial;\n  }\n}\n\ntable {\n  width: 100%;\n  text-align: left;\n\n  border-radius: 6px;\n  margin-top: 1rem;\n  &.no-grid-lines {\n    border-spacing: 0px;\n  }\n  thead {\n    position: relative;\n    &::after {\n      content: '';\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 1px;\n      background-color: var(--global-primary);\n    }\n  }\n  th,\n  td {\n    padding: 15px;\n    min-width: 50px;\n  }\n  tr {\n    //figure out how to use nth-of-type(even) to skip expanded rows\n    &.alternate-row {\n      background-color: #fff;\n    }\n    // &:nth-child(even) {\n    //   background-color: #fff;\n    // }\n  }\n  td {\n    .action,\n    .expand-toggle {\n      text-align: right;\n    }\n  }\n}\n\nbutton {\n  background: none;\n  border: none;\n  font-size: 1rem;\n  text-transform: capitalize;\n  font-weight: 500;\n  cursor: pointer;\n  color: var(--global-success);\n  transition: 250ms ease-in-out;\n  &:hover {\n    color: var(--global-warning);\n  }\n  &.file-link {\n    text-transform: none;\n  }\n}\n\n.search-container {\n  position: relative;\n  i {\n    position: absolute;\n    color: var(--global-warning);\n    font-size: 20px;\n    right: 10px;\n    top: 10px;\n  }\n}\n\nsl-input {\n  margin-bottom: 1rem;\n  &::part(input) {\n    padding-right: 40px;\n  }\n}\n\n.requested {\n  color: var(--global-warning);\n  font-weight: bold;\n}\n.approved {\n  color: var(--global-success);\n  font-weight: bold;\n}\n\n.failed {\n  color: var(--global-danger);\n  font-weight: bold;\n}\n.passed {\n  color: var(--global-success);\n  font-weight: bold;\n}\n",
                    "styleUrl": "./grid.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"abs-grid\">\n  <div\n    class=\"flex justify-content-between\"\n    *ngIf=\"title || gridOptions.showFilter\"\n  >\n    <h4>{{ title }}</h4>\n    <div class=\"search-container\" *ngIf=\"gridOptions.showFilter\">\n      <div class=\"text-search\" *ngIf=\"gridOptions.filterType === 'text'\">\n        <sl-input\n          [placeholder]=\"gridOptions.placeholder ?? 'Search'\"\n          (keyup)=\"onGridFilterChange($event)\"\n        ></sl-input>\n        <i class=\"fa-solid fa-search\"></i>\n      </div>\n      <div\n        class=\"dropdown-search\"\n        *ngIf=\"gridOptions.filterType === 'dropdown'\"\n      >\n        <sl-select\n          (sl-change)=\"onGridFilterChange($event)\"\n          [placeholder]=\"gridOptions.placeholder ?? 'Search'\"\n          clearable\n        >\n          <sl-option\n            [value]=\"option.value\"\n            *ngFor=\"let option of gridOptions.filterOptions\"\n          >\n            {{ option.label }}\n          </sl-option>\n        </sl-select>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"abs-grid-container\">\n    <table class=\"abs-table {{ showGridLines ? '' : 'no-grid-lines' }}\">\n      <thead>\n        <tr>\n          <th\n            *ngFor=\"let c of columns\"\n            [style.max-width]=\"c.width + 'px'\"\n            [style.min-width]=\"c.width ? 'unset' : ''\"\n          >\n            <div\n              class=\"flex justify-content-between\"\n              *ngIf=\"\n                c.cellRenderer !== AbsGridCellRendererType.Button &&\n                c.cellRenderer !== AbsGridCellRendererType.ExpandToggle\n              \"\n            >\n              <span>{{ c.headerName }}</span>\n              <button\n                (click)=\"setColumnSort(c)\"\n                class=\"pl-1 pr-0\"\n                *ngIf=\"c.sortable\"\n              >\n                <i class=\"fa-solid fa-sort\" *ngIf=\"!c.sort\"></i>\n                <i class=\"fa-solid fa-sort-up\" *ngIf=\"c.sort === 'asc'\"></i>\n                <i class=\"fa-solid fa-sort-down\" *ngIf=\"c.sort === 'desc'\"></i>\n              </button>\n            </div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-container\n          *ngFor=\"let r of getPagedData(filteredData); let i = index\"\n        >\n          <tr\n            class=\"{{ r.rowClass }}\"\n            [ngClass]=\"{ 'alternate-row': i % 2 === 1 }\"\n            [ngStyle]=\"r.rowStyle\"\n          >\n            <td\n              *ngFor=\"let c of columns\"\n              class=\"abs-grid-col\"\n              [style.max-width]=\"c.width + 'px'\"\n              [style.min-width]=\"c.width ? 'unset' : ''\"\n            >\n              <div *ngIf=\"!c.cellRenderer\">\n                {{ r[c.field] }}\n              </div>\n              <div *ngIf=\"c.cellRenderer === AbsGridCellRendererType.YesNo\">\n                {{ r[c.field] ? 'Yes' : 'No' }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.Button\"\n                class=\"action\"\n              >\n                <button (click)=\"handleAction(c.cellRendererParams, r)\">\n                  <i [class]=\"c.icon\" *ngIf=\"c.icon\"></i>\n                  {{ c.headerName }}\n                </button>\n              </div>\n              <div *ngIf=\"c.cellRenderer === AbsGridCellRendererType.FileLink\">\n                <button\n                  class=\"file-link\"\n                  (click)=\"handleAction(c.cellRendererParams, r)\"\n                >\n                  <!-- TODO: [Joe] need to check what file types we are supporting and ensure that there are font awesome icons for all of them -->\n                  <i\n                    [class]=\"'fa-solid fa-file-' + r[c.fileType]\"\n                    *ngIf=\"c.fileType\"\n                  ></i>\n                  <i class=\"fa-solid fa-file\" *ngIf=\"!c.fileType\"></i>\n                  {{ r[c.field] }}\n                </button>\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.DateFormatter\"\n                [class]=\"c.cellClass\"\n              >\n                {{ r[c.field] | date : 'MM/dd/yyyy' }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.CustomClass\"\n                [class]=\"c.cellClass(r[c.field]).toLowerCase()\"\n              >\n                {{ r[c.field] }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.CustomStyle\"\n                [style]=\"c.style(r[c.field])\"\n              >\n                {{ c.cellStyle }}\n                {{ r[c.field] }}\n              </div>\n              <div\n                *ngIf=\"c.cellRenderer === AbsGridCellRendererType.ExpandToggle\"\n                class=\"expand-toggle\"\n              >\n                <button\n                  (click)=\"handleExpand(c.cellRendererParams, r)\"\n                  style=\"min-width: 95px\"\n                >\n                  <i class=\"fa-solid fa-circle-minus\" *ngIf=\"r.expanded\"></i>\n                  <i class=\"fa-solid fa-circle-plus\" *ngIf=\"!r.expanded\"></i>\n                  {{ r.expanded ? 'Collapse' : 'Expand' }}\n                </button>\n              </div>\n            </td>\n          </tr>\n          <tr\n            [ngClass]=\"{ 'expanded-row': true, 'alternate-row': i % 2 === 1 }\"\n            *ngIf=\"expandTemplate && r.expanded\"\n          >\n            <!-- <ng-container *ngTemplateOutlet=\"expandTemplate; context: { $implicit: r }\"></ng-container> -->\n            <td [attr.colspan]=\"columns.length\">\n              <ng-container\n                *ngTemplateOutlet=\"expandTemplate; context: { $implicit: r }\"\n              ></ng-container>\n            </td>\n          </tr>\n        </ng-container>\n      </tbody>\n    </table>\n  </div>\n\n  <div\n    class=\"pagination flex justify-content-end\"\n    *ngIf=\"pagination && pages.length > 1\"\n  >\n    <div>\n      <button [disabled]=\"firstPageDisabled\" (click)=\"changePage(1)\">\n        <i class=\"fa-solid fa-angles-left\"></i>\n      </button>\n      <button\n        [disabled]=\"previousPageDisabled\"\n        (click)=\"changePage(currentPage - 1)\"\n      >\n        <i class=\"fa-solid fa-angle-left\"></i>\n      </button>\n      <button\n        *ngFor=\"let p of pages\"\n        [class.active]=\"p === currentPage\"\n        (click)=\"changePage(p)\"\n      >\n        {{ p }}\n      </button>\n      <button\n        [disabled]=\"nextPageDisabled\"\n        (click)=\"changePage(currentPage + 1)\"\n      >\n        <i class=\"fa-solid fa-angle-right\"></i>\n      </button>\n      <button [disabled]=\"lastPageDisabled\" (click)=\"changePage(pages.length)\">\n        <i class=\"fa-solid fa-angles-right\"></i>\n      </button>\n    </div>\n  </div>\n  <div class=\"bg-gray\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HighlightCardComponent",
            "id": "component-HighlightCardComponent-67493f0f6fd94aa9765b5c5c348405d60ba09e485e437ee1719ce6eca1d644c8d9516b79d36babedc12d48550eaa95678679eebf1dc978300e96d42d479495c6",
            "file": "src/app/shared/components/highlight-card/highlight-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-highlight-card",
            "styleUrls": [
                "./highlight-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./highlight-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "imageStyleUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "buildImageStyleUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAlertClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\n\n@Component({\n  selector: 'abs-highlight-card',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './highlight-card.component.html',\n  styleUrls: ['./highlight-card.component.scss'],\n})\nexport class HighlightCardComponent implements OnInit {\n  @Input() alert: any;\n  imageStyleUrl!: string;\n  alertClass!: string;\n\n  constructor(private _router: Router) {}\n\n  ngOnInit(): void {\n    this.buildImageStyleUrl();\n    this.setAlertClass();\n  }\n\n  buildImageStyleUrl() {\n    this.imageStyleUrl = `background-image:url(${this.alert?.image ?? ''})`;\n  }\n\n  setAlertClass() {\n    this.alertClass = `highlight-card ${this.alert?.alert ? 'alert' : ''}`;\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".highlight-card {\n  background-color: #e5eff1;\n  border-radius: 6px;\n  position: relative;\n  display: flex;\n  height: 100%;\n  position: relative;\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .title {\n      color: var(--global-danger);\n    }\n  }\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  .alert-title,\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n  .img-container {\n    width: 25.75rem;\n    background-size: cover;\n    background-repeat: no-repeat;\n    border-radius: 6px 0 0 6px;\n  }\n  .highlight-content {\n    padding: 3rem 1.5rem;\n    .content {\n      line-height: 23px;\n    }\n  }\n}\n",
                    "styleUrl": "./highlight-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "router": {
                    "name": "router",
                    "getSignature": {
                        "name": "router",
                        "type": "",
                        "returnType": "Router",
                        "line": 32
                    }
                }
            },
            "templateData": "<div [class]=\"alertClass\">\n  <a class=\"hotspot\" [routerLink]=\"alert?.action\" *ngIf=\"alert?.action\"></a>\n  <div class=\"img-container\" [style]=\"imageStyleUrl\"></div>\n  <div class=\"highlight-content\">\n    <div class=\"alert-title\" *ngIf=\"alert?.alert\">Alerts and Notices</div>\n    <div class=\"title\">{{ alert?.title }}</div>\n    <div class=\"content\">{{ alert?.content }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "InputCheckboxComponent",
            "id": "component-InputCheckboxComponent-06136c7078dd93ee8527eeb81832b96e1d9233b49eda6504cc878f6b39aeb54c2ee8e74259860a6b1c07caac1aff14219b7e185a331087043fa057b6cef820cd",
            "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MakeProvider(InputCheckboxComponent)",
                    "type": "component"
                }
            ],
            "selector": "abs-input-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "<sl-checkbox\n  #checkbox\n  [name]=\"name\"\n  [value]=\"_value\"\n  [size]=\"size\"\n  [disabled]=\"disabled\"\n  [checked]=\"checked\"\n  [defaultChecked]=\"defaultChecked\"\n  [indeterminate]=\"indeterminate\"\n  [form]=\"form\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n  ><ng-content></ng-content\n></sl-checkbox>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "defaultChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "_defaultChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_indeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "checkbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'checkbox'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methodsClass": [
                {
                    "name": "mapChangeEvent",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-checkbox',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-checkbox\n      #checkbox\n      [name]=\"name\"\n      [value]=\"_value\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [checked]=\"checked\"\n      [defaultChecked]=\"defaultChecked\"\n      [indeterminate]=\"indeterminate\"\n      [form]=\"form\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n      ><ng-content></ng-content\n    ></sl-checkbox>\n  `,\n  providers: [MakeProvider(InputCheckboxComponent)],\n})\nexport class InputCheckboxComponent implements ControlValueAccessor {\n  @ViewChild('checkbox') checkbox: any;\n\n  @Input() name: string | undefined;\n  @Input() form = '';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value = false;\n  _disabled: boolean | string = false;\n  _checked: boolean | string = false;\n  _defaultChecked: boolean | string = false;\n  _indeterminate: boolean | string = false;\n  _required: boolean | string = false;\n\n  @Input()\n  get value(): boolean {\n    return this._value;\n  }\n  set value(value: boolean) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n  @Input()\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  set disabled(value: boolean | string) {\n    this._disabled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get checked(): boolean | string {\n    return this._checked;\n  }\n  set checked(value: boolean | string) {\n    this._checked = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get defaultChecked(): boolean | string {\n    return this._defaultChecked;\n  }\n  set defaultChecked(value: boolean | string) {\n    this._defaultChecked = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get indeterminate(): boolean | string {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean | string) {\n    this._indeterminate = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  writeValue(value: any) {\n    this._value = this.checked = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  onChange = (e: any) => {\n    // console.log('checkbox onChange', e);\n  };\n  onTouched = () => {\n    // console.log('checkbox onTouched');\n  };\n  registerOnChange(fn: (e: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the Shoelace input work with Angular forms\n  mapChangeEvent($event: any) {\n    this.value = this.checked = !this.value;\n  }\n}\n\n/*\nSHOELACE CHECKBOX API\nAttributes & Properties\nName\tDescription\tReflects\tType\tDefault\nname\tThe name of the checkbox, submitted as a name/value pair with form data.\t\tstring\t''\nvalue\tThe current value of the checkbox, submitted as a name/value pair with form data.\t\tstring\t-\nsize\tThe checkbox's size.\t\t'small' | 'medium' | 'large'\t'medium'\ndisabled\tDisables the checkbox.\t\tboolean\tfalse\nchecked\tDraws the checkbox in a checked state.\t\tboolean\tfalse\nindeterminate\tDraws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select all/none\" behavior when associated checkboxes have a mix of checked and unchecked states.\t\tboolean\tfalse\ndefaultChecked\n(property only)\tThe default value of the form control. Primarily used for resetting the form control.\t\tboolean\tfalse\nform\tBy default, form controls are associated with the nearest containing <form> element. This attribute allows you to place the form control outside of a form and associate it with the form that has this id. The form must be in the same document or shadow root for this to work.\t\tstring\t''\nrequired\tMakes the checkbox a required field.\t\tboolean\tfalse\nvalidity\n(property only)\tGets the validity state object\t\t-\t-\nvalidationMessage\n(property only)\tGets the validation message\t\t-\t-\nupdateComplete\tA read-only promise that resolves when the component has finished updating.\nLearn more about attributes and properties.\n\nEvents\nName\tDescription\tEvent Detail\nsl-blur\tEmitted when the checkbox loses focus.\t-\nsl-change\tEmitted when the checked state changes.\t-\nsl-focus\tEmitted when the checkbox gains focus.\t-\nsl-input\tEmitted when the checkbox receives input.\t-\nsl-invalid\tEmitted when the form control has been checked for validity and its constraints aren't satisfied.\t-\nLearn more about listening to events.\n\nMethods\nName\tDescription\tArguments\nclick()\tSimulates a click on the checkbox.\t-\nfocus()\tSets focus on the checkbox.\noptions: FocusOptions\n\nblur()\tRemoves focus from the checkbox.\t-\ncheckValidity()\tChecks for validity but does not show a validation message. Returns true when valid and false when invalid.\t-\ngetForm()\tGets the associated form, if one exists.\t-\nreportValidity()\tChecks for validity and shows the browser's validation message if the control is invalid.\t-\nsetCustomValidity()\tSets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear the custom validation message, call this method with an empty string.\nmessage: string\n */\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 62
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 75,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 72
                    }
                },
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 79
                    }
                },
                "defaultChecked": {
                    "name": "defaultChecked",
                    "setSignature": {
                        "name": "defaultChecked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "defaultChecked",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 87
                    }
                },
                "indeterminate": {
                    "name": "indeterminate",
                    "setSignature": {
                        "name": "indeterminate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "indeterminate",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 95
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 102
                    }
                }
            }
        },
        {
            "name": "InputRadioGroupComponent",
            "id": "component-InputRadioGroupComponent-fd27e028a0f263a21a72c9d79d902346545d46204363498ed664c1a29bedc5df5950f8725b0936239013ff4f665bf6408b33e115250787360a8c38d9bf79011f",
            "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MakeProvider(InputRadioGroupComponent)",
                    "type": "component"
                }
            ],
            "selector": "abs-input-radio-group",
            "styleUrls": [],
            "styles": [],
            "template": "<sl-radio-group\n  [name]=\"name\"\n  [label]=\"label\"\n  [value]=\"value\"\n  [size]=\"size\"\n  [form]=\"form\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n>\n  <ng-content></ng-content>\n</sl-radio-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "radioGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'radioGroup'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "mapChangeEvent",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "e",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\n// This makes the component into a form control by forwarding the value accessor\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-radio-group',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-radio-group\n      [name]=\"name\"\n      [label]=\"label\"\n      [value]=\"value\"\n      [size]=\"size\"\n      [form]=\"form\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n    >\n      <ng-content></ng-content>\n    </sl-radio-group>\n  `,\n  providers: [MakeProvider(InputRadioGroupComponent)], // Super important\n})\nexport class InputRadioGroupComponent implements ControlValueAccessor {\n  @ViewChild('radioGroup') radioGroup: any;\n\n  // Implement the API for the specific form control.\n  @Input() name: string | undefined;\n  @Input() label = '';\n  @Input() form = '';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value: any = '';\n  _required: boolean | string = false;\n  @Input()\n  get value(): string | undefined {\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n\n  // For attributes that can have a shorthand, get/set functions are needed\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  // This method is fired when the control is initially written by the form\n  // control. This is where you want to write the initial value to the\n  // component.\n  // This mainly made a big difference for checkboxes and radio buttons\n  writeValue(value: any) {\n    this._value = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  // Some of these are left empty but are here to satisfy the interface...\n  // I think\n  onChange = (e: any) => {\n    // console.log('onChange');\n  };\n  onTouched = () => {\n    // console.log('onTouched');\n  };\n  // Very important\n  registerOnChange(fn: (e: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the input work with Angular forms\n  // It is basically a listener for the sl-change event to do what is needed for the\n  // form.\n  mapChangeEvent($event: any) {\n    const target = $event.target as HTMLSelectElement;\n    this.value = target.value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 57
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "InputSelectComponent",
            "id": "component-InputSelectComponent-51ad9b3500c54ca2fabb5c22d27dbcd80cb55ea565246503f707129974fc45f1cf097e3c7240ef81c8a04cd79d0b79670b8dff920537d73568f987a5d101f68e",
            "file": "src/app/shared/components/base-input/input-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MakeProvider(InputSelectComponent)",
                    "type": "component"
                }
            ],
            "selector": "abs-input-select",
            "styleUrls": [],
            "styles": [],
            "template": "<sl-select\n  [name]=\"name\"\n  [placeholder]=\"placeholder\"\n  [label]=\"label\"\n  [value]=\"value\"\n  [size]=\"size\"\n  [multiple]=\"multiple\"\n  [open]=\"open\"\n  [hoist]=\"hoist\"\n  [form]=\"form\"\n  [clearable]=\"clearable\"\n  [disabled]=\"disabled\"\n  [helpText]=\"helpText\"\n  [required]=\"required\"\n  (sl-change)=\"mapChangeEvent($event)\"\n>\n  <ng-content></ng-content>\n</sl-select>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clearable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "displaytext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "filled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 128,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hoist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "pill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 135,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"top\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "boolean | string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_clearable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "_filled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "_hoist",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "_multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "_pill",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "methodsClass": [
                {
                    "name": "mapChangeEvent",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  forwardRef,\n  Input,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\nfunction MakeProvider(type: any) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => type),\n    multi: true,\n  };\n}\n\n@Component({\n  selector: 'abs-input-select',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  template: `\n    <sl-select\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [label]=\"label\"\n      [value]=\"value\"\n      [size]=\"size\"\n      [multiple]=\"multiple\"\n      [open]=\"open\"\n      [hoist]=\"hoist\"\n      [form]=\"form\"\n      [clearable]=\"clearable\"\n      [disabled]=\"disabled\"\n      [helpText]=\"helpText\"\n      [required]=\"required\"\n      (sl-change)=\"mapChangeEvent($event)\"\n    >\n      <ng-content></ng-content>\n    </sl-select>\n  `,\n  providers: [MakeProvider(InputSelectComponent)],\n})\nexport class InputSelectComponent implements ControlValueAccessor {\n  @Input() name: string | undefined;\n  @Input() label = '';\n  @Input() placeholder: string | undefined;\n  @Input() displaytext: string | undefined;\n  @Input() helpText = '';\n  @Input() form = '';\n  @Input() placement: 'top' | 'bottom' = 'bottom';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  _value: any = '';\n  _disabled: boolean | string = false;\n  _open: boolean | string = false;\n  _hoist: boolean | string = false;\n  _filled: boolean | string = false;\n  _pill: boolean | string = false;\n  _multiple: boolean | string = false;\n  _clearable: boolean | string = false;\n  _required: boolean | string = false;\n  @Input()\n  get value(): string | undefined {\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n  @Input()\n  get disabled(): boolean | string {\n    return this._disabled;\n  }\n  set disabled(value: boolean | string) {\n    this._disabled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get multiple(): boolean | string {\n    return this._multiple;\n  }\n  set multiple(value: boolean | string) {\n    this._multiple = value === '' || (value && value !== 'false');\n  }\n\n  // TODO: <Alan> this currently does set the component to the open state,\n  //  however the selects in the ng-content are not opened. Explore\n  @Input()\n  get open(): boolean | string {\n    return this._open;\n  }\n  set open(value: boolean | string) {\n    this._open = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get hoist(): boolean | string {\n    return this._hoist;\n  }\n  set hoist(value: boolean | string) {\n    this._hoist = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get clearable(): boolean | string {\n    return this._clearable;\n  }\n  set clearable(value: boolean | string) {\n    this._clearable = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get required(): boolean | string {\n    return this._required;\n  }\n  set required(value: boolean | string) {\n    this._required = value === '' || (value && value !== 'false');\n  }\n\n  @Input()\n  get filled(): boolean | string {\n    return this._filled;\n  }\n  set filled(value: boolean | string) {\n    this._filled = value === '' || (value && value !== 'false');\n  }\n  @Input()\n  get pill(): boolean | string {\n    return this._pill;\n  }\n  set pill(value: boolean | string) {\n    this._pill = value === '' || (value && value !== 'false');\n  }\n\n  writeValue(value: any) {\n    this._value = value;\n    // warning: comment below if only want to emit on user intervention\n    this.onChange(value);\n  }\n\n  onChange = (_: any) => {\n    // console.log('onChange');\n  };\n  onTouched = () => {\n    // console.log('onTouched');\n  };\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // This is what makes the Shoelace input work with Angular forms\n  mapChangeEvent($event: any) {\n    const target = $event.target as HTMLSelectElement;\n    this.value = target.value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 70
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 80
                    }
                },
                "multiple": {
                    "name": "multiple",
                    "setSignature": {
                        "name": "multiple",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "multiple",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 87
                    }
                },
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 100,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "open",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 97
                    }
                },
                "hoist": {
                    "name": "hoist",
                    "setSignature": {
                        "name": "hoist",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hoist",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 105
                    }
                },
                "clearable": {
                    "name": "clearable",
                    "setSignature": {
                        "name": "clearable",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "clearable",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 113
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 120
                    }
                },
                "filled": {
                    "name": "filled",
                    "setSignature": {
                        "name": "filled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 131,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filled",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 128
                    }
                },
                "pill": {
                    "name": "pill",
                    "setSignature": {
                        "name": "pill",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 138,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pill",
                        "type": "",
                        "returnType": "boolean | string",
                        "line": 135
                    }
                }
            }
        },
        {
            "name": "LicenseAddEditModalComponent",
            "id": "component-LicenseAddEditModalComponent-bc46431d431e49eb15448a49771cd065330028dab472ba9b136e7e497edfba356458afcfa45926f5e4541523fdcf5b2bc87ab774a03eaa0693d485ec07cfd113",
            "file": "src/app/professional-standing/license-add-edit-modal/license-add-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-license-add-edit-modal",
            "styleUrls": [
                "./license-add-edit-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./license-add-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "license",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Subject<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fakeOptions",
                    "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "localLicense",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDefaultClose",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CalendarModule } from 'primeng/calendar';\n\n@Component({\n  selector: 'abs-license-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n  ],\n  templateUrl: './license-add-edit-modal.component.html',\n  styleUrls: ['./license-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class LicenseAddEditModalComponent implements OnInit {\n  @Input() license: Subject<any> = new Subject();\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ];\n\n  localLicense: any = {};\n\n  ngOnInit() {\n    this.license.subscribe((value) => {\n      this.localLicense = value;\n      if (value.issueDate) {\n        // TODO: [Joe] convert to string format yyyy-MM-dd\n        // this.localLicense.issueDate = new Date(value.issueDate)\n        //   .toISOString()\n        //   .split('T')[0];\n      }\n      if (value.expireDate) {\n        // this.localLicense.expireDate = new Date(value.expireDate)\n        //   .toISOString()\n        //   .split('T')[0];\n      }\n    });\n  }\n\n  handleDefaultClose(event: any) {\n    event.preventDefault();\n  }\n\n  cancel() {\n    this.cancelDialog.emit({ show: false });\n  }\n\n  save() {\n    this.saveDialog.emit({ show: false, license: this.localLicense });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-dialog::part(close-button) {\n  display: none;\n}\n",
                    "styleUrl": "./license-add-edit-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div slot=\"label\">{{ localLicense?.id ? 'Edit' : 'Add' }} License Record</div>\n<form id=\"appointmentAddEdit\" *ngIf=\"localLicense\">\n  <div class=\"grid\">\n    <div class=\"col-12\">\n      <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"statement\">License State</label>\n      <p-dropdown\n        inputId=\"state\"\n        [options]=\"fakeOptions\"\n        name=\"state\"\n        [(ngModel)]=\"localLicense.state\"\n        placeholder=\"Select State\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"licenseNumber\">License Number</label>\n      <input\n        id=\"licenseNumber\"\n        pInputText\n        type=\"text\"\n        placeholder=\"Enter License Number\"\n        name=\"licenseNumber\"\n        [(ngModel)]=\"localLicense.number\"\n      />\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"type\">License Type</label>\n      <p-dropdown\n        inputId=\"type\"\n        [options]=\"fakeOptions\"\n        name=\"type\"\n        [(ngModel)]=\"localLicense.type\"\n        placeholder=\"Select License Type\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        appendTo=\"body\"\n      ></p-dropdown>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"issueDate\">Issue Date</label>\n      <p-calendar\n        id=\"issueDate\"\n        [showIcon]=\"true\"\n        name=\"issueDate\"\n        [(ngModel)]=\"localLicense.issueDate\"\n        appendTo=\"body\"\n      ></p-calendar>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"expireDate\">Expire Date</label>\n      <p-calendar\n        id=\"expireDate\"\n        [showIcon]=\"true\"\n        name=\"expireDate\"\n        [(ngModel)]=\"localLicense.expireDate\"\n        appendTo=\"body\"\n      ></p-calendar>\n    </div>\n    <div class=\"col-12 md:col-6\">\n      <label class=\"block\" for=\"reportingOrd\">Verification Organization</label>\n      <input\n        id=\"reportingOrd\"\n        pInputText\n        type=\"text\"\n        placeholder=\"Enter Verification Organization\"\n        name=\"reportingOrd\"\n        [(ngModel)]=\"localLicense.reportingOrg\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"flex justify-content-end\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"cancel()\">Cancel</sl-button>\n  <sl-button\n    type=\"button\"\n    style=\"width: 337px\"\n    variant=\"primary\"\n    (click)=\"save()\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-58d7d22e516c4d045564197a193230ff1290d450fb11f6090e9c5b3845a23f9447f3d06befc28506cf072d37c6018e3ad01c20fe27a277825c87f0023df1a282",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clearErrorAction",
                    "defaultValue": "new ClearAuthErrors()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IError> | undefined",
                    "optional": true,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "AuthSelectors.getErrors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    userName: new FormControl('', [\n      Validators.required,\n      Validators.minLength(3),\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "clearErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrors",
                    "args": [
                        {
                            "name": "error",
                            "type": "IError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "IError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Select, Store } from '@ngxs/store';\nimport { AuthSelectors, Login } from '../state';\nimport { IError, IAuthCredentials } from '../api';\nimport { ClearAuthErrors } from '../state';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'abs-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputTextModule,\n    PasswordModule,\n    ButtonModule,\n  ],\n})\nexport class LoginComponent implements OnInit {\n  loginForm = new FormGroup({\n    userName: new FormControl('', [\n      Validators.required,\n      Validators.minLength(3),\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n\n  clearErrorAction = new ClearAuthErrors();\n\n  @Select(AuthSelectors.getErrors) errors$?: Observable<IError> | undefined;\n\n  constructor(private store: Store) {\n    this.errors$?.pipe(\n      tap((errors) => {\n        // console.log('In the component', errors);\n      })\n    );\n  }\n  ngOnInit(): void {\n    this.clearErrors();\n  }\n\n  clearErrors() {\n    this.store.dispatch(this.clearErrorAction);\n  }\n  getErrors(error: IError) {\n    let errorArray: string[] = [];\n    const errors = error.errors as {\n      userName: string[];\n      Password: string[];\n    };\n    if (errors?.userName || errors?.Password) {\n      errorArray = errorArray.concat(\n        errors.userName ? errors.userName : [],\n        errors.Password ? errors.Password : []\n      );\n    }\n    return errorArray;\n  }\n\n  onSubmit() {\n    this.store.dispatch(new Login(this.loginForm.value as IAuthCredentials));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  background-color: #1f3758;\n  color: var(--global-text-white);\n}\n:host:before {\n  content: '';\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.05;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='227.48' height='227.48' viewBox='0 0 227.48 227.48'%3E%3Cpath id='Path_4' fill='white' data-name='Path 4' d='M124.256 203.518l10.081-1.794.448 2.242-4.251 12.768-3.358.669 4.254-12.311-6.493 1.117Zm-10.965 3.367-.229-2.69 9.633-.448v2.242l-3.356 3.574c2.009.229 3.8 1.125 4.022 3.8s-1.783 4.713-4.92 4.931a7.566 7.566 0 0 1-5.6-2.242l2.012-2.242a4.457 4.457 0 0 0 3.585 1.576 1.831 1.831 0 0 0 2.012-1.794c0-1.114-1.114-1.791-2.908-1.791H116.2l-.669-2.012 3.126-3.585Zm-7.607-.677a2.212 2.212 0 0 0-2.69 2.009 2.008 2.008 0 0 0 2.242 2.242c1.562 0 2.457-.666 2.678-2.012C108.144 207.321 107.246 206.207 105.684 206.207Zm-1.576 11.872a6.942 6.942 0 0 1-4.47-2.023l1.78-2.242a5.4 5.4 0 0 0 2.919 1.576c1.794.218 2.678-1.125 3.126-2.908a4.118 4.118 0 0 1-2.908.666c-3.137-.23-4.917-2.012-4.7-4.931s2.69-4.7 5.827-4.469a6.074 6.074 0 0 1 4.022 1.791c.9 1.117 1.346 2.678 1.128 5.368C110.6 215.39 108.144 218.3 104.108 218.079ZM96.72 202.4l2.021.448-2.69 14.105-2.908-.669 2.012-10.976-2.46.229-.229-2.69Zm102.773-47.916-5.15-2.242 1.346-2.908 5.15 2.242 10.067-1.343-1.562 3.356-6.5.677 3.806 5.6-1.564 3.126Zm8.276-10.747c1.346.451 2.242-.448 2.69-1.791l.9-2.908-3.806-1.117-.9 3.126A1.978 1.978 0 0 0 207.769 143.738Zm-8.953-2.69 5.15-1.78.677-2.471-4.251-1.346.9-2.908 13.655 3.806-1.794 6.275c-.9 3.126-3.137 4.7-6.045 3.8a4.455 4.455 0 0 1-3.356-4.033l-5.827 2.023Zm4.254-21.491 14.114 1.791-1.346 10.529-2.69-.229.9-7.61-2.908-.448-.9 6.714-2.69-.221.9-6.722-2.908-.437-.9 7.61-2.69-.229Zm-.221-8.276a6.9 6.9 0 0 1 6.944-7.621 7.307 7.307 0 0 1 7.61 7.173 7.7 7.7 0 0 1-1.794 5.6l-2.46-1.794a5.288 5.288 0 0 0 1.346-3.8 4.1 4.1 0 0 0-4.483-3.817 4.056 4.056 0 0 0-4.251 4.483 5.59 5.59 0 0 0 .9 2.908h2.012v-3.126h2.69l.229 6.045-6.048.218A8.965 8.965 0 0 1 202.849 111.281Zm8.287-13.437c1.346-.229 1.783-1.346 1.564-2.69l-.666-3.137L208 92.7l.669 3.126C209.115 97.4 210.011 98.063 211.136 97.845Zm-9.182 1.794 3.806-3.817-.451-2.46-4.47.9-.677-3.137 13.882-2.678 1.346 6.263c.666 3.356-.677 5.6-3.585 6.045a4.355 4.355 0 0 1-4.92-2.242l-4.265 4.254Zm-4.481-16.344c-1.346-3.588 0-6.5 3.815-7.839l7.61-2.69 1.114 2.908-7.61 2.69c-2.239.9-2.908 2.242-2.239 4.033s2.009 2.46 4.251 1.783l7.621-2.678 1.114 2.908-7.61 2.69C201.724 88.444 198.816 86.868 197.473 83.295Zm-5.15-11.643a8.782 8.782 0 0 1-.9-6.277l2.919.68a7.428 7.428 0 0 0 .451 4.47c.666 1.128 1.332 1.576 2.228 1.128.68-.451.9-.9.229-3.37-.677-2.908-.9-4.917 1.564-6.263 2.242-1.114 4.7-.229 6.045 2.242a7.679 7.679 0 0 1 .9 5.368l-2.911-.218A6.64 6.64 0 0 0 202.4 65.6c-.677-1.125-1.343-1.343-2.009-1.125-.9.448-.9 1.125-.229 3.585.677 2.908.677 4.7-1.564 6.045C196.127 75.455 193.666 74.33 192.323 71.652Zm-2.908-24.413-2.242 2.023 4.481 5.147-2.239 1.783-4.483-5.15-4.251 3.588-2.012-2.46 10.747-9.185 6.941 8.287-2.242 1.794Zm-9.4-3.574a4.548 4.548 0 0 0-.229-6.277 4.274 4.274 0 0 0-6.045.451 4.55 4.55 0 0 0 .23 6.275A4.1 4.1 0 0 0 180.012 43.665Zm-8.057 2.678a7.268 7.268 0 0 1-.9-10.517c2.678-3.137 7.162-3.356 10.517-.677a7.382 7.382 0 1 1-9.622 11.195ZM160.53 29.33a4.209 4.209 0 0 0-1.791-5.827l-2.231-1.114L152.694 30l2.239 1.125C157.174 32.47 159.416 31.572 160.53 29.33ZM153.589 33.8l-4.92-2.46L155.162 18.8l4.92 2.471c4.036 2.009 5.379 6.045 3.585 9.619C161.658 34.48 157.622 35.826 153.589 33.8ZM146.2 20.6c.448-1.343-.218-2.239-1.78-2.69l-2.919-.9-1.117 3.815 2.908.9C144.866 22.171 145.75 21.723 146.2 20.6ZM143.29 29.33l-1.562-5.147-2.242-.68-1.346 4.265-2.908-.9 4.254-13.437 6.263 2.012c3.137.9 4.484 3.356 3.815 6.045a4.5 4.5 0 0 1-4.251 3.356l1.783 5.827ZM127.626 14.78l-2.471 4.254 3.8.448Zm2.908 11.195-.9-3.367-5.827-.884-1.78 2.908-3.14-.448 8.057-13.207 2.908.437 4.036 15.009ZM115.751 17.24a4.054 4.054 0 0 0-4.47-4.251 3.994 3.994 0 0 0-4.036 4.47 4.07 4.07 0 0 0 4.484 4.265A4.275 4.275 0 0 0 115.751 17.24ZM111.5 24.631c-4.483 0-7.61-3.137-7.61-7.173a7.5 7.5 0 0 1 7.391-7.607c4.47 0 7.607 3.137 7.607 7.159A7.108 7.108 0 0 1 111.5 24.631ZM99.639 21.046c-.229-.9-.9-1.346-2.471-1.117l-3.577.666.669 3.137 3.585-.677C99.188 22.837 99.857 22.171 99.639 21.046Zm-1.794-5.368c-.229-.9-.9-1.346-2.242-1.128l-3.137.677.448 2.908 2.908-.448C97.168 17.24 98.063 16.792 97.845 15.678Zm.448 10.067L91.57 27.091l-2.46-14.1L95.6 11.861c2.908-.448 4.931.448 5.368 2.69a3.383 3.383 0 0 1-1.332 3.356 3.6 3.6 0 0 1 3.356 2.919C103.213 23.5 101.419 25.079 98.293 25.745ZM80.823 30.676 70.972 25.3l3.588 8.287-2.908 1.343-5.6-13.2L68.733 20.6l9.63 5.379-3.585-8.069L77.7 16.574l5.816 12.978Zm-22.608 0 .9 4.92 3.126-2.012Zm9.4 6.493-2.908-2.021-4.931 3.367.68 3.356-2.69 1.794L54.86 28.435l2.457-1.562 12.989 8.505ZM53.284 48.135a6.9 6.9 0 0 1-10.07-.218 6.985 6.985 0 0 1 .451-10.3 7.868 7.868 0 0 1 5.6-2.239l.218 3.137a5.7 5.7 0 0 0-3.806 1.332c-1.791 1.576-1.562 4.265 0 6.045a4.263 4.263 0 0 0 6.045.451 4.9 4.9 0 0 0 1.564-3.806h2.908A8.041 8.041 0 0 1 53.284 48.135Zm-8.724 8.953L33.8 47.916l2.023-2.471L46.573 54.63Zm-10.976-.9c-1.114-.666-2.242-.437-3.137.9l-1.794 2.471 3.367 2.231L33.8 59.111C34.928 57.986 34.7 56.869 33.584 56.192Zm7.61 5.161H35.826L34.48 63.365l3.806 2.46-1.794 2.687L24.85 60.676l3.585-5.368c1.794-2.69 4.483-3.367 6.944-1.794a4.6 4.6 0 0 1 2.009 4.92h6.048ZM30.676 80.376 17.906 74.33l4.483-9.622 2.46 1.117-3.126 6.941L24.4 73.88l2.919-6.045 2.46 1.128-2.908 6.045 2.678 1.343 3.367-6.941 2.46 1.114ZM28.653 86.2 19.7 83.742l4.7 5.368-6.714 2.242 8.956 2.46-.9 2.908L12.09 92.914l.9-3.137L19.7 87.764 15 82.617l.9-3.14 13.655 3.817ZM14.332 104.786l4.472 2.231.229-3.8Zm10.747-3.367-3.137 1.128-.666 5.816 3.126 1.573-.218 3.126-13.655-7.377.218-2.919 14.78-4.7Zm.9 29.333-14.114 1.791-1.332-10.515 2.678-.451 1.125 7.61 2.908-.448-.9-6.711 2.69-.451.9 6.714 2.908-.448-1.114-7.61 2.678-.448Zm1.346 6.045-5.379 1.573 1.562 5.6 5.379-1.573.9 2.919-13.655 4.022-.9-2.908 5.368-1.562-1.562-5.6-5.379 1.562-.9-2.908 13.663-4.033Zm-5.379 17.917 10.3-4.7 1.343 2.908-10.3 4.7 1.794 3.806-2.69 1.114L17.458 151.8l2.69-1.114Zm94.708-37.388V120h6.275v2.69h-6.275v5.15h-2.908V114.855h9.849v2.69h-6.941Zm-7.61 3.8a3.885 3.885 0 0 0-4.033-4.033 4.017 4.017 0 0 0-4.036 4.033 3.886 3.886 0 0 0 4.036 4.025C107.464 125.384 109.04 123.59 109.04 121.13Zm-4.033 6.944a6.722 6.722 0 1 1 6.941-6.725A6.789 6.789 0 0 1 105.007 128.074Zm71.868-7.621c-1.343 5.15-8.057 4.483-11.195 2.69s-35.375-19.7-35.375-19.7V84.627s36.722 20.159 41.421 22.837C178.221 111.052 177.773 117.327 176.874 120.453ZM130.3 53.066s6.722 1.114 16.342 7.162c6.944 4.251 14.783 11.195 19.482 18.8 5.6 9.415 4.483 12.989 4.483 12.989l-40.528-22.39V53.066Zm49.26 46.791a14.977 14.977 0 0 0 3.585-11.864c-2.239-16.792-19.711-34.262-36.722-41.65-9.4-4.025-17.24-6.944-29.1-7.38V109.04L165.68 135.9c5.379 2.69 10.529 1.343 15.23-1.783 6.711-4.484 7.836-13.218 7.836-14.78C188.746 117.327 190.093 107.915 179.564 99.857ZM95.822 80.376 51.49 105.007c4.483-30 26.655-46.125 44.331-51.941Zm-22.16-30c-20.148 12.759-30 31.572-33.584 50.376-4.7 23.733 4.254 40.746 4.254 40.746l10.747-6.048a60.219 60.219 0 0 1-2.46-8.276 63.639 63.639 0 0 1-1.346-8.287L96.051 94.26v18.354l12.989-7.159V38.734C108.81 38.734 92.248 38.734 73.661 50.376Zm72.536 81.5H83.065l-17.01 9.171c11.413 20.162 31.561 27.539 47.687 27.539 11.195 0 26.859-4.251 38.5-15.894l7.173 4.033c-15 14.78-30.676 20.148-45.675 19.7-16.792-.448-27.091-5.15-38.963-13.655-10.3-7.159-15.219-17.906-15.449-17.906l-10.517 5.816c11.416 21.494 35.6 37.169 64.93 37.835 11.413.229 26.411-3.585 38.283-10.515 12.989-7.391 21.494-18.138 25.079-24.631l-26.193-14.55a44.392 44.392 0 0 1-37.4 19.7 43.641 43.641 0 0 1-22.16-5.827 50.15 50.15 0 0 1-10.081-7.828l4.484-2.471h50.595ZM113.742 28.882A84.858 84.858 0 1 0 198.6 113.742 84.955 84.955 0 0 0 113.742 28.882Zm0 2.242a82.616 82.616 0 1 1-82.4 82.617c0-45.459 36.94-82.617 82.4-82.617m0-31.124A113.74 113.74 0 1 0 227.48 113.742 113.754 113.754 0 0 0 113.742 0Zm0 4.033a109.546 109.546 0 0 1 77.465 186.944A109.554 109.554 0 0 1 36.274 36.044 108.881 108.881 0 0 1 113.742 4.033' /%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: 50% 0;\n  background-size: contain;\n}\nsl-button[variant='text']::part(label) {\n  text-decoration: underline;\n  padding: 0 0.3rem;\n}\nsl-button[variant='primary']::part(label) {\n  font-weight: 700;\n}\n\n.login-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  .content {\n    margin-top: auto;\n    max-width: 56rem;\n    width: 100%;\n    .form-container {\n      max-width: 31rem;\n      width: 100%;\n    }\n  }\n}\n\n.login-alert {\n  margin-bottom: 1rem;\n  border: solid thin red;\n}\n\n.form-error-text {\n  color: var(--global-danger-lighten-40);\n}\n.p-inputtext {\n  position: relative;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-container text-center\">\n  <div class=\"login-container\">\n    <div class=\"flex flex-column align-items-center content\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"227.48\"\n        height=\"227.48\"\n        viewBox=\"0 0 227.48 227.48\"\n      >\n        <path\n          id=\"Path_4\"\n          fill=\"currentColor\"\n          data-name=\"Path 4\"\n          d=\"M124.256,203.518l10.081-1.794.448,2.242-4.251,12.768-3.358.669,4.254-12.311-6.493,1.117Zm-10.965,3.367-.229-2.69,9.633-.448v2.242l-3.356,3.574c2.009.229,3.8,1.125,4.022,3.8s-1.783,4.713-4.92,4.931a7.566,7.566,0,0,1-5.6-2.242l2.012-2.242a4.457,4.457,0,0,0,3.585,1.576,1.831,1.831,0,0,0,2.012-1.794c0-1.114-1.114-1.791-2.908-1.791H116.2l-.669-2.012,3.126-3.585Zm-7.607-.677a2.212,2.212,0,0,0-2.69,2.009,2.008,2.008,0,0,0,2.242,2.242c1.562,0,2.457-.666,2.678-2.012C108.144,207.321,107.246,206.207,105.684,206.207Zm-1.576,11.872a6.942,6.942,0,0,1-4.47-2.023l1.78-2.242a5.4,5.4,0,0,0,2.919,1.576c1.794.218,2.678-1.125,3.126-2.908a4.118,4.118,0,0,1-2.908.666c-3.137-.23-4.917-2.012-4.7-4.931s2.69-4.7,5.827-4.469a6.074,6.074,0,0,1,4.022,1.791c.9,1.117,1.346,2.678,1.128,5.368C110.6,215.39,108.144,218.3,104.108,218.079ZM96.72,202.4l2.021.448-2.69,14.105-2.908-.669,2.012-10.976-2.46.229-.229-2.69Zm102.773-47.916-5.15-2.242,1.346-2.908,5.15,2.242,10.067-1.343-1.562,3.356-6.5.677,3.806,5.6-1.564,3.126Zm8.276-10.747c1.346.451,2.242-.448,2.69-1.791l.9-2.908-3.806-1.117-.9,3.126A1.978,1.978,0,0,0,207.769,143.738Zm-8.953-2.69,5.15-1.78.677-2.471-4.251-1.346.9-2.908,13.655,3.806-1.794,6.275c-.9,3.126-3.137,4.7-6.045,3.8a4.455,4.455,0,0,1-3.356-4.033l-5.827,2.023Zm4.254-21.491,14.114,1.791-1.346,10.529-2.69-.229.9-7.61-2.908-.448-.9,6.714-2.69-.221.9-6.722-2.908-.437-.9,7.61-2.69-.229Zm-.221-8.276a6.9,6.9,0,0,1,6.944-7.621,7.307,7.307,0,0,1,7.61,7.173,7.7,7.7,0,0,1-1.794,5.6l-2.46-1.794a5.288,5.288,0,0,0,1.346-3.8,4.1,4.1,0,0,0-4.483-3.817,4.056,4.056,0,0,0-4.251,4.483,5.59,5.59,0,0,0,.9,2.908h2.012v-3.126h2.69l.229,6.045-6.048.218A8.965,8.965,0,0,1,202.849,111.281Zm8.287-13.437c1.346-.229,1.783-1.346,1.564-2.69l-.666-3.137L208,92.7l.669,3.126C209.115,97.4,210.011,98.063,211.136,97.845Zm-9.182,1.794,3.806-3.817-.451-2.46-4.47.9-.677-3.137,13.882-2.678,1.346,6.263c.666,3.356-.677,5.6-3.585,6.045a4.355,4.355,0,0,1-4.92-2.242l-4.265,4.254Zm-4.481-16.344c-1.346-3.588,0-6.5,3.815-7.839l7.61-2.69,1.114,2.908-7.61,2.69c-2.239.9-2.908,2.242-2.239,4.033s2.009,2.46,4.251,1.783l7.621-2.678,1.114,2.908-7.61,2.69C201.724,88.444,198.816,86.868,197.473,83.295Zm-5.15-11.643a8.782,8.782,0,0,1-.9-6.277l2.919.68a7.428,7.428,0,0,0,.451,4.47c.666,1.128,1.332,1.576,2.228,1.128.68-.451.9-.9.229-3.37-.677-2.908-.9-4.917,1.564-6.263,2.242-1.114,4.7-.229,6.045,2.242a7.679,7.679,0,0,1,.9,5.368l-2.911-.218A6.64,6.64,0,0,0,202.4,65.6c-.677-1.125-1.343-1.343-2.009-1.125-.9.448-.9,1.125-.229,3.585.677,2.908.677,4.7-1.564,6.045C196.127,75.455,193.666,74.33,192.323,71.652Zm-2.908-24.413-2.242,2.023,4.481,5.147-2.239,1.783-4.483-5.15-4.251,3.588-2.012-2.46,10.747-9.185,6.941,8.287-2.242,1.794Zm-9.4-3.574a4.548,4.548,0,0,0-.229-6.277,4.274,4.274,0,0,0-6.045.451,4.55,4.55,0,0,0,.23,6.275A4.1,4.1,0,0,0,180.012,43.665Zm-8.057,2.678a7.268,7.268,0,0,1-.9-10.517c2.678-3.137,7.162-3.356,10.517-.677a7.382,7.382,0,1,1-9.622,11.195ZM160.53,29.33a4.209,4.209,0,0,0-1.791-5.827l-2.231-1.114L152.694,30l2.239,1.125C157.174,32.47,159.416,31.572,160.53,29.33ZM153.589,33.8l-4.92-2.46L155.162,18.8l4.92,2.471c4.036,2.009,5.379,6.045,3.585,9.619C161.658,34.48,157.622,35.826,153.589,33.8ZM146.2,20.6c.448-1.343-.218-2.239-1.78-2.69l-2.919-.9-1.117,3.815,2.908.9C144.866,22.171,145.75,21.723,146.2,20.6ZM143.29,29.33l-1.562-5.147-2.242-.68-1.346,4.265-2.908-.9,4.254-13.437,6.263,2.012c3.137.9,4.484,3.356,3.815,6.045a4.5,4.5,0,0,1-4.251,3.356l1.783,5.827ZM127.626,14.78l-2.471,4.254,3.8.448Zm2.908,11.195-.9-3.367-5.827-.884-1.78,2.908-3.14-.448,8.057-13.207,2.908.437,4.036,15.009ZM115.751,17.24a4.054,4.054,0,0,0-4.47-4.251,3.994,3.994,0,0,0-4.036,4.47,4.07,4.07,0,0,0,4.484,4.265A4.275,4.275,0,0,0,115.751,17.24ZM111.5,24.631c-4.483,0-7.61-3.137-7.61-7.173a7.5,7.5,0,0,1,7.391-7.607c4.47,0,7.607,3.137,7.607,7.159A7.108,7.108,0,0,1,111.5,24.631ZM99.639,21.046c-.229-.9-.9-1.346-2.471-1.117l-3.577.666.669,3.137,3.585-.677C99.188,22.837,99.857,22.171,99.639,21.046Zm-1.794-5.368c-.229-.9-.9-1.346-2.242-1.128l-3.137.677.448,2.908,2.908-.448C97.168,17.24,98.063,16.792,97.845,15.678Zm.448,10.067L91.57,27.091l-2.46-14.1L95.6,11.861c2.908-.448,4.931.448,5.368,2.69a3.383,3.383,0,0,1-1.332,3.356,3.6,3.6,0,0,1,3.356,2.919C103.213,23.5,101.419,25.079,98.293,25.745ZM80.823,30.676,70.972,25.3l3.588,8.287-2.908,1.343-5.6-13.2L68.733,20.6l9.63,5.379-3.585-8.069L77.7,16.574l5.816,12.978Zm-22.608,0,.9,4.92,3.126-2.012Zm9.4,6.493-2.908-2.021-4.931,3.367.68,3.356-2.69,1.794L54.86,28.435l2.457-1.562,12.989,8.505ZM53.284,48.135a6.9,6.9,0,0,1-10.07-.218,6.985,6.985,0,0,1,.451-10.3,7.868,7.868,0,0,1,5.6-2.239l.218,3.137a5.7,5.7,0,0,0-3.806,1.332c-1.791,1.576-1.562,4.265,0,6.045a4.263,4.263,0,0,0,6.045.451,4.9,4.9,0,0,0,1.564-3.806h2.908A8.041,8.041,0,0,1,53.284,48.135Zm-8.724,8.953L33.8,47.916l2.023-2.471L46.573,54.63Zm-10.976-.9c-1.114-.666-2.242-.437-3.137.9l-1.794,2.471,3.367,2.231L33.8,59.111C34.928,57.986,34.7,56.869,33.584,56.192Zm7.61,5.161H35.826L34.48,63.365l3.806,2.46-1.794,2.687L24.85,60.676l3.585-5.368c1.794-2.69,4.483-3.367,6.944-1.794a4.6,4.6,0,0,1,2.009,4.92h6.048ZM30.676,80.376,17.906,74.33l4.483-9.622,2.46,1.117-3.126,6.941L24.4,73.88l2.919-6.045,2.46,1.128-2.908,6.045,2.678,1.343,3.367-6.941,2.46,1.114ZM28.653,86.2,19.7,83.742l4.7,5.368-6.714,2.242,8.956,2.46-.9,2.908L12.09,92.914l.9-3.137L19.7,87.764,15,82.617l.9-3.14,13.655,3.817ZM14.332,104.786l4.472,2.231.229-3.8Zm10.747-3.367-3.137,1.128-.666,5.816,3.126,1.573-.218,3.126-13.655-7.377.218-2.919,14.78-4.7Zm.9,29.333-14.114,1.791-1.332-10.515,2.678-.451,1.125,7.61,2.908-.448-.9-6.711,2.69-.451.9,6.714,2.908-.448-1.114-7.61,2.678-.448Zm1.346,6.045-5.379,1.573,1.562,5.6,5.379-1.573.9,2.919-13.655,4.022-.9-2.908,5.368-1.562-1.562-5.6-5.379,1.562-.9-2.908,13.663-4.033Zm-5.379,17.917,10.3-4.7,1.343,2.908-10.3,4.7,1.794,3.806-2.69,1.114L17.458,151.8l2.69-1.114Zm94.708-37.388V120h6.275v2.69h-6.275v5.15h-2.908V114.855h9.849v2.69h-6.941Zm-7.61,3.8a3.885,3.885,0,0,0-4.033-4.033,4.017,4.017,0,0,0-4.036,4.033,3.886,3.886,0,0,0,4.036,4.025C107.464,125.384,109.04,123.59,109.04,121.13Zm-4.033,6.944a6.722,6.722,0,1,1,6.941-6.725A6.789,6.789,0,0,1,105.007,128.074Zm71.868-7.621c-1.343,5.15-8.057,4.483-11.195,2.69s-35.375-19.7-35.375-19.7V84.627s36.722,20.159,41.421,22.837C178.221,111.052,177.773,117.327,176.874,120.453ZM130.3,53.066s6.722,1.114,16.342,7.162c6.944,4.251,14.783,11.195,19.482,18.8,5.6,9.415,4.483,12.989,4.483,12.989l-40.528-22.39V53.066Zm49.26,46.791a14.977,14.977,0,0,0,3.585-11.864c-2.239-16.792-19.711-34.262-36.722-41.65-9.4-4.025-17.24-6.944-29.1-7.38V109.04L165.68,135.9c5.379,2.69,10.529,1.343,15.23-1.783,6.711-4.484,7.836-13.218,7.836-14.78C188.746,117.327,190.093,107.915,179.564,99.857ZM95.822,80.376,51.49,105.007c4.483-30,26.655-46.125,44.331-51.941Zm-22.16-30c-20.148,12.759-30,31.572-33.584,50.376-4.7,23.733,4.254,40.746,4.254,40.746l10.747-6.048a60.219,60.219,0,0,1-2.46-8.276,63.639,63.639,0,0,1-1.346-8.287L96.051,94.26v18.354l12.989-7.159V38.734C108.81,38.734,92.248,38.734,73.661,50.376Zm72.536,81.5H83.065l-17.01,9.171c11.413,20.162,31.561,27.539,47.687,27.539,11.195,0,26.859-4.251,38.5-15.894l7.173,4.033c-15,14.78-30.676,20.148-45.675,19.7-16.792-.448-27.091-5.15-38.963-13.655-10.3-7.159-15.219-17.906-15.449-17.906l-10.517,5.816c11.416,21.494,35.6,37.169,64.93,37.835,11.413.229,26.411-3.585,38.283-10.515,12.989-7.391,21.494-18.138,25.079-24.631l-26.193-14.55a44.392,44.392,0,0,1-37.4,19.7,43.641,43.641,0,0,1-22.16-5.827,50.15,50.15,0,0,1-10.081-7.828l4.484-2.471h50.595ZM113.742,28.882A84.858,84.858,0,1,0,198.6,113.742,84.955,84.955,0,0,0,113.742,28.882Zm0,2.242a82.616,82.616,0,1,1-82.4,82.617c0-45.459,36.94-82.617,82.4-82.617m0-31.124A113.74,113.74,0,1,0,227.48,113.742,113.754,113.754,0,0,0,113.742,0Zm0,4.033a109.546,109.546,0,0,1,77.465,186.944A109.554,109.554,0,0,1,36.274,36.044,108.881,108.881,0,0,1,113.742,4.033\"\n        />\n      </svg>\n      <h1 class=\"my-3\">\n        Welcome to The American Board of Surgery Surgeon's Portal\n      </h1>\n      <p class=\"mt-0 mb-3\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat. Aenean non magna\n        nec arcu bibendum blandit. Nulla a pretium metus, id suscipit lorem.\n      </p>\n      <div class=\"text-left mt-5 form-container\">\n        <sl-alert\n          variant=\"danger\"\n          open\n          closable\n          class=\"alert-closable login-alert\"\n          *ngIf=\"errors$ | async as error\"\n          (sl-hide)=\"clearErrors()\"\n        >\n          <sl-icon slot=\"icon\" name=\"exclamation-octagon\"></sl-icon>\n          <strong>{{ error.title }}</strong\n          ><br />\n          <div *ngIf=\"error.errors\">\n            <p *ngFor=\"let errmsg of getErrors(error)\">{{ errmsg }}</p>\n          </div>\n        </sl-alert>\n        <form name=\"login-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n          <input\n            id=\"userName\"\n            placeholder=\"Username\"\n            pInputText\n            formControlName=\"userName\"\n          />\n          <small\n            *ngIf=\"\n              loginForm.get('userName')?.hasError('required') &&\n              !loginForm.pristine\n            \"\n            class=\"form-error-text\"\n          >\n            The Username field is required.\n          </small>\n          <sl-button class=\"mb-2\" variant=\"text\" size=\"small\"\n            >I forgot my username</sl-button\n          >\n\n          <p-password\n            id=\"password\"\n            placeholder=\"Password\"\n            formControlName=\"password\"\n            [feedback]=\"false\"\n            [toggleMask]=\"true\"\n          ></p-password>\n          <small\n            *ngIf=\"\n              loginForm.get('password')?.hasError('required') &&\n              !loginForm.pristine &&\n              loginForm.get('password')?.dirty\n            \"\n            class=\"form-error-text\"\n          >\n            The Password field is required.\n          </small>\n          <sl-button class=\"mb-2\" variant=\"text\" size=\"small\"\n            >I forgot my password</sl-button\n          >\n\n          <p-button\n            styleClass=\"p-button-primary\"\n            class=\"login-button\"\n            type=\"submit\"\n            [disabled]=\"loginForm.invalid\"\n          >\n            <span class=\"mr-2 font-bold\">Login</span>\n            <i class=\"fa-solid fa-right-to-bracket\"></i>\n          </p-button>\n        </form>\n      </div>\n    </div>\n    <div class=\"text-center mt-auto\">\n      <p class=\"mb-1 footer-text\">\n        @2022 All Rights Reserved. The American Board of Surgery\n      </p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MedicalLicenseModalComponent",
            "id": "component-MedicalLicenseModalComponent-d87582b7eeaaf06e4e0f2dc81d7d22fcd05ba2ac1e3f983f8052e6a54a3606d9d43f16b26d753353c44d5f059bddbed4c9bf920bf2521106c1bc6e4beb8f821a",
            "file": "src/app/registration-requirements/medical-license-modal/medical-license-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-medical-license-modal",
            "styleUrls": [
                "./medical-license-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medical-license-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "modalName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "medicalLicenseCols",
                    "defaultValue": "MEDICAL_LICENSE_GRID_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "medicalLicenseData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMedicalLicenseData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDefaultCloseModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { MEDICAL_LICENSE_GRID_COLS } from './medical-license-grid-cols';\n\n@Component({\n  selector: 'abs-medical-license-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent],\n  templateUrl: './medical-license-modal.component.html',\n  styleUrls: ['./medical-license-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class MedicalLicenseModalComponent implements OnInit {\n  @Input() showDialog = false;\n  @Input() modalName!: string;\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  medicalLicenseCols = MEDICAL_LICENSE_GRID_COLS;\n  medicalLicenseData!: any;\n\n  ngOnInit() {\n    this.getMedicalLicenseData();\n  }\n\n  getMedicalLicenseData() {\n    this.medicalLicenseData = [\n      {\n        licenseState: 'Pennsylvania',\n        licenseNumber: '123456789',\n        licenseType: 'MD',\n        expirationDate: new Date('12/31/2021'),\n        issueDate: new Date('12/31/2019'),\n        varifyingOrganization: 'American Board of Surgery',\n      },\n    ];\n  }\n\n  gridAction($event: any) {\n    console.log($event);\n  }\n\n  handleDefaultCloseModal(event: any) {\n    event.preventDefault();\n  }\n\n  close() {\n    this.closeDialog.emit({ action: this.modalName });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-dialog::part(header-actions) {\n  padding: 0;\n}\nsl-dialog::part(close-button) {\n  display: none;\n}\nsl-dialog::part(header)::after {\n  height: 1px;\n  color: var(--global-gray-lightest);\n}\n\nsl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n\n.text-success {\n  color: var(--global-success);\n}\n.text-warning {\n  color: var(--global-warning);\n}\n.text-danger {\n  color: var(--global-danger);\n}\n",
                    "styleUrl": "./medical-license-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mb-5\">\n  <p><strong>Please update the information below as needed. </strong></p>\n  <p>\n    A full and unrestricted medical license is not required for the Qualifying\n    Examination. A full and unrestricted medical license will be waived to\n    register for the Certifying Examination (CE). A full and unrestricted\n    medical license will be required before you will be considered certified by\n    the ABS\n  </p>\n</div>\n<sl-button class=\"btn-add\">\n  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n  <span>Add Medical License</span>\n</sl-button>\n<abs-grid\n  [columns]=\"medicalLicenseCols\"\n  [data]=\"medicalLicenseData\"\n  (action)=\"gridAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button type=\"button\" style=\"width: 337px\" variant=\"primary\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "MedicalTrainingComponent",
            "id": "component-MedicalTrainingComponent-bc7a9ad8ecf356ed605162b6292e34b38798a057b062d149a424f20363daa872fe6e54466507b6ff91b46a9ba82ab20cb819289fba0ac1c817c2c58278864a67",
            "file": "src/app/medical-training/medical-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-medical-training",
            "styleUrls": [
                "./medical-training.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medical-training.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "additionalTraining$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAdvancedTrainingReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.additionalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "advancedTraining$",
                    "defaultValue": "new BehaviorSubject<IAdvancedTrainingReadOnlyModel[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IAdvancedTrainingReadOnlyModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "countries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPickListItem[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.countries"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "createMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "degrees",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDegreeReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "degrees$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDegreeReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.degrees"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fellowshipCols",
                    "defaultValue": "FELLOWSHIP_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "fellowships$",
                    "defaultValue": "new BehaviorSubject<IFellowshipReadOnlyModel[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IFellowshipReadOnlyModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "graduateProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGraduateProfileReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "graduateProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IGraduateProfileReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.graduateProfiles"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isAdditionalAdvancedEdit$",
                    "defaultValue": "new BehaviorSubject(\n    false\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "isEdit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "isFellowshipEdit$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "maxYear",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "medicalTraining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMedicalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "medicalTraining$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IMedicalTrainingModel> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.medicalTraining"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "medicalTrainingForm",
                    "defaultValue": "new FormGroup({\n    graduateProfileId: new FormControl(''),\n    medicalSchoolName: new FormControl(''),\n    medicalSchoolCity: new FormControl(''),\n    medicalSchoolStateId: new FormControl({ value: '', disabled: true }),\n    medicalSchoolCountryId: new FormControl(''),\n    degreeId: new FormControl(''),\n    medicalSchoolCompletionYear: new FormControl(''),\n    residencyProgramName: new FormControl(0),\n    residencyCompletionYear: new FormControl(''),\n    residencyProgramOther: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "medicalTrainingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "medicalTrainingReadOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMedicalTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "residencyPrograms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IResidencyProgramReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "residencyPrograms$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IResidencyProgramReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.residencyPrograms"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "showFellowshipAddEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "showTrainingAddEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "states$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IStateReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.states"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "tempData$",
                    "defaultValue": "new BehaviorSubject({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "trainingAddEditTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "trainingCols",
                    "defaultValue": "MEDICAL_TRAINING_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "userId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.userId"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelAddEditFellowship",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelAddEditTraining",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAdvancedTrainingGridData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFellowshipGridData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMedicalTraining",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCountryChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFellowship",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTraining",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPicklists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStates",
                    "args": [
                        {
                            "name": "countryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "countryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showFellowshipModal",
                    "args": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTrainingModal",
                    "args": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isEdit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFormEdit",
                    "args": [
                        {
                            "name": "toggle",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 372,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toggle",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ProfileHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "TrainingAddEditModalComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "FellowshipAddEditModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../shared/gridDefinitions/medical-training-cols';\n\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { MedicalTrainingSelectors, UserProfileSelectors } from '../state';\nimport { Select, Store } from '@ngxs/store';\nimport { AdvancedTrainingService } from '../api/services/medicaltraining/advanced-training.service';\nimport { IAdvancedTrainingReadOnlyModel } from '../api/models/medicaltraining/advanced-training-read-only.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CalendarModule } from 'primeng/calendar';\nimport {\n  CreateMedicalTraining,\n  GetMedicalTraining,\n  UpdateMedicalTraining,\n} from '../state/medical-training/medical-training.actions';\nimport {\n  GetDegrees,\n  GetFellowshipPrograms,\n  GetGraduateProfiles,\n  GetResidencyPrograms,\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport { IStateReadOnlyModel } from '../api';\nimport { IGraduateProfileReadOnlyModel } from '../api/models/picklists/graduate-profile-read-only.model';\nimport { IDegreeReadOnlyModel } from '../api/models/picklists/degree-read-only.model';\nimport { FELLOWSHIP_COLS } from './fellowship-cols';\nimport { FellowshipService } from '../api/services/medicaltraining/fellowship.service';\nimport { FellowshipAddEditModalComponent } from './fellowship-add-edit-modal/fellowship-add-edit-modal.component';\nimport { IFellowshipReadOnlyModel } from '../api/models/medicaltraining/fellowship-read-only.model';\nimport { MedicalTrainingActions } from './medical-training-models';\nimport { IMedicalTrainingModel } from '../api/models/medicaltraining/medical-training.model';\nimport { IResidencyProgramReadOnlyModel } from '../api/models/picklists/residency-program-read-only.model';\n\n@Component({\n  selector: 'abs-medical-training',\n  templateUrl: './medical-training.component.html',\n  styleUrls: ['./medical-training.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ProfileHeaderComponent,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    GridComponent,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    CalendarModule,\n    FellowshipAddEditModalComponent,\n  ],\n})\nexport class MedicalTrainingComponent implements OnInit {\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(PicklistsSelectors.slices.countries) countries$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.graduateProfiles) graduateProfiles$:\n    | Observable<IGraduateProfileReadOnlyModel[]>\n    | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.additionalTraining)\n  additionalTraining$: Observable<IAdvancedTrainingReadOnlyModel[]> | undefined;\n\n  @Select(MedicalTrainingSelectors.slices.medicalTraining)\n  medicalTraining$: Observable<IMedicalTrainingModel> | undefined;\n\n  @Select(PicklistsSelectors.slices.degrees) degrees$:\n    | Observable<IDegreeReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.residencyPrograms) residencyPrograms$:\n    | Observable<IResidencyProgramReadOnlyModel[]>\n    | undefined;\n\n  advancedTraining$: BehaviorSubject<IAdvancedTrainingReadOnlyModel[]> =\n    new BehaviorSubject<IAdvancedTrainingReadOnlyModel[]>([]);\n\n  fellowships$: BehaviorSubject<IFellowshipReadOnlyModel[]> =\n    new BehaviorSubject<IFellowshipReadOnlyModel[]>([]);\n\n  isAdditionalAdvancedEdit$: BehaviorSubject<boolean> = new BehaviorSubject(\n    false\n  );\n\n  isFellowshipEdit$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  tempData$: BehaviorSubject<any> = new BehaviorSubject({});\n  countries!: IPickListItem[];\n  states!: IStateReadOnlyModel[];\n  graduateProfiles!: IGraduateProfileReadOnlyModel[];\n  medicalTraining!: IMedicalTrainingModel;\n  residencyPrograms!: IResidencyProgramReadOnlyModel[];\n  degrees: IDegreeReadOnlyModel[] = [];\n  userId!: number;\n  createMode!: boolean;\n  trainingCols = MEDICAL_TRAINING_COLS;\n  fellowshipCols = FELLOWSHIP_COLS;\n  medicalTrainingReadOnly!: IMedicalTrainingModel;\n  medicalTrainingId!: number;\n  trainingAddEditTitle: string | undefined;\n  isEdit = true;\n  showTrainingAddEdit = false;\n  showFellowshipAddEdit = false;\n  year = new Date().getFullYear();\n  maxYear: Date = new Date();\n\n  medicalTrainingForm = new FormGroup({\n    graduateProfileId: new FormControl(''),\n    medicalSchoolName: new FormControl(''),\n    medicalSchoolCity: new FormControl(''),\n    medicalSchoolStateId: new FormControl({ value: '', disabled: true }),\n    medicalSchoolCountryId: new FormControl(''),\n    degreeId: new FormControl(''),\n    medicalSchoolCompletionYear: new FormControl(''),\n    residencyProgramName: new FormControl(0),\n    residencyCompletionYear: new FormControl(''),\n    residencyProgramOther: new FormControl(''),\n  });\n\n  constructor(\n    private _store: Store,\n    private globalDialogService: GlobalDialogService,\n    private advancedTrainingService: AdvancedTrainingService,\n    private fellowshipService: FellowshipService\n  ) {}\n\n  ngOnInit(): void {\n    this.maxYear.setFullYear(this.year);\n    this.userId$?.subscribe((id) => {\n      this.userId = id;\n    });\n    this.dispatchState();\n    this.setPicklists();\n    this.getAdvancedTrainingGridData();\n    this.getFellowshipGridData();\n    this.getMedicalTraining();\n  }\n\n  dispatchState() {\n    this._store.dispatch(new GetMedicalTraining());\n    this._store.dispatch(new GetFellowshipPrograms());\n    this._store.dispatch(new GetResidencyPrograms());\n    this._store.dispatch(new GetGraduateProfiles());\n    this._store.dispatch(new GetDegrees());\n  }\n\n  setPicklists() {\n    this.countries$?.subscribe((countries: IPickListItem[]) => {\n      this.countries = countries;\n    });\n    this.graduateProfiles$?.subscribe(\n      (graduateProfiles: IGraduateProfileReadOnlyModel[]) => {\n        this.graduateProfiles = graduateProfiles;\n      }\n    );\n    this.degrees$?.subscribe((degrees: IDegreeReadOnlyModel[]) => {\n      this.degrees = degrees;\n    });\n    this.residencyPrograms$?.subscribe(\n      (residencyPrograms: IResidencyProgramReadOnlyModel[]) => {\n        this.residencyPrograms = residencyPrograms;\n      }\n    );\n  }\n\n  getAdvancedTrainingGridData() {\n    this.advancedTrainingService\n      .retrieveAdvancedTrainingReadOnly_GetByUserId()\n      .subscribe((res: IAdvancedTrainingReadOnlyModel[]) => {\n        this.advancedTraining$.next(res);\n      });\n  }\n\n  getFellowshipGridData() {\n    this.fellowshipService\n      .retrieveFellowshipReadOnly_GetByUserId()\n      .subscribe((res: IFellowshipReadOnlyModel[]) => {\n        this.fellowships$.next(res);\n      });\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining$?.subscribe(\n      (medicalTraining: IMedicalTrainingModel) => {\n        if (medicalTraining) {\n          this.createMode = false;\n          this.medicalTrainingId = medicalTraining.id;\n          this.medicalTrainingReadOnly = medicalTraining;\n          const residencyProgramId = this.residencyPrograms.filter(\n            (program) =>\n              program.programName === medicalTraining.residencyProgramName\n          )[0].programId;\n          this.setStates(medicalTraining.medicalSchoolCountryId);\n          this.medicalTrainingForm.get('medicalSchoolStateId')?.enable();\n\n          for (const [key, value] of Object.entries(medicalTraining)) {\n            this.medicalTrainingForm.get(key)?.patchValue(value);\n          }\n          this.medicalTrainingForm\n            .get('graduateProfileId')\n            ?.patchValue(medicalTraining.graduateProfileId.toString());\n          this.medicalTrainingForm\n            .get('residencyProgramName')\n            ?.patchValue(residencyProgramId);\n        } else {\n          this.createMode = true;\n        }\n      }\n    );\n  }\n\n  onCountryChange(event: any) {\n    const countryId = event.value;\n    this.setStates(countryId);\n  }\n\n  setStates(countryId: string) {\n    this._store.dispatch(new GetStateList(countryId));\n    this.states$?.subscribe((states: IStateReadOnlyModel[]) => {\n      this.states = states;\n      if (states.length > 0) {\n        this.medicalTrainingForm.get('medicalSchoolStateId')?.enable();\n      } else {\n        this.medicalTrainingForm.get('medicalSchoolStateId')?.disable();\n      }\n    });\n  }\n\n  handleGridAction($event: any, form: string) {\n    const data = $event.data;\n\n    const actions: MedicalTrainingActions = {\n      edit: {\n        additionalTraining: () => {\n          this.isAdditionalAdvancedEdit$.next(true);\n          this.tempData$.next(data);\n          this.showTrainingModal(true);\n        },\n        fellowship: () => {\n          this.isFellowshipEdit$.next(true);\n          this.tempData$.next(data);\n          this.showFellowshipModal(true);\n        },\n      },\n      delete: {\n        fellowship: () => {\n          this.fellowshipService.deleteFellowship(data.id).subscribe(() => {\n            this.getFellowshipGridData();\n          });\n        },\n      },\n    };\n\n    const action = actions[$event.fieldKey]?.[form];\n    if (action) {\n      action();\n    }\n  }\n\n  showTrainingModal(isEdit = false) {\n    this.isAdditionalAdvancedEdit$.next(isEdit);\n    this.showTrainingAddEdit = !this.showTrainingAddEdit;\n  }\n\n  showFellowshipModal(isEdit = false) {\n    this.isFellowshipEdit$.next(isEdit);\n    this.showFellowshipAddEdit = !this.showFellowshipAddEdit;\n  }\n\n  saveTraining($event: any) {\n    const formValues = $event.trainingRecord;\n    const programId: number | undefined = parseInt(\n      formValues.institutionName?.itemValue ?? ''\n    );\n    const trainingTypeId: number | undefined = parseInt(\n      formValues.trainingType ?? ''\n    );\n\n    const model = {\n      trainingTypeId: trainingTypeId ?? null,\n      programId: programId ?? null,\n      other: formValues.other ?? undefined,\n      startDate: new Date(formValues.startDate ?? '').toISOString() ?? null,\n      endDate: new Date(formValues.endDate ?? '').toISOString() ?? null,\n    };\n\n    if ($event.edit === true && $event.trainingId) {\n      this.advancedTrainingService\n        .updateAdvancedTraining($event.trainingId, model)\n        .subscribe(() => {\n          this.getAdvancedTrainingGridData();\n        });\n    }\n\n    if ($event.edit === false) {\n      this.advancedTrainingService\n        .createAdvancedTraining(model)\n        .subscribe(() => {\n          this.getAdvancedTrainingGridData();\n        });\n    }\n\n    this.showTrainingAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  saveFellowship($event: any) {\n    this.showFellowshipAddEdit = $event.show;\n\n    const model = {\n      programName: $event.fellowshipForm.programName,\n      completionYear:\n        new Date($event.fellowshipForm.completionYear ?? '').toISOString() ??\n        null,\n      programOther: $event.fellowshipForm.programOther,\n    };\n\n    if ($event.edit === true && $event.fellowshipId) {\n      this.fellowshipService\n        .updateFellowship($event.fellowshipId, model)\n        .subscribe(() => {\n          this.getFellowshipGridData();\n        });\n    }\n\n    if ($event.edit === false) {\n      this.fellowshipService.createFellowship(model).subscribe(() => {\n        this.getFellowshipGridData();\n      });\n    }\n\n    this.showTrainingAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  cancelAddEditFellowship($event: any) {\n    this.showFellowshipAddEdit = $event.show;\n    this.tempData$.next({});\n  }\n\n  toggleFormEdit(toggle: boolean) {\n    this.isEdit = toggle;\n  }\n\n  save() {\n    const formValues = this.medicalTrainingForm.value;\n\n    const medicalSchoolCompletionYear = formValues.medicalSchoolCompletionYear\n      ? new Date(formValues.medicalSchoolCompletionYear ?? '')\n          .getFullYear()\n          .toString()\n      : '';\n\n    const residencyCompletionYear = formValues.residencyCompletionYear\n      ? new Date(formValues.residencyCompletionYear ?? '')\n          .getFullYear()\n          .toString()\n      : '';\n\n    const residencyProgramName = this.residencyPrograms.filter((program) => {\n      if (\n        formValues.residencyProgramName &&\n        +program.programId === +formValues.residencyProgramName\n      ) {\n        return program;\n      } else return [];\n    });\n\n    const model = {\n      userId: this.userId,\n      graduateProfileId: parseInt(formValues.graduateProfileId ?? ''),\n      medicalSchoolName: formValues.medicalSchoolName,\n      medicalSchoolCity: formValues.medicalSchoolCity,\n      medicalSchoolStateId: formValues.medicalSchoolStateId,\n      medicalSchoolCountryId: formValues.medicalSchoolCountryId,\n      medicalSchoolCompletionYear,\n      degreeId: formValues.degreeId,\n      residencyProgramName: residencyProgramName[0].programName,\n      residencyCompletionYear,\n      residencyProgramOther: formValues.residencyProgramOther,\n      createdByUserId: this.userId,\n    } as unknown as IMedicalTrainingModel;\n\n    this.globalDialogService\n      .showConfirmation('Confirmation', 'Are you sure?')\n      .then((result) => {\n        if (result) {\n          if (this.createMode === true) {\n            this._store.dispatch(new CreateMedicalTraining(model));\n          } else {\n            model['id'] = this.medicalTrainingId;\n            this._store.dispatch(new UpdateMedicalTraining(model));\n          }\n          this.globalDialogService.showSuccessError(\n            'Success',\n            'Medical Training Saved',\n            true\n          );\n        } else {\n          this.globalDialogService.showSuccessError(\n            'Error',\n            'Medical Training not Saved',\n            false\n          );\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-section {\n  margin: 2rem 0;\n}\n.form-section__title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\nhr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\n\n.btn-upload {\n  margin-top: 1.75rem;\n  min-width: 150px;\n  color: var(--global-success);\n}\n.btn-remove {\n  margin-top: 2rem;\n  min-width: 150px;\n  color: var(--global-danger);\n}\n\n.file-upload {\n  width: 100%;\n  .file-upload__label {\n    cursor: pointer;\n    display: block;\n    width: 100%;\n    border: 1px solid #a2a2a2;\n    border-radius: 6px;\n    padding: 0.5rem 3rem 0.5rem 1rem;\n    font-weight: 400;\n    font-style: italic;\n    i {\n      margin-right: 0.75rem;\n      color: var(--global-warning);\n    }\n  }\n  .file-upload__input {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./medical-training.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "advancedTrainingService",
                        "type": "AdvancedTrainingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fellowshipService",
                        "type": "FellowshipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "advancedTrainingService",
                        "type": "AdvancedTrainingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fellowshipService",
                        "type": "FellowshipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h1>Medical Training</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <form id=\"medicalTrainingForm\" [formGroup]=\"medicalTrainingForm\">\n          <div class=\"form-section mt-0\">\n            <h5 class=\"form-section__title\">Medical School</h5>\n            <hr />\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12\">\n                <label\n                  >Select the statement that best describes you (Country of\n                  medical school)</label\n                >\n                <div>\n                  {{ medicalTrainingReadOnly.graduateProfileDescription }}\n                </div>\n              </div>\n              <div class=\"col-12 flex flex-column\">\n                <label>Medical School</label>\n                <div>\n                  {{ medicalTrainingReadOnly.medicalSchoolName }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>Country</label>\n                {{ medicalTrainingReadOnly.medicalSchoolCountryId }}\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>State / Province / Territory</label>\n                {{ medicalTrainingReadOnly.medicalSchoolStateId }}\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>City or Town</label>\n                <div>\n                  {{ medicalTrainingReadOnly.medicalSchoolCity }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-4 flex flex-column\">\n                <label>Degree</label>\n                {{ medicalTrainingReadOnly.degreeName }}\n              </div>\n              <div class=\"col-12 md:col-6 flex flex-column\">\n                <label>Year of Completion</label>\n                {{ medicalTrainingReadOnly.medicalSchoolCompletionYear }}\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"graduateProfileId\"\n                  >Select the statement that best describes you (Country of\n                  medical school)</label\n                >\n                <p-dropdown\n                  [options]=\"graduateProfiles\"\n                  formControlName=\"graduateProfileId\"\n                  inputId=\"graduateProfileId\"\n                  placeholder=\"Select one\"\n                  optionLabel=\"description\"\n                  optionValue=\"type\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"medicalSchool\"\n                  >Medical School *</label\n                >\n                <input\n                  pInputText\n                  required\n                  formControlName=\"medicalSchoolName\"\n                  type=\"text\"\n                  placeholder=\"Enter school name\"\n                  name=\"medicalSchool\"\n                />\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"medicalSchoolCountryId\">\n                  Country\n                </label>\n                <p-dropdown\n                  inputId=\"country\"\n                  [options]=\"countries\"\n                  (onChange)=\"onCountryChange($event)\"\n                  placeholder=\"Choose country\"\n                  formControlName=\"medicalSchoolCountryId\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"state\"\n                  >State / Province / Territory</label\n                >\n                <p-dropdown\n                  inputId=\"state\"\n                  [options]=\"states\"\n                  placeholder=\"Choose state\"\n                  formControlName=\"medicalSchoolStateId\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-4\">\n                <label class=\"block\" for=\"medicalSchoolCity\"\n                  >City or Town *</label\n                >\n                <input\n                  pInputText\n                  required\n                  type=\"text\"\n                  placeholder=\"Enter city name\"\n                  formControlName=\"medicalSchoolCity\"\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"degreeId\">Degree *</label>\n                <p-dropdown\n                  [required]=\"true\"\n                  [options]=\"degrees\"\n                  formControlName=\"degreeId\"\n                  inputId=\"degreeId\"\n                  placeholder=\"Select a degree\"\n                  optionLabel=\"itemDisplay\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"flex flex-column col-12 md:col-6\">\n                <label htmlFor=\"other\">Year of Completion *</label>\n                <p-calendar\n                  [required]=\"true\"\n                  [maxDate]=\"maxYear\"\n                  view=\"year\"\n                  dateFormat=\"yy\"\n                  inputId=\"yearpicker\"\n                  formControlName=\"medicalSchoolCompletionYear\"\n                  placeholder=\"YYYY\"\n                  appendTo=\"body\"\n                ></p-calendar>\n                <small\n                  *ngIf=\"\n                    medicalTrainingForm.get('medicalSchoolCompletionYear')\n                      ?.errors &&\n                    medicalTrainingForm.get('medicalSchoolCompletionYear')\n                      ?.dirty\n                  \"\n                  id=\"trainingType-help\"\n                  class=\"form-error-text\"\n                >\n                  This is required\n                </small>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Residency</h5>\n            <hr />\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label>Program Name</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyProgramName }}\n                    </div>\n                  </div>\n                  <div class=\"col-12\">\n                    <label>Year of Completion</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyCompletionYear }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label>My program is not listed</label>\n                    <div>\n                      {{ medicalTrainingReadOnly.residencyProgramOther }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label class=\"block\" for=\"residencyProgramName\"\n                      >Enter program name</label\n                    >\n                    <p-dropdown\n                      [options]=\"residencyPrograms\"\n                      formControlName=\"residencyProgramName\"\n                      inputId=\"residencyProgramName\"\n                      placeholder=\"Select a program\"\n                      optionLabel=\"programName\"\n                      optionValue=\"programId\"\n                      appendTo=\"body\"\n                    ></p-dropdown>\n                  </div>\n                  <div class=\"flex flex-column col-12\">\n                    <label htmlFor=\"other\">Year of Completion *</label>\n                    <p-calendar\n                      [required]=\"true\"\n                      [maxDate]=\"maxYear\"\n                      view=\"year\"\n                      dateFormat=\"yy\"\n                      inputId=\"yearpicker\"\n                      formControlName=\"residencyCompletionYear\"\n                      placeholder=\"YYYY\"\n                      appendTo=\"body\"\n                    ></p-calendar>\n                    <small\n                      *ngIf=\"\n                        medicalTrainingForm.get('residencyCompletionYear')\n                          ?.errors &&\n                        medicalTrainingForm.get('residencyCompletionYear')\n                          ?.dirty\n                      \"\n                      id=\"trainingType-help\"\n                      class=\"form-error-text\"\n                    >\n                      This is required\n                    </small>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"grid\">\n                  <div class=\"col-12\">\n                    <label class=\"block\" for=\"residencyProgramOther\"\n                      >My program is not listed</label\n                    >\n                    <textarea\n                      required\n                      pInputTextarea\n                      rows=\"5\"\n                      formControlName=\"residencyProgramOther\"\n                      placeholder=\"Explain...\"\n                    ></textarea>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Fellowship</h5>\n            <hr />\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n              neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n              erat, egestas sit amet tortor at, condimentum tempor erat.\n            </p>\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <sl-button\n                  variant=\"default\"\n                  class=\"btn-add mt-4 mb-1\"\n                  (click)=\"showFellowshipModal()\"\n                >\n                  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                  ADD RECORD\n                </sl-button>\n                <abs-grid\n                  [columns]=\"fellowshipCols\"\n                  [data]=\"fellowships$\"\n                  (action)=\"handleGridAction($event, 'fellowship')\"\n                  class=\"margin-bottom-2\"\n                ></abs-grid>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">\n              Certificates or Other Certifications\n            </h5>\n            <hr />\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">\n              Additional / Advanced Medical Training\n            </h5>\n            <hr />\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <sl-button\n                  variant=\"default\"\n                  class=\"btn-add mt-4 mb-1\"\n                  (click)=\"showTrainingModal()\"\n                >\n                  <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                  ADD RECORD\n                </sl-button>\n                <abs-grid\n                  [columns]=\"trainingCols\"\n                  [data]=\"advancedTraining$\"\n                  (action)=\"handleGridAction($event, 'additionalTraining')\"\n                  class=\"margin-bottom-2\"\n                  [pagination]=\"true\"\n                  [itemsPerPage]=\"5\"\n                ></abs-grid>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-12\">\n            <div class=\"flex justify-content-end\" *ngIf=\"!isEdit\">\n              <sl-button\n                variant=\"primary\"\n                style=\"width: 200px\"\n                (click)=\"toggleFormEdit(true)\"\n                >Edit</sl-button\n              >\n            </div>\n            <div class=\"flex justify-content-end\" *ngIf=\"isEdit\">\n              <sl-button variant=\"text\" (click)=\"toggleFormEdit(false)\"\n                >Cancel</sl-button\n              >\n              <sl-button\n                type=\"submit\"\n                style=\"width: 337px\"\n                variant=\"primary\"\n                (click)=\"save()\"\n                >Save</sl-button\n              >\n            </div>\n          </div>\n        </form>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<abs-modal\n  [open]=\"showTrainingAddEdit\"\n  (closeDialog)=\"cancelAddEditTraining($event)\"\n  title=\"{{\n    (isAdditionalAdvancedEdit$ | async) ? 'Edit' : 'Add'\n  }} Additional / Advanced Medical Training\"\n>\n  <abs-training-add-edit-modal\n    [userId]=\"userId\"\n    [training$]=\"tempData$\"\n    [isEdit$]=\"isAdditionalAdvancedEdit$\"\n    (cancelDialog)=\"cancelAddEditTraining($event)\"\n    (saveDialog)=\"saveTraining($event)\"\n  ></abs-training-add-edit-modal>\n</abs-modal>\n\n<abs-modal\n  [open]=\"showFellowshipAddEdit\"\n  (closeDialog)=\"cancelAddEditFellowship($event)\"\n  title=\"{{ (isAdditionalAdvancedEdit$ | async) ? 'Edit' : 'Add' }} Fellowship\"\n>\n  <abs-fellowship-add-edit-modal\n    [userId]=\"userId\"\n    [fellowship$]=\"tempData$\"\n    [isEdit$]=\"isFellowshipEdit$\"\n    (cancelDialog)=\"cancelAddEditFellowship($event)\"\n    (saveDialog)=\"saveFellowship($event)\"\n  ></abs-fellowship-add-edit-modal>\n</abs-modal>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading medical training...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-3a664cab89edcdd2b7ea29ac62d9fe86e2ce63478a069c70fdbf7e5294761ef4865e12a37accb92c9dcd4b58e76332efd27b62bae009d712a1ad61264beb5e47",
            "file": "src/app/shared/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hideClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "modalName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "preventOverlayClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "70",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-modal',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ModalComponent {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Input() open = false;\n  @Input() title!: string | undefined;\n  @Input() status!: string | undefined;\n  @Input() modalName!: any;\n  @Input() preventOverlayClose = false;\n  @Input() hideClose = false;\n  @Input() width = 70;\n\n  close(event: any) {\n    if (this.preventOverlayClose && event.detail.source === 'overlay') {\n      event.preventDefault();\n    } else {\n      this.closeDialog.emit({ action: this.modalName });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-dialog::part(header-actions) {\n  padding: 0;\n}\nsl-dialog.hide-close::part(close-button) {\n  display: none;\n}\nsl-dialog::part(header)::after {\n  height: 1px;\n  color: var(--global-gray-lightest);\n}\n\nsl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n\n.status {\n  text-transform: capitalize;\n}\n.completed {\n  color: var(--global-success);\n}\n.in-progress {\n  color: var(--global-warning);\n}\n.alert {\n  color: var(--global-danger);\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<sl-dialog\n  [open]=\"open\"\n  [style]=\"'--width: ' + width + '%'\"\n  [class]=\"hideClose ? 'hide-close' : ''\"\n  (sl-request-close)=\"close($event)\"\n>\n  <div class=\"flex justify-content-between align-items-center\" slot=\"label\">\n    <span class=\"text-2xl\">{{ title }}</span>\n    <!-- TODO: [Joe] status and status class should be derieved from state of reactive form(s) -->\n    <span class=\"text-base\" *ngIf=\"status\">\n      Status:\n      <span [class]=\"'status ' + status\">{{\n        status.replace('-', ' ')\n      }}</span></span\n    >\n  </div>\n  <div class=\"modal-content\">\n    <ng-content></ng-content>\n  </div>\n</sl-dialog>\n"
        },
        {
            "name": "MyAccountComponent",
            "id": "component-MyAccountComponent-eb1c8bd8d142511e33d0c23541e1861068724c48aaff038bc3435a95aed7673b4760e1db3f6d522cf1369bb9d64c3edbec94f83a92034065f32e3b9ce8a922d8",
            "file": "src/app/my-account/my-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-my-account",
            "styleUrls": [
                "./my-account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-account.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clearErrors",
                    "defaultValue": "new ClearErrors()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "errors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "MyAccountSelectors.errors"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "myAccountForm",
                    "defaultValue": "new FormGroup(\n    {\n      emailAddress: new FormControl('', [Validators.email]),\n      confirmEmailAddress: new FormControl('', [Validators.email]),\n      password: new FormControl('', [validatePassword()]),\n      confirmPassword: new FormControl('', [validatePassword()]),\n      mailingList: new FormControl(true),\n    },\n    {\n      validators: [\n        matchFields('emailAddress', 'confirmEmailAddress'),\n        matchFields('password', 'confirmPassword'),\n      ],\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "profilePicture",
                    "defaultValue": "'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile | null",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IUserProfile | null> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.user"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrors",
                    "args": [
                        {
                            "name": "error",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ProfileHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FormErrorsComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, OnDestroy } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { matchFields, validatePassword } from '../shared/validators/validators';\nimport {\n  IUserCredential,\n  MyAccountSelectors,\n  SaveMyAccountChanges,\n  UserProfileSelectors,\n  IUserProfile,\n} from '../state';\nimport { ClearErrors } from '../state';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { FormErrorsComponent } from '../shared/components/form-errors/form-errors.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@Component({\n  selector: 'abs-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ProfileHeaderComponent,\n    FormErrorsComponent,\n    InputTextModule,\n    PasswordModule,\n    CheckboxModule,\n  ],\n})\nexport class MyAccountComponent implements OnDestroy {\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile | null>\n    | undefined;\n  @Select(MyAccountSelectors.errors) errors$: Observable<any> | undefined;\n\n  clearErrors = new ClearErrors();\n\n  userSub: Subscription | undefined;\n  user: IUserProfile | null = null;\n\n  isEdit = false;\n  profilePicture =\n    'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU';\n\n  myAccountForm: FormGroup = new FormGroup(\n    {\n      emailAddress: new FormControl('', [Validators.email]),\n      confirmEmailAddress: new FormControl('', [Validators.email]),\n      password: new FormControl('', [validatePassword()]),\n      confirmPassword: new FormControl('', [validatePassword()]),\n      mailingList: new FormControl(true),\n    },\n    {\n      validators: [\n        matchFields('emailAddress', 'confirmEmailAddress'),\n        matchFields('password', 'confirmPassword'),\n      ],\n    }\n  );\n  constructor(private store: Store) {\n    this.userSub = this.user$?.subscribe((user) => {\n      if (user) {\n        this.user = user;\n        this.myAccountForm.patchValue({\n          emailAddress: this.user?.emailAddress,\n          confirmEmailAddress: this.user?.emailAddress,\n        });\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.userSub?.unsubscribe();\n  }\n\n  getErrors(error: object) {\n    return Object.values(error);\n  }\n\n  resetForm($event: Event) {\n    $event.preventDefault();\n    this.myAccountForm.reset();\n    this.myAccountForm.patchValue({\n      emailAddress: this.user?.emailAddress,\n      confirmEmailAddress: this.user?.emailAddress,\n    });\n    this.isEdit = false;\n  }\n\n  selectAll($event: Event) {\n    const target = $event.target as HTMLInputElement;\n    target.select();\n  }\n  onSubmit() {\n    // submit actions\n    const emailAddress = this.myAccountForm.value.emailAddress\n      ? this.myAccountForm.value.emailAddress\n      : null;\n    const password = this.myAccountForm.value.password;\n    const userCreds: IUserCredential = {\n      emailAddress,\n      password,\n    };\n    this.store.dispatch(new SaveMyAccountChanges(userCreds));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mock-placeholder {\n  width: 80%;\n  //min-width: 100rem;\n  opacity: 1;\n  img {\n    width: 100%;\n  }\n}\n\n.account-status {\n  color: var(--global-gray-dark);\n}\n",
                    "styleUrl": "./my-account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<header>\n  <h1>My Account</h1>\n</header>\n<ng-container *ngIf=\"user$ | async as user; else loading\">\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header\n          [profilePicture]=\"profilePicture\"\n          [user]=\"user\"\n        ></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <ng-container *ngIf=\"isEdit\">\n          <abs-form-errors\n            *ngIf=\"errors$ | async as error\"\n            [errors]=\"error\"\n            [clearErrors]=\"clearErrors\"\n          ></abs-form-errors>\n        </ng-container>\n        <div class=\"grid\" *ngIf=\"!isEdit\">\n          <div class=\"col-12 md:col-6\">\n            <label>Email Address</label>\n            <div>{{ user.emailAddress }}</div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label>Password</label>\n            <div>********</div>\n          </div>\n          <div class=\"col-12 md:col-6 flex align-items-center gap-2\">\n            <p-checkbox\n              inputId=\"mailingList\"\n              name=\"mailingList\"\n              formControlName=\"mailingList\"\n              [binary]=\"true\"\n              [readonly]=\"true\"\n            ></p-checkbox>\n            <label for=\"mailingList\">Receive ABS Emails / Newsletters?</label>\n          </div>\n          <div class=\"col-12 flex justify-content-end\">\n            <sl-button\n              variant=\"primary\"\n              style=\"width: 200px\"\n              (click)=\"isEdit = true\"\n              >Edit</sl-button\n            >\n          </div>\n        </div>\n        <form\n          name=\"myAccountForm\"\n          [formGroup]=\"myAccountForm\"\n          (ngSubmit)=\"onSubmit()\"\n        >\n          <div class=\"grid\" *ngIf=\"isEdit\">\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"emailAddress\">Email Address</label>\n              <input\n                id=\"emailAddress\"\n                pInputText\n                type=\"email\"\n                formControlName=\"emailAddress\"\n              />\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"confirmEmailAddress\"\n                >Confirm Email Address</label\n              >\n              <input\n                id=\"confirmEmailAddress\"\n                pInputText\n                type=\"email\"\n                formControlName=\"confirmEmailAddress\"\n              />\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" htmlFor=\"password\">Password</label>\n              <p-password\n                inputId=\"password\"\n                formControlName=\"password\"\n                [feedback]=\"false\"\n                [toggleMask]=\"true\"\n              ></p-password>\n            </div>\n            <div class=\"col-12 md:col-6\">\n              <label class=\"block\" for=\"confirmPassword\"\n                >Confirm Password</label\n              >\n              <p-password\n                inputId=\"confirmPassword\"\n                formControlName=\"confirmPassword\"\n                [feedback]=\"false\"\n                [toggleMask]=\"true\"\n              ></p-password>\n            </div>\n            <div class=\"col-12 md:col-6 flex align-items-center gap-2\">\n              <p-checkbox\n                inputId=\"mailingList\"\n                name=\"mailingList\"\n                formControlName=\"mailingList\"\n                [binary]=\"true\"\n              ></p-checkbox>\n              <label for=\"mailingList\">Receive ABS Emails / Newsletters?</label>\n            </div>\n            <div class=\"col-12 flex justify-content-end\">\n              <sl-button type=\"reset\" variant=\"text\" (click)=\"resetForm($event)\"\n                >Cancel</sl-button\n              >\n              <sl-button\n                type=\"submit\"\n                style=\"width: 337px\"\n                variant=\"primary\"\n                [disabled]=\"myAccountForm.invalid\"\n                >Save</sl-button\n              >\n            </div>\n          </div>\n        </form>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading account details...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "OutcomeRegistriesModalComponent",
            "id": "component-OutcomeRegistriesModalComponent-7fa782825e2dd3487454b7e44603e076a71d6b8066a6b584c5c8980b0224c20664f03b66b1fdf0be92f0c7989b0aaee94a293c545e65157c24b1b5354d593ef3",
            "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-outcome-registries-modal",
            "styleUrls": [
                "./outcome-registries-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./outcome-registries-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "call",
                    "defaultValue": "{\n    isSuccess: false,\n    message: '',\n    showDialog: false,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "disableSubmit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "outcomeRegistries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IOutcomeRegistryModel> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ContinuousCertificationSelectors.GetOutcomeRegistries"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "outcomeRegistriesForm",
                    "defaultValue": "new FormGroup({\n    surgeonSpecificRegistry: new FormControl(false, [Validators.required]),\n    registryComments: new FormControl('', [Validators.required]),\n    registeredWithACHQC: new FormControl(false, [Validators.required]),\n    registeredWithCESQIP: new FormControl(false, [Validators.required]),\n    registeredWithMBSAQIP: new FormControl(false, [Validators.required]),\n    registeredWithABA: new FormControl(false, [Validators.required]),\n    registeredWithASBS: new FormControl(false, [Validators.required]),\n    registeredWithStatewideCollaboratives: new FormControl(false, [\n      Validators.required,\n    ]),\n    registeredWithABMS: new FormControl(false, [Validators.required]),\n    registeredWithNCDB: new FormControl(false, [Validators.required]),\n    registeredWithRQRS: new FormControl(false, [Validators.required]),\n    registeredWithNSQIP: new FormControl(false, [Validators.required]),\n    registeredWithNTDB: new FormControl(false, [Validators.required]),\n    registeredWithSTS: new FormControl(false, [Validators.required]),\n    registeredWithTQIP: new FormControl(false, [Validators.required]),\n    registeredWithUNOS: new FormControl(false, [Validators.required]),\n    registeredWithNCDR: new FormControl(false, [Validators.required]),\n    registeredWithSVS: new FormControl(false, [Validators.required]),\n    registeredWithELSO: new FormControl(false, [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "outcomesandRegistriesFormFields",
                    "defaultValue": "OutcomeRegistriesFormFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "userId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.userId"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOutcomeRegistriesData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "SuccessFailModalComponent",
                    "type": "component"
                },
                {
                    "name": "RadioButtonModule",
                    "type": "module"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  ContinuousCertificationSelectors,\n  GetOutcomeRegistries,\n  UpdateOutcomeRegistries,\n} from 'src/app/state/continuous-certification';\nimport { UserProfileSelectors } from 'src/app/state';\nimport { Observable } from 'rxjs';\nimport { IOutcomeRegistryModel } from 'src/app/api/models/continuouscertification/outcome-registry.model';\nimport { OutcomeRegistriesFormFields } from './outcome-registries-form';\nimport { SuccessFailModalComponent } from 'src/app/shared/components/success-fail-modal/success-fail-modal.component';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@Component({\n  selector: 'abs-outcome-registries-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SuccessFailModalComponent,\n    RadioButtonModule,\n    InputTextareaModule,\n    CheckboxModule,\n  ],\n  templateUrl: './outcome-registries-modal.component.html',\n  styleUrls: ['./outcome-registries-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class OutcomeRegistriesModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  userId!: number;\n\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n  @Select(ContinuousCertificationSelectors.GetOutcomeRegistries)\n  outcomeRegistries$: Observable<IOutcomeRegistryModel> | undefined;\n  outcomesandRegistriesFormFields = OutcomeRegistriesFormFields;\n\n  call = {\n    isSuccess: false,\n    message: '',\n    showDialog: false,\n  };\n\n  disableSubmit = true;\n\n  outcomeRegistriesForm = new FormGroup({\n    surgeonSpecificRegistry: new FormControl(false, [Validators.required]),\n    registryComments: new FormControl('', [Validators.required]),\n    registeredWithACHQC: new FormControl(false, [Validators.required]),\n    registeredWithCESQIP: new FormControl(false, [Validators.required]),\n    registeredWithMBSAQIP: new FormControl(false, [Validators.required]),\n    registeredWithABA: new FormControl(false, [Validators.required]),\n    registeredWithASBS: new FormControl(false, [Validators.required]),\n    registeredWithStatewideCollaboratives: new FormControl(false, [\n      Validators.required,\n    ]),\n    registeredWithABMS: new FormControl(false, [Validators.required]),\n    registeredWithNCDB: new FormControl(false, [Validators.required]),\n    registeredWithRQRS: new FormControl(false, [Validators.required]),\n    registeredWithNSQIP: new FormControl(false, [Validators.required]),\n    registeredWithNTDB: new FormControl(false, [Validators.required]),\n    registeredWithSTS: new FormControl(false, [Validators.required]),\n    registeredWithTQIP: new FormControl(false, [Validators.required]),\n    registeredWithUNOS: new FormControl(false, [Validators.required]),\n    registeredWithNCDR: new FormControl(false, [Validators.required]),\n    registeredWithSVS: new FormControl(false, [Validators.required]),\n    registeredWithELSO: new FormControl(false, [Validators.required]),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n  });\n\n  constructor(private _store: Store) {\n    this.userId$?.subscribe((res: number) => {\n      if (res) {\n        this.userId = res;\n        this._store.dispatch(new GetOutcomeRegistries(res));\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.getOutcomeRegistriesData();\n  }\n\n  getOutcomeRegistriesData() {\n    this.outcomeRegistries$?.subscribe((res: any) => {\n      const outcomeRegistries = res.outcomeRegistries;\n      if (outcomeRegistries) {\n        for (const [key, value] of Object.entries(outcomeRegistries)) {\n          this.outcomeRegistriesForm.patchValue({\n            [key]: value,\n          });\n        }\n      }\n    });\n  }\n\n  onSubmit() {\n    const formValues = {\n      ...this.outcomeRegistriesForm.value,\n      userId: this.userId,\n      userConfirmedDateUtc: new Date().toDateString(),\n    };\n\n    this._store\n      .dispatch(new UpdateOutcomeRegistries(<IOutcomeRegistryModel>formValues))\n      .subscribe((result: any) => {\n        if (!result.continuous_certification.errors) {\n          this.call = {\n            showDialog: true,\n            message:\n              'Outcome Registries / Quality Assessment Programs Saved Successfully',\n            isSuccess: true,\n          };\n        } else {\n          this.call = {\n            showDialog: true,\n            message: 'An error occured while saving',\n            isSuccess: false,\n          };\n        }\n      });\n  }\n\n  close() {\n    this.closeDialog.emit();\n    this.call = {\n      isSuccess: false,\n      message: '',\n      showDialog: false,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-radio-group,\nsl-textarea {\n  margin-bottom: 2rem;\n}\n\nsl-radio-group::part(form-control-label) {\n  font-weight: medium;\n}\n\nspan {\n  display: block;\n  font-size: 0.875rem;\n  font-style: italic;\n  margin: 0 0 0.875rem 0;\n  position: relative;\n  // min-height: 21px;\n}\n\nsl-radio {\n  margin-right: 1.25rem;\n}\n\n.align-right {\n  text-align: right;\n}\n\nsmall {\n  display: block;\n}\n",
                    "styleUrl": "./outcome-registries-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\n  name=\"outcomeRegistriesForm\"\n  [formGroup]=\"outcomeRegistriesForm\"\n  (ngSubmit)=\"onSubmit()\"\n>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat. All fields are required.\n  </p>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of outcomesandRegistriesFormFields\"\n      class=\"flex-column col-12 md:{{ formField.size }} gap-3\"\n    >\n      <label>{{ formField.label }}</label>\n      <small class=\"mb-2\">{{ formField.subLabel }}</small>\n      <div class=\"flex gap-3\" *ngIf=\"formField.type === 'radio'\">\n        <div\n          class=\"flex flex-row align-items-center\"\n          *ngFor=\"let option of formField.options\"\n        >\n          <p-radioButton\n            [name]=\"formField.name\"\n            [formControlName]=\"formField.name\"\n            [inputId]=\"formField.name\"\n            [value]=\"option.value\"\n            [formControlName]=\"formField.name\"\n            ngDefaultControl\n          ></p-radioButton>\n          <label [for]=\"formField.name\" class=\"ml-2\">{{ option.label }}</label>\n        </div>\n      </div>\n      <textarea\n        *ngIf=\"formField.type === 'textarea'\"\n        pInputTextarea\n        [formControlName]=\"formField.name\"\n        ngDefaultControl\n      ></textarea>\n    </div>\n\n    <div class=\"col-12 md:col-6 flex align-items-start gap-2\">\n      <p-checkbox\n        value=\"yes\"\n        formControlName=\"userConfirmed\"\n        ngDefaultControl\n      ></p-checkbox>\n      <label for=\"userConfirmed\"\n        >I confirm the above information is completed and correct to the best of\n        my knowledge</label\n      >\n    </div>\n    <div class=\"col-12 md:col-6 align-right\">\n      <sl-button variant=\"default\" size=\"large\" (click)=\"close()\"\n        >Cancel</sl-button\n      >\n      <sl-button\n        class=\"wide\"\n        size=\"large\"\n        variant=\"warning\"\n        type=\"submit\"\n        [disabled]=\"\n          outcomeRegistriesForm.untouched && !outcomeRegistriesForm.valid\n        \"\n        >Save</sl-button\n      >\n    </div>\n  </div>\n</form>\n\n<abs-success-fail-modal\n  [isSuccess]=\"call.isSuccess\"\n  [showDialog]=\"call.showDialog\"\n  [message]=\"call.message\"\n  (closeDialog)=\"close()\"\n>\n</abs-success-fail-modal>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PayFeeComponent",
            "id": "component-PayFeeComponent-f10c249995e0cf01696bf635f411664b4f91d2cf66e1fb5f21c0eac3189a46fccd7840581590f6737f7df0f376e7c5886118e714ed2a57d39a14afc98410eeee",
            "file": "src/app/shared/components/pay-fee/pay-fee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-pay-fee",
            "styleUrls": [
                "./pay-fee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pay-fee.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "payFeeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "paymentGridData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelAction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "payFeeCols",
                    "defaultValue": "PAY_FEE_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "paymentInformationFormFields",
                    "defaultValue": "[\n    {\n      label: 'First Name',\n      value: '',\n      required: true,\n      name: 'firstName',\n      placeholder: 'Enter your first name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Last Name',\n      value: '',\n      required: true,\n      name: 'lastName',\n      placeholder: 'Enter your last name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Email Address',\n      value: '',\n      required: true,\n      name: 'emailAddress',\n      placeholder: 'Enter your email address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Phone Number',\n      value: '',\n      required: true,\n      name: 'phoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Street Address Line 1',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'streetAddressLine1',\n      placeholder: 'Enter your full address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Suite/Floor/Apt',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'streetAddressLine2',\n      placeholder: 'ex. Suite 3',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'state',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Zipcode',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'zipcode',\n      placeholder: 'Enter your zip code',\n      type: 'text',\n      size: 'col-4',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormFields[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "states",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "states$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IStateReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.states"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCancelAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmitAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPicklists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from '../grid/grid.component';\nimport { PAY_FEE_COLS } from './pay-fee-cols';\nimport { FormsModule } from '@angular/forms';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { GetStateList, PicklistsSelectors } from 'src/app/state/picklists';\nimport { Observable } from 'rxjs';\nimport { IStateReadOnlyModel } from 'src/app/api';\nimport { Select, Store } from '@ngxs/store';\nimport { IFormFields } from '../../models/form-fields/form-fields';\n\n@Component({\n  selector: 'abs-pay-fee',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    FormsModule,\n    InputTextModule,\n    DropdownModule,\n  ],\n  templateUrl: './pay-fee.component.html',\n  styleUrls: ['./pay-fee.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PayFeeComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Output() cancelAction: EventEmitter<any> = new EventEmitter();\n\n  @Input() payFeeData: any;\n  @Input() paymentGridData: any;\n\n  states: IStateReadOnlyModel[] = [];\n\n  paymentInformationFormFields: IFormFields[] = [\n    {\n      label: 'First Name',\n      value: '',\n      required: true,\n      name: 'firstName',\n      placeholder: 'Enter your first name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Last Name',\n      value: '',\n      required: true,\n      name: 'lastName',\n      placeholder: 'Enter your last name',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Email Address',\n      value: '',\n      required: true,\n      name: 'emailAddress',\n      placeholder: 'Enter your email address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Phone Number',\n      value: '',\n      required: true,\n      name: 'phoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Street Address Line 1',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'streetAddressLine1',\n      placeholder: 'Enter your full address',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'Suite/Floor/Apt',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'streetAddressLine2',\n      placeholder: 'ex. Suite 3',\n      type: 'text',\n      size: 'col-6',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'state',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Zipcode',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'zipcode',\n      placeholder: 'Enter your zip code',\n      type: 'text',\n      size: 'col-4',\n    },\n  ];\n\n  payFeeCols = PAY_FEE_COLS;\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n  }\n\n  ngOnInit(): void {\n    this.setPicklists();\n  }\n\n  setPicklists() {\n    this.states$?.subscribe((states) => {\n      this.states = states;\n      this.paymentInformationFormFields.filter((fields) => {\n        if (fields.name === 'state') {\n          fields.options = states;\n        }\n      });\n    });\n  }\n\n  handleGridAction(event: any) {\n    console.log(event);\n  }\n\n  handleCancelAction() {\n    this.cancelAction.emit();\n  }\n\n  handleSubmitAction() {\n    console.log('Submit');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".align-right {\n  text-align: right;\n}\n",
                    "styleUrl": "./pay-fee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 137,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dialog-intro col-12\">\n  <ng-content></ng-content>\n</div>\n\n<div class=\"flex flex-wrap\">\n  <div class=\"col-12 md:col-3\">Total Amount of Fee:</div>\n  <div class=\"col-12 md:col-9\">\n    <strong>{{ payFeeData?.totalAmountOfFee }}</strong>\n  </div>\n  <div class=\"col-12 md:col-3\">\n    Total Amount Paid as of\n    {{ payFeeData?.totalAmountPaidDate | date : 'MM/dd/yyyy' }}:\n  </div>\n  <div class=\"col-12 md:col-9\">\n    <strong>{{ payFeeData?.totalAmountPaid }}</strong>\n  </div>\n  <div class=\"col-12 md:col-3\">Remaining Balance:</div>\n  <div class=\"col-12 md:col-9 danger\">\n    <strong style=\"color: #8b040a\">{{ payFeeData?.remainingBalance }}</strong>\n  </div>\n</div>\n\n<abs-grid\n  [columns]=\"payFeeCols\"\n  [data]=\"paymentGridData\"\n  (action)=\"handleGridAction($event)\"\n  class=\"margin-bottom-2\"\n>\n</abs-grid>\n\n<h5 class=\"mt-5\">Payment Information</h5>\n\n<form class=\"mt-5\">\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of paymentInformationFormFields\"\n      class=\"flex flex-column gap-2 col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\">{{ formField.label }}</label>\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        pInputText\n      />\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [editable]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n      <span>{{ formField.subLabel }}</span>\n    </div>\n    <div class=\"col-12 md:col-12 align-right mt-5\">\n      <sl-button variant=\"default\" size=\"large\" (click)=\"handleCancelAction()\"\n        >Cancel</sl-button\n      >\n      <sl-button\n        class=\"wide\"\n        size=\"large\"\n        variant=\"warning\"\n        (click)=\"handleSubmitAction()\"\n        >Proceed to Pay</sl-button\n      >\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "PaymentHistoryComponent",
            "id": "component-PaymentHistoryComponent-5e118a938823f823fe9f2ca98d8a7bfcc2c2c35aef6f444656a6171d7422e72bab4c5b30ecb8da90e4e002dfee5662da122e8c172c6d4313da8f97e2e26e611e",
            "file": "src/app/payment-history/payment-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-payment-history",
            "styleUrls": [
                "./payment-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "paymentFooterData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "paymentHistoryCols",
                    "defaultValue": "PAYMENT_HISTORY_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "paymentHistoryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getPaymentHistoryData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePaymentClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, Component, OnInit } from '@angular/core';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { AlertComponent } from '../shared/components/alert/alert.component';\nimport { PAYMENT_HISTORY_COLS } from './payment-histroy-grid';\n\n@Component({\n  selector: 'abs-payment-history',\n  imports: [CommonModule, GridComponent, AlertComponent],\n  templateUrl: './payment-history.component.html',\n  styleUrls: ['./payment-history.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PaymentHistoryComponent implements OnInit {\n  paymentHistoryData!: any;\n  paymentHistoryCols = PAYMENT_HISTORY_COLS;\n  paymentFooterData!: any;\n\n  ngOnInit(): void {\n    this.getPaymentHistoryData();\n  }\n\n  getPaymentHistoryData() {\n    this.paymentHistoryData = [\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Vasular Surgery Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Pediatric Surgery Qualifying Examination (PQ - 2022)',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Pediatric Surgery Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Complex General Surgical Oncology Certifying Examination',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n      {\n        invoiceNumber: '12345678910112',\n        feeCode: 'VOET',\n        description: 'Hand Surgery Certification Examination (HC - 2022)',\n        totalBilled: '$1,700.00',\n        paid: '$0.00',\n        balance: '$1,700.00',\n      },\n    ];\n\n    this.paymentFooterData = {\n      date: new Date('10/10/2022'),\n      amount: '$1,700.00',\n    };\n  }\n\n  handlePaymentClick() {\n    console.log('handlePaymentClick');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".footer {\n  width: 100%;\n  font-weight: 500;\n  font-size: 15px;\n  strong {\n    margin-right: 5px;\n  }\n  .amount {\n    margin-left: 1.5rem;\n  }\n}\n",
                    "styleUrl": "./payment-history.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Payment History</h1>\n<sl-card>\n  <div slot=\"header\">Invoices and Payments Received</div>\n\n  <div class=\"mb-3\">\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n  </div>\n\n  <abs-grid [columns]=\"paymentHistoryCols\" [data]=\"paymentHistoryData\">\n    <div class=\"pb-5 pl-5 pr-5\">\n      <abs-alert alertType=\"info\" [hideIcon]=\"true\">\n        <div class=\"div flex justify-content-end footer\">\n          <strong>Total Unpaid balance</strong> as of\n          {{ paymentFooterData.date | date : 'shortDate' }}:\n          <div class=\"amount\">\n            {{ paymentFooterData.amount }}\n          </div>\n        </div>\n      </abs-alert>\n    </div>\n  </abs-grid>\n\n  <div class=\"flex justify-content-end mt-3\">\n    <sl-button\n      variant=\"warning\"\n      size=\"large\"\n      type=\"primary\"\n      (click)=\"handlePaymentClick()\"\n      >Make a Payment</sl-button\n    >\n  </div>\n</sl-card>\n"
        },
        {
            "name": "PersonalProfileComponent",
            "id": "component-PersonalProfileComponent-2cb50d400e3793518facb7f1113be2a69b2a3319bfb811b8de6c22d69483df369a8f570ce9f603e0007508d2aa27249909a683cd35b91eac237560b298e6032c",
            "file": "src/app/personal-profile/personal-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNgxMask()"
                }
            ],
            "selector": "abs-personal-profile",
            "styleUrls": [
                "./personal-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./personal-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "birthStates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "call",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "countries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPickListItem[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.countries"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "ethnicities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IEthnicityReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.ethnicities"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "genders$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPickListItem[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.genders"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "isEdit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "languages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPickListItem[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.languages"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "mailingStates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStateReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "races$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IRaceReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.races"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile | undefined",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IUserProfile> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.user"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userPicklistValues$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IPickListItem[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "PicklistsSelectors.userPicklistValues"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userProfileForm",
                    "defaultValue": "new FormGroup({\n    absId: new FormControl('', []),\n    bestLanguageId: new FormControl('', [Validators.required]),\n    birthCity: new FormControl('', [Validators.required]),\n    birthCountry: new FormControl('', [Validators.required]),\n    birthDate: new FormControl('', [Validators.required]),\n    birthState: new FormControl('', [Validators.required]),\n    city: new FormControl('', [Validators.required]),\n    country: new FormControl('', [Validators.required]),\n    countryCitizenship: new FormControl('', [Validators.required]),\n    displayName: new FormControl('', [Validators.required]),\n    emailAddress: new FormControl('', []),\n    ethnicity: new FormControl('', [Validators.required]),\n    firstLanguageId: new FormControl('', [Validators.required]),\n    firstName: new FormControl('', [Validators.required]),\n    genderId: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    middleName: new FormControl('', [\n      Validators.minLength(1),\n      Validators.maxLength(1),\n    ]),\n    mobilePhoneNumber: new FormControl('', []),\n    nPI: new FormControl('', []),\n    officePhoneNumber: new FormControl('', [Validators.required]),\n    profilePicture: new FormControl('', []),\n    race: new FormControl('', [Validators.required]),\n    receiveComms: new FormControl(false, [Validators.required]),\n    state: new FormControl('', [Validators.required]),\n    street1: new FormControl('', [Validators.required]),\n    street2: new FormControl('', []),\n    suffix: new FormControl('', []),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n    zipCode: new FormControl('', [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDialog",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ProfileHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "SuccessFailModalComponent",
                    "type": "component"
                },
                {
                    "name": "NgxMaskDirective",
                    "type": "directive"
                },
                {
                    "name": "NgxMaskPipe",
                    "type": "pipe"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "InputMaskModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { debounceTime, Observable, of, take } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\nimport { NgxMaskDirective } from 'ngx-mask';\nimport { NgxMaskPipe } from 'ngx-mask';\nimport { provideNgxMask } from 'ngx-mask';\n\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\n\nimport { UpdateUserProfile, UserProfileSelectors } from '../state';\nimport { IUserProfile } from '../state';\nimport {\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from '../state/picklists';\nimport {\n  IEthnicityReadOnlyModel,\n  IRaceReadOnlyModel,\n  IStateReadOnlyModel,\n} from '../api';\n\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { SuccessFailModalComponent } from '../shared/components/success-fail-modal/success-fail-modal.component';\n\nimport '../../web-components';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { CalendarModule } from 'primeng/calendar';\nimport { CheckboxModule } from 'primeng/checkbox';\n\n@UntilDestroy()\n@Component({\n  selector: 'abs-personal-profile',\n  templateUrl: './personal-profile.component.html',\n  styleUrls: ['./personal-profile.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ProfileHeaderComponent,\n    SuccessFailModalComponent,\n    NgxMaskDirective,\n    NgxMaskPipe,\n\n    InputTextModule,\n    DropdownModule,\n    InputMaskModule,\n    CalendarModule,\n    CheckboxModule,\n  ],\n  providers: [provideNgxMask()],\n})\nexport class PersonalProfileComponent {\n  // TODO: [Joe] set up national provider identifier (NPI) report button\n\n  @Select(UserProfileSelectors.user) user$:\n    | Observable<IUserProfile>\n    | undefined;\n  @Select(PicklistsSelectors.userPicklistValues) userPicklistValues$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.countries) countries$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.ethnicities) ethnicities$:\n    | Observable<IEthnicityReadOnlyModel[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.genders) genders$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.languages) languages$:\n    | Observable<IPickListItem[]>\n    | undefined;\n  @Select(PicklistsSelectors.slices.races) races$:\n    | Observable<IRaceReadOnlyModel[]>\n    | undefined;\n\n  // mailingStates$: Observable<IStateReadOnlyModel[] | undefined> = of([]);\n  mailingStates: IStateReadOnlyModel[] = [];\n  // birthStates$: Observable<IStateReadOnlyModel[] | undefined> = of([]);\n  birthStates: IStateReadOnlyModel[] = [];\n\n  user: IUserProfile | undefined;\n\n  isEdit = true;\n\n  // TODO: [Joe] this is eventually getting moved to a service for universal modals\n  call!: any;\n\n  userProfileForm: FormGroup = new FormGroup({\n    absId: new FormControl('', []),\n    bestLanguageId: new FormControl('', [Validators.required]),\n    birthCity: new FormControl('', [Validators.required]),\n    birthCountry: new FormControl('', [Validators.required]),\n    birthDate: new FormControl('', [Validators.required]),\n    birthState: new FormControl('', [Validators.required]),\n    city: new FormControl('', [Validators.required]),\n    country: new FormControl('', [Validators.required]),\n    countryCitizenship: new FormControl('', [Validators.required]),\n    displayName: new FormControl('', [Validators.required]),\n    emailAddress: new FormControl('', []),\n    ethnicity: new FormControl('', [Validators.required]),\n    firstLanguageId: new FormControl('', [Validators.required]),\n    firstName: new FormControl('', [Validators.required]),\n    genderId: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    middleName: new FormControl('', [\n      Validators.minLength(1),\n      Validators.maxLength(1),\n    ]),\n    mobilePhoneNumber: new FormControl('', []),\n    nPI: new FormControl('', []),\n    officePhoneNumber: new FormControl('', [Validators.required]),\n    profilePicture: new FormControl('', []),\n    race: new FormControl('', [Validators.required]),\n    receiveComms: new FormControl(false, [Validators.required]),\n    state: new FormControl('', [Validators.required]),\n    street1: new FormControl('', [Validators.required]),\n    street2: new FormControl('', []),\n    suffix: new FormControl('', []),\n    userConfirmed: new FormControl(false, [Validators.requiredTrue]),\n    zipCode: new FormControl('', [Validators.required]),\n  });\n\n  constructor(private _store: Store, private formBuilder: FormBuilder) {\n    this.user$\n      ?.pipe(debounceTime(300), untilDestroyed(this))\n      .subscribe((user: IUserProfile) => {\n        this.user = user;\n        this._store.dispatch(new GetStateList(user.country)).subscribe();\n        this.mailingStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this._store.dispatch(new GetStateList(user.birthCountry));\n        this.birthStates = this._store.selectSnapshot(\n          PicklistsSelectors.slices.states\n        ) as IStateReadOnlyModel[];\n        this.userProfileForm.patchValue({ ...user });\n        this.userProfileForm\n          .get('birthDate')\n          ?.setValue(new Date(user.birthDate));\n      });\n\n    this.userProfileForm.get('country')?.valueChanges.subscribe((value) => {\n      this._store\n        .dispatch(new GetStateList(value))\n        .pipe(take(1))\n        .subscribe(() => {\n          this.mailingStates = this._store.selectSnapshot(\n            PicklistsSelectors.slices.states\n          ) as IStateReadOnlyModel[];\n        });\n    });\n\n    this.userProfileForm\n      .get('birthCountry')\n      ?.valueChanges.subscribe((value) => {\n        this._store\n          .dispatch(new GetStateList(value))\n          .pipe(take(1))\n          .subscribe(() => {\n            this.birthStates = this._store.selectSnapshot(\n              PicklistsSelectors.slices.states\n            ) as IStateReadOnlyModel[];\n          });\n      });\n  }\n\n  save() {\n    this.call = {\n      title: 'Success',\n      message: 'Your profile has been updated.',\n      isSuccess: true,\n      showDialog: true,\n    };\n    this.toggleDialog(true);\n\n    this.isEdit = false;\n  }\n\n  toggleDialog($event: any) {\n    this.call.showDialog = $event.show;\n  }\n\n  onSubmit() {\n    // console.log('onSubmit');\n    this._store.dispatch(new UpdateUserProfile(this.userProfileForm.value));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-section {\n  margin: 2rem 0;\n}\n.form-section__title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\nhr {\n  background-color: var(--global-gray-light);\n  border: none;\n  height: 1px;\n}\n",
                    "styleUrl": "./personal-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<header>\n  <h1>Personal Profile</h1>\n</header>\n<ng-container *ngIf=\"user$ | async as user\">\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header\n          [profilePicture]=\"user.profilePicture\"\n        ></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <form\n          name=\"personProfileForm\"\n          [formGroup]=\"userProfileForm\"\n          (ngSubmit)=\"onSubmit()\"\n        >\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Name</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 sm:col-8 md:col-4\">\n                <label>First Name</label>\n                <div>{{ user.firstName }}</div>\n              </div>\n              <div class=\"col-12 sm:col-4 md:col-2\">\n                <label>M. I.</label>\n                <div>{{ user.middleName }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Last Name</label>\n                <div>{{ user.lastName }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Last Name</label>\n                <div>{{ user.suffix }}</div>\n              </div>\n              <div class=\"col-12\">\n                <label\n                  >Name as it should appear on your printed certificate</label\n                >\n                <div>{{ user.displayName }}</div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 sm:col-8 md:col-3\">\n                <label class=\"block\" for=\"firstName\">First Name</label>\n                <input\n                  id=\"firstName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"firstName\"\n                />\n              </div>\n              <div class=\"col-12 sm:col-4 md:col-3\">\n                <label class=\"block\" for=\"middleName\">M. I.</label>\n                <input\n                  id=\"middleName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"middleName\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"lastName\">Last Name</label>\n                <input\n                  id=\"lastName\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"lastName\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"suffix\">Suffix</label>\n                <input\n                  id=\"suffix\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"suffix\"\n                />\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"displayName\"\n                  >Name as it should appear on your printed certificate</label\n                >\n                <input pInputText type=\"text\" formControlName=\"displayName\" />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Mailing Address</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-9\">\n                <label>Street Address</label>\n                <div>{{ user.street1 }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Apt</label>\n                <div>{{ user.street2 }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>City</label>\n                <div>{{ user.city }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>State / Province</label>\n                <div>{{ user?.state }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Zipcode</label>\n                <div>{{ user.zipCode }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Country</label>\n                <div>{{ user?.country }}</div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-9 flex flex-column gap-1\">\n                <label class=\"block\" for=\"street1\">Street Address</label>\n                <input\n                  id=\"street1\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"street1\"\n                />\n                <small id=\"street1Help\" class=\"form-helper-text text-muted\"\n                  >Address Line 1</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3 flex flex-column gap-1\">\n                <label class=\"block\" for=\"street2\">&nbsp;</label>\n                <input\n                  id=\"street2\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"street2\"\n                />\n                <small id=\"street2Help\" class=\"form-helper-text text-muted\"\n                  >Address Line 2</small\n                >\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"city\">City</label>\n                <input\n                  id=\"city\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"city\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"state\">State / Province</label>\n                <p-dropdown\n                  inputId=\"state\"\n                  [options]=\"mailingStates\"\n                  formControlName=\"state\"\n                  placeholder=\"Select a State\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"zipCode\">Zipcode</label>\n                <input\n                  id=\"zipCode\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"zipCode\"\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"country\">Country</label>\n                <p-dropdown\n                  inputId=\"country\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"country\"\n                  placeholder=\"Select a Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Contact Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>Email Address</label>\n                <div>{{ user.emailAddress }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Daytime Phone Number</label>\n                <div>\n                  {{\n                    user.officePhoneNumber\n                      ? user.officePhoneNumber\n                      : ('' | mask : '(000) 000-0000')\n                  }}\n                </div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Mobile Phone Number</label>\n                <div>\n                  {{\n                    user?.mobilePhoneNumber\n                      ? user?.mobilePhoneNumber\n                      : ('' | mask : '(000) 000-0000')\n                  }}\n                </div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6 flex flex-column gap-1\">\n                <label class=\"block\" for=\"emailAddress\">Email Address</label>\n                <input\n                  id=\"emailAddress\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"emailAddress\"\n                  [disabled]=\"true\"\n                />\n                <small id=\"emailAddressHelp\" class=\"form-helper-text text-muted\"\n                  >Go to your My Account page to change your email</small\n                >\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"officePhoneNumber\"\n                  >Daytime Phone Number</label\n                >\n                <p-inputMask\n                  inputId=\"officePhoneNumber\"\n                  mask=\"(999) 999-9999\"\n                  formControlName=\"officePhoneNumber\"\n                  placeholder=\"(999) 999-9999\"\n                ></p-inputMask>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"mobilePhoneNumber\"\n                  >Mobile Phone Number</label\n                >\n                <p-inputMask\n                  inputId=\"mobilePhoneNumber\"\n                  mask=\"(999) 999-9999\"\n                  formControlName=\"mobilePhoneNumber\"\n                  placeholder=\"(999) 999-9999\"\n                ></p-inputMask>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Citizenship Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>Town or City of Birth</label>\n                <div>{{ user.birthCity }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>State, Province, or Territory of Birth</label>\n                <div>{{ user?.birthState }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Country of Birth</label>\n                <div>{{ user?.birthCountry }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>Country of Citizenship</label>\n                <div>{{ user?.countryCitizenship }}</div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthCity\"\n                  >Town or City of Birth</label\n                >\n                <input\n                  id=\"birthCity\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"birthCity\"\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthState\"\n                  >State, Province, or Territory of Birth</label\n                >\n                <p-dropdown\n                  inputId=\"birthState\"\n                  [options]=\"birthStates\"\n                  formControlName=\"birthState\"\n                  placeholder=\"Select a Birth State\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"birthCountry\">Country of Birth</label>\n                <p-dropdown\n                  inputId=\"birthCountry\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"birthCountry\"\n                  placeholder=\"Select a Birth Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"countryCitizenship\"\n                  >Country of Citizenship</label\n                >\n                <p-dropdown\n                  inputId=\"countryCitizenship\"\n                  *ngIf=\"countries$ | async as countries\"\n                  [options]=\"countries\"\n                  formControlName=\"countryCitizenship\"\n                  placeholder=\"Select a Citizenship Country\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h5 class=\"form-section__title\">Demographic Information</h5>\n            <hr />\n            <div class=\"grid\" *ngIf=\"!isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label>ABS ID</label>\n                <div>{{ user.absId }}</div>\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label>National Provider Identification</label>\n                <div>{{ user.nPI }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Gender</label>\n                <div>{{ user?.genderId }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Date of Birth</label>\n                <div>{{ user.birthDate }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Race</label>\n                <div>{{ user?.race }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Ethnicity</label>\n                <div>{{ user?.ethnicity }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>First Language</label>\n                <div>{{ user?.firstLanguageId }}</div>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label>Best Language</label>\n                <div>{{ user?.bestLanguageId }}</div>\n              </div>\n            </div>\n            <div class=\"grid\" *ngIf=\"isEdit\">\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"absId\">ABS ID</label>\n                <input\n                  id=\"absId\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"absId\"\n                  readonly\n                />\n              </div>\n              <div class=\"col-12 md:col-6\">\n                <label class=\"block\" for=\"nPI\"\n                  >National Provider Identification</label\n                >\n                <input\n                  id=\"nPI\"\n                  pInputText\n                  type=\"text\"\n                  formControlName=\"nPI\"\n                  readonly\n                />\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"gender\">Gender</label>\n                <p-dropdown\n                  inputId=\"gender\"\n                  *ngIf=\"genders$ | async as genders\"\n                  [options]=\"genders\"\n                  formControlName=\"genderId\"\n                  placeholder=\"Select a Gender\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"birthDate\">Date of Birth</label>\n                <p-calendar\n                  id=\"birthDate\"\n                  [showIcon]=\"true\"\n                  formControlName=\"birthDate\"\n                  appendTo=\"body\"\n                ></p-calendar>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"race\">Race</label>\n                <p-dropdown\n                  inputId=\"race\"\n                  *ngIf=\"races$ | async as races\"\n                  [options]=\"races\"\n                  formControlName=\"race\"\n                  placeholder=\"Select a Race\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"ethnicity\">Ethnicity</label>\n                <p-dropdown\n                  inputId=\"ethnicity\"\n                  *ngIf=\"ethnicities$ | async as ethnicities\"\n                  [options]=\"ethnicities\"\n                  formControlName=\"ethnicity\"\n                  placeholder=\"Select an Ethnicity\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"firstLanguageId\"\n                  >First Language</label\n                >\n                <p-dropdown\n                  inputId=\"firstLanguageId\"\n                  *ngIf=\"languages$ | async as languages\"\n                  [options]=\"languages\"\n                  formControlName=\"firstLanguageId\"\n                  placeholder=\"Select a First Language\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n              <div class=\"col-12 md:col-3\">\n                <label class=\"block\" for=\"bestLanguageId\">Best Language</label>\n                <p-dropdown\n                  inputId=\"bestLanguageId\"\n                  *ngIf=\"languages$ | async as languages\"\n                  [options]=\"languages\"\n                  formControlName=\"bestLanguageId\"\n                  placeholder=\"Select a Best Language\"\n                  optionLabel=\"itemDescription\"\n                  optionValue=\"itemValue\"\n                  appendTo=\"body\"\n                ></p-dropdown>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-section\" *ngIf=\"isEdit\">\n            <div class=\"grid\">\n              <div\n                class=\"col-12 text-center flex justify-content-center align-items-center gap-2\"\n              >\n                <p-checkbox\n                  inputId=\"userConfirmed\"\n                  name=\"userConfirmed\"\n                  formControlName=\"userConfirmed\"\n                  [binary]=\"true\"\n                ></p-checkbox>\n                <label for=\"userConfirmed\"\n                  >I confirm the above information is completed and correct to\n                  the best of my knowledge</label\n                >\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-12\">\n            <div class=\"flex justify-content-end\" *ngIf=\"!isEdit\">\n              <sl-button\n                variant=\"primary\"\n                style=\"width: 200px\"\n                (click)=\"isEdit = true\"\n                >Edit</sl-button\n              >\n            </div>\n            <div class=\"flex justify-content-end\" *ngIf=\"isEdit\">\n              <sl-button variant=\"text\" (click)=\"isEdit = false\"\n                >Cancel</sl-button\n              >\n              <sl-button\n                type=\"submit\"\n                style=\"width: 337px\"\n                variant=\"primary\"\n                [disabled]=\"userProfileForm.invalid\"\n                >Save</sl-button\n              >\n            </div>\n          </div>\n        </form>\n      </sl-card>\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading personal profile...</p>\n  </div>\n</ng-template>\n\n<abs-success-fail-modal\n  [isSuccess]=\"call?.isSuccess\"\n  [title]=\"call?.title\"\n  [message]=\"call?.message\"\n  [showDialog]=\"call?.showDialog\"\n  (closeDialog)=\"toggleDialog($event)\"\n></abs-success-fail-modal>\n"
        },
        {
            "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
            "id": "component-ProfessionalActivitiesAndPrivilegesModalComponent-725496deee0cdbfcdde917b92ec91f43c7d7d6b581ff43ecf732ba5ac319ccb2489cc5a4860834297a0598d749e17e2ca9595bc980091b733b1742de6e73746b",
            "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNgxMask()"
                }
            ],
            "selector": "abs-professional-activities-and-privileges-modal",
            "styleUrls": [
                "./professional-activities-and-privileges-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./professional-activities-and-privileges-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePanel",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "explanationOfLackOfPrivilegesForm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "hospitalAppointmentsCols",
                    "defaultValue": "HOSPOITAL_APPOINTMENTS_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "hospitalAppointmentsData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "nonClincalActivitiesForm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "panels",
                    "defaultValue": "[\n    'hospitalAppointments',\n    'explanationOfLackOfPrivileges',\n    'nonClinicalActivities',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "surgeonProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProfessionalActivitiesAndPrivilegesData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDefaultShowTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showTabPanel",
                    "args": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { provideNgxMask } from 'ngx-mask';\nimport { HOSPOITAL_APPOINTMENTS_COLS } from './hospital-appointments-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\n\n@Component({\n  selector: 'abs-professional-activities-and-privileges-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, InputTextareaModule],\n  templateUrl: './professional-activities-and-privileges-modal.component.html',\n  styleUrls: ['./professional-activities-and-privileges-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [provideNgxMask()],\n})\nexport class ProfessionalActivitiesAndPrivilegesModalComponent\n  implements OnInit\n{\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  panels = [\n    'hospitalAppointments',\n    'explanationOfLackOfPrivileges',\n    'nonClinicalActivities',\n  ];\n  activePanel = 0;\n\n  surgeonProfile: any;\n\n  hospitalAppointmentsCols = HOSPOITAL_APPOINTMENTS_COLS;\n  hospitalAppointmentsData!: any;\n\n  explanationOfLackOfPrivilegesForm = '';\n  nonClincalActivitiesForm = '';\n\n  ngOnInit() {\n    console.log('init');\n    this.getProfessionalActivitiesAndPrivilegesData();\n  }\n\n  handleGridAction(event: any) {\n    console.log(event);\n  }\n\n  getProfessionalActivitiesAndPrivilegesData() {\n    this.hospitalAppointmentsData = [\n      {\n        practiceType: 'Administration (Exclusively)',\n        apptType: 'Other',\n        organizationType: 'Organization Type',\n        city: 'York',\n        state: 'PA',\n        institution: 'York Hospital [6228]',\n        other: '-',\n        authOfficial: 'ME',\n      },\n      {\n        practiceType: 'Clinical Practice In Surgery',\n        apptType: 'Active Staff',\n        organizationType: 'Governmental (Military, VA, State, etc.)',\n        city: 'York',\n        state: 'PA',\n        institution: 'Other Institution',\n        other: 'ABS',\n        authOfficial: 'Frank Lewis, Jr.',\n      },\n    ];\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#surgeonProfileTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
                    "styleUrl": "./professional-activities-and-privileges-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n  <sl-tab-group\n    [noScrollControls]=\"true\"\n    id=\"surgeonProfileTabs\"\n    (sl-tab-show)=\"handleDefaultShowTab($event)\"\n  >\n    <sl-tab slot=\"nav\" panel=\"hospitalAppointments\" class=\"tab__complete\">\n      <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n      Hospital Appointments\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"explanationOfLackOfPrivileges\">\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Explanation of Lack of Privileges\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"nonClinicalActivities\">\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Non Clinical Activities\n    </sl-tab>\n\n    <!-- Hospital Appointments -->\n    <sl-tab-panel name=\"hospitalAppointments\">\n      <p>\n        Please update as needed the hospitals or surgical centers where you\n        expect to hold any privileges after completion of your residency\n        training by clicking on <strong>Add New Record</strong>. If you are\n        unable to find your institution in the list, type the name in the field\n        labeled “Other.” A hospital would be considered a multidisciplinary\n        clinic (over 10).\n      </p>\n\n      <p>\n        If you will not hold privileges following residency, please skip this\n        section\n      </p>\n\n      <sl-button class=\"btn-add\">\n        <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n        <span>Add a Record</span>\n      </sl-button>\n      <abs-grid\n        [columns]=\"hospitalAppointmentsCols\"\n        [data]=\"hospitalAppointmentsData\"\n        (action)=\"handleGridAction($event)\"\n      >\n      </abs-grid>\n    </sl-tab-panel>\n\n    <sl-tab-panel name=\"explanationOfLackOfPrivileges\">\n      <p>\n        <strong>\n          If you do not hold full surgical privileges, please explain in the\n          space provided.\n        </strong>\n      </p>\n      <label for=\"describe\">Describe</label>\n      <textarea\n        label=\"Describe\"\n        pInputTextarea\n        [value]=\"explanationOfLackOfPrivilegesForm\"\n        rows=\"10\"\n      ></textarea>\n    </sl-tab-panel>\n\n    <sl-tab-panel name=\"nonClinicalActivities\">\n      <p>\n        <strong>\n          Diplomats not in the active practice of surgery should describe below\n          their current non-clinical activities.\n        </strong>\n      </p>\n      <label for=\"describe\">Describe</label>\n      <textarea\n        pInputTextarea\n        label=\"Describe\"\n        [value]=\"nonClincalActivitiesForm\"\n        rows=\"10\"\n      ></textarea>\n    </sl-tab-panel>\n  </sl-tab-group>\n</div>\n<div class=\"flex justify-content-end\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button\n    type=\"button\"\n    style=\"width: 337px\"\n    variant=\"primary\"\n    (click)=\"save()\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "ProfessionalStandingComponent",
            "id": "component-ProfessionalStandingComponent-5cdc9074177f8200ced4242e0743948bd8780803c341d9fb9497012952503cb383708cede206a9e99df93c69a527e87e207fb6ec4199f8c8c19e80fee19786c8",
            "file": "src/app/professional-standing/professional-standing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-professional-standing",
            "styleUrls": [
                "./professional-standing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./professional-standing.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appointmentsPrivilegesCols",
                    "defaultValue": "APPOINTMENTS_PRIVILEGES_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "appointmentsTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "disableDescribe",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "editHospitalAppointmentsAndPrivileges$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "editSanctionsAndEthics$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "editStateMedicalLiscense$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "fakeOptions",
                    "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "licensesCols",
                    "defaultValue": "LICENSES_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "profile",
                    "defaultValue": "{\n    medicalLicenses: [\n      {\n        id: 1,\n        state: 'Pennsylvania',\n        number: '123456',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'ABS',\n      },\n      {\n        id: 2,\n        state: 'California',\n        number: '098765',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'Self',\n      },\n      {\n        id: 3,\n        state: 'Maryland',\n        number: '111222',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'ABS',\n      },\n      {\n        id: 4,\n        state: 'Pennsylvania',\n        number: '333444',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'Self',\n      },\n    ],\n    appointmentsAndPrivileges: {\n      primaryPractice: '',\n      primaryPracticeOrg: '',\n      lackOfHospitalPrivilegesReason: '',\n      nonClinicalActivities: '',\n      list: [\n        {\n          id: 1,\n          practiceType: 'Practice_1',\n          appointmentType: 'Appointment_1',\n          oranizationType: 'Organization_1',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n        {\n          id: 2,\n          practiceType: 'Practice_2',\n          appointmentType: 'Appointment_2',\n          oranizationType: 'Organization_2',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n        {\n          id: 3,\n          practiceType: 'Practice_3',\n          appointmentType: 'Appointment_3',\n          oranizationType: 'Organization_3',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n      ],\n    },\n    sanctionsEthics: {\n      drugOrAlchohol: true,\n      hospitalPrivilegesRevoked: false,\n      liscensureRevoked: null,\n      hospitalStaffPrivilegesRevoked: null,\n      felony: null,\n      censured: null,\n      describe: '',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "showAppointmentsAddEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "showLicensesAddEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "stateMedicalLicenseTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "tempAppointment$",
                    "defaultValue": "new BehaviorSubject({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "tempLicense$",
                    "defaultValue": "new BehaviorSubject({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    profilePicture:\n      'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n    fullName: 'John Doe',\n    givenName: 'John',\n    surName: 'Doe',\n    title: 'M.D',\n    emailAddress: 'email@test.io',\n    status: 'Trainee',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelAddEditAppointment",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelAddEditLicense",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSantionsAndEthics",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleAppointementsGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLicensesGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveAppointment",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveLicense",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showAppointmentModal",
                    "args": [
                        {
                            "name": "appointment",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "appointment",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showLicenseModal",
                    "args": [
                        {
                            "name": "license",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "license",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleEdit",
                    "args": [
                        {
                            "name": "observable$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "observable$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CollapsePanelComponent",
                    "type": "component"
                },
                {
                    "name": "ProfileHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "AppointmentsAddEditModalComponent",
                    "type": "component"
                },
                {
                    "name": "LicenseAddEditModalComponent",
                    "type": "component"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                },
                {
                    "name": "RadioButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BehaviorSubject, map, Observable, of, Subject } from 'rxjs';\nimport { CollapsePanelComponent } from '../shared/components/collapse-panel/collapse-panel.component';\nimport { ProfileHeaderComponent } from '../shared/components/profile-header/profile-header.component';\nimport { AppointmentsAddEditModalComponent } from './appointments-add-edit-modal/appointments-add-edit-modal.component';\nimport { LicenseAddEditModalComponent } from './license-add-edit-modal/license-add-edit-modal.component';\nimport { GridComponent } from '../shared/components/grid/grid.component';\nimport { APPOINTMENTS_PRIVILEGES_COLS } from './appointments-privileges-cols';\nimport { LICENSES_COLS } from './licenses-cols';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { RadioButtonModule } from 'primeng/radiobutton';\n\n@Component({\n  selector: 'abs-professional-standing',\n  templateUrl: './professional-standing.component.html',\n  styleUrls: ['./professional-standing.component.scss'],\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [\n    CommonModule,\n    CollapsePanelComponent,\n    ProfileHeaderComponent,\n    AppointmentsAddEditModalComponent,\n    LicenseAddEditModalComponent,\n    GridComponent,\n    FormsModule,\n    ModalComponent,\n    InputTextModule,\n    DropdownModule,\n    InputTextareaModule,\n    RadioButtonModule,\n  ],\n})\nexport class ProfessionalStandingComponent implements OnInit {\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ];\n\n  appointmentsPrivilegesCols = APPOINTMENTS_PRIVILEGES_COLS;\n  licensesCols = LICENSES_COLS;\n\n  disableDescribe = true;\n  editSanctionsAndEthics$: Subject<boolean> = new BehaviorSubject(true);\n  editStateMedicalLiscense$: Subject<boolean> = new BehaviorSubject(true);\n  editHospitalAppointmentsAndPrivileges$: Subject<boolean> =\n    new BehaviorSubject(true);\n  stateMedicalLicenseTitle: string | undefined;\n  appointmentsTitle: string | undefined;\n  // TODO: [Joe] faked user data, replace with real data\n  user = {\n    profilePicture:\n      'https://fastly.picsum.photos/id/91/3504/2336.jpg?hmac=tK6z7RReLgUlCuf4flDKeg57o6CUAbgklgLsGL0UowU',\n    fullName: 'John Doe',\n    givenName: 'John',\n    surName: 'Doe',\n    title: 'M.D',\n    emailAddress: 'email@test.io',\n    status: 'Trainee',\n  };\n\n  showAppointmentsAddEdit = false;\n  showLicensesAddEdit = false;\n  tempAppointment$: Subject<any> = new BehaviorSubject({});\n  tempLicense$: Subject<any> = new BehaviorSubject({});\n  profile = {\n    medicalLicenses: [\n      {\n        id: 1,\n        state: 'Pennsylvania',\n        number: '123456',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'ABS',\n      },\n      {\n        id: 2,\n        state: 'California',\n        number: '098765',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'Self',\n      },\n      {\n        id: 3,\n        state: 'Maryland',\n        number: '111222',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'ABS',\n      },\n      {\n        id: 4,\n        state: 'Pennsylvania',\n        number: '333444',\n        type: 'Full',\n        issueDate: new Date('10/24/1986'),\n        expireDate: new Date('10/24/2024'),\n        reportingOrg: 'Self',\n      },\n    ],\n    appointmentsAndPrivileges: {\n      primaryPractice: '',\n      primaryPracticeOrg: '',\n      lackOfHospitalPrivilegesReason: '',\n      nonClinicalActivities: '',\n      list: [\n        {\n          id: 1,\n          practiceType: 'Practice_1',\n          appointmentType: 'Appointment_1',\n          oranizationType: 'Organization_1',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n        {\n          id: 2,\n          practiceType: 'Practice_2',\n          appointmentType: 'Appointment_2',\n          oranizationType: 'Organization_2',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n        {\n          id: 3,\n          practiceType: 'Practice_3',\n          appointmentType: 'Appointment_3',\n          oranizationType: 'Organization_3',\n          state: 'PA',\n          institution: 'LVHN',\n          other: '-',\n          official: 'ABE',\n        },\n      ],\n    },\n    sanctionsEthics: {\n      drugOrAlchohol: true,\n      hospitalPrivilegesRevoked: false,\n      liscensureRevoked: null,\n      hospitalStaffPrivilegesRevoked: null,\n      felony: null,\n      censured: null,\n      describe: '',\n    },\n  };\n\n  ngOnInit() {\n    this.checkSantionsAndEthics();\n  }\n\n  toggleEdit(observable$: Subject<boolean>, value: boolean) {\n    observable$.next(value);\n  }\n\n  checkSantionsAndEthics() {\n    // TODO: [Joe] figure out why sl-radio-group is not updating the value on change\n    this.disableDescribe = !Object.values(this.profile.sanctionsEthics).some(\n      (value) => value === true\n    );\n  }\n\n  handleLicensesGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showLicenseModal($event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n\n  showLicenseModal(license: any) {\n    if (license) {\n      this.tempLicense$.next(license);\n      this.stateMedicalLicenseTitle = 'Edit License';\n    } else {\n      this.tempLicense$.next({\n        state: null,\n        number: null,\n        type: null,\n        issueDate: null,\n        expireDate: null,\n        reportingOrg: null,\n      });\n      this.stateMedicalLicenseTitle = 'Add License';\n    }\n    this.showLicensesAddEdit = true;\n  }\n  saveLicense($event: any) {\n    // TODO: [Joe] handle the save call\n    // TODO: [Joe] handle the update call\n    // TODO: [Joe] show the universal success/error message\n    this.showLicensesAddEdit = $event.show;\n    this.tempLicense$.next({});\n  }\n  cancelAddEditLicense($event: any) {\n    this.showLicensesAddEdit = $event.show;\n    this.tempLicense$.next({});\n  }\n\n  handleAppointementsGridAction($event: any) {\n    if ($event.fieldKey === 'edit') {\n      this.showAppointmentModal($event.data);\n    } else if ($event.fieldKey === 'delete') {\n      // TODO: [Joe] show confirmation modal\n      // TODO: [Joe] handle the delete call\n      console.log('delete', $event.data);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n  showAppointmentModal(appointment: any) {\n    if (appointment) {\n      this.tempAppointment$.next(appointment);\n      this.appointmentsTitle = 'Edit Appointment';\n    } else {\n      this.tempAppointment$.next({\n        practiceType: null,\n        appointmentType: null,\n        oranizationType: null,\n        state: null,\n        institution: null,\n        other: null,\n        official: null,\n      });\n      this.appointmentsTitle = 'Add Appointment';\n    }\n    this.showAppointmentsAddEdit = true;\n  }\n  saveAppointment($event: any) {\n    // TODO: [Joe] handle the save call\n    // TODO: [Joe] handle the update call\n    // TODO: [Joe] show the universal success/error message\n    this.showAppointmentsAddEdit = $event.show;\n    this.tempAppointment$.next({});\n  }\n  cancelAddEditAppointment($event: any) {\n    this.showAppointmentsAddEdit = $event.show;\n    this.tempAppointment$.next({});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-radio-group::part(form-control-label) {\n  font-weight: 700;\n}\nsl-radio-group::part(form-control-input) {\n  display: flex;\n}\nsl-radio::part(base) {\n  margin-right: 1.5rem;\n}\n\nsl-textarea::part(form-control) {\n  display: flex;\n  flex-direction: column;\n}\n\nsl-textarea::part(form-control-label) {\n  order: 1;\n  font-weight: 700;\n}\nsl-textarea::part(form-control-help-text) {\n  order: 2;\n  font-style: italic;\n  font-size: 0.8rem;\n  line-height: 0.9rem;\n  color: var(--global-primary);\n}\nsl-textarea::part(form-control-input) {\n  order: 3;\n}\n\n.white-space-break-spaces {\n  white-space: break-spaces;\n}\n.section__sub-header {\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid var(--global-gray-light);\n  margin: 2rem 0 1.5rem;\n}\n",
                    "styleUrl": "./professional-standing.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h1>Professional Standing</h1>\n</header>\n<ng-container>\n  <section>\n    <div class=\"grid\">\n      <div class=\"col-12 flex\">\n        <abs-profile-header\n          [profilePicture]=\"user.profilePicture\"\n          [user]=\"user\"\n        ></abs-profile-header>\n      </div>\n    </div>\n  </section>\n  <section>\n    <div class=\"grid\">\n      <sl-card class=\"col-12\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <abs-collapse-panel\n          [panelId]=\"1\"\n          [startExpanded]=\"true\"\n          [heightToggle]=\"editStateMedicalLiscense$\"\n        >\n          <h5 class=\"mt-0 mb-2\" panel-header>State Medical License</h5>\n          <div class=\"grid\">\n            <div class=\"col-12\">\n              <sl-button\n                variant=\"default\"\n                class=\"btn-add mt-4 mb-5\"\n                (click)=\"showLicenseModal(null)\"\n              >\n                <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                ADD RECORD\n              </sl-button>\n              <abs-grid\n                [columns]=\"licensesCols\"\n                [data]=\"profile.medicalLicenses\"\n                (action)=\"handleLicensesGridAction($event)\"\n                class=\"margin-bottom-2\"\n              ></abs-grid>\n            </div>\n          </div>\n        </abs-collapse-panel>\n      </sl-card>\n      <sl-card class=\"col-12\">\n        <div>\n          <abs-collapse-panel\n            [panelId]=\"2\"\n            [startExpanded]=\"true\"\n            [heightToggle]=\"editHospitalAppointmentsAndPrivileges$\"\n          >\n            <h5 class=\"mt-0 mb-2\" panel-header>\n              Current Hospital Appointments / Privileges\n            </h5>\n            <form id=\"appointmentsAndPrivileges\">\n              <p class=\"mt-1\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis\n                sed neque nec dolor lacinia interdum quis nec nisi. Pellentesque\n                dolor erat, egestas sit amet tortor at, condimentum tempor erat.\n              </p>\n              <h6 class=\"section__sub-header\">\n                Primary Appointments/Privileges\n              </h6>\n              <div\n                class=\"grid\"\n                *ngIf=\"\n                  (editHospitalAppointmentsAndPrivileges$ | async) === false\n                \"\n              >\n                <div class=\"col-12 md:col-6\">\n                  <label>Primary Current Practice or Training</label>\n                  <div>\n                    {{ profile.appointmentsAndPrivileges.primaryPractice }}\n                  </div>\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label\n                    >Type of Organization of Primary Practice or Training</label\n                  >\n                  <div>\n                    {{ profile.appointmentsAndPrivileges.primaryPracticeOrg }}\n                  </div>\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label>Lack of Hospital Privileges</label>\n                  <div class=\"white-space-break-spaces\">\n                    {{\n                      profile.appointmentsAndPrivileges\n                        .lackOfHospitalPrivilegesReason\n                    }}\n                  </div>\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label>Non-Clinical Activities</label>\n                  <div class=\"white-space-break-spaces\">\n                    {{\n                      profile.appointmentsAndPrivileges.nonClinicalActivities\n                    }}\n                  </div>\n                </div>\n              </div>\n              <div\n                class=\"grid\"\n                *ngIf=\"editHospitalAppointmentsAndPrivileges$ | async\"\n              >\n                <div class=\"col-12 md:col-6\">\n                  <label class=\"block\" for=\"primaryPractice\"\n                    >Primary Current Practice or Training</label\n                  >\n                  <p-dropdown\n                    inputId=\"primaryPractice\"\n                    [options]=\"fakeOptions\"\n                    name=\"primaryPractice\"\n                    [(ngModel)]=\"\n                      profile.appointmentsAndPrivileges.primaryPractice\n                    \"\n                    placeholder=\"Choose a practice or training\"\n                    optionLabel=\"itemDescription\"\n                    optionValue=\"itemValue\"\n                    appendTo=\"body\"\n                  ></p-dropdown>\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label class=\"block\" for=\"primaryPracticeOrg\"\n                    >Type of Organization of Primary Practice or Training</label\n                  >\n                  <input\n                    id=\"primaryPracticeOrg\"\n                    pInputText\n                    type=\"text\"\n                    placeholder=\"Enter an organization type\"\n                    name=\"primaryPracticeOrg\"\n                    [(ngModel)]=\"\n                      profile.appointmentsAndPrivileges.primaryPracticeOrg\n                    \"\n                    required\n                  />\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label class=\"block\" for=\"lackOfHospitalPrivilegesReason\"\n                    >Lack of Hospital Privileges</label\n                  >\n                  <textarea\n                    rows=\"5\"\n                    pInputTextarea\n                    id=\"lackOfHospitalPrivilegesReason\"\n                    placeholder=\"Explain any lack of hospital privileges\"\n                    name=\"lackOfHospitalPrivilegesReason\"\n                    [(ngModel)]=\"\n                      profile.appointmentsAndPrivileges\n                        .lackOfHospitalPrivilegesReason\n                    \"\n                  ></textarea>\n                </div>\n                <div class=\"col-12 md:col-6\">\n                  <label class=\"block\" for=\"nonClinicalActivities\"\n                    >Lack of Hospital Privileges</label\n                  >\n                  <textarea\n                    rows=\"5\"\n                    pInputTextarea\n                    id=\"nonClinicalActivities\"\n                    placeholder=\"Explain any non-clinical activities\"\n                    name=\"nonClinicalActivities\"\n                    [(ngModel)]=\"\n                      profile.appointmentsAndPrivileges.nonClinicalActivities\n                    \"\n                  ></textarea>\n                </div>\n              </div>\n\n              <h6 class=\"section__sub-header\">\n                All Hospital Appointments/Privileges\n              </h6>\n\n              <div class=\"grid\">\n                <div class=\"col-12\">\n                  <sl-button\n                    variant=\"default\"\n                    class=\"btn-add mt-4 mb-5\"\n                    (click)=\"showAppointmentModal(null)\"\n                  >\n                    <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n                    ADD RECORD\n                  </sl-button>\n                  <abs-grid\n                    [columns]=\"appointmentsPrivilegesCols\"\n                    [data]=\"profile.appointmentsAndPrivileges.list\"\n                    (action)=\"handleAppointementsGridAction($event)\"\n                    class=\"margin-bottom-2\"\n                  ></abs-grid>\n                </div>\n              </div>\n\n              <div class=\"grid mt-3\">\n                <div\n                  class=\"col-12 flex justify-content-end\"\n                  *ngIf=\"\n                    (editHospitalAppointmentsAndPrivileges$ | async) === false\n                  \"\n                >\n                  <sl-button\n                    variant=\"primary\"\n                    style=\"width: 200px\"\n                    (click)=\"\n                      toggleEdit(editHospitalAppointmentsAndPrivileges$, true)\n                    \"\n                    >Edit</sl-button\n                  >\n                </div>\n                <div\n                  class=\"col-12 flex justify-content-end\"\n                  *ngIf=\"editHospitalAppointmentsAndPrivileges$ | async\"\n                >\n                  <sl-button\n                    variant=\"text\"\n                    (click)=\"\n                      toggleEdit(editHospitalAppointmentsAndPrivileges$, false)\n                    \"\n                    >Cancel</sl-button\n                  >\n                  <sl-button\n                    type=\"submit\"\n                    style=\"width: 337px\"\n                    variant=\"primary\"\n                    (click)=\"\n                      toggleEdit(editHospitalAppointmentsAndPrivileges$, false)\n                    \"\n                    >Save</sl-button\n                  >\n                </div>\n              </div>\n            </form>\n          </abs-collapse-panel>\n        </div>\n      </sl-card>\n      <sl-card class=\"col-12\">\n        <div>\n          <abs-collapse-panel\n            [panelId]=\"3\"\n            [startExpanded]=\"true\"\n            [heightToggle]=\"editSanctionsAndEthics$\"\n          >\n            <h5 class=\"mt-0 mb-2\" panel-header>Sanctions and Ethics</h5>\n            <form id=\"sanctionsEthics\">\n              <div\n                class=\"grid\"\n                *ngIf=\"(editSanctionsAndEthics$ | async) === false\"\n              >\n                <div class=\"col-12\">\n                  <label\n                    >Have you had treatment for drug or alcohol abuse?</label\n                  >\n                  <div>\n                    {{ profile.sanctionsEthics.drugOrAlchohol ? 'Yes' : 'No' }}\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <label>Have you been denied hospital privileges</label>\n                  <div>\n                    {{\n                      profile.sanctionsEthics.hospitalPrivilegesRevoked\n                        ? 'Yes'\n                        : 'No'\n                    }}\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <label\n                    >Have you been reprimanded by any licensing authority or had\n                    your license to practice medicine restricted, denied,\n                    suspended or revoked, or has it been voluntarily surrendered\n                    in any jurisdiction while under investigation?</label\n                  >\n                  <div>\n                    {{\n                      profile.sanctionsEthics.liscensureRevoked ? 'Yes' : 'No'\n                    }}\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <label\n                    >Have you had hospital staff privileges (or any portion\n                    thereof) restricted, suspended, or revoked, or otherwise\n                    subject to disciplinary action?</label\n                  >\n                  <div>\n                    {{\n                      profile.sanctionsEthics.hospitalStaffPrivilegesRevoked\n                        ? 'Yes'\n                        : 'No'\n                    }}\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <label>Have you been convicted of a felony?</label>\n                  <div>{{ profile.sanctionsEthics.felony ? 'Yes' : 'No' }}</div>\n                </div>\n                <div class=\"col-12\">\n                  <label\n                    >Have you been censured by the American College of Surgeons,\n                    a hospital or other national or state society?</label\n                  >\n                  <div>\n                    {{ profile.sanctionsEthics.censured ? 'Yes' : 'No' }}\n                  </div>\n                </div>\n                <!-- TODO: [Joe] we may need to tie this ng-if to the disable for the describe field if we are not clearing that out when disabled -->\n                <div class=\"col-12\" *ngIf=\"profile.sanctionsEthics.describe\">\n                  <!-- TODO: [JOE] is this the correct label for this? -->\n                  <label>Describe</label>\n                  <div class=\"white-space-break-spaces\">\n                    {{ profile.sanctionsEthics.describe }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"grid\" *ngIf=\"editSanctionsAndEthics$ | async\">\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you had treatment for drug or alcohol abuse?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"drugOrAlchohol\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"profile.sanctionsEthics.drugOrAlchohol\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"drugOrAlchoholYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"drugOrAlchohol\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"profile.sanctionsEthics.drugOrAlchohol\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"drugOrAlchoholYes\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you been denied hospital privileges?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"hospitalPrivilegesRevoked\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"\n                        profile.sanctionsEthics.hospitalPrivilegesRevoked\n                      \"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"hospitalPrivilegesRevokedYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"hospitalPrivilegesRevoked\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"\n                        profile.sanctionsEthics.hospitalPrivilegesRevoked\n                      \"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"hospitalPrivilegesRevokedNo\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you been reprimanded by any licensing authority or had\n                    your license to practice medicine restricted, denied,\n                    suspended or revoked, or has it been voluntarily surrendered\n                    in any jurisdiction while under investigation?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"liscensureRevoked\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"profile.sanctionsEthics.liscensureRevoked\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"liscensureRevokedYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"liscensureRevoked\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"profile.sanctionsEthics.liscensureRevoked\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"liscensureRevokedNo\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you had hospital staff privileges (or any portion\n                    thereof) restricted, suspended, or revoked, or otherwise\n                    subject to disciplinary action?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"hospitalStaffPrivilegesRevoked\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"\n                        profile.sanctionsEthics.hospitalStaffPrivilegesRevoked\n                      \"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"hospitalStaffPrivilegesRevokedYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"hospitalStaffPrivilegesRevoked\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"\n                        profile.sanctionsEthics.hospitalStaffPrivilegesRevoked\n                      \"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"hospitalStaffPrivilegesRevokedNo\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you been convicted of a felony?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"felony\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"profile.sanctionsEthics.felony\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"felonyYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"felony\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"profile.sanctionsEthics.felony\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"felonyNo\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\"\n                    >Have you been censured by the American College of Surgeons,\n                    a hospital or other national or state society?</label\n                  >\n                  <div class=\"flex gap-5\">\n                    <p-radioButton\n                      name=\"censured\"\n                      [value]=\"true\"\n                      [(ngModel)]=\"profile.sanctionsEthics.censured\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"censuredYes\"\n                      label=\"Yes\"\n                    ></p-radioButton>\n                    <p-radioButton\n                      name=\"censured\"\n                      [value]=\"false\"\n                      [(ngModel)]=\"profile.sanctionsEthics.censured\"\n                      (ngModelChange)=\"checkSantionsAndEthics()\"\n                      inputId=\"censuredNo\"\n                      label=\"No\"\n                    ></p-radioButton>\n                  </div>\n                </div>\n                <div class=\"col-12 mb-3\">\n                  <label class=\"block\" for=\"describe\">Describe</label>\n                  <small class=\"block form-helper-text text-muted\"\n                    >Only if you answered YES to any of the above\n                    questions.</small\n                  >\n                  <textarea\n                    rows=\"5\"\n                    pInputTextarea\n                    id=\"describe\"\n                    placeholder=\"Explain...\"\n                    name=\"describe\"\n                    [(ngModel)]=\"profile.sanctionsEthics.describe\"\n                  ></textarea>\n                </div>\n              </div>\n              <div class=\"grid\">\n                <div\n                  class=\"col-12 flex justify-content-end\"\n                  *ngIf=\"(editSanctionsAndEthics$ | async) === false\"\n                >\n                  <sl-button\n                    variant=\"primary\"\n                    style=\"width: 200px\"\n                    (click)=\"toggleEdit(editSanctionsAndEthics$, true)\"\n                    >Edit</sl-button\n                  >\n                </div>\n                <div\n                  class=\"col-12 flex justify-content-end\"\n                  *ngIf=\"editSanctionsAndEthics$ | async\"\n                >\n                  <sl-button\n                    variant=\"text\"\n                    (click)=\"toggleEdit(editSanctionsAndEthics$, false)\"\n                    >Cancel</sl-button\n                  >\n                  <sl-button\n                    type=\"submit\"\n                    style=\"width: 337px\"\n                    variant=\"primary\"\n                    (click)=\"toggleEdit(editSanctionsAndEthics$, false)\"\n                    >Save</sl-button\n                  >\n                </div>\n              </div>\n            </form>\n          </abs-collapse-panel>\n        </div>\n      </sl-card>\n    </div>\n    <abs-modal\n      [open]=\"showAppointmentsAddEdit\"\n      (closeDialog)=\"cancelAddEditAppointment($event)\"\n      [title]=\"appointmentsTitle\"\n      modalName=\"appointmentAddEditModal\"\n    >\n      <abs-appointments-add-edit-modal\n        [appointment]=\"tempAppointment$\"\n        (cancelDialog)=\"cancelAddEditAppointment($event)\"\n        (saveDialog)=\"saveAppointment($event)\"\n      ></abs-appointments-add-edit-modal>\n    </abs-modal>\n\n    <abs-modal\n      [open]=\"showLicensesAddEdit\"\n      (closeDialog)=\"cancelAddEditLicense($event)\"\n      [title]=\"stateMedicalLicenseTitle\"\n      modalName=\"licenseAddEditModal\"\n    >\n      <abs-license-add-edit-modal\n        [license]=\"tempLicense$\"\n        (cancelDialog)=\"cancelAddEditLicense($event)\"\n        (saveDialog)=\"saveLicense($event)\"\n      ></abs-license-add-edit-modal>\n    </abs-modal>\n  </section>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"my-5 flex flex-column justify-content-center align-items-center\">\n    <sl-spinner\n      class=\"block\"\n      style=\"font-size: 3rem; --indicator-color: var(--global-primary)\"\n    ></sl-spinner>\n    <p>loading professional standing...</p>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ProfileHeaderComponent",
            "id": "component-ProfileHeaderComponent-51d1e58e961176a8aad30c4a6613cb23fc122212129b01a3c5a542706be207178c90dceaeb7c9d34bc3ee02f506a59f2a9b95673043f6b4aae9567e0137b1c99",
            "file": "src/app/shared/components/profile-header/profile-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-profile-header",
            "styleUrls": [
                "./profile-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "profilePicture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserProfile | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IUserProfile, UserProfileSelectors } from '../../../state';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'abs-profile-header',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './profile-header.component.html',\n  styleUrls: ['./profile-header.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ProfileHeaderComponent {\n  @Input() profilePicture: string | undefined;\n  // TODO: [Joe] this will need to be more strongly typed once the model is defined\n\n  user: IUserProfile | undefined;\n\n  constructor(private _store: Store) {\n    this.user = this._store.selectSnapshot(UserProfileSelectors.user);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".account-status {\n  color: var(--global-gray-dark);\n}\n",
                    "styleUrl": "./profile-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"flex\">\n  <sl-avatar\n    [image]=\"profilePicture\"\n    label=\"Profile Picture\"\n    style=\"--size: 5rem\"\n  ></sl-avatar>\n  <div class=\"ml-3\" *ngIf=\"user\">\n    <h2 class=\"font-normal mt-0 mb-0\">\n      <span>{{ user.displayName }}</span>\n    </h2>\n    <p class=\"font-bold mt-0 mb-1\" *ngIf=\"user.emailAddress\">\n      {{ user.emailAddress }}\n    </p>\n    <p class=\"font-bold mt-0 mb-1 account-status\">Status: Trainee</p>\n  </div>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-30a28cef605502aa69fc0a6d4a562c53b314504c976062169f6b5bceb3dbac5c8acb8a4ce9d72f9fa1c68f966dce2dad6f103505f923497bbe80b397c054d797",
            "file": "src/app/shared/components/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "barColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currentNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "statusLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "toolTipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "totalNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBarWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "remainingNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-progress-bar',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ProgressBarComponent implements OnInit {\n  @Input() currentNumber!: number;\n  @Input() totalNumber!: number;\n  @Input() statusLabel!: string;\n  @Input() barColor!: string;\n  @Input() toolTipText!: string;\n\n  remainingNumber!: number;\n  progressBarWidth!: number;\n\n  ngOnInit(): void {\n    this.remainingNumber = this.totalNumber - this.currentNumber;\n    this.progressBarWidth = Math.round(\n      (this.currentNumber / this.totalNumber) * 100\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".numbers {\n  font-size: 28px;\n  font-weight: bold;\n  .ratio {\n    margin-right: 0.75rem;\n    position: relative;\n  }\n  .remaining {\n    color: var(--global-gray);\n    font-size: 15px;\n  }\n}\n\nh5 {\n  font-weight: 500;\n  margin-top: 5px;\n}\n\n.progress-bar {\n  position: relative;\n  .bar {\n    width: calc(100% - 55px);\n    height: 60px;\n    background-color: #d7d7d7;\n    border-radius: 8px;\n    border-right: 5px solid white;\n    z-index: 2;\n    position: relative;\n    .fill {\n      height: 100%;\n      position: relative;\n      border-radius: 8px;\n    }\n  }\n  .progress {\n    position: absolute;\n    right: 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 60px;\n    height: 100%;\n    background-color: var(--global-primary);\n    color: white;\n    font-weight: 700;\n    font-size: 1.25rem;\n    border-radius: 0px 8px 8px 0px;\n    z-index: 1;\n  }\n}\n\n.tooltip {\n  margin-left: 5px;\n  .trigger {\n    width: 15px;\n    height: 15px;\n    color: white;\n    font-size: 12px;\n    display: flex;\n    background-color: var(--global-danger);\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex numbers align-items-center\">\n  <div class=\"ratio flex align-items-center flex-wrap\">\n    {{ currentNumber || 0 }}/{{ totalNumber || 0 }}\n    <div class=\"tooltip\" *ngIf=\"toolTipText\">\n      <sl-tooltip [content]=\"toolTipText\">\n        <div class=\"trigger\">?</div>\n      </sl-tooltip>\n    </div>\n  </div>\n  <div class=\"remaining\">{{ remainingNumber || 0 }} Remaining</div>\n</div>\n<h5>{{ statusLabel }}</h5>\n<div class=\"progress-bar flex\">\n  <div class=\"bar\">\n    <div\n      class=\"fill\"\n      [style.width.%]=\"progressBarWidth\"\n      [style.background]=\"barColor\"\n    ></div>\n  </div>\n  <div class=\"progress\">%{{ progressBarWidth }}</div>\n</div>\n"
        },
        {
            "name": "ReferenceFormModalComponent",
            "id": "component-ReferenceFormModalComponent-eba7f4f8350de3bd0a2cad8d9b370624347d03d26cbc0868d65f8852bd04aca92258607682131c9670cc2323f70f63f88493bcb56b83808e747a05d8335fd146",
            "file": "src/app/continuous-certification/reference-form-modal/reference-form-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-reference-form-modal",
            "styleUrls": [
                "./reference-form-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reference-form-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "referenceFormFields",
                    "defaultValue": "[\n    {\n      label: 'Name of Authenticating Official',\n      subLabel: '(Must be a Physician)',\n      value: '',\n      required: true,\n      name: 'nameOfAuthenticatingOfficial',\n      placeholder: 'Enter Official’s name',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: \"Authenticating Official'/s Role\",\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialRole',\n      placeholder: 'Choose their role',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Chief of Staff',\n          itemValue: 'chief',\n        },\n        {\n          itemDescription: 'Medical Director',\n          itemValue: 'medical',\n        },\n        {\n          itemDescription: 'Program Director',\n          itemValue: 'program',\n        },\n      ],\n    },\n    {\n      label: 'Reason for Alternate Official',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'reasonForAlternateOfficial',\n      placeholder: 'Enter a reason',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Option 1',\n          itemValue: 'option1',\n        },\n        {\n          itemDescription: 'Option 2',\n          itemValue: 'option2',\n        },\n        {\n          itemDescription: 'Option 3',\n          itemValue: 'option3',\n        },\n      ],\n    },\n    {\n      label: 'Authenticating Official’s Title',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'authenticatingOfficialTitle',\n      placeholder: 'Enter Official’s title',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'Authenticating Official’s Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialEmail',\n      placeholder: 'Enter Official’s email address',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Confirm Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'confirmEmailAddress',\n      placeholder: 'Enter Official’s email address again',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Authenticating Official’s Phone Number',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialPhoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Name of Affiliated Institution',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'nameOfAffiliatedInstitution',\n      placeholder: 'Enter affiliated institution',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'states',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Name',\n      subLabel: '',\n      value: this.userData.diplayName,\n      required: false,\n      readonly: true,\n      name: 'name',\n      placeholder: 'Enter your full name',\n      type: 'text',\n      size: 'col-12',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormFields[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "referenceFormsCols",
                    "defaultValue": "REFERENCE_FORMS_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "refrenceGridData",
                    "defaultValue": "[\n    {\n      referenceFormId: 'MD19143',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Doe, M.D.',\n      date: new Date('09/21/2019'),\n      status: 'Requested',\n    },\n    {\n      referenceFormId: 'MD08221',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'Mary Joseph',\n      date: new Date('08/12/2019'),\n      status: 'Approved',\n    },\n    {\n      referenceFormId: 'MD12345',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Dorian',\n      date: new Date('8/1/2019'),\n      status: 'Approved',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "states$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IStateReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.states"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userData",
                    "defaultValue": "{\n    diplayName: 'John Doe, M.D',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formFields",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formFields",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPicklists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { FormsModule } from '@angular/forms';\nimport { REFERENCE_FORMS_COLS } from './refrence-forms-cols';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { IFormFields } from 'src/app/shared/models/form-fields/form-fields';\nimport { Select } from '@ngxs/store';\nimport { PicklistsSelectors } from 'src/app/state/picklists';\nimport { Observable } from 'rxjs';\nimport { IStateReadOnlyModel } from 'src/app/api';\n\n@Component({\n  selector: 'abs-reference-form-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    GridComponent,\n    FormsModule,\n    InputTextModule,\n    DropdownModule,\n    CheckboxModule,\n  ],\n  templateUrl: './reference-form-modal.component.html',\n  styleUrls: ['./reference-form-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ReferenceFormModalComponent implements OnInit {\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  userData = {\n    diplayName: 'John Doe, M.D',\n  };\n\n  referenceFormsCols = REFERENCE_FORMS_COLS;\n  referenceFormFields: IFormFields[] = [\n    {\n      label: 'Name of Authenticating Official',\n      subLabel: '(Must be a Physician)',\n      value: '',\n      required: true,\n      name: 'nameOfAuthenticatingOfficial',\n      placeholder: 'Enter Official’s name',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: \"Authenticating Official'/s Role\",\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialRole',\n      placeholder: 'Choose their role',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Chief of Staff',\n          itemValue: 'chief',\n        },\n        {\n          itemDescription: 'Medical Director',\n          itemValue: 'medical',\n        },\n        {\n          itemDescription: 'Program Director',\n          itemValue: 'program',\n        },\n      ],\n    },\n    {\n      label: 'Reason for Alternate Official',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'reasonForAlternateOfficial',\n      placeholder: 'Enter a reason',\n      type: 'select',\n      size: 'col-4',\n      options: [\n        {\n          itemDescription: 'Option 1',\n          itemValue: 'option1',\n        },\n        {\n          itemDescription: 'Option 2',\n          itemValue: 'option2',\n        },\n        {\n          itemDescription: 'Option 3',\n          itemValue: 'option3',\n        },\n      ],\n    },\n    {\n      label: 'Authenticating Official’s Title',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'authenticatingOfficialTitle',\n      placeholder: 'Enter Official’s title',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'Authenticating Official’s Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialEmail',\n      placeholder: 'Enter Official’s email address',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Confirm Email Address',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'confirmEmailAddress',\n      placeholder: 'Enter Official’s email address again',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Authenticating Official’s Phone Number',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'authenticatingOfficialPhoneNumber',\n      placeholder: '_ _ _ - _ _ _ - _ _ _ _',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'Name of Affiliated Institution',\n      subLabel: '',\n      value: '',\n      required: false,\n      name: 'nameOfAffiliatedInstitution',\n      placeholder: 'Enter affiliated institution',\n      type: 'text',\n      size: 'col-12',\n    },\n    {\n      label: 'City',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'city',\n      placeholder: 'Enter your city',\n      type: 'text',\n      size: 'col-4',\n    },\n    {\n      label: 'State',\n      subLabel: '',\n      value: '',\n      required: true,\n      name: 'states',\n      placeholder: 'Choose your state',\n      type: 'select',\n      size: 'col-4',\n      options: [],\n    },\n    {\n      label: 'Name',\n      subLabel: '',\n      value: this.userData.diplayName,\n      required: false,\n      readonly: true,\n      name: 'name',\n      placeholder: 'Enter your full name',\n      type: 'text',\n      size: 'col-12',\n    },\n  ];\n  refrenceGridData = [\n    {\n      referenceFormId: 'MD19143',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Doe, M.D.',\n      date: new Date('09/21/2019'),\n      status: 'Requested',\n    },\n    {\n      referenceFormId: 'MD08221',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'Mary Joseph',\n      date: new Date('08/12/2019'),\n      status: 'Approved',\n    },\n    {\n      referenceFormId: 'MD12345',\n      affiliatedInstitution: 'ABS',\n      authenticatingOfficial: 'John Dorian',\n      date: new Date('8/1/2019'),\n      status: 'Approved',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.setPicklists();\n  }\n\n  setPicklists() {\n    this.states$?.subscribe((states) => {\n      this.referenceFormFields.filter((field) => {\n        if (field.name === 'states') {\n          field.options = states;\n        }\n      });\n    });\n  }\n\n  handleGridAction(event: any) {\n    console.log(event);\n  }\n\n  onSubmit(formFields: any) {\n    console.log(formFields);\n  }\n\n  close() {\n    this.closeDialog.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reference-form-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dialog-intro\">\n  Please provide contact information for the Authenticating Official from the\n  hospital or surgical center where you perform most of your work. If you hold\n  this position yourself, you may request another physician of comparable rank\n  to provide the reference. The reference cannot be provided by a relative, by\n  someone with whom you have a close personal relationship, or by the same\n  person who is providing you another ABS reference.\n</div>\n<abs-grid\n  title=\"Current Reference Forms\"\n  [columns]=\"referenceFormsCols\"\n  [data]=\"refrenceGridData\"\n  (action)=\"handleGridAction($event)\"\n  class=\"mb-2\"\n></abs-grid>\n\n<h5>Add Reference</h5>\n\n<form>\n  <div class=\"grid\">\n    <div\n      *ngFor=\"let formField of referenceFormFields\"\n      class=\"col-12 md:{{\n        formField.size\n      }} flex flex-column justify-content-start\"\n    >\n      <label [htmlFor]=\"formField.name\">{{ formField.label }}</label>\n      <input\n        *ngIf=\"formField.type === 'text'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [required]=\"formField.required\"\n        pInputText\n      />\n      <p-dropdown\n        *ngIf=\"formField.type === 'select'\"\n        [placeholder]=\"formField.placeholder ?? ''\"\n        [options]=\"formField.options ?? []\"\n        [name]=\"formField.name\"\n        [id]=\"formField.name\"\n        [editable]=\"true\"\n        appendTo=\"body\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n      ></p-dropdown>\n      <span>{{ formField.subLabel }}</span>\n    </div>\n    <div class=\"col-12 mb-3\">\n      I hereby authorize any hospital or medical staff where I now have, have\n      had, or have applied for medical staff privileges, and any medical\n      organization of which I am a member or to which I have applied for\n      membership, and any person who may have information (including medical\n      records, patient records, and reports of committees) which is deemed by\n      ABS to be material to its evaluation of this application, to provide such\n      information to representatives of the ABS. I agree that communications of\n      any nature made to the ABS regarding this application may be made in\n      confidence and shall not be made available to me under any circumstances.\n      I hereby release from liability any hospital, medical staff, medical\n      organization or person, and ABS and its representatives, for acts\n      performed in connection with this application. I authorize the ABS to\n      transmit a reference form request electronically to the above named\n      physician at the email address above, and affirm that it ultimately\n      remains my responsibility to ensure these forms are completed.\n    </div>\n    <div class=\"col-12 md:col-6 flex align-items-start gap-3\">\n      <p-checkbox value=\"Yes\" inputId=\"sendEmail\"></p-checkbox>\n      <label for=\"ny\"\n        >I would like my reference form sent to me via email</label\n      >\n    </div>\n    <div class=\"col-12 md:col-6 mt-5 flex justify-content-end btn-container\">\n      <sl-button variant=\"default\" size=\"large\" (click)=\"close()\">\n        Cancel\n      </sl-button>\n      <sl-button\n        class=\"wide\"\n        size=\"large\"\n        variant=\"warning\"\n        (click)=\"onSubmit(referenceFormFields)\"\n        >Save</sl-button\n      >\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "RegistrationRequirementsComponent",
            "id": "component-RegistrationRequirementsComponent-cd81f9d9381261308c6d9780ce1109cb441ef4b662a7981dd1d5bd440cf4bdb9068e0248837e30a1fe65c69fe03d562e418961d573d68ade487a9676623e0c9a",
            "file": "src/app/registration-requirements/registration-requirements.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-registration-requirements",
            "styleUrls": [
                "./registration-requirements.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration-requirements.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionMap",
                    "defaultValue": "{\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n      // this._globalDialogService.showComponentModal(\n      //   SurgeonProfileModalComponent,\n      //   'Surgeon Profile',\n      //   'in-progress'\n      // );\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionMap",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyForAnExamActionCardData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "registrationRequirementsData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "showACGMEexprience",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "showGraduateMedicalEducation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showMedicalLicense",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "showProfessionalActivitiesAndPrivileges",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "showSpecialAccommodations",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "showSurgeonProfile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "showTraining",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegistrationRequirementsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleCardAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ActionCardComponent",
                    "type": "component"
                },
                {
                    "name": "SurgeonProfileModalComponent",
                    "type": "component"
                },
                {
                    "name": "MedicalLicenseModalComponent",
                    "type": "component"
                },
                {
                    "name": "TrainingModalComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "AcgmeExperienceModalComponent",
                    "type": "component"
                },
                {
                    "name": "GraduateMedicalEducationModalComponent",
                    "type": "component"
                },
                {
                    "name": "SpecialAccommodationsModalComponent",
                    "type": "component"
                },
                {
                    "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActionCardComponent } from '../shared/components/action-card/action-card.component';\nimport { Status } from '../shared/components/action-card/status.enum';\nimport { SurgeonProfileModalComponent } from './surgeon-profile-modal/surgeon-profile-modal.component';\nimport { MedicalLicenseModalComponent } from './medical-license-modal/medical-license-modal.component';\nimport { TrainingModalComponent } from './training-modal/training-modal.component';\nimport { ModalComponent } from '../shared/components/modal/modal.component';\nimport { AcgmeExperienceModalComponent } from './acgme-experience-modal/acgme-experience-modal.component';\nimport { GraduateMedicalEducationModalComponent } from './graduate-medical-education-modal/graduate-medical-education-modal.component';\nimport { SpecialAccommodationsModalComponent } from './special-accommodations-modal/special-accommodations-modal.component';\nimport { Action } from '../shared/components/action-card/action.enum';\nimport { ProfessionalActivitiesAndPrivilegesModalComponent } from './professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component';\nimport { GlobalDialogService } from '../shared/services/global-dialog.service';\n\ninterface ActionMap {\n  [key: string]: () => void;\n}\n\n@Component({\n  selector: 'abs-registration-requirements',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ActionCardComponent,\n    SurgeonProfileModalComponent,\n    MedicalLicenseModalComponent,\n    TrainingModalComponent,\n    ModalComponent,\n    AcgmeExperienceModalComponent,\n    GraduateMedicalEducationModalComponent,\n    SpecialAccommodationsModalComponent,\n    ProfessionalActivitiesAndPrivilegesModalComponent,\n  ],\n  templateUrl: './registration-requirements.component.html',\n  styleUrls: ['./registration-requirements.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class RegistrationRequirementsComponent implements OnInit {\n  userData!: any;\n  registrationRequirementsData!: Array<any>;\n  applyForAnExamActionCardData!: any;\n  showSurgeonProfile = false;\n  showMedicalLicense = false;\n  showACGMEexprience = false;\n  showTraining = false;\n  showGraduateMedicalEducation = false;\n  showSpecialAccommodations = false;\n  showProfessionalActivitiesAndPrivileges = false;\n\n  constructor(\n    private _globalDialogService: GlobalDialogService,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._globalDialogService.setViewContainerRef = this.viewContainerRef;\n  }\n\n  private actionMap: ActionMap = {\n    surgeonProfileModal: () => {\n      this.showSurgeonProfile = !this.showSurgeonProfile;\n      // this._globalDialogService.showComponentModal(\n      //   SurgeonProfileModalComponent,\n      //   'Surgeon Profile',\n      //   'in-progress'\n      // );\n    },\n    medicalLicenseModal: () => {\n      this.showMedicalLicense = !this.showMedicalLicense;\n    },\n    ACGMEExperienceModal: () => {\n      this.showACGMEexprience = !this.showACGMEexprience;\n    },\n    trainingModal: () => {\n      this.showTraining = !this.showTraining;\n    },\n    graduateMedicalEducationModal: () => {\n      this.showGraduateMedicalEducation = !this.showGraduateMedicalEducation;\n    },\n    specialAccommodationsModal: () => {\n      this.showSpecialAccommodations = !this.showSpecialAccommodations;\n    },\n    professionalActivitiesAndPrivilegesModal: () => {\n      this.showProfessionalActivitiesAndPrivileges =\n        !this.showProfessionalActivitiesAndPrivileges;\n    },\n  };\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.getRegistrationRequirementsData();\n  }\n\n  getUserData() {\n    this.userData = {\n      name: 'John Doe M.D',\n    };\n  }\n\n  closeModal(event: any) {\n    console.log('event', event);\n    const actionFunction = this.actionMap[event.action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n\n  getRegistrationRequirementsData() {\n    this.registrationRequirementsData = [\n      {\n        title: 'Personal Profile',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'surgeonProfileModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-address-card',\n        status: Status.Completed,\n      },\n      {\n        title: 'Training',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'trainingModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-language fa-solid',\n        status: Status.InProgress,\n        recievedOn: new Date('2021-01-01'),\n      },\n      {\n        title: 'Professional Activities and Privileges',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'professionalActivitiesAndPrivilegesModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-doctor',\n        status: Status.Completed,\n      },\n      {\n        title: 'Medical License',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'medicalLicenseModal',\n        },\n        actionDisplay: 'View / Update my license',\n        icon: 'fa-certificate fa-solid',\n        status: Status.InProgress,\n      },\n      {\n        title: 'ACGME Experience Report by Role',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'ACGMEExperienceModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.InProgress,\n      },\n      {\n        title: 'Graduate Medical Education (GME)',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'graduateMedicalEducationModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-stethoscope',\n        status: Status.Alert,\n      },\n      {\n        title: 'Program Director Attestation',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/program-director-attestation',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-user-check',\n        status: Status.Completed,\n      },\n      {\n        title: 'Certification(s) Upload',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/certifications-upload',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-rectangle-list',\n        status: Status.Completed,\n      },\n      {\n        title: 'Application Fee',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.component,\n          action: '/application-fee',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-cash-register',\n        status: Status.Contingent,\n      },\n      {\n        title: 'Special Accommodations',\n        description:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n        action: {\n          type: Action.dialog,\n          action: 'specialAccommodationsModal',\n        },\n        actionDisplay: 'View / Update my information',\n        icon: 'fa-solid fa-star',\n        status: Status.InProgress,\n      },\n    ];\n    this.applyForAnExamActionCardData = {\n      title: 'Apply for an Exam',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n      action: {\n        style: 2,\n      },\n      disabled: true,\n      actionDisplay: 'Apply Now',\n      icon: 'fa-solid fa-language',\n    };\n  }\n\n  handleCardAction(action: string) {\n    console.log('action', action);\n    const actionFunction = this.actionMap[action];\n    if (actionFunction) {\n      actionFunction();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".legend {\n  margin-top: 1.5rem;\n  position: relative;\n  right: 0;\n  width: 100%;\n  text-align: right;\n  .l {\n    margin-left: 2rem;\n    font-weight: bold;\n    position: relative;\n    &:first-child {\n      margin-left: 0;\n    }\n    .i {\n      margin-right: 0.5rem;\n      width: 15px;\n      height: 15px;\n      background-color: var(--global-gray);\n      left: 0;\n      border-radius: 50%;\n    }\n    &.completed {\n      color: var(--global-success);\n      .i {\n        background-color: var(--global-success);\n      }\n    }\n    &.in-progress {\n      color: var(--global-warning);\n      .i {\n        background-color: var(--global-warning);\n      }\n    }\n    &.alert {\n      color: var(--global-danger);\n      .i {\n        background-color: var(--global-danger);\n      }\n    }\n    &.contingent {\n      color: var(--global-gray);\n      .i {\n        background-color: vvar(--global-gray);\n      }\n    }\n  }\n}\n\n.margin-bottom-2 {\n  margin-bottom: 2rem;\n}\n\n.action-card {\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0px 0px 6px #24365526;\n  padding: 1.5rem;\n  height: 100%;\n  min-height: 16rem;\n  transition: 150ms ease-in-out;\n  position: relative;\n  width: 100%;\n  .hotspot {\n    position: absolute;\n    background: none;\n    border: none;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n  &:hover {\n    box-shadow: none;\n  }\n  .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    margin-bottom: 2rem;\n    span {\n      font-size: 2rem;\n      margin-right: 0.75rem;\n    }\n  }\n  .icon {\n    color: var(--global-warning);\n  }\n  .description {\n    margin-bottom: 3rem;\n  }\n  .action-display {\n    position: absolute;\n    bottom: 1rem;\n    color: var(--global-success);\n    font-weight: bold;\n    width: 100%;\n    left: 0;\n    padding: 0 2rem;\n  }\n  &.completed {\n    border-right: 10px solid var(--global-success);\n    .icon {\n      color: var(--global-success);\n    }\n  }\n  &.in-progress {\n    border-right: 10px solid var(--global-warning);\n    .icon {\n      color: var(--global-warning);\n    }\n  }\n  &.alert {\n    border-right: 10px solid var(--global-danger);\n    .description {\n      color: var(--global-danger);\n    }\n    .action-display {\n      color: var(--global-danger);\n    }\n    .icon {\n      color: var(--global-danger);\n    }\n  }\n  &.contingent {\n    border-right: 10px solid var(--global-gray);\n    .icon {\n      color: var(--global-gray);\n    }\n  }\n  &.disabled {\n    cursor: not-allowed;\n    .icon {\n      color: var(--global-gray);\n    }\n    .action-display {\n      color: var(--global-gray);\n    }\n    &:hover {\n      box-shadow: 0px 0px 6px #24365526;\n    }\n  }\n  &.status-card {\n    min-height: 12rem;\n    .title {\n      margin-bottom: 1rem;\n    }\n    .status {\n      margin-bottom: 1rem;\n    }\n    .description {\n      margin-bottom: 2.5rem;\n    }\n  }\n}\n",
                    "styleUrl": "./registration-requirements.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "_globalDialogService",
                        "type": "GlobalDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex align-items-end flex-wrap col-12 margin-bottom-2\">\n  <div>\n    <h1>General Surgery Qualifying Examination</h1>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eros arcu,\n    mattis ut urna id, convallis eleifend purus. Phasellus sodales condimentum\n    orci, id malesuada ante faucibus eu.\n  </div>\n  <div class=\"legend flex justify-content-end flex-wrap\">\n    <div class=\"l flex align-items-center completed\">\n      <div class=\"i\"></div>\n      Completed\n    </div>\n    <div class=\"l flex align-items-center in-progress\">\n      <div class=\"i\"></div>\n      In Progress\n    </div>\n    <div class=\"l flex align-items-center alert\">\n      <div class=\"i\"></div>\n      Alert\n    </div>\n    <div class=\"l flex align-items-center contingent\">\n      <div class=\"i\"></div>\n      Contingent\n    </div>\n  </div>\n</div>\n\n<div class=\"grid margin-bottom-2\">\n  <abs-action-card\n    class=\"col-12 md:col-6 lg:col-6\"\n    *ngFor=\"let actionCard of registrationRequirementsData\"\n    [actionCard]=\"actionCard\"\n    (cardAction)=\"handleCardAction(actionCard.action.action)\"\n    [status]=\"actionCard.status\"\n    [recievedOn]=\"actionCard.recievedOn\"\n  ></abs-action-card>\n  <abs-action-card\n    class=\"col-12\"\n    [actionCard]=\"applyForAnExamActionCardData\"\n    (cardAction)=\"handleCardAction(applyForAnExamActionCardData.action.action)\"\n    [status]=\"applyForAnExamActionCardData.status\"\n  >\n  </abs-action-card>\n\n  <abs-modal\n    [open]=\"showMedicalLicense\"\n    (closeDialog)=\"handleCardAction('medicalLicenseModal')\"\n    modalName=\"medicalLicenseModal\"\n    title=\"Medical License\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-medical-license-modal\n      (closeDialog)=\"handleCardAction('medicalLicenseModal')\"\n    ></abs-medical-license-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showACGMEexprience\"\n    (closeDialog)=\"handleCardAction('ACGMEExperienceModal')\"\n    title=\"ACGME Experience Report by Role\"\n    modalName=\"ACGMEExperienceModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-acgme-experience-modal\n      (closeDialog)=\"handleCardAction('ACGMEExperienceModal')\"\n    ></abs-acgme-experience-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showSurgeonProfile\"\n    title=\"Surgeon Profile\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n    [preventOverlayClose]=\"true\"\n  >\n    <abs-surgeon-profile-modal\n      (closeDialog)=\"handleCardAction('surgeonProfileModal')\"\n    ></abs-surgeon-profile-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showTraining\"\n    title=\"Training\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n    [preventOverlayClose]=\"true\"\n    [width]=\"75\"\n  >\n    <abs-training-modal\n      (closeDialog)=\"handleCardAction('trainingModal')\"\n    ></abs-training-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showGraduateMedicalEducation\"\n    (closeDialog)=\"handleCardAction('graduateMedicalEducationModal')\"\n    title=\"Graduate Medical Education\"\n    modalName=\"graduateMedicalEducationModal\"\n    status=\"alert\"\n    [hideClose]=\"true\"\n  >\n    <abs-graduate-medical-education-modal\n      (closeDialog)=\"handleCardAction('graduateMedicalEducationModal')\"\n    ></abs-graduate-medical-education-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showSpecialAccommodations\"\n    (closeDialog)=\"handleCardAction('specialAccommodationsModal')\"\n    title=\"Special Accommodations\"\n    modalName=\"specialAccommodationsModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-special-accommodations-modal\n      (closeDialog)=\"handleCardAction('specialAccommodationsModal')\"\n    ></abs-special-accommodations-modal>\n  </abs-modal>\n\n  <abs-modal\n    [open]=\"showProfessionalActivitiesAndPrivileges\"\n    (closeDialog)=\"handleCardAction('professionalActivitiesAndPrivilegesModal')\"\n    title=\"Professional Activities and Privileges\"\n    modalName=\"professionalActivitiesAndPrivilegesModal\"\n    status=\"in-progress\"\n    [hideClose]=\"true\"\n  >\n    <abs-professional-activities-and-privileges-modal\n      (closeDialog)=\"\n        handleCardAction('professionalActivitiesAndPrivilegesModal')\n      \"\n    >\n    </abs-professional-activities-and-privileges-modal>\n  </abs-modal>\n</div>\n"
        },
        {
            "name": "SelectWrapperComponent",
            "id": "component-SelectWrapperComponent-d2ef7b215d774435f5eae7775535a7d73b35197d5e36be3f6ac70328cb16c798316fae17359782e12225fdb77b97377c8b6721e9b037d9bc4692a7058b09ddce",
            "file": "src/app/shared/components/select-wrapper/select-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-select-wrapper",
            "styleUrls": [
                "./select-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-wrapper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<SlChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<SlChangeEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<\n    string | undefined\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<string | undefined>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "changeBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dispatchChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "SlChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "SlChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlChangeEvent } from '@shoelace-style/shoelace';\n\n@Component({\n  selector: 'abs-select-wrapper',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './select-wrapper.component.html',\n  styleUrls: ['./select-wrapper.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SelectWrapperComponent {\n  @Output() valueChange: EventEmitter<string | undefined> = new EventEmitter<\n    string | undefined\n  >();\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() change: EventEmitter<SlChangeEvent> =\n    new EventEmitter<SlChangeEvent>();\n  // @Output() label: string | undefined;\n  // @Output() name: string | undefined;\n\n  _value: string | undefined;\n\n  @Input()\n  get value(): string | undefined {\n    // console.log('GET', this._value);\n    return this._value;\n  }\n  set value(value: string | undefined) {\n    // console.log('SET', this._value, value);\n    this._value = value;\n    this.valueChange.emit(value);\n  }\n\n  dispatchChange(event: SlChangeEvent) {\n    // console.log('DISPATCH', event);\n    this.change.emit(event);\n  }\n\n  changeBtn() {\n    this.value = 'option-1';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 32
                    }
                }
            },
            "templateData": "<sl-select [value]=\"value\" (sl-change)=\"dispatchChange($event)\"\n  ><ng-content></ng-content\n></sl-select>\n<button type=\"button\" (click)=\"changeBtn()\">Change: {{ value }}</button>\n"
        },
        {
            "name": "SideNavigationComponent",
            "id": "component-SideNavigationComponent-054043a83e06e69aa5d6e2a761bcc3e98b9b07105bf7cbc8f1fecec20cce921dae844f01860489fc08f3083845d8d8b1521783afe7344aaef19e2e075b7062ea",
            "file": "src/app/side-navigation/side-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-side-navigation",
            "styleUrls": [
                "./side-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "isSurgeon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleSideNavToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "navItems",
                    "defaultValue": "TRAINEE_NAV_ITEMS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getNavItemsByUserRoll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSubNav",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "NgxsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { IMenuItem } from 'src/web-components/menuItem';\nimport { NgxsModule, Store } from '@ngxs/store';\nimport { Logout } from '../state';\nimport { CERTIFIED_NAV_ITEMS, TRAINEE_NAV_ITEMS } from './nav-items';\n\n@Component({\n  selector: 'abs-side-navigation',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive, NgxsModule],\n  templateUrl: './side-navigation.component.html',\n  styleUrls: ['./side-navigation.component.scss'],\n})\nexport class SideNavigationComponent implements OnInit {\n  @Output() handleSideNavToggle: EventEmitter<any> = new EventEmitter();\n  @Input() currentStatus: string | undefined;\n  @Input() isSurgeon = false;\n\n  navItems: Array<IMenuItem> = TRAINEE_NAV_ITEMS;\n\n  constructor(private _router: Router, private _store: Store) {}\n\n  ngOnInit(): void {\n    this.getNavItemsByUserRoll();\n  }\n\n  getNavItemsByUserRoll() {\n    if (this.isSurgeon) {\n      this.navItems = CERTIFIED_NAV_ITEMS;\n    }\n  }\n\n  logout() {\n    this._store.dispatch(new Logout());\n  }\n\n  toggleSideNav() {\n    this.handleSideNavToggle.emit();\n  }\n\n  toggleSubNav(item: IMenuItem) {\n    console.log(item);\n  }\n\n  get router(): Router {\n    return this._router;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  padding-right: 0;\n}\n\nimg {\n  width: 100%;\n}\n\nh1 {\n  color: var(--global-primary);\n  text-transform: uppercase;\n  font-size: 1.35rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.hamburger {\n  border: none;\n  background: none;\n  display: block;\n  cursor: pointer;\n  span {\n    position: relative;\n    display: block;\n    height: 5px;\n    width: 3rem;\n    background-color: var(--global-primary);\n    transition: 250ms ease-in-out;\n    margin-bottom: 5px;\n    &:first-child {\n      transform: rotate(-45deg);\n      top: 9px;\n    }\n    &:nth-child(2) {\n      transform: rotate(45deg);\n    }\n  }\n  &:hover {\n    span {\n      background-color: var(--global-warning);\n    }\n  }\n}\n\n.container {\n  position: relative;\n  height: 100%;\n}\n\n.nav-header {\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  justify-content: space-between;\n  .logo {\n    margin: 0 1rem 0 0;\n    display: flex;\n    align-items: center;\n    max-width: 5rem;\n  }\n}\n\n.left-padding,\n.lower-nav {\n  padding: 0 0 0 1.5rem;\n}\n\n.lower-nav {\n  position: absolute;\n  bottom: 1.25rem;\n}\n\nnav {\n  max-height: calc(100vh - 17.5rem);\n  overflow: hidden;\n  &:hover {\n    overflow-y: auto;\n  }\n\n  &::-webkit-scrollbar {\n    width: 0.125rem;\n  }\n  &::-webkit-scrollbar-track {\n    background: var(--global-warning-lighten-60);\n  }\n  &::-webkit-scrollbar-thumb {\n    background: var(--global-warning);\n    &:hover {\n      background: var(--global-warning-darken-20);\n    }\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    li {\n      margin-bottom: 2.5rem;\n      position: relative;\n      a {\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        position: relative;\n        font-size: 1.25rem;\n        color: var(--global-primary);\n        font-weight: bold;\n        width: 100%;\n        &::after {\n          content: '';\n          position: absolute;\n          right: 0;\n          width: 5px;\n          height: 55px;\n          background-color: none;\n          transition: 250ms ease-in-out;\n        }\n        i {\n          margin-right: 1rem;\n          margin-right: 0 auto;\n          font-size: 1.5rem;\n          width: 1.5rem;\n          transition: 250ms ease-in-out;\n        }\n        &:hover,\n        &.active {\n          i {\n            color: var(--global-warning);\n          }\n          &::after {\n            background-color: var(--global-warning);\n          }\n        }\n      }\n    }\n  }\n\n  .sub-menu {\n    max-height: 0;\n    overflow: hidden;\n    transition: 550ms ease-in-out;\n    ul {\n      li {\n        margin-top: 1.5rem;\n        margin-bottom: 0rem;\n        a {\n          font-size: 1rem;\n          transition: 250ms ease-in-out;\n          &:hover,\n          &.active {\n            color: var(--global-success);\n            &::after {\n              display: none;\n            }\n          }\n        }\n      }\n    }\n    &:hover {\n      max-height: 500px;\n    }\n  }\n\n  .has-sub-menu {\n    &:hover,\n    &.active {\n      + .sub-menu {\n        max-height: 500px;\n      }\n    }\n  }\n}\n\n.lower-nav {\n  color: var(--global-primary);\n  font-weight: bold;\n  button {\n    background: none;\n    border: none;\n    font-size: 1.25rem;\n    color: var(--global-primary);\n    font-weight: bold;\n    font-family: 'proxima-nova', sans-serif;\n    cursor: pointer;\n    i {\n      transition: 250ms ease-in-out;\n      margin: 0 1rem;\n    }\n    &:hover {\n      i {\n        color: var(--global-warning);\n      }\n    }\n  }\n}\n\n@media screen and (min-width: 1015px) {\n  .hamburger {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./side-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "router": {
                    "name": "router",
                    "getSignature": {
                        "name": "router",
                        "type": "",
                        "returnType": "Router",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"nav-header\">\n    <div class=\"flex\">\n      <div class=\"logo\">\n        <img\n          src=\"../../assets/img/abs-logo.svg\"\n          alt=\"The American Board Of Surgery\"\n        />\n      </div>\n      <h3>\n        The American <br />\n        Board of Surgery\n      </h3>\n    </div>\n    <div class=\"nav-toggle\">\n      <div class=\"hamburger\" (click)=\"toggleSideNav()\">\n        <span></span>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <nav>\n    <ul class=\"main-navigation\">\n      <li class=\"left-padding\" *ngFor=\"let item of navItems\">\n        <a\n          [routerLink]=\"item.action\"\n          routerLinkActive=\"active\"\n          (click)=\"toggleSideNav()\"\n          *ngIf=\"!item.children\"\n          ><i [ngClass]=\"item.icon\"></i>{{ item.display }}</a\n        >\n        <a\n          (click)=\"toggleSubNav(item)\"\n          *ngIf=\"item.children\"\n          [routerLink]=\"item.action\"\n          routerLinkActive=\"active\"\n          class=\"has-sub-menu\"\n        >\n          <i [ngClass]=\"item.icon\"></i>{{ item.display }}\n        </a>\n        <div class=\"sub-menu\" *ngIf=\"item.children\">\n          <ul>\n            <li *ngFor=\"let child of item.children\">\n              <a\n                [routerLink]=\"[item.action, child.action]\"\n                routerLinkActive=\"active\"\n                (click)=\"toggleSideNav()\"\n                ><i [ngClass]=\"child.icon\"></i>{{ child.display }}</a\n              >\n            </li>\n          </ul>\n        </div>\n      </li>\n    </ul>\n  </nav>\n\n  <nav class=\"lower-nav\">\n    <button (click)=\"router.navigateByUrl('my-account')\">\n      <i class=\"fa-solid fa-user-doctor\"></i>My Account\n    </button>\n    |\n    <button (click)=\"logout()\">\n      Logout<i class=\"fa-sharp fa-solid fa-arrow-right-from-bracket\"></i>\n    </button>\n  </nav>\n</div>\n"
        },
        {
            "name": "SpecialAccommodationsModalComponent",
            "id": "component-SpecialAccommodationsModalComponent-c235c82fb480d5fa256f43988aa62ed7b6c408dbfc0287bec4a7a02068123bf02d0b9ec5b686e6ad5f414d54abed1b6d057367ea544db5fc97c6e05290a551ce",
            "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-special-accommodations-modal",
            "styleUrls": [
                "./special-accommodations-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-accommodations-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "fileUploadedName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedDocumentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "specialAccommodationsCols",
                    "defaultValue": "SPECIAL_ACCOMMODATIONS_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "specialAccommodationsData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "specialAccommodationsTypeOptions",
                    "defaultValue": "[\n    {\n      label: 'Other medical condition',\n      value: 'other_medical_condition',\n    },\n    {\n      label: 'Lactating mother',\n      value: 'lactating_mother',\n    },\n    {\n      label: 'ADA (Learning disability)',\n      value: 'ada_learning_disability',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "uploadedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSpecialAccommodationsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFileOnChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SPECIAL_ACCOMMODATIONS_COLS } from './special-accommodations-cols';\nimport { GridComponent } from 'src/app/shared/components/grid/grid.component';\nimport { FormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\n\n@Component({\n  selector: 'abs-special-accommodations-modal',\n  standalone: true,\n  imports: [CommonModule, GridComponent, FormsModule, DropdownModule],\n  templateUrl: './special-accommodations-modal.component.html',\n  styleUrls: ['./special-accommodations-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SpecialAccommodationsModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  specialAccommodationsCols = SPECIAL_ACCOMMODATIONS_COLS;\n  specialAccommodationsData!: any;\n\n  fileUploadedName!: string | undefined;\n  uploadedFile!: File | undefined;\n  documentType!: string;\n\n  selectedDocumentType: string | null | undefined;\n\n  specialAccommodationsTypeOptions = [\n    {\n      label: 'Other medical condition',\n      value: 'other_medical_condition',\n    },\n    {\n      label: 'Lactating mother',\n      value: 'lactating_mother',\n    },\n    {\n      label: 'ADA (Learning disability)',\n      value: 'ada_learning_disability',\n    },\n  ];\n\n  ngOnInit(): void {\n    this.getSpecialAccommodationsData();\n  }\n\n  getSpecialAccommodationsData() {\n    this.specialAccommodationsData = [\n      {\n        fileName: 'ABC_Special-Accommodation-Request_1-2-22.pdf',\n        uploadDate: new Date('09/22/19'),\n        type: 'Other medical condition',\n      },\n    ];\n  }\n\n  handleSelectChange(event: any) {\n    this.selectedDocumentType = event.target.__displayLabel;\n  }\n\n  handleFileOnChange($event: any) {\n    this.fileUploadedName = $event.target.files[0].name;\n    this.uploadedFile = $event.target.files;\n  }\n\n  onDocumentUpload() {\n    console.log('document upload', this.uploadedFile);\n    console.log('document Name', this.fileUploadedName);\n    console.log('document Type', this.documentType);\n    if (this.uploadedFile) {\n      this.specialAccommodationsData.push({\n        fileName: this.fileUploadedName,\n        uploadDate: new Date(),\n        type: this.selectedDocumentType,\n      });\n      this.resetData();\n    }\n  }\n\n  resetData() {\n    this.fileUploadedName = undefined;\n    this.uploadedFile = undefined;\n    this.selectedDocumentType = null;\n  }\n\n  close() {\n    this.closeDialog.emit({ action: 'specialAccommodationsModal' });\n  }\n\n  gridAction($event: any) {\n    console.log($event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mr-5 {\n  margin-right: 5px;\n}\n\ninput[type='file'] {\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n}\n\n.input-file {\n  margin-right: 5px;\n  label {\n    position: relative;\n    top: 8px;\n    padding: 6px 40px;\n    border: 1px solid #595959;\n    border-radius: 6px;\n    opacity: 1;\n    color: #595959;\n    font-weight: 500;\n    transition: 250ms ease-in-out;\n    cursor: pointer;\n    i {\n      color: var(--global-warning);\n      margin-left: 20px;\n    }\n    &:hover &:focus-visible {\n      border: 1px solid var(--global-warning);\n    }\n  }\n}\n\n.upload-controls {\n  position: absolute;\n}\n",
                    "styleUrl": "./special-accommodations-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mb-5\">\n  <p>\n    Please complete and upload below\n    <a href=\"#\">Accommodation Request Other Medical Conditions</a>\n  </p>\n</div>\n<div class=\"flex align-items-end gap-3\">\n  <div>\n    <label class=\"block\" for=\"appointmentType\">Appointment Type</label>\n    <p-dropdown\n      [options]=\"specialAccommodationsTypeOptions\"\n      (onChange)=\"handleSelectChange($event)\"\n      inputId=\"appointmentType\"\n      name=\"appointmentType\"\n      placeholder=\"Select an Appointment Type\"\n      optionLabel=\"label\"\n      optionValue=\"value\"\n    ></p-dropdown>\n  </div>\n\n  <div class=\"flex\">\n    <div class=\"input-file\">\n      <label>\n        <input type=\"file\" (change)=\"handleFileOnChange($event)\" />\n        <span\n          >{{ fileUploadedName ?? 'Upload a File' }}\n          <i class=\"fa-solid fa-upload\"></i\n        ></span>\n      </label>\n    </div>\n    <sl-button\n      (click)=\"onDocumentUpload()\"\n      [disabled]=\"documentType === '' || !uploadedFile\"\n      class=\"btn-add\"\n    >\n      <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n      <span>UPLOAD DOCUMENT</span>\n    </sl-button>\n  </div>\n</div>\n\n<abs-grid\n  [columns]=\"specialAccommodationsCols\"\n  [data]=\"specialAccommodationsData\"\n  (action)=\"gridAction($event)\"\n>\n</abs-grid>\n<div class=\"flex justify-content-end mt-5\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button type=\"button\" style=\"width: 337px\" variant=\"primary\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "SuccessFailModalComponent",
            "id": "component-SuccessFailModalComponent-8dda0b4163f69fe33a70b6a02ad6c1bea2408f31fc8699aad3b85cf1e3c6c4f65d0b6e3ffa71ac0f73420f5830119d14ec3e9df55d744a7d1909a99d25b44fa7",
            "file": "src/app/shared/components/success-fail-modal/success-fail-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-success-fail-modal",
            "styleUrls": [
                "./success-fail-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./success-fail-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-success-fail-modal',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './success-fail-modal.component.html',\n  styleUrls: ['./success-fail-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SuccessFailModalComponent {\n  @Input() isSuccess!: boolean;\n  @Input() message!: string;\n  @Input() title!: string;\n  @Input() showDialog = false;\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  close() {\n    this.closeDialog.emit({ show: false });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".success-icon {\n  font-size: 5rem;\n  color: var(--global-success);\n}\n.error-icon {\n  font-size: 5rem;\n  color: var(--global-danger);\n}\n\np {\n  text-align: center;\n}\n",
                    "styleUrl": "./success-fail-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<sl-dialog [noHeader]=\"true\" [open]=\"showDialog\" (sl-request-close)=\"close()\">\n  <div class=\"flex flex-column justify-content-center align-items-center\">\n    <i class=\"fa-regular fa-circle-check success-icon\" *ngIf=\"isSuccess\"></i>\n    <i class=\"fa-regular fa-circle-xmark error-icon\" *ngIf=\"!isSuccess\"></i>\n    <h2 class=\"font-normal mt-3 mb-1\">\n      {{ title }}\n    </h2>\n    <p class=\"font-bold mt-0 mb-1\" *ngIf=\"message\">{{ message }}</p>\n    <sl-button\n      slot=\"footer\"\n      class=\"mt-5\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      (click)=\"close()\"\n      >{{ isSuccess ? 'Continue' : 'Okay' }}</sl-button\n    >\n  </div>\n</sl-dialog>\n"
        },
        {
            "name": "SurgeonProfileModalComponent",
            "id": "component-SurgeonProfileModalComponent-2d51539ae54a7e883129bbc4081872198e5943e17dccde5a3291e3b7ae18a1fd5c50f34ad5724b1cbb9bb1b3f758d1c00a42fa8cc11b8ed72eaf7b0288b9773a",
            "file": "src/app/registration-requirements/surgeon-profile-modal/surgeon-profile-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNgxMask()"
                }
            ],
            "selector": "abs-surgeon-profile-modal",
            "styleUrls": [
                "./surgeon-profile-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./surgeon-profile-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePanel",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "fakeOptions",
                    "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "panels",
                    "defaultValue": "['personalInformation', 'contactInformation']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "surgeonProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSurgeonProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDefaultShowTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showTabPanel",
                    "args": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgxMaskDirective",
                    "type": "directive"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "InputMaskModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaskDirective } from 'ngx-mask';\nimport { provideNgxMask } from 'ngx-mask';\n// import { GlobalDialogService } from 'src/app/shared/services/global-dialog.service';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputMaskModule } from 'primeng/inputmask';\n\n@Component({\n  selector: 'abs-surgeon-profile-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgxMaskDirective,\n    InputTextModule,\n    DropdownModule,\n    InputMaskModule,\n  ],\n  templateUrl: './surgeon-profile-modal.component.html',\n  styleUrls: ['./surgeon-profile-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [provideNgxMask()],\n})\nexport class SurgeonProfileModalComponent implements OnInit {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n  ];\n\n  panels = ['personalInformation', 'contactInformation'];\n  activePanel = 0;\n\n  surgeonProfile: any;\n\n  // constructor(private _globalDialogService: GlobalDialogService) {}\n\n  ngOnInit() {\n    this.getSurgeonProfile();\n  }\n\n  getSurgeonProfile() {\n    this.surgeonProfile = {\n      personalInfo: {\n        cid: '123456789',\n        fullName: 'Joe Bob Smith',\n        firstName: 'Joe',\n        middleName: 'Bob',\n        lastName: 'Smith',\n        certName: 'Joe Bob Smith, M.D.',\n        gender: 'male',\n        race: 'white',\n        ethnicity: 'white',\n        firstLanguage: 'english',\n        bestLanguage: 'english',\n      },\n      contactInfo: {\n        address: '123 Main St',\n        address2: 'Apt 1',\n        city: 'Philadelphia',\n        state: 'PA',\n        zip: '94105',\n        country: 'USA',\n        phone: '1234567890',\n        mobile: '1234567890',\n        fax: '1234567890',\n        email: 'test@test.io',\n        npid: '123456789',\n      },\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#surgeonProfileTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // this._globalDialogService.closeOpenDialog();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
                    "styleUrl": "./surgeon-profile-modal.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec\n    dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas sit\n    amet tortor at, condimentum tempor erat.\n  </p>\n  <sl-tab-group\n    [noScrollControls]=\"true\"\n    id=\"surgeonProfileTabs\"\n    (sl-tab-show)=\"handleDefaultShowTab($event)\"\n  >\n    <!-- TODO: [Joe] tab__complete should be applied to tab based on form state (hopefully derived from reactive form in the ngx-store) -->\n    <sl-tab slot=\"nav\" panel=\"personalInformation\" class=\"tab__complete\">\n      <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n      Personal Information\n    </sl-tab>\n    <sl-tab slot=\"nav\" panel=\"contactInformation\">\n      <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n      Contact Information\n    </sl-tab>\n\n    <sl-tab-panel name=\"personalInformation\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n      <div class=\"grid\">\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"cid\">Candidate Identification Number</label>\n          <input\n            id=\"cid\"\n            pInputText\n            type=\"text\"\n            name=\"cid\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.cid\"\n            required\n          />\n        </div>\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"fullName\">Full Name</label>\n          <input\n            id=\"fullName\"\n            pInputText\n            type=\"text\"\n            name=\"fullName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.fullName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"firstName\">First Name</label>\n          <input\n            id=\"firstName\"\n            pInputText\n            type=\"text\"\n            name=\"firstName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.firstName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"middleName\">Middle Name</label>\n          <input\n            id=\"middleName\"\n            pInputText\n            type=\"text\"\n            name=\"middleName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.middleName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"lastName\">Last Name</label>\n          <input\n            id=\"lastName\"\n            pInputText\n            type=\"text\"\n            name=\"lastName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.lastName\"\n            required\n          />\n        </div>\n        <div class=\"col-12\">\n          <label class=\"block\" for=\"certName\"\n            >Name as it Should Appear on Certificate</label\n          >\n          <input\n            id=\"certName\"\n            pInputText\n            type=\"text\"\n            name=\"certName\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.certName\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"gender\">Gender</label>\n          <p-dropdown\n            inputId=\"gender\"\n            name=\"gender\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.gender\"\n            placeholder=\"Select a Gender\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"race\">Race</label>\n          <p-dropdown\n            inputId=\"race\"\n            name=\"race\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.race\"\n            placeholder=\"Select a Race\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"ethnicity\">Ethnicity</label>\n          <p-dropdown\n            inputId=\"ethnicity\"\n            name=\"ethnicity\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.ethnicity\"\n            placeholder=\"Select a Ethnicity\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"firstLanguage\"\n            >What Language Did You Learn to Speak First?</label\n          >\n          <p-dropdown\n            inputId=\"firstLanguage\"\n            name=\"firstLanguage\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.firstLanguage\"\n            placeholder=\"Select a First Language\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            [required]=\"true\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"bestLanguage\"\n            >What Language Do You Speak Best?</label\n          >\n          <p-dropdown\n            inputId=\"bestLanguage\"\n            name=\"bestLanguage\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.personalInfo.bestLanguage\"\n            placeholder=\"Select a Best Language\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n      </div>\n    </sl-tab-panel>\n    <sl-tab-panel name=\"contactInformation\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n        nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat,\n        egestas sit amet tortor at, condimentum tempor erat.\n      </p>\n      <div class=\"grid\">\n        <div class=\"col-12 md:col-8\">\n          <label class=\"block\" for=\"street1\">Street Address</label>\n          <input\n            id=\"street1\"\n            pInputText\n            type=\"text\"\n            name=\"street1\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.address\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"street2\">Address Line 2</label>\n          <input\n            id=\"street2\"\n            pInputText\n            type=\"text\"\n            name=\"street2\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.address2\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"city\">City</label>\n          <input\n            id=\"city\"\n            pInputText\n            type=\"text\"\n            name=\"city\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.city\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"state\">State / Province / Territory</label>\n          <p-dropdown\n            inputId=\"state\"\n            name=\"state\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.state\"\n            placeholder=\"Select a State\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"zip\">Zip</label>\n          <input\n            id=\"zip\"\n            pInputText\n            type=\"text\"\n            name=\"zip\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.zip\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"country\">Country</label>\n          <p-dropdown\n            inputId=\"country\"\n            name=\"country\"\n            [options]=\"fakeOptions\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.country\"\n            placeholder=\"Select a State\"\n            optionLabel=\"itemDescription\"\n            optionValue=\"itemValue\"\n            appendTo=\"body\"\n          ></p-dropdown>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"officePhoneNumber\"\n            >Daytime Phone Number</label\n          >\n          <!-- NOTE: p-inputMask is apparently broken using ngModel, but works file (on profile page) using reactive forms -->\n          <p-inputMask\n            inputId=\"officePhoneNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"officePhoneNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.phone\"\n            placeholder=\"(999) 999-9999\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-4\">\n          <label class=\"block\" for=\"mobilePhoneNumber\"\n            >Mobile Phone Number</label\n          >\n          <p-inputMask\n            inputId=\"mobilePhoneNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"mobilePhoneNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.mobile\"\n            placeholder=\"(999) 999-9999\"\n            [unmask]=\"true\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"faxNumber\">Fax Number</label>\n          <p-inputMask\n            inputId=\"faxNumber\"\n            mask=\"(999) 999-9999\"\n            name=\"faxNumber\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.fax\"\n            placeholder=\"(999) 999-9999\"\n          ></p-inputMask>\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"emailAddress\">Email Address</label>\n          <input\n            id=\"emailAddress\"\n            pInputText\n            type=\"email\"\n            name=\"emailAddress\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.email\"\n            required\n          />\n        </div>\n        <div class=\"col-12 md:col-6\">\n          <label class=\"block\" for=\"npid\">National Provider ID</label>\n          <input\n            id=\"npid\"\n            pInputText\n            type=\"text\"\n            name=\"npid\"\n            [(ngModel)]=\"surgeonProfile.contactInfo.npid\"\n            readonly\n          />\n        </div>\n      </div>\n    </sl-tab-panel>\n  </sl-tab-group>\n</div>\n<div class=\"flex justify-content-end\" slot=\"footer\">\n  <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n  <sl-button\n    type=\"button\"\n    style=\"width: 337px\"\n    variant=\"primary\"\n    (click)=\"save()\"\n    >Save\n  </sl-button>\n</div>\n"
        },
        {
            "name": "TrainingAddEditModalComponent",
            "id": "component-TrainingAddEditModalComponent-1816c69c553f6a41eaea5436ed9760448ff3a2fdcf14fe9fb2de57ad5c3dc06a6b95acf8feb0c88e5aba753b59230a1254e8e3d17e7f8cf69c0ae9c1db472b57",
            "file": "src/app/shared/components/training-add-edit-modal/training-add-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-training-add-edit-modal",
            "styleUrls": [
                "./training-add-edit-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./training-add-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isEdit$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Subject<boolean>",
                    "decorators": []
                },
                {
                    "name": "training$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "Subject<IAdvancedTrainingModel>",
                    "decorators": []
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accreditedInstitutions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccreditedProgramInstitutionReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "accreditedInstitutions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAccreditedProgramInstitutionReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.accreditedInstitutions"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "additionalTrainingForm",
                    "defaultValue": "new FormGroup(\n    {\n      trainingType: new FormControl(0, Validators.required),\n      startDate: new FormControl(new Date(), Validators.required),\n      endDate: new FormControl(new Date(), Validators.required),\n      institutionName: new FormControl({ itemDescription: '', itemValue: '' }),\n      state: new FormControl({ value: '', disabled: true }),\n      city: new FormControl({ value: '', disabled: true }),\n      other: new FormControl(''),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "filteredInstitutionOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "institutionOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "stateOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPickListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "states$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IStateReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.states"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "trainingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "trainingTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITrainingTypeReadOnlyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "trainingTypes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ITrainingTypeReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined.trainingTypes"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearAutoComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterItems",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDefaultClose",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInstitutionSelect",
                    "args": [
                        {
                            "name": "selected",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPicklistOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IPickListItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | number | null | undefined",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IPickListItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputSelectComponent",
                    "type": "component"
                },
                {
                    "name": "AutoCompleteModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  GetAccreditedProgramInstitutionsList,\n  GetStateList,\n  IPickListItem,\n  PicklistsSelectors,\n} from 'src/app/state/picklists';\nimport { IStateReadOnlyModel } from 'src/app/api';\nimport { Select, Store } from '@ngxs/store';\nimport { InputSelectComponent } from '../../../shared/components/base-input/input-select.component';\nimport { IAccreditedProgramInstitutionReadOnlyModel } from 'src/app/api/models/picklists/accredited-program-institution-read-only.model';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CalendarModule } from 'primeng/calendar';\nimport { ITrainingTypeReadOnlyModel } from 'src/app/api/models/picklists/training-type-read-only.model';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\nimport { validateStartAndEndDates } from '../../validators/validators';\n\n@Component({\n  selector: 'abs-training-add-edit-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputSelectComponent,\n    AutoCompleteModule,\n    InputTextModule,\n    DropdownModule,\n    CalendarModule,\n  ],\n  templateUrl: './training-add-edit-modal.component.html',\n  styleUrls: ['./training-add-edit-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingAddEditModalComponent implements OnInit {\n  @Input() training$: Subject<IAdvancedTrainingModel> = new Subject();\n  @Input() isEdit$: Subject<boolean> = new Subject();\n  @Input() userId!: number;\n  @Output() cancelDialog: EventEmitter<any> = new EventEmitter();\n  @Output() saveDialog: EventEmitter<any> = new EventEmitter();\n\n  @Select(PicklistsSelectors.slices.states) states$:\n    | Observable<IStateReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.accreditedInstitutions)\n  accreditedInstitutions$:\n    | Observable<IAccreditedProgramInstitutionReadOnlyModel[]>\n    | undefined;\n\n  @Select(PicklistsSelectors.slices.trainingTypes) trainingTypes$:\n    | Observable<ITrainingTypeReadOnlyModel[]>\n    | undefined;\n\n  additionalTrainingForm = new FormGroup(\n    {\n      trainingType: new FormControl(0, Validators.required),\n      startDate: new FormControl(new Date(), Validators.required),\n      endDate: new FormControl(new Date(), Validators.required),\n      institutionName: new FormControl({ itemDescription: '', itemValue: '' }),\n      state: new FormControl({ value: '', disabled: true }),\n      city: new FormControl({ value: '', disabled: true }),\n      other: new FormControl(''),\n    },\n    {\n      validators: [validateStartAndEndDates('startDate', 'endDate')],\n    }\n  );\n\n  stateOptions: IPickListItem[] = [];\n  institutionOptions: IPickListItem[] = [];\n  accreditedInstitutions: IAccreditedProgramInstitutionReadOnlyModel[] = [];\n  trainingTypes: ITrainingTypeReadOnlyModel[] = [];\n  filteredInstitutionOptions: IPickListItem[] = [];\n  trainingId!: number | undefined;\n  isEdit!: boolean;\n\n  constructor(private _store: Store) {\n    this._store.dispatch(new GetStateList('500'));\n    this._store.dispatch(new GetAccreditedProgramInstitutionsList());\n    this.states$?.subscribe((value) => {\n      this.stateOptions = value;\n    });\n  }\n\n  ngOnInit() {\n    this.setPicklistOptions();\n    this.isEdit$.subscribe((isEdit) => {\n      this.isEdit = isEdit;\n    });\n    this.training$.subscribe((formData) => {\n      if (Object.keys(formData).length > 0) {\n        this.trainingId = formData.id;\n        for (const [key, value] of Object.entries(formData)) {\n          this.additionalTrainingForm.get(key)?.patchValue(value);\n          if (key === 'institutionName') {\n            this.institutionOptions.filter((inst) => {\n              if (inst.itemDescription === value) {\n                this.additionalTrainingForm.get(key)?.patchValue({\n                  itemDescription: inst.itemDescription ?? '',\n                  itemValue: inst.itemValue ?? '',\n                });\n              }\n            });\n          }\n          if (key === 'trainingType') {\n            this.trainingTypes.filter((training) => {\n              if (training.trainingType === value) {\n                this.additionalTrainingForm.get(key)?.patchValue(training.id);\n              }\n            });\n          }\n          if (key === 'other') {\n            if (value.length > 0) {\n              this.clearAutoComplete();\n            }\n          }\n        }\n\n        this.additionalTrainingForm\n          .get('startDate')\n          ?.patchValue(new Date(formData.startDate ?? ''));\n\n        this.additionalTrainingForm\n          .get('endDate')\n          ?.patchValue(new Date(formData.endDate ?? ''));\n      } else {\n        this.additionalTrainingForm.reset();\n      }\n    });\n  }\n\n  clearAutoComplete() {\n    this.additionalTrainingForm.get('institutionName')?.patchValue(null);\n    this.additionalTrainingForm.get('city')?.patchValue('');\n    this.additionalTrainingForm.get('state')?.patchValue('');\n  }\n\n  get typeOfTraining() {\n    return this.additionalTrainingForm.get('typeOfTraining');\n  }\n\n  setPicklistOptions() {\n    this.accreditedInstitutions$?.subscribe((insitutions) => {\n      this.accreditedInstitutions = insitutions;\n      insitutions.forEach((insitution) => {\n        this.institutionOptions.push({\n          itemValue: insitution.programId.toString(),\n          itemDescription: insitution.institutionName,\n        });\n      });\n    });\n\n    this.trainingTypes$?.subscribe((training) => {\n      this.trainingTypes = training;\n    });\n  }\n\n  handleDefaultClose(event: any) {\n    event.preventDefault();\n  }\n\n  onInstitutionSelect(selected: any) {\n    this.additionalTrainingForm.get('other')?.patchValue('');\n    this.accreditedInstitutions.filter((i) => {\n      if (i.programId === +selected.itemValue) {\n        this.additionalTrainingForm.patchValue({\n          state: i.state,\n          city: i.city,\n        });\n      }\n    });\n  }\n\n  filterItems($event: any) {\n    const value = $event.query;\n    this.filteredInstitutionOptions = this.institutionOptions.filter((i) => {\n      return i.itemDescription?.toLowerCase().includes(value.toLowerCase());\n    });\n  }\n\n  cancel() {\n    this.cancelDialog.emit({ show: false });\n  }\n\n  save() {\n    this.saveDialog.emit({\n      edit: this.isEdit,\n      show: false,\n      trainingRecord: this.additionalTrainingForm.value,\n      trainingId: this.trainingId,\n    });\n  }\n\n  trackByFn(\n    index: number,\n    item: IPickListItem\n  ): string | number | null | undefined {\n    return item.itemValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./training-add-edit-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "typeOfTraining": {
                    "name": "typeOfTraining",
                    "getSignature": {
                        "name": "typeOfTraining",
                        "type": "",
                        "returnType": "",
                        "line": 157
                    }
                }
            },
            "templateData": "<form\n  name=\"personProfileForm\"\n  [formGroup]=\"additionalTrainingForm\"\n  (ngSubmit)=\"save()\"\n  *ngIf=\"additionalTrainingForm\"\n>\n  <div class=\"grid\">\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"trainingType\">Type of Training *</label>\n      <p-dropdown\n        [options]=\"trainingTypes\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        optionLabel=\"trainingType\"\n        optionValue=\"id\"\n        formControlName=\"trainingType\"\n        placeholder=\"Choose a Training Type\"\n      ></p-dropdown>\n      <small\n        *ngIf=\"\n          additionalTrainingForm.get('trainingType')?.errors &&\n          additionalTrainingForm.get('trainingType')?.dirty\n        \"\n        id=\"trainingType-help\"\n        class=\"form-error-text\"\n      >\n        This is required\n      </small>\n    </div>\n    <div class=\"col-12 full-width gap-2 flex flex-column\">\n      <label htmlFor=\"institutionName\">Institution</label>\n      <p-autoComplete\n        [dropdown]=\"true\"\n        [suggestions]=\"filteredInstitutionOptions\"\n        (completeMethod)=\"filterItems($event)\"\n        (onSelect)=\"onInstitutionSelect($event)\"\n        (onClear)=\"clearAutoComplete()\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [disabled]=\"additionalTrainingForm.get('other')?.value ? true : false\"\n        [showClear]=\"true\"\n        appendTo=\"body\"\n        id=\"institutionName\"\n        placeholder=\"Select or Enter Institution name\"\n        field=\"itemDescription\"\n        formControlName=\"institutionName\"\n      >\n      </p-autoComplete>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"city\">City</label>\n      <input\n        pInputText\n        id=\"city\"\n        placeholder=\"Choose an Institution\"\n        formControlName=\"city\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"state\">State</label>\n      <p-dropdown\n        [options]=\"stateOptions\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [readonly]=\"true\"\n        optionLabel=\"itemDescription\"\n        optionValue=\"itemValue\"\n        formControlName=\"state\"\n        placeholder=\"Choose an Institution\"\n      ></p-dropdown>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12\">\n      <label htmlFor=\"other\">Other</label>\n      <input\n        [attr.disabled]=\"additionalTrainingForm.get('institutionName')?.value\"\n        pInputText\n        id=\"other\"\n        placeholder=\"If you do not see your Institution in the list, type it in here...\"\n        formControlName=\"other\"\n      />\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"startDate\">Date Started *</label>\n      <p-calendar\n        [showIcon]=\"true\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        id=\"startDate\"\n        placeholder=\"Type your answer...\"\n        formControlName=\"startDate\"\n      >\n      </p-calendar>\n      <small\n        *ngIf=\"additionalTrainingForm.get('endDate')?.dirty\"\n        id=\"startDate-help\"\n        class=\"form-error-text\"\n      >\n        {{\n            this.additionalTrainingForm.errors?.['datesValid'] === false\n              ? 'Start Date must come before End Date'\n              : ''\n        }}\n      </small>\n    </div>\n    <div class=\"flex flex-column gap-2 col-12 md:col-6\">\n      <label htmlFor=\"endDate\">Date Ended *</label>\n      <p-calendar\n        [showIcon]=\"true\"\n        [style]=\"{ width: '100%' }\"\n        [inputStyle]=\"{ width: '100%' }\"\n        appendTo=\"body\"\n        id=\"endDate\"\n        placeholder=\"Type your answer...\"\n        formControlName=\"endDate\"\n      >\n      </p-calendar>\n      <small\n        *ngIf=\"additionalTrainingForm.get('endDate')?.dirty\"\n        id=\"endDate-help\"\n        class=\"form-error-text\"\n      >\n        {{\n          this.additionalTrainingForm.errors?.['datesValid'] === false\n            ? 'Date Started must be before Date Ended'\n            : ''\n        }}\n      </small>\n    </div>\n  </div>\n  <div class=\"flex justify-content-end mt-4\" slot=\"footer\">\n    <sl-button type=\"button\" variant=\"text\" (click)=\"cancel()\"\n      >Cancel</sl-button\n    >\n    <sl-button\n      type=\"submit\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      [disabled]=\"additionalTrainingForm.invalid\"\n      >Save\n    </sl-button>\n  </div>\n</form>\n"
        },
        {
            "name": "TrainingModalComponent",
            "id": "component-TrainingModalComponent-c793697eb3c1c53a88bcf1b30f075308c8a728bc4489006a0c1afa681ccfead69db2b58e5f98489d270093dc4492873b6ab13c6a08174bd45822362587888b46",
            "file": "src/app/registration-requirements/training-modal/training-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-training-modal",
            "styleUrls": [
                "./training-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./training-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDialog",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePanel",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "additionalTrainingList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAdditionalTrainingReadOnlyModel[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GQAdditionalTrainingSelectors.additionalTrainingList"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "documentCols",
                    "defaultValue": "BASIC_DOCUMENT_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "emptyTraining",
                    "defaultValue": "{\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAdvancedTrainingModel",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "fakeOptions",
                    "defaultValue": "[\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "medicalTraining",
                    "defaultValue": "{\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MedicalTrainingData",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "panels",
                    "defaultValue": "[\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "selectedTraining$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IAdditionalTrainingModel> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "selectedTrainingSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "showTrainingAddEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "tempTraining$",
                    "defaultValue": "new BehaviorSubject(\n    this.emptyTraining\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<IAdvancedTrainingModel>",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "trainingAddEditTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "trainingCols",
                    "defaultValue": "MEDICAL_TRAINING_COLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "userId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserProfileSelectors.userId"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelAddEditTraining",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMedicalTraining",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDefaultShowTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGridAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileList",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileList",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTrainingData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTraining",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTabPanel",
                    "args": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTrainingModal",
                    "args": [
                        {
                            "name": "trainingId",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "trainingId",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "GridComponent",
                    "type": "component"
                },
                {
                    "name": "TrainingAddEditModalComponent",
                    "type": "component"
                },
                {
                    "name": "FileUploadButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "InputTextareaModule",
                    "type": "module"
                },
                {
                    "name": "DropdownModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                },
                {
                    "name": "RadioButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  CUSTOM_ELEMENTS_SCHEMA,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { GridComponent } from '../../shared/components/grid/grid.component';\nimport { TrainingAddEditModalComponent } from '../../shared/components/training-add-edit-modal/training-add-edit-modal.component';\nimport { FileUploadButtonComponent } from 'src/app/shared/components/file-upload-button/file-upload-button.component';\nimport { ModalComponent } from 'src/app/shared/components/modal/modal.component';\nimport { MEDICAL_TRAINING_COLS } from '../../shared/gridDefinitions/medical-training-cols';\nimport { BASIC_DOCUMENT_COLS } from '../../shared/gridDefinitions/basic-document-cols';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport {\n  UserProfileSelectors,\n  GQAdditionalTrainingSelectors,\n  GetAdditionalTrainingList,\n  GetAdditionalTrainingDetails,\n  UpdateAdditionalTraining,\n  CreateAdditionalTraining,\n} from '../../state';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  IAdditionalTrainingModel,\n  IAdditionalTrainingReadOnlyModel,\n} from 'src/app/api';\nimport { IAdvancedTrainingModel } from 'src/app/api/models/medicaltraining/advanced-training.model';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { RadioButtonModule } from 'primeng/radiobutton';\n\ninterface MedicalTrainingData {\n  medicalSchool: any;\n  residency: any;\n  additionalDocuments: any;\n}\n\n@Component({\n  selector: 'abs-training-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    GridComponent,\n    TrainingAddEditModalComponent,\n    FileUploadButtonComponent,\n    ModalComponent,\n    InputTextModule,\n    InputTextareaModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioButtonModule,\n  ],\n  templateUrl: './training-modal.component.html',\n  styleUrls: ['./training-modal.component.scss'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class TrainingModalComponent implements OnInit, OnDestroy {\n  @Output() closeDialog: EventEmitter<any> = new EventEmitter();\n  @Select(UserProfileSelectors.userId) userId$: Observable<number> | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.additionalTrainingList)\n  additionalTrainingList$:\n    | Observable<IAdditionalTrainingReadOnlyModel[]>\n    | undefined;\n\n  @Select(GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails)\n  selectedTraining$: Observable<IAdditionalTrainingModel> | undefined;\n\n  fakeOptions = [\n    { itemDescription: 'Option 1', itemValue: 'option-1' },\n    { itemDescription: 'Option 2', itemValue: 'option-2' },\n    { itemDescription: 'Option 3', itemValue: 'option-3' },\n    { itemDescription: 'Option 4', itemValue: 'option-4' },\n    { itemDescription: 'Option 5', itemValue: 'option-5' },\n    { itemDescription: 'Option 6', itemValue: 'option-6' },\n    { itemDescription: 'Option 7', itemValue: 'option-7' },\n    { itemDescription: 'Option 8', itemValue: 'option-8' },\n    { itemDescription: 'Option 9', itemValue: 'option-9' },\n    { itemDescription: 'Option 101', itemValue: 'option-101' },\n  ];\n\n  userSubscription: Subscription | undefined;\n  selectedTrainingSubscription: Subscription | undefined;\n\n  trainingCols = MEDICAL_TRAINING_COLS;\n  documentCols = BASIC_DOCUMENT_COLS;\n  showTrainingAddEdit = false;\n  trainingAddEditTitle: string | undefined;\n  emptyTraining: IAdvancedTrainingModel = {\n    id: 0,\n    userId: 0,\n    trainingTypeId: 0,\n    trainingType: '',\n    programId: 0,\n    institutionName: '',\n    city: '',\n    state: '',\n    other: '',\n    startDate: '',\n    endDate: '',\n    createdByUserId: 0,\n    createdAtUtc: '',\n    lastUpdatedAtUtc: '',\n    lastUpdatedByUserId: 0,\n  };\n  tempTraining$: BehaviorSubject<IAdvancedTrainingModel> = new BehaviorSubject(\n    this.emptyTraining\n  );\n  panels = [\n    'medicalSchool',\n    'residency',\n    'additionalTraining',\n    'additionalDocuments',\n  ];\n  activePanel = 0;\n\n  medicalTraining: MedicalTrainingData = {\n    medicalSchool: {},\n    residency: {},\n    additionalDocuments: {},\n  };\n  userId: number | undefined;\n\n  constructor(private _store: Store) {\n    this.initTrainingData();\n  }\n  ngOnDestroy(): void {\n    this.userSubscription?.unsubscribe();\n    this.selectedTrainingSubscription?.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.getMedicalTraining();\n  }\n\n  initTrainingData() {\n    this.userSubscription = this.userId$?.subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId > -1) {\n        this._store.dispatch(new GetAdditionalTrainingList(this.userId));\n      }\n    });\n\n    this.selectedTrainingSubscription = this.selectedTraining$?.subscribe(\n      (selectedTraining) => {\n        if (selectedTraining?.trainingId > -1) {\n          this.tempTraining$.next(selectedTraining);\n        }\n      }\n    );\n  }\n\n  getMedicalTraining() {\n    this.medicalTraining.medicalSchool = {\n      statement: 'USA',\n      name: 'Johns Hopkins University',\n      city: 'Baltimore',\n      state: 'MD',\n      country: 'USA',\n      degree: 'MD',\n      yearGraduated: '2010',\n    };\n    this.medicalTraining.residency = {\n      programName: 'General Surgery',\n      yearOfCompletion: '2015',\n      programNotListed: 'an explanation goes here',\n      completedInCanada: null,\n      postResidencyPlans: null,\n      postFellowshipPlans: null,\n      vascularTraining: null,\n      vascularFellowship: null,\n      thoracicTraining: null,\n      thoracicFellowship: null,\n    };\n    this.medicalTraining.additionalDocuments = {\n      multiplePrograms: null,\n      completionDocuments: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n      recievedABSApprovalLetter: null,\n      approvalLetters: [\n        {\n          file: new Blob(['Hello, world!'], { type: 'text/plain' }),\n          fileName: 'this_is_a_file_name.txt',\n          fileType: 'lines',\n          uploadDate: new Date('7/01/2022'),\n        },\n      ],\n    };\n  }\n\n  handleDefaultShowTab(event: any) {\n    this.activePanel = this.panels.indexOf(event.detail.name);\n  }\n\n  showTabPanel(panel: string) {\n    const tabGroup: any | null = document.querySelector('#trainingTabs');\n    tabGroup?.show(panel);\n  }\n\n  save() {\n    if (this.activePanel === this.panels.length - 1) {\n      this.close();\n    } else {\n      this.showTabPanel(this.panels[this.activePanel + 1]);\n    }\n  }\n\n  close() {\n    this.closeDialog.emit();\n    // timeout is needed to allow the modal to close before the tab panel is reset\n    setTimeout(() => {\n      this.showTabPanel(this.panels[0]);\n    }, 500);\n  }\n\n  uploadFile(event: any, fileList: any[]) {\n    if (event.file) {\n      fileList.push(event.file);\n    }\n  }\n\n  showTrainingModal(trainingId?: number | undefined) {\n    if (trainingId) {\n      this._store.dispatch(new GetAdditionalTrainingDetails(trainingId));\n      const selectedTraining = this._store.selectSnapshot<any>(\n        GQAdditionalTrainingSelectors.selectedAdditionalTrainingDetails\n      );\n\n      this.trainingAddEditTitle = 'Edit Additional / Advanced Training';\n    } else {\n      this.tempTraining$.next(this.emptyTraining);\n      this.trainingAddEditTitle = 'Add Additional / Advanced Training';\n    }\n    this.showTrainingAddEdit = true;\n  }\n  saveTraining($event: any) {\n    $event.trainingRecord.institutionId = parseInt(\n      $event.trainingRecord.institutionId\n    );\n    if ($event.trainingRecord.dateEnded) {\n      $event.trainingRecord.dateEnded = new Date(\n        $event.trainingRecord.dateEnded\n      );\n    }\n    if ($event.trainingRecord.dateStarted) {\n      $event.trainingRecord.dateStarted = new Date(\n        $event.trainingRecord.dateStarted\n      );\n    }\n    console.log('save training', $event);\n    // TODO: [Joe] show the universal success/error message\n    if ($event.trainingRecord.trainingId > -1) {\n      this._store.dispatch(new UpdateAdditionalTraining($event.trainingRecord));\n    } else {\n      this._store.dispatch(new CreateAdditionalTraining($event.trainingRecord));\n    }\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n  cancelAddEditTraining($event: any) {\n    this.showTrainingAddEdit = $event.show;\n    this.tempTraining$.next(this.emptyTraining);\n  }\n\n  handleGridAction($event: any, fileList?: any[] | undefined) {\n    if ($event.fieldKey === 'edit') {\n      this.showTrainingModal($event.data.trainingId);\n    } else if ($event.fieldKey === 'delete') {\n      // TODO: [Joe] once we have the ngx-store implemented see if this can be done cleaner without passing in the fileList\n      if (fileList) {\n        const index = fileList.indexOf($event.data);\n        if (index > -1) {\n          fileList.splice(index, 1);\n        }\n      } else {\n        console.log('handle delete', $event);\n      }\n    } else if ($event.fieldKey === 'download') {\n      const link = document.createElement('a');\n      link.setAttribute('href', URL.createObjectURL($event.data.file));\n      link.setAttribute('download', $event.data.fileName);\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else {\n      console.log('unhandled action', $event);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sl-tab-group::part(body) {\n  overflow-x: hidden;\n}\nsl-tab-group::part(active-tab-indicator) {\n  border-color: var(--global-success);\n}\nsl-tab {\n  width: 100%;\n  text-align: center;\n}\nsl-tab::part(base) {\n  color: var(--global-text-primary);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\nsl-tab.tab__complete::part(base) {\n  color: var(--global-success);\n}\nsl-tab::part(base):hover {\n  color: var(--global-success-darken-20);\n}\n",
                    "styleUrl": "./training-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 130,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\n  <div>\n    <p class=\"m-0\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque\n      nec dolor lacinia interdum quis nec nisi. Pellentesque dolor erat, egestas\n      sit amet tortor at, condimentum tempor erat.\n    </p>\n    <sl-tab-group\n      [noScrollControls]=\"true\"\n      id=\"trainingTabs\"\n      (sl-tab-show)=\"handleDefaultShowTab($event)\"\n    >\n      <!-- TODO: [Joe] tab__complete should be applied to tab based on form state (hopefully derived from reactive form in the ngx-store) -->\n      <sl-tab slot=\"nav\" panel=\"medicalSchool\" class=\"tab__complete\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-success mr-2\"></i>\n        Medical School\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"residency\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Residency\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"additionalTraining\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Additional Training\n      </sl-tab>\n      <sl-tab slot=\"nav\" panel=\"additionalDocuments\">\n        <!-- TODO: [Joe] text-success, text-warning, text-danger should be applied to icons based on form state (hopefully derived from reactive form in the ngx-store) -->\n        <i class=\"fa-solid fa-circle-check text-warning mr-2\"></i>\n        Additional Documents\n      </sl-tab>\n\n      <sl-tab-panel name=\"medicalSchool\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <div class=\"col-12\">\n            <label class=\"block\" for=\"statement\"\n              >Select the statement that best describes you (Country of medical\n              school)</label\n            >\n            <p-dropdown\n              inputId=\"statement\"\n              name=\"statement\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.statement\"\n              placeholder=\"Select a Country\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12\">\n            <label class=\"block\" for=\"medicalSchool\">Medical School</label>\n            <input\n              id=\"medicalSchool\"\n              pInputText\n              type=\"text\"\n              name=\"medicalSchool\"\n              placeholder=\"Enter school name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.name\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"city\">City or Town</label>\n            <input\n              id=\"city\"\n              pInputText\n              type=\"text\"\n              name=\"city\"\n              placeholder=\"Enter city name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.city\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"state\"\n              >State / Province / Territory</label\n            >\n            <p-dropdown\n              inputId=\"state\"\n              name=\"state\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.state\"\n              placeholder=\"Choose a State\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-4\">\n            <label class=\"block\" for=\"country\">Country</label>\n            <p-dropdown\n              inputId=\"country\"\n              name=\"country\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.country\"\n              placeholder=\"Choose a Country\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"degree\">Degree</label>\n            <input\n              id=\"degree\"\n              pInputText\n              type=\"text\"\n              name=\"degree\"\n              placeholder=\"Enter degree name\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.degree\"\n              required\n            />\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"yearGraduated\">Year of Completion</label>\n            <input\n              id=\"yearGraduated\"\n              pInputText\n              type=\"text\"\n              name=\"yearGraduated\"\n              placeholder=\"YYYY\"\n              [(ngModel)]=\"medicalTraining.medicalSchool.yearGraduated\"\n              required\n            />\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"residency\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <h5 class=\"col-12 mb-1\">Residency</h5>\n          <div class=\"col-6\">\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyName\">Program Name</label>\n                <input\n                  id=\"residencyName\"\n                  pInputText\n                  type=\"text\"\n                  name=\"residencyName\"\n                  placeholder=\"Enter program name\"\n                  [(ngModel)]=\"medicalTraining.residency.programName\"\n                  required\n                />\n              </div>\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyYear\"\n                  >Year of Completion</label\n                >\n                <input\n                  id=\"residencyYear\"\n                  pInputText\n                  type=\"text\"\n                  name=\"residencyYear\"\n                  placeholder=\"YYYY\"\n                  [(ngModel)]=\"medicalTraining.residency.yearOfCompletion\"\n                  required\n                />\n              </div>\n            </div>\n          </div>\n          <div class=\"col-6\">\n            <div class=\"grid\">\n              <div class=\"col-12\">\n                <label class=\"block\" for=\"residencyNotListed\"\n                  >My program is not listed</label\n                >\n                <textarea\n                  rows=\"5\"\n                  pInputTextarea\n                  id=\"residencyNotListed\"\n                  placeholder=\"Explain...\"\n                  name=\"residencyNotListed\"\n                  [(ngModel)]=\"medicalTraining.residency.programNotListed\"\n                ></textarea>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-12 text-center flex align-items-center gap-2\">\n            <p-checkbox\n              inputId=\"completedInCanada\"\n              name=\"completedInCanada\"\n              [(ngModel)]=\"medicalTraining.residency.completedInCanada\"\n              [binary]=\"true\"\n            ></p-checkbox>\n            <label for=\"completedInCanada\"\n              >Did you complete your training in canada?</label\n            >\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Post Residency and Fellowship Plans</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"postResidencyPlans\"\n              >Upon completing my General Surgery residency I will:</label\n            >\n            <p-dropdown\n              inputId=\"postResidencyPlans\"\n              name=\"postResidencyPlans\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.postResidencyPlans\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"fellowshipPlans\"\n              >Upon completing my fellowship, I anticipate that my clinical\n              practice will include:</label\n            >\n            <p-dropdown\n              inputId=\"fellowshipPlans\"\n              name=\"fellowshipPlans\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.fellowshipPlans\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Vascular Surgery Training</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\"\n              >Will you be pursuing vascular surgery training?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"vascularTraining\"\n                [value]=\"true\"\n                [(ngModel)]=\"medicalTraining.residency.vascularTraining\"\n                inputId=\"vascularTrainingYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"vascularTraining\"\n                [value]=\"false\"\n                [(ngModel)]=\"medicalTraining.residency.vascularTraining\"\n                inputId=\"vascularTrainingNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"vascularFellowship\"\n              >In which program will you complete a vascular surgery\n              fellowship?</label\n            >\n            <p-dropdown\n              inputId=\"vascularFellowship\"\n              name=\"vascularFellowship\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.vascularFellowship\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Thoracic Surgery Training</h5>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\"\n              >Will you be pursuing thoracic surgery training?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"thoracicTraining\"\n                [value]=\"true\"\n                [(ngModel)]=\"medicalTraining.residency.thoracicTraining\"\n                inputId=\"thoracicTrainingYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"thoracicTraining\"\n                [value]=\"false\"\n                [(ngModel)]=\"medicalTraining.residency.thoracicTraining\"\n                inputId=\"thoracicTrainingNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12 md:col-6\">\n            <label class=\"block\" for=\"thoracicFellowship\"\n              >In which program will you complete a thoracic surgery\n              fellowship?</label\n            >\n            <p-dropdown\n              inputId=\"thoracicFellowship\"\n              name=\"thoracicFellowship\"\n              [options]=\"fakeOptions\"\n              [(ngModel)]=\"medicalTraining.residency.thoracicFellowship\"\n              placeholder=\"Make a selection\"\n              optionLabel=\"itemDescription\"\n              optionValue=\"itemValue\"\n              appendTo=\"body\"\n            ></p-dropdown>\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"additionalTraining\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid\">\n          <div class=\"col-12\">\n            <sl-button\n              variant=\"default\"\n              class=\"btn-add mt-2 mb-2\"\n              (click)=\"showTrainingModal()\"\n            >\n              <i slot=\"prefix\" class=\"fa-solid fa-plus\"></i>\n              ADD RECORD\n            </sl-button>\n            <abs-grid\n              [columns]=\"trainingCols\"\n              [data]=\"additionalTrainingList$\"\n              (action)=\"handleGridAction($event)\"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n      </sl-tab-panel>\n      <sl-tab-panel name=\"additionalDocuments\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed\n          neque nec dolor lacinia interdum quis nec nisi. Pellentesque dolor\n          erat, egestas sit amet tortor at, condimentum tempor erat.\n        </p>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">Trained in Multiple Programs</h5>\n          <div class=\"col-12\">\n            <label class=\"block\"\n              >Did you complete training in more than one program in the\n              speciality for which you are applying?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"multiplePrograms\"\n                [value]=\"true\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.multiplePrograms\n                \"\n                inputId=\"multipleProgramsYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"multiplePrograms\"\n                [value]=\"false\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.multiplePrograms\n                \"\n                inputId=\"multipleProgramsNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12\">\n            <abs-file-upload-button\n              inputId=\"completionDocument\"\n              inputName=\"completionDocument\"\n              buttonText=\"Add Documentation of Trained in Multiple Programs\"\n              (fileUploaded)=\"\n                uploadFile(\n                  $event,\n                  medicalTraining.additionalDocuments.completionDocuments\n                )\n              \"\n            ></abs-file-upload-button>\n            <abs-grid\n              [columns]=\"documentCols\"\n              [data]=\"medicalTraining.additionalDocuments.completionDocuments\"\n              (action)=\"\n                handleGridAction(\n                  $event,\n                  medicalTraining.additionalDocuments.completionDocuments\n                )\n              \"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n        <div class=\"grid align-items-baseline\">\n          <h5 class=\"col-12 mb-1 mt-3\">ABS Approval Letter</h5>\n          <div class=\"col-12\">\n            <label class=\"block\"\n              >Did you have international rotations, flexible rotations and/or\n              did you receive credit for foreign medical education or ABS\n              approval letter for other reasons?</label\n            >\n            <div class=\"flex gap-5\">\n              <p-radioButton\n                name=\"recievedABSApprovalLetter\"\n                [value]=\"true\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.recievedABSApprovalLetter\n                \"\n                inputId=\"recievedABSApprovalLetterYes\"\n                label=\"Yes\"\n              ></p-radioButton>\n              <p-radioButton\n                name=\"recievedABSApprovalLetter\"\n                [value]=\"false\"\n                [(ngModel)]=\"\n                  medicalTraining.additionalDocuments.recievedABSApprovalLetter\n                \"\n                inputId=\"recievedABSApprovalLetterNo\"\n                label=\"No\"\n              ></p-radioButton>\n            </div>\n          </div>\n          <div class=\"col-12\">\n            <abs-file-upload-button\n              inputId=\"approvalLetter\"\n              inputName=\"approvalLetter\"\n              buttonText=\"Add abs approval letter\"\n              (fileUploaded)=\"\n                uploadFile(\n                  $event,\n                  medicalTraining.additionalDocuments.approvalLetters\n                )\n              \"\n            ></abs-file-upload-button>\n            <abs-grid\n              [columns]=\"documentCols\"\n              [data]=\"medicalTraining.additionalDocuments.approvalLetters\"\n              (action)=\"\n                handleGridAction(\n                  $event,\n                  medicalTraining.additionalDocuments.approvalLetters\n                )\n              \"\n              class=\"margin-bottom-2\"\n            ></abs-grid>\n          </div>\n        </div>\n      </sl-tab-panel>\n    </sl-tab-group>\n  </div>\n  <div class=\"flex justify-content-end\" slot=\"footer\">\n    <sl-button type=\"button\" variant=\"text\" (click)=\"close()\">Cancel</sl-button>\n    <sl-button\n      type=\"button\"\n      style=\"width: 337px\"\n      variant=\"primary\"\n      (click)=\"save()\"\n      >Save\n    </sl-button>\n  </div>\n\n  <abs-modal\n    [open]=\"showTrainingAddEdit\"\n    (closeDialog)=\"cancelAddEditTraining($event)\"\n    [title]=\"trainingAddEditTitle\"\n  >\n    <abs-training-add-edit-modal\n      [training$]=\"tempTraining$\"\n      (cancelDialog)=\"cancelAddEditTraining($event)\"\n      (saveDialog)=\"saveTraining($event)\"\n    ></abs-training-add-edit-modal>\n  </abs-modal>\n</div>\n"
        },
        {
            "name": "UserInformationCardComponent",
            "id": "component-UserInformationCardComponent-4417f18452bd3a2c8fb6697c03fcade5569594bb1d0ec9de96296644c87a3c0e131927f777c16c67df60f894dc9fa5254242d90e8467d1383dec993663a0fd2a",
            "file": "src/app/shared/components/user-information-card/user-information-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "abs-user-information-card",
            "styleUrls": [
                "./user-information-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-information-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isSurgeon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "userInformation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'abs-user-information-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './user-information-card.component.html',\n  styleUrls: ['./user-information-card.component.scss'],\n})\nexport class UserInformationCardComponent {\n  @Input() userInformation: any;\n  @Input() currentStatus!: string;\n  @Input() isSurgeon: boolean | undefined;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-information-card {\n  background-color: var(--global-primary);\n  color: white;\n  padding: 2rem 2rem 4rem;\n  border-radius: 6px;\n  .status-container {\n    font-size: 1.25rem;\n    padding-bottom: 1.5rem;\n    margin-bottom: 3rem;\n    border-bottom: 1px solid #51657e;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    .status-indicators {\n      display: flex;\n      margin-right: 0.5rem;\n      .status {\n        width: 12px;\n        height: 12px;\n        background: #51657e;\n        border-radius: 50%;\n        margin-right: 3px;\n        &.active {\n          &.one {\n            background-color: var(--global-danger);\n          }\n          &.two {\n            background-color: var(--global-warning);\n          }\n          &.three {\n            background-color: var(--global-secondary);\n          }\n        }\n      }\n    }\n  }\n  .info-container {\n    display: flex;\n    column-gap: 5rem;\n    row-gap: 2rem;\n    flex-wrap: wrap;\n    .info {\n      display: flex;\n      line-height: 25px;\n      max-width: 18rem;\n      span,\n      .certified-title {\n        margin-right: 0.5rem;\n        font-weight: bold;\n      }\n      &.certified {\n        display: block;\n        .certified-title {\n          margin-bottom: 0.5rem;\n        }\n      }\n    }\n  }\n}\n\n.info-data {\n  line-height: 18px;\n}\n",
                    "styleUrl": "./user-information-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"user-information-card\">\n  <div class=\"status-container\">\n    <div class=\"status-indicators\">\n      <div class=\"status one active\"></div>\n      <div class=\"status two active\"></div>\n      <div class=\"status three active\"></div>\n    </div>\n    <strong>Current Status</strong>:\n    {{ currentStatus ? currentStatus : 'Trainee' }}\n  </div>\n\n  <div class=\"info-container\" *ngIf=\"!isSurgeon; else certified\">\n    <div class=\"info\">\n      <span>Program Director:</span>\n      {{ userInformation?.programDirector ?? 'N/A' }}\n    </div>\n    <div class=\"info\">\n      <span>Program:</span>\n      {{ userInformation?.programName || 'N/A' }} <br />\n      {{\n        userInformation?.city && userInformation?.state\n          ? userInformation?.city + ', ' + userInformation?.state\n          : ''\n      }}\n    </div>\n    <div class=\"info\">\n      <span>Clinical Level:</span>\n      {{ userInformation?.clinicalLevel ?? 'N/A' }}\n    </div>\n  </div>\n\n  <ng-template #certified>\n    <div class=\"info-container\">\n      <div class=\"info certified\" *ngFor=\"let info of userInformation\">\n        <div class=\"certified-title\">\n          {{ info?.speciality }}\n        </div>\n        <div class=\"info-data\">\n          <span>Certificate Number:</span>\n          {{\n            userInformation?.certificateId?.length > 0\n              ? info?.certificateId\n              : 'N/A'\n          }}\n        </div>\n        <div class=\"info-data\">\n          <span>Expiration Date:</span>\n          {{\n            userInformation?.certificateId?.length > 0\n              ? info?.endDateDisplay\n              : 'N/A'\n          }}\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-9b25d4891bba06c177220b52571cbf26d01ff24091198abcc708613f3263289696e737c90a860faaa092319486be72418ff4d9435447e774b7c38e93a3ff7c3e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FileNotFoundComponent } from './file-not-found/file-not-found.component';\nimport { AuthGuard } from './state';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'login',\n    loadComponent: () =>\n      \"import('./login/login.component').then((m) => m.LoginComponent)\",\n  },\n  {\n    path: 'dashboard',\n    loadComponent: () =>\n      \"import('./dashboard/dashboard.component').then(\\\n        (m) => m.DashboardComponent\\\n      )\",\n  },\n  {\n    path: 'cme-repository',\n    loadComponent: () =>\n      \"import('./cme-repository/cme-repository.component').then(\\\n        (m) => m.CmeRepositoryComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'personal-profile',\n    loadComponent: () =>\n      \"import('./personal-profile/personal-profile.component').then(\\\n        (m) => m.PersonalProfileComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'medical-training',\n    loadComponent: () =>\n      \"import('./medical-training/medical-training.component').then(\\\n        (m) => m.MedicalTrainingComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'professional-standing',\n    loadComponent: () =>\n      \"import('./professional-standing/professional-standing.component').then(\\\n        (m) => m.ProfessionalStandingComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'exam-process',\n    loadComponent: () =>\n      \"import('./exam-process/exam-process.component').then(\\\n        (m) => m.ExamProcessComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'exam-process/registration-requirements',\n    loadComponent: () =>\n      \"import(\\\n        './registration-requirements/registration-requirements.component'\\\n      ).then((m) => m.RegistrationRequirementsComponent)\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'exam-process/exam-registration',\n    loadComponent: () =>\n      \"import('./exam-registration/exam-registration.component').then(\\\n        (m) => m.ExamRegistrationComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'examination-history',\n    loadComponent: () =>\n      \"import('./examination-history/examination-history.component').then(\\\n        (m) => m.ExaminationHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'continuous-certification',\n    loadComponent: () =>\n      \"import(\\\n        './continuous-certification/continuous-certification.component'\\\n      ).then((m) => m.ContinuousCertificationComponent)\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'payment-history',\n    loadComponent: () =>\n      \"import('./payment-history/payment-history.component').then(\\\n        (m) => m.PaymentHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'documents',\n    loadComponent: () =>\n      \"import('./documents/documents.component').then(\\\n        (m) => m.DocumentsComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'committees',\n    loadComponent: () =>\n      \"import('./committees/committees.component').then(\\\n        (m) => m.CommitteesComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'my-account',\n    loadComponent: () =>\n      \"import('./my-account/my-account.component').then(\\\n        (m) => m.MyAccountComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'gme-history',\n    loadComponent: () =>\n      \"import('./gme-history/gme-history.component').then(\\\n        (m) => m.GmeHistoryComponent\\\n      )\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: '**',\n    component: FileNotFoundComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AbsGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/grid/abs-grid.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  setTextDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setYesNoDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      cellRenderer: 'yesNo',\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      icon: icon,\n      cellRenderer: 'button',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFileLinkCol(\n    headerName: string,\n    fieldName: string,\n    fileType?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      fileType: fileType,\n      cellRenderer: 'fileLink',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setExpandToggle(\n    headerName: string,\n    fieldName: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      cellRenderer: 'expandToggle',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFormattedDateCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'dateFormatter',\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomClass(\n    headerName: string,\n    fieldName: string,\n    className?: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'customClass',\n      cellClass: (fieldName: string) => {\n        return className ?? fieldName;\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomStyle(\n    headerName: string,\n    fieldName: string,\n    style?: object,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'customStyle',\n      style: () => {\n        return style ?? {};\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n}"
            },
            {
                "name": "ACGME_EXPERIENCE_GRID_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
            },
            {
                "name": "ADD_EDIT_RECORD_FIELDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'Start Date',\n    subLabel: '',\n    value: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'startDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'End Date',\n    subLabel: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'endDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'Week(s)',\n    required: false,\n    name: 'weeks',\n    placeholder: '',\n    readonly: true,\n    type: 'text',\n    size: 'col-4',\n  },\n  {\n    label: 'Program Name',\n    subLabel: '',\n    required: true,\n    name: 'programName',\n    placeholder: 'Select a program...',\n    type: 'autocomplete',\n    size: 'col-6',\n    options: [],\n    filteredOptions: [],\n  },\n  {\n    label: 'Affiliated Organization',\n    subLabel: '',\n    required: false,\n    name: 'alternateInstitutionName',\n    placeholder: 'Enter affiliated organization...',\n    helpText:\n      'This is only required if you could not find your program in the available list',\n    type: 'text',\n    size: 'col-6',\n  },\n  {\n    label: 'Clinical Level',\n    subLabel: '',\n    required: true,\n    name: 'clinicalLevelId',\n    placeholder: 'Select clinical level...',\n    type: 'select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Clinical Activity',\n    subLabel: '',\n    required: true,\n    name: 'clinicalActivityId',\n    placeholder: 'Select clinical activity...',\n    type: 'grouped-select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Explain',\n    subLabel: '',\n    required: false,\n    name: 'other',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'Description (Non-Surgical Only)',\n    subLabel: '',\n    required: false,\n    name: 'nonSurgicalActivity',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'International Rotation',\n    subLabel: '',\n    value: '',\n    required: true,\n    name: 'isInternationalRotation',\n    placeholder: 'Make a selection...',\n    helpText:\n      'If you selected yes please upload the ABS Approval letter under the training section',\n    type: 'radio-group',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n]"
            },
            {
                "name": "APPOINTMENTS_PRIVILEGES_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/professional-standing/appointments-privileges-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appointment Type', 'appointmentType'),\n  AbsGrid.setTextDisplayCol('Organization Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Official', 'official'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
            },
            {
                "name": "AUTH_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/auth/auth.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IAuthState>('auth')"
            },
            {
                "name": "BASIC_DOCUMENT_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/gridDefinitions/basic-document-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFileLinkCol('File Name', 'fileName', 'fileType'),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol(\n    'Download',\n    'download',\n    'fa-solid fa-download',\n    undefined,\n    undefined,\n    150\n  ),\n  AbsGrid.setCustomButtonCol(\n    'Delete',\n    'delete',\n    'fa-solid fa-trash',\n    undefined,\n    undefined,\n    125\n  ),\n]"
            },
            {
                "name": "CERTIFIED_ACTION_CARDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/user-action-cards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Continuous Certification Requirements',\n    description:\n      'This is the mailing address that we currently have on record for you. You receive any paper communications from us this way.',\n    action: {\n      type: 'component',\n      action: '/continuous-certification',\n    },\n    actionDisplay: 'See Requirements',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: 'Register for an Exam or Assessment',\n    description:\n      'This is basic information like your first and last name, title, etc.',\n    action: {\n      type: 'component',\n      action: '/exam-process',\n    },\n    actionDisplay: 'Register For an Exam Now',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    title: 'Apply for an Exam',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: 'Apply Now',\n    icon: 'fa-solid fa-list-check',\n  },\n]"
            },
            {
                "name": "CERTIFIED_NAV_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/side-navigation/nav-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    display: 'Dashboard',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n  },\n  {\n    display: 'Personal Profile',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n  },\n  {\n    display: 'Medical Training',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n  },\n  {\n    display: 'Professional Standing',\n    action: 'professional-standing',\n    icon: 'fa-solid fa-stethoscope',\n  },\n  {\n    display: 'CME Repository',\n    action: 'cme-repository',\n    icon: 'fa-regular fa-folder-open',\n  },\n  {\n    display: 'Exam Process',\n    action: 'exam-process',\n    icon: 'fa-solid fa-list-check',\n    children: [\n      {\n        display: 'Registration Requirements',\n        action: 'registration-requirements',\n      },\n      {\n        display: 'Exam Registration',\n        action: 'exam-registration',\n      },\n    ],\n  },\n  {\n    display: 'Examination History',\n    action: 'examination-history',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    display: 'Continuous Certification',\n    action: 'continuous-certification',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    display: 'Payment History',\n    action: 'payment-history',\n    icon: 'fa-regular fa-credit-card',\n  },\n  {\n    display: 'Documents',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n  },\n  {\n    display: 'Committees',\n    action: 'committees',\n    icon: 'fa-solid fa-users',\n  },\n]"
            },
            {
                "name": "CONFLICT_RESOLUTION_GRID_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
            },
            {
                "name": "CONTCERT_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IContinuousCertication>(\n  'continuous_certification'\n)"
            },
            {
                "name": "DOCUMENTS_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/documents/documents-col.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Document Type', 'documentType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadedDateUtc', true),\n  AbsGrid.setTextDisplayCol('Uploaded By', 'uploadedBy', true),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa-solid fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
            },
            {
                "name": "DOCUMENTS_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/documents/documents.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IDocuments>('documents')"
            },
            {
                "name": "EXAM_HISTORY_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examination-history/exam-history-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setCellCustomClass('Exam Name', 'examTitle', 'font-bold'),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setTextDisplayCol('Status', 'status'),\n  AbsGrid.setCellCustomClass('Results', 'result'),\n  AbsGrid.setExpandToggle('Expand', 'expanded'),\n]"
            },
            {
                "name": "FELLOWSHIP_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/medical-training/fellowship-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol('Other', 'programOther', true),\n  AbsGrid.setTextDisplayCol('Completion Year', 'completionYear', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash-can'),\n]"
            },
            {
                "name": "GME_SUMMARY_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gme-history/gme-summary-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setFormattedDateCol('From', 'minStartDate'),\n  AbsGrid.setFormattedDateCol('To', 'maxStartDate'),\n  AbsGrid.setTextDisplayCol('Program', 'programName'),\n  AbsGrid.setTextDisplayCol('Clinical', 'clinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Non-Clinical', 'nonClinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Essentials', 'essentialsWeeks'),\n]"
            },
            {
                "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IGQAdditionalTraining>('gqAdditionalTraining')"
            },
            {
                "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n]"
            },
            {
                "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation')"
            },
            {
                "name": "HOSPOITAL_APPOINTMENTS_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appt Type', 'apptType'),\n  AbsGrid.setTextDisplayCol('Orginiztion Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('City', 'city'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Auth Official', 'authOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n]"
            },
            {
                "name": "ITEMIZED_CME_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cme-repository/itemized-cme-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Credits', 'credits', true),\n  AbsGrid.setTextDisplayCol('CME Direct', 'cmeDirect'),\n]"
            },
            {
                "name": "ITEMIZED_GME_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gme-history/itemized-gme-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'startDate'),\n  AbsGrid.setFormattedDateCol('To', 'endDate'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'alternateInstitutionName'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'nonSurgicalActivity'\n  ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LICENSES_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/professional-standing/licenses-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Number', 'number'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expire Date', 'expireDate'),\n  AbsGrid.setTextDisplayCol('Reporting Org.', 'reportingOrg'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\n  validation: false,\n}"
            },
            {
                "name": "MEDICAL_LICENSE_GRID_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('License State', 'licenseState'),\n  AbsGrid.setTextDisplayCol('License #', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('License Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'expirationDate'),\n  AbsGrid.setTextDisplayCol('Verifying Organization', 'varifyingOrganization'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
            },
            {
                "name": "MEDICAL_TRAINING_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/gridDefinitions/medical-training-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Type of Training', 'trainingType', true),\n  AbsGrid.setTextDisplayCol('State', 'state', true),\n  AbsGrid.setTextDisplayCol('City', 'city', true),\n  AbsGrid.setTextDisplayCol('Institution', 'institutionName', true),\n  AbsGrid.setTextDisplayCol('Other', 'other', true),\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
            },
            {
                "name": "MEDICALSTATE_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/medical-training/medical-training.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IMedicalTraining>(\n  'medical_training'\n)"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "OutcomeRegistriesFormFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'Surgeeon Specific Registry (case log)',\n    subLabel: '(ACS; with 30-day complications reporting)',\n    value: '',\n    required: false,\n    name: 'surgeonSpecificRegistry',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Abdominal Core Health Quality Collaborative',\n    subLabel: '(ACHQC)',\n    value: '',\n    required: false,\n    name: 'registeredWithACHQC',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Collaborative Endocrine Surgery Quality Improvement Program',\n    subLabel: '(CESQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithCESQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label:\n      'Metabolic and Bariatric Surgery Accreditation and Quality Improvement Program',\n    subLabel: '(MBSAQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithMBSAQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Burn Repository',\n    subLabel: '(ABA)',\n    value: '',\n    required: false,\n    name: 'registeredWithABA',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Mastery of Breast Surgery',\n    subLabel: '(ASBS)',\n    value: '',\n    required: false,\n    name: 'registeredWithASBS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Statewide Collaboratives',\n    subLabel: '(MSQC, SCOAP, etc.)',\n    value: '',\n    required: false,\n    name: 'registeredWithStatewideCollaboratives',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Multi-specialty Portfolio Program',\n    subLabel: '(ABMS)',\n    value: '',\n    required: false,\n    name: 'registeredWithABMS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Cancer Data Base',\n    subLabel: '(NCDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'CoC Rapid Quality Reporting System',\n    subLabel: '(RQRS)',\n    value: '',\n    required: false,\n    name: 'registeredWithRQRS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Surgical Quality Improvement Program',\n    subLabel: '(ACS NSQIP or VASQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithNSQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'National Trauma Data Bank',\n    subLabel: '(NTDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNTDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Society of Thoracic Surgeons National Database',\n    subLabel: '(STS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSTS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Trauma Quality Improvement Program',\n    subLabel: '(ACS TQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithTQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Organ Procurement and Transplantation Network',\n    subLabel: '(UNOS)',\n    value: '',\n    required: false,\n    name: 'registeredWithUNOS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Peripheral Vascular Intervention Registry',\n    subLabel: '(NCDR)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDR',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Vascular Quality Initiative',\n    subLabel: '(SVS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSVS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Extracorporeal Life Support Organization Registry',\n    subLabel: '(ELSO)',\n    value: '',\n    required: false,\n    name: 'registeredWithELSO',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Describe',\n    subLabel:\n      'NOTE: if you responded “No” to all of the choices above, you MUST describe your Part 4 activity in the space provided below.',\n    value: '',\n    required: false,\n    name: 'registryComments',\n    type: 'textarea',\n    size: 'col-12',\n  },\n]"
            },
            {
                "name": "PAY_FEE_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Payment Date', 'paymentDate'),\n  AbsGrid.setTextDisplayCol('Payment Amount', 'paymentAmount'),\n  AbsGrid.setTextDisplayCol('Payment Method', 'balanceRemaining'),\n  AbsGrid.setCustomButtonCol(\n    'Download Receipt',\n    'download',\n    'fa-solid fa-download'\n  ),\n]"
            },
            {
                "name": "PAYMENT_HISTORY_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/payment-history/payment-histroy-grid.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setCellCustomStyle('Invoice #', 'invoiceNumber', {\n    color: '#1C827D',\n    fontWeight: 'bold',\n  }),\n  AbsGrid.setTextDisplayCol('Fee Code', 'feeCode'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Total Billed', 'totalBilled'),\n  AbsGrid.setTextDisplayCol('Paid', 'paid'),\n  AbsGrid.setCellCustomStyle('Balance', 'balance', {\n    color: '#1F3758',\n    fontWeight: 'bold',\n  }),\n]"
            },
            {
                "name": "PICKLISTS_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/picklists/picklists.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IPicklist>('picklists')"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "REFERENCE_FORMS_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Reference Form', 'referenceFormId'),\n  AbsGrid.setTextDisplayCol('Affiliated Institution', 'affiliatedInstitution'),\n  AbsGrid.setTextDisplayCol(\n    'Authenticating Official',\n    'authenticatingOfficial'\n  ),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setCellCustomClass('Status', 'status'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa-regular fa-eye'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
            },
            {
                "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Category 1', 'category1'),\n  AbsGrid.setTextDisplayCol('SA Credits', 'saCredits'),\n  AbsGrid.setTextDisplayCol('Issued By', 'issuedBy'),\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SPECIAL_ACCOMMODATIONS_COLS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
            },
            {
                "name": "surgeonPortalState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/surgeon-portal.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AuthState,\n  MyAccountState,\n  UserProfileState,\n  PicklistsState,\n  DashboardState,\n  ContinuousCertificationState,\n  GQAdditionalTrainingState,\n  MedicalTrainingState,\n  GraduateMedicalEducationState,\n  DocumentsState,\n]"
            },
            {
                "name": "TRAINEE_ACTION_CARDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/user-action-cards.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Apply for a Qualified Exam',\n    description:\n      'QE applications are not yet available. Check back on April 15th.',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: 'Coming Soon',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: 'Graduate Medical Education (GME)',\n    description:\n      'Add rotations to your GME history. Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    action: {\n      type: 'component',\n      action: '/gme-history',\n    },\n    actionDisplay: 'View Your GME',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n]"
            },
            {
                "name": "TRAINEE_NAV_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/side-navigation/nav-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    display: 'Dashboard',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n  },\n  {\n    display: 'Personal Profile',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n  },\n  {\n    display: 'Medical Training',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n  },\n  {\n    display: 'GME',\n    action: 'gme-history',\n    icon: 'fa-regular fa-folder-open',\n  },\n  {\n    display: 'Documents',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n  },\n]"
            },
            {
                "name": "USER_ACCOUNT_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/dashboard/dashboard.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IDashboardState>('dashboard')"
            },
            {
                "name": "USER_ACCOUNT_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IUserCredential>('userAccount')"
            },
            {
                "name": "USER_PROFILE_STATE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/user-profile/user-profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new StateToken<IUserProfile>(\n  'userProfile'\n)"
            }
        ],
        "functions": [
            {
                "name": "gte",
                "file": "src/app/shared/validators/validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MakeProvider",
                "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MakeProvider",
                "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MakeProvider",
                "file": "src/app/shared/components/base-input/input-select.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "matchFields",
                "file": "src/app/shared/validators/validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "field1",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "field2",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "field1",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "field2",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "validatePassword",
                "file": "src/app/shared/validators/validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "validateStartAndEndDates",
                "file": "src/app/shared/validators/validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "endDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [
            {
                "name": "AbsFilterType",
                "childs": [
                    {
                        "name": "Text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    },
                    {
                        "name": "Dropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dropdown"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/grid/abs-grid.enum.ts"
            },
            {
                "name": "AbsGridCellRendererType",
                "childs": [
                    {
                        "name": "Button",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "button"
                    },
                    {
                        "name": "YesNo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "yesNo"
                    },
                    {
                        "name": "DateFormatter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dateFormatter"
                    },
                    {
                        "name": "CustomClass",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "customClass"
                    },
                    {
                        "name": "CustomStyle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "customStyle"
                    },
                    {
                        "name": "ExpandToggle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expandToggle"
                    },
                    {
                        "name": "FileLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "fileLink"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/grid/abs-grid.enum.ts"
            },
            {
                "name": "Action",
                "childs": [
                    {
                        "name": "dialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dialog"
                    },
                    {
                        "name": "component",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "component"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/action-card/action.enum.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "Completed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "completed"
                    },
                    {
                        "name": "InProgress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "in-progress"
                    },
                    {
                        "name": "Contingent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "contingent"
                    },
                    {
                        "name": "Alert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alert"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/action-card/status.enum.ts"
            },
            {
                "name": "UserClaims",
                "childs": [
                    {
                        "name": "user",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "User"
                    },
                    {
                        "name": "trainee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Trainee"
                    },
                    {
                        "name": "surgeon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Surgeon"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/side-navigation/user-status.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/shared/components/grid/abs-grid.ts": [
                {
                    "name": "AbsGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/grid/abs-grid.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  setTextDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setYesNoDisplayCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      cellRenderer: 'yesNo',\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setCustomButtonCol(\n    headerName: string,\n    fieldName: string,\n    icon?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      icon: icon,\n      cellRenderer: 'button',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFileLinkCol(\n    headerName: string,\n    fieldName: string,\n    fileType?: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      fileType: fileType,\n      cellRenderer: 'fileLink',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setExpandToggle(\n    headerName: string,\n    fieldName: string,\n    onClick?: (data: any) => void,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName: headerName,\n      field: fieldName,\n      cellRenderer: 'expandToggle',\n      cellRendererParams: {\n        fieldKey: fieldName,\n        onClick,\n      },\n      sortable,\n      width,\n    };\n\n    return colDef;\n  },\n\n  setFormattedDateCol(\n    headerName: string,\n    fieldName: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'dateFormatter',\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomClass(\n    headerName: string,\n    fieldName: string,\n    className?: string,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'customClass',\n      cellClass: (fieldName: string) => {\n        return className ?? fieldName;\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n\n  setCellCustomStyle(\n    headerName: string,\n    fieldName: string,\n    style?: object,\n    sortable?: boolean,\n    width?: number\n  ) {\n    const colDef = {\n      headerName,\n      field: fieldName,\n      cellRenderer: 'customStyle',\n      style: () => {\n        return style ?? {};\n      },\n      sortable,\n      width,\n    };\n    return colDef;\n  },\n}"
                }
            ],
            "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts": [
                {
                    "name": "ACGME_EXPERIENCE_GRID_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
                }
            ],
            "src/app/gme-history/add-record-modal/add-record-form-fields.ts": [
                {
                    "name": "ADD_EDIT_RECORD_FIELDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'Start Date',\n    subLabel: '',\n    value: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'startDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'End Date',\n    subLabel: '',\n    required: true,\n    minDate: null,\n    maxDate: null,\n    name: 'endDate',\n    placeholder: 'MM/DD/YYYY',\n    type: 'date',\n    size: 'col-4',\n    validators: {\n      minDate: null,\n      maxDate: null,\n    },\n  },\n  {\n    label: 'Week(s)',\n    required: false,\n    name: 'weeks',\n    placeholder: '',\n    readonly: true,\n    type: 'text',\n    size: 'col-4',\n  },\n  {\n    label: 'Program Name',\n    subLabel: '',\n    required: true,\n    name: 'programName',\n    placeholder: 'Select a program...',\n    type: 'autocomplete',\n    size: 'col-6',\n    options: [],\n    filteredOptions: [],\n  },\n  {\n    label: 'Affiliated Organization',\n    subLabel: '',\n    required: false,\n    name: 'alternateInstitutionName',\n    placeholder: 'Enter affiliated organization...',\n    helpText:\n      'This is only required if you could not find your program in the available list',\n    type: 'text',\n    size: 'col-6',\n  },\n  {\n    label: 'Clinical Level',\n    subLabel: '',\n    required: true,\n    name: 'clinicalLevelId',\n    placeholder: 'Select clinical level...',\n    type: 'select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Clinical Activity',\n    subLabel: '',\n    required: true,\n    name: 'clinicalActivityId',\n    placeholder: 'Select clinical activity...',\n    type: 'grouped-select',\n    size: 'col-6',\n    options: [],\n  },\n  {\n    label: 'Explain',\n    subLabel: '',\n    required: false,\n    name: 'other',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'Description (Non-Surgical Only)',\n    subLabel: '',\n    required: false,\n    name: 'nonSurgicalActivity',\n    placeholder: 'Type your answer...',\n    type: 'textarea',\n    size: 'col-6',\n  },\n  {\n    label: 'International Rotation',\n    subLabel: '',\n    value: '',\n    required: true,\n    name: 'isInternationalRotation',\n    placeholder: 'Make a selection...',\n    helpText:\n      'If you selected yes please upload the ABS Approval letter under the training section',\n    type: 'radio-group',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n]"
                }
            ],
            "src/app/professional-standing/appointments-privileges-cols.ts": [
                {
                    "name": "APPOINTMENTS_PRIVILEGES_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/professional-standing/appointments-privileges-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appointment Type', 'appointmentType'),\n  AbsGrid.setTextDisplayCol('Organization Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Official', 'official'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
                }
            ],
            "src/app/state/auth/auth.state.ts": [
                {
                    "name": "AUTH_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/auth/auth.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IAuthState>('auth')"
                }
            ],
            "src/app/shared/gridDefinitions/basic-document-cols.ts": [
                {
                    "name": "BASIC_DOCUMENT_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/gridDefinitions/basic-document-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFileLinkCol('File Name', 'fileName', 'fileType'),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setCustomButtonCol(\n    'Download',\n    'download',\n    'fa-solid fa-download',\n    undefined,\n    undefined,\n    150\n  ),\n  AbsGrid.setCustomButtonCol(\n    'Delete',\n    'delete',\n    'fa-solid fa-trash',\n    undefined,\n    undefined,\n    125\n  ),\n]"
                }
            ],
            "src/app/dashboard/user-action-cards.ts": [
                {
                    "name": "CERTIFIED_ACTION_CARDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/user-action-cards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Continuous Certification Requirements',\n    description:\n      'This is the mailing address that we currently have on record for you. You receive any paper communications from us this way.',\n    action: {\n      type: 'component',\n      action: '/continuous-certification',\n    },\n    actionDisplay: 'See Requirements',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: 'Register for an Exam or Assessment',\n    description:\n      'This is basic information like your first and last name, title, etc.',\n    action: {\n      type: 'component',\n      action: '/exam-process',\n    },\n    actionDisplay: 'Register For an Exam Now',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    title: 'Apply for an Exam',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed neque nec dolor lacinia interdum.',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: 'Apply Now',\n    icon: 'fa-solid fa-list-check',\n  },\n]"
                },
                {
                    "name": "TRAINEE_ACTION_CARDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/user-action-cards.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Apply for a Qualified Exam',\n    description:\n      'QE applications are not yet available. Check back on April 15th.',\n    action: {\n      type: 'component',\n      action: '/exam-process/exam-registration',\n    },\n    actionDisplay: 'Coming Soon',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    title: 'Graduate Medical Education (GME)',\n    description:\n      'Add rotations to your GME history. Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    action: {\n      type: 'component',\n      action: '/gme-history',\n    },\n    actionDisplay: 'View Your GME',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n]"
                }
            ],
            "src/app/side-navigation/nav-items.ts": [
                {
                    "name": "CERTIFIED_NAV_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/side-navigation/nav-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    display: 'Dashboard',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n  },\n  {\n    display: 'Personal Profile',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n  },\n  {\n    display: 'Medical Training',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n  },\n  {\n    display: 'Professional Standing',\n    action: 'professional-standing',\n    icon: 'fa-solid fa-stethoscope',\n  },\n  {\n    display: 'CME Repository',\n    action: 'cme-repository',\n    icon: 'fa-regular fa-folder-open',\n  },\n  {\n    display: 'Exam Process',\n    action: 'exam-process',\n    icon: 'fa-solid fa-list-check',\n    children: [\n      {\n        display: 'Registration Requirements',\n        action: 'registration-requirements',\n      },\n      {\n        display: 'Exam Registration',\n        action: 'exam-registration',\n      },\n    ],\n  },\n  {\n    display: 'Examination History',\n    action: 'examination-history',\n    icon: 'fa-sharp fa-solid fa-file-waveform',\n  },\n  {\n    display: 'Continuous Certification',\n    action: 'continuous-certification',\n    icon: 'fa-solid fa-user-graduate',\n  },\n  {\n    display: 'Payment History',\n    action: 'payment-history',\n    icon: 'fa-regular fa-credit-card',\n  },\n  {\n    display: 'Documents',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n  },\n  {\n    display: 'Committees',\n    action: 'committees',\n    icon: 'fa-solid fa-users',\n  },\n]"
                },
                {
                    "name": "TRAINEE_NAV_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/side-navigation/nav-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    display: 'Dashboard',\n    action: 'dashboard',\n    icon: 'fa-solid fa-chart-line',\n  },\n  {\n    display: 'Personal Profile',\n    action: 'personal-profile',\n    icon: 'fa-solid fa-circle-info',\n  },\n  {\n    display: 'Medical Training',\n    action: 'medical-training',\n    icon: 'fa-solid fa-graduation-cap',\n  },\n  {\n    display: 'GME',\n    action: 'gme-history',\n    icon: 'fa-regular fa-folder-open',\n  },\n  {\n    display: 'Documents',\n    action: 'documents',\n    icon: 'fa-solid fa-file-lines',\n  },\n]"
                }
            ],
            "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts": [
                {
                    "name": "CONFLICT_RESOLUTION_GRID_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
                }
            ],
            "src/app/state/continuous-certification/continuous-certification.state.ts": [
                {
                    "name": "CONTCERT_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/continuous-certification/continuous-certification.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IContinuousCertication>(\n  'continuous_certification'\n)"
                }
            ],
            "src/app/documents/documents-col.ts": [
                {
                    "name": "DOCUMENTS_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/documents/documents-col.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setCellCustomStyle(\n    'Document Name',\n    'documentName',\n    {\n      color: '#1C827D',\n      fontWeight: 'bold',\n    },\n    true\n  ),\n  AbsGrid.setTextDisplayCol('Document Type', 'documentType', true),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadedDateUtc', true),\n  AbsGrid.setTextDisplayCol('Uploaded By', 'uploadedBy', true),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa-solid fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
                }
            ],
            "src/app/state/documents/documents.state.ts": [
                {
                    "name": "DOCUMENTS_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/documents/documents.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IDocuments>('documents')"
                }
            ],
            "src/app/examination-history/exam-history-cols.ts": [
                {
                    "name": "EXAM_HISTORY_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examination-history/exam-history-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setCellCustomClass('Exam Name', 'examTitle', 'font-bold'),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setTextDisplayCol('Status', 'status'),\n  AbsGrid.setCellCustomClass('Results', 'result'),\n  AbsGrid.setExpandToggle('Expand', 'expanded'),\n]"
                }
            ],
            "src/app/medical-training/fellowship-cols.ts": [
                {
                    "name": "FELLOWSHIP_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/medical-training/fellowship-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Program Name', 'programName', true),\n  AbsGrid.setTextDisplayCol('Other', 'programOther', true),\n  AbsGrid.setTextDisplayCol('Completion Year', 'completionYear', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash-can'),\n]"
                }
            ],
            "src/app/gme-history/gme-summary-cols.ts": [
                {
                    "name": "GME_SUMMARY_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gme-history/gme-summary-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setFormattedDateCol('From', 'minStartDate'),\n  AbsGrid.setFormattedDateCol('To', 'maxStartDate'),\n  AbsGrid.setTextDisplayCol('Program', 'programName'),\n  AbsGrid.setTextDisplayCol('Clinical', 'clinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Non-Clinical', 'nonClinicalWeeks'),\n  AbsGrid.setTextDisplayCol('Essentials', 'essentialsWeeks'),\n]"
                }
            ],
            "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts": [
                {
                    "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IGQAdditionalTraining>('gqAdditionalTraining')"
                }
            ],
            "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts": [
                {
                    "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'from'),\n  AbsGrid.setFormattedDateCol('To', 'to'),\n  AbsGrid.setTextDisplayCol('Weeks', 'weeks'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'affiliatedInstitute'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Explain', 'explain'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'descriptionNonSurgicalOnly'\n  ),\n  AbsGrid.setTextDisplayCol('International Rotation', 'internationalRotation'),\n]"
                }
            ],
            "src/app/state/graduatemedicaleducation/gme.state.ts": [
                {
                    "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/graduatemedicaleducation/gme.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IGraduateMedicalEducation>('graduateMedicalEducation')"
                }
            ],
            "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts": [
                {
                    "name": "HOSPOITAL_APPOINTMENTS_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Practice Type', 'practiceType'),\n  AbsGrid.setTextDisplayCol('Appt Type', 'apptType'),\n  AbsGrid.setTextDisplayCol('Orginiztion Type', 'organizationType'),\n  AbsGrid.setTextDisplayCol('City', 'city'),\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Institution', 'institution'),\n  AbsGrid.setTextDisplayCol('Other', 'other'),\n  AbsGrid.setTextDisplayCol('Auth Official', 'authOfficial'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n]"
                }
            ],
            "src/app/cme-repository/itemized-cme-cols.ts": [
                {
                    "name": "ITEMIZED_CME_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cme-repository/itemized-cme-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date', 'date', true),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Credits', 'credits', true),\n  AbsGrid.setTextDisplayCol('CME Direct', 'cmeDirect'),\n]"
                }
            ],
            "src/app/gme-history/itemized-gme-cols.ts": [
                {
                    "name": "ITEMIZED_GME_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gme-history/itemized-gme-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('From', 'startDate'),\n  AbsGrid.setFormattedDateCol('To', 'endDate'),\n  AbsGrid.setTextDisplayCol('Program Name', 'programName'),\n  AbsGrid.setTextDisplayCol('Affiliated Institute', 'alternateInstitutionName'),\n  AbsGrid.setTextDisplayCol('Clinical Level', 'clinicalLevel'),\n  AbsGrid.setTextDisplayCol('Clinical Activity', 'clinicalActivity'),\n  AbsGrid.setTextDisplayCol(\n    'Description (Non-Surgical Only)',\n    'nonSurgicalActivity'\n  ),\n  AbsGrid.setYesNoDisplayCol('Intl. Rotation', 'isInternationalRotation'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa fa-edit'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/app/professional-standing/licenses-cols.ts": [
                {
                    "name": "LICENSES_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/professional-standing/licenses-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('State', 'state'),\n  AbsGrid.setTextDisplayCol('Number', 'number'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expire Date', 'expireDate'),\n  AbsGrid.setTextDisplayCol('Reporting Org.', 'reportingOrg'),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "src/main.ts": [
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\n  validation: false,\n}"
                }
            ],
            "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts": [
                {
                    "name": "MEDICAL_LICENSE_GRID_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('License State', 'licenseState'),\n  AbsGrid.setTextDisplayCol('License #', 'licenseNumber'),\n  AbsGrid.setTextDisplayCol('License Type', 'licenseType'),\n  AbsGrid.setFormattedDateCol('Issue Date', 'issueDate'),\n  AbsGrid.setFormattedDateCol('Expiration Date', 'expirationDate'),\n  AbsGrid.setTextDisplayCol('Verifying Organization', 'varifyingOrganization'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa fa-eye'),\n]"
                }
            ],
            "src/app/shared/gridDefinitions/medical-training-cols.ts": [
                {
                    "name": "MEDICAL_TRAINING_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/gridDefinitions/medical-training-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Type of Training', 'trainingType', true),\n  AbsGrid.setTextDisplayCol('State', 'state', true),\n  AbsGrid.setTextDisplayCol('City', 'city', true),\n  AbsGrid.setTextDisplayCol('Institution', 'institutionName', true),\n  AbsGrid.setTextDisplayCol('Other', 'other', true),\n  AbsGrid.setFormattedDateCol('From', 'startDate', true),\n  AbsGrid.setFormattedDateCol('To', 'endDate', true),\n  AbsGrid.setCustomButtonCol('Edit', 'edit', 'fa-solid fa-pen-to-square'),\n]"
                }
            ],
            "src/app/state/medical-training/medical-training.state.ts": [
                {
                    "name": "MEDICALSTATE_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/medical-training/medical-training.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IMedicalTraining>(\n  'medical_training'\n)"
                }
            ],
            "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts": [
                {
                    "name": "OutcomeRegistriesFormFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'Surgeeon Specific Registry (case log)',\n    subLabel: '(ACS; with 30-day complications reporting)',\n    value: '',\n    required: false,\n    name: 'surgeonSpecificRegistry',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Abdominal Core Health Quality Collaborative',\n    subLabel: '(ACHQC)',\n    value: '',\n    required: false,\n    name: 'registeredWithACHQC',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Collaborative Endocrine Surgery Quality Improvement Program',\n    subLabel: '(CESQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithCESQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label:\n      'Metabolic and Bariatric Surgery Accreditation and Quality Improvement Program',\n    subLabel: '(MBSAQIP)',\n    value: '',\n    required: false,\n    name: 'registeredWithMBSAQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Burn Repository',\n    subLabel: '(ABA)',\n    value: '',\n    required: false,\n    name: 'registeredWithABA',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Mastery of Breast Surgery',\n    subLabel: '(ASBS)',\n    value: '',\n    required: false,\n    name: 'registeredWithASBS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Statewide Collaboratives',\n    subLabel: '(MSQC, SCOAP, etc.)',\n    value: '',\n    required: false,\n    name: 'registeredWithStatewideCollaboratives',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Multi-specialty Portfolio Program',\n    subLabel: '(ABMS)',\n    value: '',\n    required: false,\n    name: 'registeredWithABMS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Cancer Data Base',\n    subLabel: '(NCDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'CoC Rapid Quality Reporting System',\n    subLabel: '(RQRS)',\n    value: '',\n    required: false,\n    name: 'registeredWithRQRS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'National Surgical Quality Improvement Program',\n    subLabel: '(ACS NSQIP or VASQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithNSQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'National Trauma Data Bank',\n    subLabel: '(NTDB)',\n    value: '',\n    required: false,\n    name: 'registeredWithNTDB',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Society of Thoracic Surgeons National Database',\n    subLabel: '(STS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSTS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Trauma Quality Improvement Program',\n    subLabel: '(ACS TQIP; adult or pediatric)',\n    value: '',\n    required: false,\n    name: 'registeredWithTQIP',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Organ Procurement and Transplantation Network',\n    subLabel: '(UNOS)',\n    value: '',\n    required: false,\n    name: 'registeredWithUNOS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Peripheral Vascular Intervention Registry',\n    subLabel: '(NCDR)',\n    value: '',\n    required: false,\n    name: 'registeredWithNCDR',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n\n  {\n    label: 'Vascular Quality Initiative',\n    subLabel: '(SVS)',\n    value: '',\n    required: false,\n    name: 'registeredWithSVS',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Extracorporeal Life Support Organization Registry',\n    subLabel: '(ELSO)',\n    value: '',\n    required: false,\n    name: 'registeredWithELSO',\n    type: 'radio',\n    size: 'col-6',\n    options: [\n      {\n        label: 'Yes',\n        value: true,\n      },\n      {\n        label: 'No',\n        value: false,\n      },\n    ],\n  },\n  {\n    label: 'Describe',\n    subLabel:\n      'NOTE: if you responded “No” to all of the choices above, you MUST describe your Part 4 activity in the space provided below.',\n    value: '',\n    required: false,\n    name: 'registryComments',\n    type: 'textarea',\n    size: 'col-12',\n  },\n]"
                }
            ],
            "src/app/shared/components/pay-fee/pay-fee-cols.ts": [
                {
                    "name": "PAY_FEE_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Payment Date', 'paymentDate'),\n  AbsGrid.setTextDisplayCol('Payment Amount', 'paymentAmount'),\n  AbsGrid.setTextDisplayCol('Payment Method', 'balanceRemaining'),\n  AbsGrid.setCustomButtonCol(\n    'Download Receipt',\n    'download',\n    'fa-solid fa-download'\n  ),\n]"
                }
            ],
            "src/app/payment-history/payment-histroy-grid.ts": [
                {
                    "name": "PAYMENT_HISTORY_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/payment-history/payment-histroy-grid.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setCellCustomStyle('Invoice #', 'invoiceNumber', {\n    color: '#1C827D',\n    fontWeight: 'bold',\n  }),\n  AbsGrid.setTextDisplayCol('Fee Code', 'feeCode'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Total Billed', 'totalBilled'),\n  AbsGrid.setTextDisplayCol('Paid', 'paid'),\n  AbsGrid.setCellCustomStyle('Balance', 'balance', {\n    color: '#1F3758',\n    fontWeight: 'bold',\n  }),\n]"
                }
            ],
            "src/app/state/picklists/picklists.state.ts": [
                {
                    "name": "PICKLISTS_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/picklists/picklists.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IPicklist>('picklists')"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts": [
                {
                    "name": "REFERENCE_FORMS_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setTextDisplayCol('Reference Form', 'referenceFormId'),\n  AbsGrid.setTextDisplayCol('Affiliated Institution', 'affiliatedInstitution'),\n  AbsGrid.setTextDisplayCol(\n    'Authenticating Official',\n    'authenticatingOfficial'\n  ),\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setCellCustomClass('Status', 'status'),\n  AbsGrid.setCustomButtonCol('View', 'view', 'fa-regular fa-eye'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa-solid fa-trash'),\n]"
                }
            ],
            "src/app/cme-repository/requirments-and-adjustments-cols.ts": [
                {
                    "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setFormattedDateCol('Date', 'date'),\n  AbsGrid.setTextDisplayCol('Description', 'description'),\n  AbsGrid.setTextDisplayCol('Category 1', 'category1'),\n  AbsGrid.setTextDisplayCol('SA Credits', 'saCredits'),\n  AbsGrid.setTextDisplayCol('Issued By', 'issuedBy'),\n]"
                }
            ],
            "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts": [
                {
                    "name": "SPECIAL_ACCOMMODATIONS_COLS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AbsGrid.setCellCustomStyle('File Name', 'fileName', {\n    color: '#1C827D',\n  }),\n  AbsGrid.setFormattedDateCol('Upload Date', 'uploadDate'),\n  AbsGrid.setTextDisplayCol('Type', 'type'),\n  AbsGrid.setCustomButtonCol('Download', 'download', 'fa fa-download'),\n  AbsGrid.setCustomButtonCol('Delete', 'delete', 'fa fa-trash'),\n]"
                }
            ],
            "src/app/state/surgeon-portal.state.ts": [
                {
                    "name": "surgeonPortalState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/surgeon-portal.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AuthState,\n  MyAccountState,\n  UserProfileState,\n  PicklistsState,\n  DashboardState,\n  ContinuousCertificationState,\n  GQAdditionalTrainingState,\n  MedicalTrainingState,\n  GraduateMedicalEducationState,\n  DocumentsState,\n]"
                }
            ],
            "src/app/state/dashboard/dashboard.state.ts": [
                {
                    "name": "USER_ACCOUNT_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/dashboard/dashboard.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IDashboardState>('dashboard')"
                }
            ],
            "src/app/state/my-account/my-account.state.ts": [
                {
                    "name": "USER_ACCOUNT_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IUserCredential>('userAccount')"
                }
            ],
            "src/app/state/user-profile/user-profile.state.ts": [
                {
                    "name": "USER_PROFILE_STATE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/user-profile/user-profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new StateToken<IUserProfile>(\n  'userProfile'\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/validators/validators.ts": [
                {
                    "name": "gte",
                    "file": "src/app/shared/validators/validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchFields",
                    "file": "src/app/shared/validators/validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validatePassword",
                    "file": "src/app/shared/validators/validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "validateStartAndEndDates",
                    "file": "src/app/shared/validators/validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/base-input/input-checkbox.component.ts": [
                {
                    "name": "MakeProvider",
                    "file": "src/app/shared/components/base-input/input-checkbox.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/base-input/input-radio-group.component.ts": [
                {
                    "name": "MakeProvider",
                    "file": "src/app/shared/components/base-input/input-radio-group.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/base-input/input-select.component.ts": [
                {
                    "name": "MakeProvider",
                    "file": "src/app/shared/components/base-input/input-select.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/components/grid/abs-grid.enum.ts": [
                {
                    "name": "AbsFilterType",
                    "childs": [
                        {
                            "name": "Text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        },
                        {
                            "name": "Dropdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dropdown"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/grid/abs-grid.enum.ts"
                },
                {
                    "name": "AbsGridCellRendererType",
                    "childs": [
                        {
                            "name": "Button",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "button"
                        },
                        {
                            "name": "YesNo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "yesNo"
                        },
                        {
                            "name": "DateFormatter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dateFormatter"
                        },
                        {
                            "name": "CustomClass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "customClass"
                        },
                        {
                            "name": "CustomStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "customStyle"
                        },
                        {
                            "name": "ExpandToggle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expandToggle"
                        },
                        {
                            "name": "FileLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "fileLink"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/grid/abs-grid.enum.ts"
                }
            ],
            "src/app/shared/components/action-card/action.enum.ts": [
                {
                    "name": "Action",
                    "childs": [
                        {
                            "name": "dialog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dialog"
                        },
                        {
                            "name": "component",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "component"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/action-card/action.enum.ts"
                }
            ],
            "src/app/shared/components/action-card/status.enum.ts": [
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "Completed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "completed"
                        },
                        {
                            "name": "InProgress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "in-progress"
                        },
                        {
                            "name": "Contingent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "contingent"
                        },
                        {
                            "name": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alert"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/action-card/status.enum.ts"
                }
            ],
            "src/app/side-navigation/user-status.enum.ts": [
                {
                    "name": "UserClaims",
                    "childs": [
                        {
                            "name": "user",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "User"
                        },
                        {
                            "name": "trainee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Trainee"
                        },
                        {
                            "name": "surgeon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Surgeon"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/side-navigation/user-status.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/continuouscertification/outcome-registry.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOutcomeRegistryModel",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/documents/document-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDocumentReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/documents/document.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDocumentModel",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/examinations/gq/additional-training-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAdditionalTrainingReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/examinations/gq/additional-training.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAdditionalTrainingModel",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/graduatemedicaleducation/gme-summary-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGmeSummaryReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/graduatemedicaleducation/rotation-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRotationReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/graduatemedicaleducation/rotation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRotationModel",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/accredited-program-institution-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccreditedProgramInstitutionReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/advanced-training-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAdvancedTrainingReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/advanced-training.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAdvancedTrainingModel",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/fellowship-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFellowshipReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/fellowship.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFellowshipModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/medicaltraining/medical-training.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMedicalTrainingModel",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/accredited-program-institution-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccreditedProgramInstitutionReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/certificate-type-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICertificateTypeReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/clinical-activity-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClinicalActivityReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/clinical-level-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClinicalLevelReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/country-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICountryReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/degree-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDegreeReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/document-type-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDocumentTypeReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/ethnicity-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEthnicityReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/fellowship-program-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFellowshipProgramReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/gender-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGenderReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/graduate-profile-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGraduateProfileReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/language-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILanguageReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/race-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRaceReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/residency-program-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResidencyProgramReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/state-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStateReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/picklists/training-type-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITrainingTypeReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/surgeons/certification-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICertificationReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/trainees/program-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProgramReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/users/app-user-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppUserReadOnlyModel",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/users/user-credential.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserCredentialModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/users/user-login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserLoginModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/users/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserProfileModel",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/continuouscertification/outcome-registries.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OutcomeRegistriesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/documents/document.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocumentService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/examinations/gq/additional-trainings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdditionalTrainingsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/graduatemedicaleducation/gme-summary.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GmeSummaryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/graduatemedicaleducation/rotation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RotationService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/medicaltraining/advanced-training.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdvancedTrainingService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/medicaltraining/fellowship.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FellowshipService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/medicaltraining/medical-training.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicalTrainingService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/picklists/picklists.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PicklistsService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/surgeons/certifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CertificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/trainees/programs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProgramsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/users/user-credentials.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserCredentialsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/users/user-profiles.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserProfilesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/users/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersApiService",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/cme-repository/cme-repository.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CmeRepositoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/cme-repository/itemized-cme-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMIZED_CME_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cme-repository/requirments-and-adjustments-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REQIUREMENTS_AND_ADJUSTMENTS_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/committees/committees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommitteesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/attestation-modal/attestation-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AttestationModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/continuous-certification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContinuousCertificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/continuous-certification.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-form.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutcomeRegistriesFormFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/outcome-registries-modal/outcome-registries-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OutcomeRegistriesModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/reference-form-modal/reference-form-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReferenceFormModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/continuous-certification/reference-form-modal/refrence-forms-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REFERENCE_FORMS_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/user-action-cards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CERTIFIED_ACTION_CARDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/user-action-cards.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRAINEE_ACTION_CARDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/documents/documents-col.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCUMENTS_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/documents/documents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/exam-process/exam-process.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExamProcessComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/exam-registration/exam-registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExamRegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/examination-history/exam-history-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAM_HISTORY_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examination-history/examination-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExaminationHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/file-not-found/file-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/add-record-modal/add-record-form-fields.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_EDIT_RECORD_FIELDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/add-record-modal/add-record-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddRecordModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFLICT_RESOLUTION_GRID_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/conflict-resolution-modal/conflict-resolution-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConflictResolutionModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/gme-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GmeHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/gme-history.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendarFilter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/gme-history.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendarFilterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/gme-history.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendarFilterValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/gme-summary-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GME_SUMMARY_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/gme-history/itemized-gme-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMIZED_GME_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/medical-training/fellowship-add-edit-modal/fellowship-add-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FellowshipAddEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/medical-training/fellowship-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FELLOWSHIP_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/medical-training/medical-training-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicalTrainingActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/medical-training/medical-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MedicalTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/51",
                "status": "low"
            },
            {
                "filePath": "src/app/my-account/my-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/payment-history/payment-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/payment-history/payment-histroy-grid.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PAYMENT_HISTORY_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/personal-profile/personal-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonalProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/professional-standing/appointments-add-edit-modal/appointments-add-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppointmentsAddEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/professional-standing/appointments-privileges-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APPOINTMENTS_PRIVILEGES_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/professional-standing/license-add-edit-modal/license-add-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LicenseAddEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/professional-standing/licenses-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LICENSES_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/professional-standing/professional-standing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessionalStandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACGME_EXPERIENCE_GRID_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/acgme-experience-modal/acgme-experience-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AcgmeExperienceModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GRADUATE_MEDICAL_EDUCATION_GRID_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/graduate-medical-education-modal/graduate-medical-education-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraduateMedicalEducationModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/medical-license-modal/medical-license-grid-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEDICAL_LICENSE_GRID_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/medical-license-modal/medical-license-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MedicalLicenseModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/professional-activities-and-privileges-modal/hospital-appointments-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOSPOITAL_APPOINTMENTS_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/professional-activities-and-privileges-modal/professional-activities-and-privileges-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessionalActivitiesAndPrivilegesModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/registration-requirements.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationRequirementsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/registration-requirements.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SPECIAL_ACCOMMODATIONS_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/special-accommodations-modal/special-accommodations-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialAccommodationsModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/surgeon-profile-modal/surgeon-profile-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SurgeonProfileModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/training-modal/training-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrainingModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/registration-requirements/training-modal/training-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicalTrainingData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/common/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/common/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/common/interfaces/errors.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/action-card/action-card-read-only.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionCardReadOnlyModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/action-card/action-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-checkbox.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MakeProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-radio-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputRadioGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-radio-group.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MakeProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/base-input/input-select.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MakeProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/collapse-panel/collapse-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapsePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dashboard-header/dashboard-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-upload-button/file-upload-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form-errors/form-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/abs-grid-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGridActions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/abs-grid.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AbsGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/grid-options.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/grid-options.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGridOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/grid/grid.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GridAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/highlight-card/highlight-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HighlightCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pay-fee/pay-fee-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PAY_FEE_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pay-fee/pay-fee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PayFeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/profile-header/profile-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select-wrapper/select-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/success-fail-modal/success-fail-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuccessFailModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/training-add-edit-modal/training-add-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrainingAddEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/user-information-card/user-information-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserInformationCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/gridDefinitions/basic-document-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASIC_DOCUMENT_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/gridDefinitions/medical-training-cols.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEDICAL_TRAINING_COLS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form-fields/form-fields.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormFields",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/analytics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/global-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/global-toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalToastService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/validators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gte",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/validators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "matchFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/validators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "validatePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/validators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "validateStartAndEndDates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/side-navigation/nav-items.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CERTIFIED_NAV_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/side-navigation/nav-items.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRAINEE_NAV_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/side-navigation/side-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClearAuthErrors",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.guard.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanActivate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/auth/auth.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetOutcomeRegistries",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateOutcomeRegistries",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContinuousCertificationSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContinuousCertificationState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContinuousCertication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/continuous-certification/continuous-certification.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTCERT_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetDashboardCertificationInformation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetDashboardProgramInformation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DashboardSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/dashboard/dashboard.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_ACCOUNT_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/documents/documents.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAllDocuments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/documents/documents.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DocumentSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/documents/documents.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocumentsState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/documents/documents.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDocuments",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/documents/documents.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCUMENTS_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateAdditionalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAdditionalTrainingDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAdditionalTrainingList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateAdditionalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GQAdditionalTrainingSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GQAdditionalTrainingState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGQAdditionalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/examination-gq-additional-training/examination-gq-additional-training.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GQ_ADDITIONAL_TRAINING_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClearGraduateMedicalEducationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateGraduateMedicalEducation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteGraduateMedicalEducation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetGraduateMedicalEducationDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetGraduateMedicalEducationList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetGraduateMedicalEducationSummary",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateGraduateMedicalEducation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GraduateMedicalEducationSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GraduateMedicalEducationState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGraduateMedicalEducation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/graduatemedicaleducation/gme.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GRADUATE_MEDICAL_EDUCATION_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateMedicalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAdvancedTrainingData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetMedicalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateAdvancedTrainingData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMedicalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicalTrainingSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicalTrainingState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMedicalTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/medical-training/medical-training.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEDICALSTATE_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClearErrors",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveMyAccountChanges",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MyAccountSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyAccountState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserCredential",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_ACCOUNT_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAccreditedProgramInstitutionsList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetClinicalActivityList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetClinicalLevelList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCountryList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetDegrees",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetEthnicityList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetFellowshipPrograms",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetGenderList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetGraduateProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetLanguageList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPicklists",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetRaceList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetResidencyPrograms",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetStateList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetTrainingTypeList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PicklistsSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PicklistsState",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPicklist",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPickListItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPicklistUserValues",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/state/picklists/picklists.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PICKLISTS_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/surgeon-portal.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "surgeonPortalState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetUserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkUserData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateUserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.selectors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserProfileSelectors",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/state/user-profile/user-profile.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_PROFILE_STATE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/web-components/card-user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/web-components/form-elements/abs-select/abs-select-non.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbsSelectNon",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/web-components/form-elements/abs-select/abs-select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbsSelect",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/web-components/menuItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/web-components/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}